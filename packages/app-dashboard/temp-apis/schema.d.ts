/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/app': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Creates a new application. */
    post: operations['createApp'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/app/{identity}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Fetches an application. */
    get: operations['getApp'];
    /** Edits an application. */
    put: operations['editApp'];
    post?: never;
    /** Deletes an application. */
    delete: operations['deleteApp'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/app/{identity}/versions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Fetches all versions of an application. */
    get: operations['getAppVersions'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/app/version/{identity}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Fetches an application version. */
    get: operations['getAppVersion'];
    /** Edits an application version. */
    put: operations['editAppVersion'];
    /** Creates an application version. */
    post: operations['createAppVersion'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/app/version/{identity}/toggle': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Toggles enabled/disabled for an application version. */
    post: operations['disableAppVersion'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tool': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Creates a new tool. */
    post: operations['createTool'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tool/{identity}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Fetches a tool. */
    get: operations['getTool'];
    /** Edits a tool. */
    put: operations['editTool'];
    post?: never;
    /** Deletes a tool */
    delete: operations['deleteTool'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tool/{identity}/versions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Fetches all versions of a tool. */
    get: operations['getToolVersions'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tool/{identity}/owner': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Changes a tool owner. */
    put: operations['changeToolOwner'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tool/version/{identity}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Fetches a tool version. */
    get: operations['getToolVersion'];
    /** Edits an tool version. */
    put: operations['editToolVersion'];
    /** Creates a new tool version. */
    post: operations['createToolVersion'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    IAppDef: {
      /** @example Memecoin DCA App */
      name: string;
      /** @example This is a memecoin DCA App */
      description: string;
      /**
       * Format: email
       * @example andrew@litprotocol.com
       */
      contactEmail: string;
      /**
       * Format: url
       * @example https://uniswap.com
       */
      appUserUrl: string;
      /** @example Imagine this is a base64 string */
      logo: string;
      /** @example [
       *       "https://google.com",
       *       "https://litprotocol.com"
       *     ] */
      redirectUris: string[];
      /** @enum {string} */
      deploymentStatus: 'dev' | 'test' | 'prod';
      /** @example 0xa723407AdB396a55aCd843D276daEa0d787F8db5 */
      managerAddress: string;
      /**
       * @description Unique composite identifier in the format AppDef|<appId>
       * @example AppDef|5
       */
      readonly identity: string;
      /** @example 5 */
      readonly appId: number;
      /** @example 2 */
      activeVersion: number;
      /** Format: date-time */
      readonly lastUpdated: string;
    };
    ICreateAppDef: {
      /** @example Memecoin DCA App */
      name: string;
      /** @example This is a memecoin DCA App */
      description: string;
      /**
       * Format: email
       * @example andrew@litprotocol.com
       */
      contactEmail: string;
      /**
       * Format: url
       * @example https://uniswap.com
       */
      appUserUrl: string;
      logo: string;
      redirectUris: string[];
      /** @enum {string} */
      deploymentStatus: 'dev' | 'test' | 'prod';
      managerAddress: string;
      /** @example 2 */
      activeVersion?: number;
    };
    IAppVersionDef: {
      /** @example 5 */
      readonly appId: number;
      /** @example 2 */
      versionNumber: number;
      /** @example AppVersionDef|5@2 */
      readonly identity: string;
      /** @example true */
      enabled: boolean;
      /** @example I am a changelog trapped in a computer! */
      changes: string;
    };
    ICreateAppVersionDef: {
      tools: string[];
      /** @example I am a changelog trapped in a computer! */
      changes: string;
    };
    IAppToolDef: {
      /** @example 5 */
      readonly appId: number;
      /** @example 2 */
      appVersionNumber: number;
      /** @example @vincent/foo-bar */
      toolPackageName: string;
      /** @example 1.0.0 */
      toolVersion: string;
      /** @example @vincent/foo-bar@1.0.0 */
      toolIdentity: string;
      /** @example AppToolDef|AppDef|5/@vincent/foo-bar@1.0.0 */
      identity: string;
    };
    IAppVersionWithToolsDef: {
      version: components['schemas']['IAppVersionDef'];
      tools: components['schemas']['IAppToolDef'][];
    };
    IToolDef: {
      /** @example @vincent/foo-bar */
      packageName: string;
      /** @example The Greatest Foo Bar Tool */
      toolTitle?: string;
      /** @example ToolDef|@vincent/foo-bar */
      identity: string;
      /** @example 0xa723407AdB396a55aCd843D276daEa0d787F8db5 */
      authorWalletAddress: string;
      /** @example When we foo, our complex tool will also bar. */
      description: string;
      /** @example 1.0.0 */
      activeVersion: string;
    };
    ICreateToolDef: {
      /** @example @vincent/foo-bar */
      packageName: string;
      /** @example The Greatest Foo Bar Tool */
      toolTitle: string;
      /** @example When we foo, our complex tool will also bar. */
      description: string;
    };
    IEditToolDef: {
      /** @example The Greatest Foo Bar Tool */
      toolTitle: string;
      /** @example When we foo, our complex tool will also bar. */
      description: string;
    };
    IToolVersionDef: {
      /** @example @vincent/foo-bar */
      packageName: string;
      /** @example 1.0.0 */
      version: string;
      /** @example ToolVersionDef|@vincent/foo-bar@1.0.0 */
      identity: string;
      /** @example Initial release */
      changes: string;
      /** @example [
       *       "https://github.com/org/repo"
       *     ] */
      repository: string[];
      /** @example [
       *       "defi",
       *       "memecoin"
       *     ] */
      keywords: string[];
      /** @example [
       *       "@vincent/sdk"
       *     ] */
      dependencies: string[];
      author: {
        /** @example Developer Name */
        name?: string;
        /** @example dev@example.com */
        email?: string;
        /** @example https://example.com */
        url?: string;
      };
      contributors: {
        /** @example Contributor Name */
        name?: string;
        /** @example contributor@example.com */
        email?: string;
        /** @example https://contributor-site.com */
        url?: string;
      }[];
      /** @example https://example-vincent-homepage.com */
      homepage?: string;
      /**
       * @example valid
       * @enum {string}
       */
      status: 'invalid' | 'validating' | 'valid' | 'error';
      /** @example [
       *       "@vincent/foo-bar-policy-1",
       *       "@vincent/foo-bar-policy-2"
       *     ] */
      supportedPolicies: string[];
      /** @example QmdoY1VUxVvxShBQK5B6PP2jZFVw7PMTJ3qy2aiCARjMqo */
      ipfsCid: string;
    };
    ICreateToolVersionDef: {
      /** @example Extra foo on the bar! */
      changes?: string;
    };
    Error: {
      code: string;
      message: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  createApp: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Developer-defined application information */
    requestBody: {
      content: {
        'application/json': components['schemas']['ICreateAppDef'];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IAppDef'];
        };
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation exception */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getApp: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identity of the application to retrieve */
        identity: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IAppDef'];
        };
      };
      /** @description Application not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  editApp: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identity of the application to edit */
        identity: string;
      };
      cookie?: never;
    };
    /** @description Developer-defined updated application details */
    requestBody: {
      content: {
        'application/json': components['schemas']['ICreateAppDef'];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IAppDef'];
        };
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation exception */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  deleteApp: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identity of the application to delete */
        identity: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK - Resource successfully deleted */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** @example Application successfully deleted */
            message?: string;
          };
        };
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation exception */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getAppVersions: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identity of the application whose versions will be fetched */
        identity: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IAppVersionDef'][];
        };
      };
      /** @description Application not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getAppVersion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identity of the application version to retrieve */
        identity: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IAppVersionWithToolsDef'];
        };
      };
      /** @description Application not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  editAppVersion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identity of the application version to edit */
        identity: string;
      };
      cookie?: never;
    };
    /** @description Update version changes field */
    requestBody: {
      content: {
        'application/json': {
          /** @example Updated changelog information */
          changes: string;
        };
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IAppVersionDef'];
        };
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation exception */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  createAppVersion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identity of the application to create a new version for */
        identity: string;
      };
      cookie?: never;
    };
    /** @description Developer-defined version details */
    requestBody: {
      content: {
        'application/json': components['schemas']['ICreateAppVersionDef'];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IAppVersionDef'];
        };
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation exception */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  disableAppVersion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identity of the application version to toggle */
        identity: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IAppVersionDef'];
        };
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation exception */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  createTool: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Developer-defined tool details */
    requestBody: {
      content: {
        'application/json': components['schemas']['ICreateToolDef'];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IToolDef'];
        };
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation exception */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getTool: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identity of the tool to retrieve */
        identity: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IToolDef'];
        };
      };
      /** @description Tool not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  editTool: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identity of the tool to edit */
        identity: string;
      };
      cookie?: never;
    };
    /** @description Developer-defined updated tool details */
    requestBody: {
      content: {
        'application/json': components['schemas']['IEditToolDef'];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IToolDef'];
        };
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation exception */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  deleteTool: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identity of the tool to delete */
        identity: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK - Resource successfully deleted */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** @example Tool successfully deleted */
            message?: string;
          };
        };
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation exception */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getToolVersions: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identity of the tool whose versions will be fetched */
        identity: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IToolVersionDef'][];
        };
      };
      /** @description Tool not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  changeToolOwner: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identity of the tool to edit */
        identity: string;
      };
      cookie?: never;
    };
    /** @description Provide the new tool owner address */
    requestBody: {
      content: {
        'application/json': {
          /** @example 0x1582F4E36154f2EC442a2B3425d4C2520704096E */
          authorWalletAddress: string;
        };
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IToolDef'];
        };
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation exception */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getToolVersion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identity of the tool version to retrieve */
        identity: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IToolVersionDef'];
        };
      };
      /** @description Application not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  editToolVersion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identity of the tool version to edit */
        identity: string;
      };
      cookie?: never;
    };
    /** @description Update version changes field */
    requestBody: {
      content: {
        'application/json': {
          /** @example Updated changelog information */
          changes: string;
        };
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IToolVersionDef'];
        };
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation exception */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  createToolVersion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identity of the tool to create a new version for */
        identity: string;
      };
      cookie?: never;
    };
    /** @description Developer-defined tool version details */
    requestBody: {
      content: {
        'application/json': components['schemas']['ICreateToolVersionDef'];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IToolVersionDef'];
        };
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation exception */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
}
