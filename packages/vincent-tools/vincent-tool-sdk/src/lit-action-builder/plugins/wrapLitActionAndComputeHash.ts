// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck

import fs from 'fs';
import path from 'path';

import Hash from 'ipfs-only-hash';

const ensureDirectoryExistence = (filePath) => {
  const dirname = path.dirname(filePath);
  if (!fs.existsSync(dirname)) {
    fs.mkdirSync(dirname, { recursive: true });
  }
};

export const wrapLitActionAndComputeHash = {
  name: 'wrap-iife-in-string',
  setup(build) {
    // Ensure write is set to false so our plugin will receive outputFiles
    build.initialOptions.write = false;

    build.onEnd((result) => {
      if (result.errors.length > 0) {
        console.error('Build failed with errors:', result.errors);
        return;
      }

      result.outputFiles.forEach((outputFile) => {
        const content = outputFile.text;
        // Use JSON.stringify to safely encode the content
        const wrappedContent = `/**
 * DO NOT EDIT THIS FILE. IT IS GENERATED ON BUILD.
 * @type {string}
 */
const code = ${JSON.stringify(content)};
module.exports = {
  code,
  ipfsHash: ${Hash.of(content)},
};
`;

        // Ensure the output directory exists
        const outputPath = path.resolve(outputFile.path);
        ensureDirectoryExistence(outputPath);

        // Write the modified content back to the output file
        fs.writeFileSync(outputPath, wrappedContent);

        const { size: bytes } = fs.statSync(outputPath);

        const mbInBinary = (bytes / (1024 * 1024)).toFixed(4);
        const mbInDecimal = (bytes / 1_000_000).toFixed(4);

        console.log(
          `âœ… ${outputPath
            .split('/')
            .pop()}\n- ${mbInDecimal} MB (in decimal)\n- ${mbInBinary} MB (in binary)`,
        );
      });
    });
  },
};
