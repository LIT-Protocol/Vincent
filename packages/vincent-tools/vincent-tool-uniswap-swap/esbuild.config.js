const fs = require('fs');
const path = require('path');

const esbuild = require('esbuild');
const { polyfillNode } = require('esbuild-plugin-polyfill-node');

function aliasFetch() {
  const shim = path.resolve(__dirname, 'deno-fetch-shim.js');

  return {
    name: 'alias-fetch',
    setup(build) {
      // node-fetch root
      build.onResolve({ filter: /^node-fetch$/ }, () => ({ path: shim }));

      // any cross-fetch entry: "cross-fetch", "cross-fetch/…"
      build.onResolve({ filter: /^cross-fetch(\/.*)?$/ }, () => ({ path: shim }));
    },
  };
}

const ensureDirectoryExistence = (filePath) => {
  const dirname = path.dirname(filePath);
  if (!fs.existsSync(dirname)) {
    fs.mkdirSync(dirname, { recursive: true });
  }
};

const wrapIIFEInStringPlugin = {
  name: 'wrap-iife-in-string',
  setup(build) {
    // Ensure write is set to false so our plugin will always receive outputFiles
    build.initialOptions.write = false;

    build.onEnd((result) => {
      if (result.errors.length > 0) {
        console.error('Build failed with errors:', result.errors);
        return;
      }

      result.outputFiles.forEach((outputFile) => {
        const content = outputFile.text;
        // Use JSON.stringify to safely encode the content
        const wrappedContent = `/**
 * DO NOT EDIT THIS FILE. IT IS GENERATED ON BUILD. RUN \`pnpx nx run vincent-tool-uniswap-swap:build:action\` IN THE ROOT DIRECTORY TO UPDATE THIS FILE.
 * @type {string}
 */
const code = ${JSON.stringify(content)};
module.exports = {
  code,
};
`;

        // Ensure the output directory exists
        const outputPath = path.resolve(outputFile.path);
        ensureDirectoryExistence(outputPath);

        // Write the modified content back to the output file
        fs.writeFileSync(outputPath, wrappedContent);
      });
    });
  },
};

(async () => {
  try {
    const result = await esbuild.build({
      tsconfig: './tsconfig.lib.json',
      entryPoints: ['./src/lib/vincent-tool-wrapped.ts'],
      bundle: true,
      minify: false,
      sourcemap: false,
      treeShaking: true,
      metafile: true,
      outdir: './src/generated/',
      // external: ['ethers'],
      plugins: [
        aliasFetch(),
        polyfillNode({
          globals: {
            Buffer: true,
            process: true,
          },
          modules: {
            crypto: true,
            http: true,
            https: true,
            stream: true,
            zlib: true,
            url: true,
            util: true,
          },
        }),
        wrapIIFEInStringPlugin,
      ],
      platform: 'browser',
    });
    // .then((result) => {
    //   result.outputFiles.forEach((file) => {
    //     const bytes = file.text.length;
    //     const mbInBinary = (bytes / (1024 * 1024)).toFixed(4);
    //     const mbInDecimal = (bytes / 1_000_000).toFixed(4);
    //
    //     console.log(
    //       `✅ ${file.path
    //         .split('/')
    //         .pop()}\n- ${mbInDecimal} MB (in decimal)\n- ${mbInBinary} MB (in binary)`,
    //     );
    //   });
    // });
    console.log('✅ Lit actions built successfully');
  } catch (e) {
    console.error('❌ Error building lit actions: ', e);
    process.exit(1);
  }
})();
