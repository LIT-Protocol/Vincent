/**
 * DO NOT EDIT THIS FILE. IT IS GENERATED ON BUILD.
 * @type {string}
 */
const code = "\"use strict\";\n(() => {\n  var __create = Object.create;\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getProtoOf = Object.getPrototypeOf;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __esm = (fn, res) => function __init() {\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n  };\n  var __commonJS = (cb, mod2) => function __require() {\n    return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key2 of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key2) && key2 !== except)\n          __defProp(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc(from, key2)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(\n    // If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, \"default\", { value: mod2, enumerable: true }) : target,\n    mod2\n  ));\n  var __toCommonJS = (mod2) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod2);\n\n  // ../../../node_modules/.pnpm/esbuild-plugin-polyfill-node@0.3.0_esbuild@0.19.12/node_modules/esbuild-plugin-polyfill-node/polyfills/__dirname.js\n  var init_dirname = __esm({\n    \"../../../node_modules/.pnpm/esbuild-plugin-polyfill-node@0.3.0_esbuild@0.19.12/node_modules/esbuild-plugin-polyfill-node/polyfills/__dirname.js\"() {\n      \"use strict\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@jspm+core@2.1.0/node_modules/@jspm/core/nodelibs/browser/process.js\n  var process_exports = {};\n  __export(process_exports, {\n    _debugEnd: () => _debugEnd,\n    _debugProcess: () => _debugProcess,\n    _events: () => _events,\n    _eventsCount: () => _eventsCount,\n    _exiting: () => _exiting,\n    _fatalExceptions: () => _fatalExceptions,\n    _getActiveHandles: () => _getActiveHandles,\n    _getActiveRequests: () => _getActiveRequests,\n    _kill: () => _kill,\n    _linkedBinding: () => _linkedBinding,\n    _maxListeners: () => _maxListeners,\n    _preload_modules: () => _preload_modules,\n    _rawDebug: () => _rawDebug,\n    _startProfilerIdleNotifier: () => _startProfilerIdleNotifier,\n    _stopProfilerIdleNotifier: () => _stopProfilerIdleNotifier,\n    _tickCallback: () => _tickCallback,\n    abort: () => abort,\n    addListener: () => addListener,\n    allowedNodeEnvironmentFlags: () => allowedNodeEnvironmentFlags,\n    arch: () => arch,\n    argv: () => argv,\n    argv0: () => argv0,\n    assert: () => assert,\n    binding: () => binding,\n    browser: () => browser,\n    chdir: () => chdir,\n    config: () => config,\n    cpuUsage: () => cpuUsage,\n    cwd: () => cwd,\n    debugPort: () => debugPort,\n    default: () => process,\n    dlopen: () => dlopen,\n    domain: () => domain,\n    emit: () => emit,\n    emitWarning: () => emitWarning,\n    env: () => env,\n    execArgv: () => execArgv,\n    execPath: () => execPath,\n    exit: () => exit,\n    features: () => features,\n    hasUncaughtExceptionCaptureCallback: () => hasUncaughtExceptionCaptureCallback,\n    hrtime: () => hrtime,\n    kill: () => kill,\n    listeners: () => listeners,\n    memoryUsage: () => memoryUsage,\n    moduleLoadList: () => moduleLoadList,\n    nextTick: () => nextTick,\n    off: () => off,\n    on: () => on,\n    once: () => once,\n    openStdin: () => openStdin,\n    pid: () => pid,\n    platform: () => platform,\n    ppid: () => ppid,\n    prependListener: () => prependListener,\n    prependOnceListener: () => prependOnceListener,\n    reallyExit: () => reallyExit,\n    release: () => release,\n    removeAllListeners: () => removeAllListeners,\n    removeListener: () => removeListener,\n    resourceUsage: () => resourceUsage,\n    setSourceMapsEnabled: () => setSourceMapsEnabled,\n    setUncaughtExceptionCaptureCallback: () => setUncaughtExceptionCaptureCallback,\n    stderr: () => stderr,\n    stdin: () => stdin,\n    stdout: () => stdout,\n    title: () => title,\n    umask: () => umask,\n    uptime: () => uptime,\n    version: () => version,\n    versions: () => versions\n  });\n  function unimplemented(name) {\n    throw new Error(\"Node.js process \" + name + \" is not supported by JSPM core outside of Node.js\");\n  }\n  function cleanUpNextTick() {\n    if (!draining || !currentQueue)\n      return;\n    draining = false;\n    if (currentQueue.length) {\n      queue = currentQueue.concat(queue);\n    } else {\n      queueIndex = -1;\n    }\n    if (queue.length)\n      drainQueue();\n  }\n  function drainQueue() {\n    if (draining)\n      return;\n    var timeout = setTimeout(cleanUpNextTick, 0);\n    draining = true;\n    var len = queue.length;\n    while (len) {\n      currentQueue = queue;\n      queue = [];\n      while (++queueIndex < len) {\n        if (currentQueue)\n          currentQueue[queueIndex].run();\n      }\n      queueIndex = -1;\n      len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n  }\n  function nextTick(fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n      for (var i = 1; i < arguments.length; i++)\n        args[i - 1] = arguments[i];\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining)\n      setTimeout(drainQueue, 0);\n  }\n  function Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n  }\n  function noop() {\n  }\n  function _linkedBinding(name) {\n    unimplemented(\"_linkedBinding\");\n  }\n  function dlopen(name) {\n    unimplemented(\"dlopen\");\n  }\n  function _getActiveRequests() {\n    return [];\n  }\n  function _getActiveHandles() {\n    return [];\n  }\n  function assert(condition, message) {\n    if (!condition)\n      throw new Error(message || \"assertion error\");\n  }\n  function hasUncaughtExceptionCaptureCallback() {\n    return false;\n  }\n  function uptime() {\n    return _performance.now() / 1e3;\n  }\n  function hrtime(previousTimestamp) {\n    var baseNow = Math.floor((Date.now() - _performance.now()) * 1e-3);\n    var clocktime = _performance.now() * 1e-3;\n    var seconds = Math.floor(clocktime) + baseNow;\n    var nanoseconds = Math.floor(clocktime % 1 * 1e9);\n    if (previousTimestamp) {\n      seconds = seconds - previousTimestamp[0];\n      nanoseconds = nanoseconds - previousTimestamp[1];\n      if (nanoseconds < 0) {\n        seconds--;\n        nanoseconds += nanoPerSec;\n      }\n    }\n    return [seconds, nanoseconds];\n  }\n  function on() {\n    return process;\n  }\n  function listeners(name) {\n    return [];\n  }\n  var queue, draining, currentQueue, queueIndex, title, arch, platform, env, argv, execArgv, version, versions, emitWarning, binding, umask, cwd, chdir, release, browser, _rawDebug, moduleLoadList, domain, _exiting, config, reallyExit, _kill, cpuUsage, resourceUsage, memoryUsage, kill, exit, openStdin, allowedNodeEnvironmentFlags, features, _fatalExceptions, setUncaughtExceptionCaptureCallback, _tickCallback, _debugProcess, _debugEnd, _startProfilerIdleNotifier, _stopProfilerIdleNotifier, stdout, stderr, stdin, abort, pid, ppid, execPath, debugPort, argv0, _preload_modules, setSourceMapsEnabled, _performance, nowOffset, nanoPerSec, _maxListeners, _events, _eventsCount, addListener, once, off, removeListener, removeAllListeners, emit, prependListener, prependOnceListener, process;\n  var init_process = __esm({\n    \"../../../node_modules/.pnpm/@jspm+core@2.1.0/node_modules/@jspm/core/nodelibs/browser/process.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      queue = [];\n      draining = false;\n      queueIndex = -1;\n      Item.prototype.run = function() {\n        this.fun.apply(null, this.array);\n      };\n      title = \"browser\";\n      arch = \"x64\";\n      platform = \"browser\";\n      env = {\n        PATH: \"/usr/bin\",\n        LANG: typeof navigator !== \"undefined\" ? navigator.language + \".UTF-8\" : void 0,\n        PWD: \"/\",\n        HOME: \"/home\",\n        TMP: \"/tmp\"\n      };\n      argv = [\"/usr/bin/node\"];\n      execArgv = [];\n      version = \"v16.8.0\";\n      versions = {};\n      emitWarning = function(message, type) {\n        console.warn((type ? type + \": \" : \"\") + message);\n      };\n      binding = function(name) {\n        unimplemented(\"binding\");\n      };\n      umask = function(mask2) {\n        return 0;\n      };\n      cwd = function() {\n        return \"/\";\n      };\n      chdir = function(dir) {\n      };\n      release = {\n        name: \"node\",\n        sourceUrl: \"\",\n        headersUrl: \"\",\n        libUrl: \"\"\n      };\n      browser = true;\n      _rawDebug = noop;\n      moduleLoadList = [];\n      domain = {};\n      _exiting = false;\n      config = {};\n      reallyExit = noop;\n      _kill = noop;\n      cpuUsage = function() {\n        return {};\n      };\n      resourceUsage = cpuUsage;\n      memoryUsage = cpuUsage;\n      kill = noop;\n      exit = noop;\n      openStdin = noop;\n      allowedNodeEnvironmentFlags = {};\n      features = {\n        inspector: false,\n        debug: false,\n        uv: false,\n        ipv6: false,\n        tls_alpn: false,\n        tls_sni: false,\n        tls_ocsp: false,\n        tls: false,\n        cached_builtins: true\n      };\n      _fatalExceptions = noop;\n      setUncaughtExceptionCaptureCallback = noop;\n      _tickCallback = noop;\n      _debugProcess = noop;\n      _debugEnd = noop;\n      _startProfilerIdleNotifier = noop;\n      _stopProfilerIdleNotifier = noop;\n      stdout = void 0;\n      stderr = void 0;\n      stdin = void 0;\n      abort = noop;\n      pid = 2;\n      ppid = 1;\n      execPath = \"/bin/usr/node\";\n      debugPort = 9229;\n      argv0 = \"node\";\n      _preload_modules = [];\n      setSourceMapsEnabled = noop;\n      _performance = {\n        now: typeof performance !== \"undefined\" ? performance.now.bind(performance) : void 0,\n        timing: typeof performance !== \"undefined\" ? performance.timing : void 0\n      };\n      if (_performance.now === void 0) {\n        nowOffset = Date.now();\n        if (_performance.timing && _performance.timing.navigationStart) {\n          nowOffset = _performance.timing.navigationStart;\n        }\n        _performance.now = () => Date.now() - nowOffset;\n      }\n      nanoPerSec = 1e9;\n      hrtime.bigint = function(time) {\n        var diff = hrtime(time);\n        if (typeof BigInt === \"undefined\") {\n          return diff[0] * nanoPerSec + diff[1];\n        }\n        return BigInt(diff[0] * nanoPerSec) + BigInt(diff[1]);\n      };\n      _maxListeners = 10;\n      _events = {};\n      _eventsCount = 0;\n      addListener = on;\n      once = on;\n      off = on;\n      removeListener = on;\n      removeAllListeners = on;\n      emit = noop;\n      prependListener = on;\n      prependOnceListener = on;\n      process = {\n        version,\n        versions,\n        arch,\n        platform,\n        browser,\n        release,\n        _rawDebug,\n        moduleLoadList,\n        binding,\n        _linkedBinding,\n        _events,\n        _eventsCount,\n        _maxListeners,\n        on,\n        addListener,\n        once,\n        off,\n        removeListener,\n        removeAllListeners,\n        emit,\n        prependListener,\n        prependOnceListener,\n        listeners,\n        domain,\n        _exiting,\n        config,\n        dlopen,\n        uptime,\n        _getActiveRequests,\n        _getActiveHandles,\n        reallyExit,\n        _kill,\n        cpuUsage,\n        resourceUsage,\n        memoryUsage,\n        kill,\n        exit,\n        openStdin,\n        allowedNodeEnvironmentFlags,\n        assert,\n        features,\n        _fatalExceptions,\n        setUncaughtExceptionCaptureCallback,\n        hasUncaughtExceptionCaptureCallback,\n        emitWarning,\n        nextTick,\n        _tickCallback,\n        _debugProcess,\n        _debugEnd,\n        _startProfilerIdleNotifier,\n        _stopProfilerIdleNotifier,\n        stdout,\n        stdin,\n        stderr,\n        abort,\n        umask,\n        chdir,\n        cwd,\n        env,\n        title,\n        argv,\n        execArgv,\n        pid,\n        ppid,\n        execPath,\n        debugPort,\n        hrtime,\n        argv0,\n        _preload_modules,\n        setSourceMapsEnabled\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/esbuild-plugin-polyfill-node@0.3.0_esbuild@0.19.12/node_modules/esbuild-plugin-polyfill-node/polyfills/process.js\n  var init_process2 = __esm({\n    \"../../../node_modules/.pnpm/esbuild-plugin-polyfill-node@0.3.0_esbuild@0.19.12/node_modules/esbuild-plugin-polyfill-node/polyfills/process.js\"() {\n      \"use strict\";\n      init_process();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@jspm+core@2.1.0/node_modules/@jspm/core/nodelibs/browser/chunk-DtuTasat.js\n  function dew$2() {\n    if (_dewExec$2)\n      return exports$2;\n    _dewExec$2 = true;\n    exports$2.byteLength = byteLength;\n    exports$2.toByteArray = toByteArray;\n    exports$2.fromByteArray = fromByteArray;\n    var lookup = [];\n    var revLookup = [];\n    var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n    var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    for (var i = 0, len = code.length; i < len; ++i) {\n      lookup[i] = code[i];\n      revLookup[code.charCodeAt(i)] = i;\n    }\n    revLookup[\"-\".charCodeAt(0)] = 62;\n    revLookup[\"_\".charCodeAt(0)] = 63;\n    function getLens(b64) {\n      var len2 = b64.length;\n      if (len2 % 4 > 0) {\n        throw new Error(\"Invalid string. Length must be a multiple of 4\");\n      }\n      var validLen = b64.indexOf(\"=\");\n      if (validLen === -1)\n        validLen = len2;\n      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;\n      return [validLen, placeHoldersLen];\n    }\n    function byteLength(b64) {\n      var lens = getLens(b64);\n      var validLen = lens[0];\n      var placeHoldersLen = lens[1];\n      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n    }\n    function _byteLength(b64, validLen, placeHoldersLen) {\n      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n    }\n    function toByteArray(b64) {\n      var tmp;\n      var lens = getLens(b64);\n      var validLen = lens[0];\n      var placeHoldersLen = lens[1];\n      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n      var curByte = 0;\n      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;\n      var i2;\n      for (i2 = 0; i2 < len2; i2 += 4) {\n        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n        arr[curByte++] = tmp >> 16 & 255;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n      }\n      if (placeHoldersLen === 2) {\n        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n        arr[curByte++] = tmp & 255;\n      }\n      if (placeHoldersLen === 1) {\n        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n      }\n      return arr;\n    }\n    function tripletToBase64(num) {\n      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n    }\n    function encodeChunk(uint8, start, end) {\n      var tmp;\n      var output2 = [];\n      for (var i2 = start; i2 < end; i2 += 3) {\n        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);\n        output2.push(tripletToBase64(tmp));\n      }\n      return output2.join(\"\");\n    }\n    function fromByteArray(uint8) {\n      var tmp;\n      var len2 = uint8.length;\n      var extraBytes = len2 % 3;\n      var parts = [];\n      var maxChunkLength = 16383;\n      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {\n        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));\n      }\n      if (extraBytes === 1) {\n        tmp = uint8[len2 - 1];\n        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\");\n      } else if (extraBytes === 2) {\n        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];\n        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\");\n      }\n      return parts.join(\"\");\n    }\n    return exports$2;\n  }\n  function dew$1() {\n    if (_dewExec$1)\n      return exports$1;\n    _dewExec$1 = true;\n    exports$1.read = function(buffer, offset, isLE2, mLen, nBytes) {\n      var e, m;\n      var eLen = nBytes * 8 - mLen - 1;\n      var eMax = (1 << eLen) - 1;\n      var eBias = eMax >> 1;\n      var nBits = -7;\n      var i = isLE2 ? nBytes - 1 : 0;\n      var d = isLE2 ? -1 : 1;\n      var s = buffer[offset + i];\n      i += d;\n      e = s & (1 << -nBits) - 1;\n      s >>= -nBits;\n      nBits += eLen;\n      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {\n      }\n      m = e & (1 << -nBits) - 1;\n      e >>= -nBits;\n      nBits += mLen;\n      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {\n      }\n      if (e === 0) {\n        e = 1 - eBias;\n      } else if (e === eMax) {\n        return m ? NaN : (s ? -1 : 1) * Infinity;\n      } else {\n        m = m + Math.pow(2, mLen);\n        e = e - eBias;\n      }\n      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n    };\n    exports$1.write = function(buffer, value, offset, isLE2, mLen, nBytes) {\n      var e, m, c;\n      var eLen = nBytes * 8 - mLen - 1;\n      var eMax = (1 << eLen) - 1;\n      var eBias = eMax >> 1;\n      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n      var i = isLE2 ? 0 : nBytes - 1;\n      var d = isLE2 ? 1 : -1;\n      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n      value = Math.abs(value);\n      if (isNaN(value) || value === Infinity) {\n        m = isNaN(value) ? 1 : 0;\n        e = eMax;\n      } else {\n        e = Math.floor(Math.log(value) / Math.LN2);\n        if (value * (c = Math.pow(2, -e)) < 1) {\n          e--;\n          c *= 2;\n        }\n        if (e + eBias >= 1) {\n          value += rt / c;\n        } else {\n          value += rt * Math.pow(2, 1 - eBias);\n        }\n        if (value * c >= 2) {\n          e++;\n          c /= 2;\n        }\n        if (e + eBias >= eMax) {\n          m = 0;\n          e = eMax;\n        } else if (e + eBias >= 1) {\n          m = (value * c - 1) * Math.pow(2, mLen);\n          e = e + eBias;\n        } else {\n          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n          e = 0;\n        }\n      }\n      for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {\n      }\n      e = e << mLen | m;\n      eLen += mLen;\n      for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {\n      }\n      buffer[offset + i - d] |= s * 128;\n    };\n    return exports$1;\n  }\n  function dew() {\n    if (_dewExec)\n      return exports;\n    _dewExec = true;\n    const base64 = dew$2();\n    const ieee754 = dew$1();\n    const customInspectSymbol = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") : null;\n    exports.Buffer = Buffer3;\n    exports.SlowBuffer = SlowBuffer;\n    exports.INSPECT_MAX_BYTES = 50;\n    const K_MAX_LENGTH = 2147483647;\n    exports.kMaxLength = K_MAX_LENGTH;\n    Buffer3.TYPED_ARRAY_SUPPORT = typedArraySupport();\n    if (!Buffer3.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") {\n      console.error(\"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\");\n    }\n    function typedArraySupport() {\n      try {\n        const arr = new Uint8Array(1);\n        const proto = {\n          foo: function() {\n            return 42;\n          }\n        };\n        Object.setPrototypeOf(proto, Uint8Array.prototype);\n        Object.setPrototypeOf(arr, proto);\n        return arr.foo() === 42;\n      } catch (e) {\n        return false;\n      }\n    }\n    Object.defineProperty(Buffer3.prototype, \"parent\", {\n      enumerable: true,\n      get: function() {\n        if (!Buffer3.isBuffer(this))\n          return void 0;\n        return this.buffer;\n      }\n    });\n    Object.defineProperty(Buffer3.prototype, \"offset\", {\n      enumerable: true,\n      get: function() {\n        if (!Buffer3.isBuffer(this))\n          return void 0;\n        return this.byteOffset;\n      }\n    });\n    function createBuffer(length) {\n      if (length > K_MAX_LENGTH) {\n        throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n      }\n      const buf = new Uint8Array(length);\n      Object.setPrototypeOf(buf, Buffer3.prototype);\n      return buf;\n    }\n    function Buffer3(arg, encodingOrOffset, length) {\n      if (typeof arg === \"number\") {\n        if (typeof encodingOrOffset === \"string\") {\n          throw new TypeError('The \"string\" argument must be of type string. Received type number');\n        }\n        return allocUnsafe(arg);\n      }\n      return from(arg, encodingOrOffset, length);\n    }\n    Buffer3.poolSize = 8192;\n    function from(value, encodingOrOffset, length) {\n      if (typeof value === \"string\") {\n        return fromString(value, encodingOrOffset);\n      }\n      if (ArrayBuffer.isView(value)) {\n        return fromArrayView(value);\n      }\n      if (value == null) {\n        throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value);\n      }\n      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {\n        return fromArrayBuffer(value, encodingOrOffset, length);\n      }\n      if (typeof SharedArrayBuffer !== \"undefined\" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {\n        return fromArrayBuffer(value, encodingOrOffset, length);\n      }\n      if (typeof value === \"number\") {\n        throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n      }\n      const valueOf = value.valueOf && value.valueOf();\n      if (valueOf != null && valueOf !== value) {\n        return Buffer3.from(valueOf, encodingOrOffset, length);\n      }\n      const b2 = fromObject(value);\n      if (b2)\n        return b2;\n      if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") {\n        return Buffer3.from(value[Symbol.toPrimitive](\"string\"), encodingOrOffset, length);\n      }\n      throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value);\n    }\n    Buffer3.from = function(value, encodingOrOffset, length) {\n      return from(value, encodingOrOffset, length);\n    };\n    Object.setPrototypeOf(Buffer3.prototype, Uint8Array.prototype);\n    Object.setPrototypeOf(Buffer3, Uint8Array);\n    function assertSize(size) {\n      if (typeof size !== \"number\") {\n        throw new TypeError('\"size\" argument must be of type number');\n      } else if (size < 0) {\n        throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n      }\n    }\n    function alloc(size, fill, encoding) {\n      assertSize(size);\n      if (size <= 0) {\n        return createBuffer(size);\n      }\n      if (fill !== void 0) {\n        return typeof encoding === \"string\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n      }\n      return createBuffer(size);\n    }\n    Buffer3.alloc = function(size, fill, encoding) {\n      return alloc(size, fill, encoding);\n    };\n    function allocUnsafe(size) {\n      assertSize(size);\n      return createBuffer(size < 0 ? 0 : checked(size) | 0);\n    }\n    Buffer3.allocUnsafe = function(size) {\n      return allocUnsafe(size);\n    };\n    Buffer3.allocUnsafeSlow = function(size) {\n      return allocUnsafe(size);\n    };\n    function fromString(string, encoding) {\n      if (typeof encoding !== \"string\" || encoding === \"\") {\n        encoding = \"utf8\";\n      }\n      if (!Buffer3.isEncoding(encoding)) {\n        throw new TypeError(\"Unknown encoding: \" + encoding);\n      }\n      const length = byteLength(string, encoding) | 0;\n      let buf = createBuffer(length);\n      const actual = buf.write(string, encoding);\n      if (actual !== length) {\n        buf = buf.slice(0, actual);\n      }\n      return buf;\n    }\n    function fromArrayLike(array) {\n      const length = array.length < 0 ? 0 : checked(array.length) | 0;\n      const buf = createBuffer(length);\n      for (let i = 0; i < length; i += 1) {\n        buf[i] = array[i] & 255;\n      }\n      return buf;\n    }\n    function fromArrayView(arrayView) {\n      if (isInstance(arrayView, Uint8Array)) {\n        const copy4 = new Uint8Array(arrayView);\n        return fromArrayBuffer(copy4.buffer, copy4.byteOffset, copy4.byteLength);\n      }\n      return fromArrayLike(arrayView);\n    }\n    function fromArrayBuffer(array, byteOffset, length) {\n      if (byteOffset < 0 || array.byteLength < byteOffset) {\n        throw new RangeError('\"offset\" is outside of buffer bounds');\n      }\n      if (array.byteLength < byteOffset + (length || 0)) {\n        throw new RangeError('\"length\" is outside of buffer bounds');\n      }\n      let buf;\n      if (byteOffset === void 0 && length === void 0) {\n        buf = new Uint8Array(array);\n      } else if (length === void 0) {\n        buf = new Uint8Array(array, byteOffset);\n      } else {\n        buf = new Uint8Array(array, byteOffset, length);\n      }\n      Object.setPrototypeOf(buf, Buffer3.prototype);\n      return buf;\n    }\n    function fromObject(obj) {\n      if (Buffer3.isBuffer(obj)) {\n        const len = checked(obj.length) | 0;\n        const buf = createBuffer(len);\n        if (buf.length === 0) {\n          return buf;\n        }\n        obj.copy(buf, 0, 0, len);\n        return buf;\n      }\n      if (obj.length !== void 0) {\n        if (typeof obj.length !== \"number\" || numberIsNaN(obj.length)) {\n          return createBuffer(0);\n        }\n        return fromArrayLike(obj);\n      }\n      if (obj.type === \"Buffer\" && Array.isArray(obj.data)) {\n        return fromArrayLike(obj.data);\n      }\n    }\n    function checked(length) {\n      if (length >= K_MAX_LENGTH) {\n        throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + K_MAX_LENGTH.toString(16) + \" bytes\");\n      }\n      return length | 0;\n    }\n    function SlowBuffer(length) {\n      if (+length != length) {\n        length = 0;\n      }\n      return Buffer3.alloc(+length);\n    }\n    Buffer3.isBuffer = function isBuffer(b2) {\n      return b2 != null && b2._isBuffer === true && b2 !== Buffer3.prototype;\n    };\n    Buffer3.compare = function compare(a, b2) {\n      if (isInstance(a, Uint8Array))\n        a = Buffer3.from(a, a.offset, a.byteLength);\n      if (isInstance(b2, Uint8Array))\n        b2 = Buffer3.from(b2, b2.offset, b2.byteLength);\n      if (!Buffer3.isBuffer(a) || !Buffer3.isBuffer(b2)) {\n        throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n      }\n      if (a === b2)\n        return 0;\n      let x = a.length;\n      let y = b2.length;\n      for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n        if (a[i] !== b2[i]) {\n          x = a[i];\n          y = b2[i];\n          break;\n        }\n      }\n      if (x < y)\n        return -1;\n      if (y < x)\n        return 1;\n      return 0;\n    };\n    Buffer3.isEncoding = function isEncoding(encoding) {\n      switch (String(encoding).toLowerCase()) {\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n          return true;\n        default:\n          return false;\n      }\n    };\n    Buffer3.concat = function concat3(list, length) {\n      if (!Array.isArray(list)) {\n        throw new TypeError('\"list\" argument must be an Array of Buffers');\n      }\n      if (list.length === 0) {\n        return Buffer3.alloc(0);\n      }\n      let i;\n      if (length === void 0) {\n        length = 0;\n        for (i = 0; i < list.length; ++i) {\n          length += list[i].length;\n        }\n      }\n      const buffer = Buffer3.allocUnsafe(length);\n      let pos = 0;\n      for (i = 0; i < list.length; ++i) {\n        let buf = list[i];\n        if (isInstance(buf, Uint8Array)) {\n          if (pos + buf.length > buffer.length) {\n            if (!Buffer3.isBuffer(buf))\n              buf = Buffer3.from(buf);\n            buf.copy(buffer, pos);\n          } else {\n            Uint8Array.prototype.set.call(buffer, buf, pos);\n          }\n        } else if (!Buffer3.isBuffer(buf)) {\n          throw new TypeError('\"list\" argument must be an Array of Buffers');\n        } else {\n          buf.copy(buffer, pos);\n        }\n        pos += buf.length;\n      }\n      return buffer;\n    };\n    function byteLength(string, encoding) {\n      if (Buffer3.isBuffer(string)) {\n        return string.length;\n      }\n      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n        return string.byteLength;\n      }\n      if (typeof string !== \"string\") {\n        throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);\n      }\n      const len = string.length;\n      const mustMatch = arguments.length > 2 && arguments[2] === true;\n      if (!mustMatch && len === 0)\n        return 0;\n      let loweredCase = false;\n      for (; ; ) {\n        switch (encoding) {\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n            return len;\n          case \"utf8\":\n          case \"utf-8\":\n            return utf8ToBytes3(string).length;\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return len * 2;\n          case \"hex\":\n            return len >>> 1;\n          case \"base64\":\n            return base64ToBytes(string).length;\n          default:\n            if (loweredCase) {\n              return mustMatch ? -1 : utf8ToBytes3(string).length;\n            }\n            encoding = (\"\" + encoding).toLowerCase();\n            loweredCase = true;\n        }\n      }\n    }\n    Buffer3.byteLength = byteLength;\n    function slowToString(encoding, start, end) {\n      let loweredCase = false;\n      if (start === void 0 || start < 0) {\n        start = 0;\n      }\n      if (start > this.length) {\n        return \"\";\n      }\n      if (end === void 0 || end > this.length) {\n        end = this.length;\n      }\n      if (end <= 0) {\n        return \"\";\n      }\n      end >>>= 0;\n      start >>>= 0;\n      if (end <= start) {\n        return \"\";\n      }\n      if (!encoding)\n        encoding = \"utf8\";\n      while (true) {\n        switch (encoding) {\n          case \"hex\":\n            return hexSlice(this, start, end);\n          case \"utf8\":\n          case \"utf-8\":\n            return utf8Slice(this, start, end);\n          case \"ascii\":\n            return asciiSlice(this, start, end);\n          case \"latin1\":\n          case \"binary\":\n            return latin1Slice(this, start, end);\n          case \"base64\":\n            return base64Slice(this, start, end);\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return utf16leSlice(this, start, end);\n          default:\n            if (loweredCase)\n              throw new TypeError(\"Unknown encoding: \" + encoding);\n            encoding = (encoding + \"\").toLowerCase();\n            loweredCase = true;\n        }\n      }\n    }\n    Buffer3.prototype._isBuffer = true;\n    function swap(b2, n2, m) {\n      const i = b2[n2];\n      b2[n2] = b2[m];\n      b2[m] = i;\n    }\n    Buffer3.prototype.swap16 = function swap16() {\n      const len = this.length;\n      if (len % 2 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n      }\n      for (let i = 0; i < len; i += 2) {\n        swap(this, i, i + 1);\n      }\n      return this;\n    };\n    Buffer3.prototype.swap32 = function swap32() {\n      const len = this.length;\n      if (len % 4 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n      }\n      for (let i = 0; i < len; i += 4) {\n        swap(this, i, i + 3);\n        swap(this, i + 1, i + 2);\n      }\n      return this;\n    };\n    Buffer3.prototype.swap64 = function swap64() {\n      const len = this.length;\n      if (len % 8 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n      }\n      for (let i = 0; i < len; i += 8) {\n        swap(this, i, i + 7);\n        swap(this, i + 1, i + 6);\n        swap(this, i + 2, i + 5);\n        swap(this, i + 3, i + 4);\n      }\n      return this;\n    };\n    Buffer3.prototype.toString = function toString() {\n      const length = this.length;\n      if (length === 0)\n        return \"\";\n      if (arguments.length === 0)\n        return utf8Slice(this, 0, length);\n      return slowToString.apply(this, arguments);\n    };\n    Buffer3.prototype.toLocaleString = Buffer3.prototype.toString;\n    Buffer3.prototype.equals = function equals(b2) {\n      if (!Buffer3.isBuffer(b2))\n        throw new TypeError(\"Argument must be a Buffer\");\n      if (this === b2)\n        return true;\n      return Buffer3.compare(this, b2) === 0;\n    };\n    Buffer3.prototype.inspect = function inspect4() {\n      let str = \"\";\n      const max = exports.INSPECT_MAX_BYTES;\n      str = this.toString(\"hex\", 0, max).replace(/(.{2})/g, \"$1 \").trim();\n      if (this.length > max)\n        str += \" ... \";\n      return \"<Buffer \" + str + \">\";\n    };\n    if (customInspectSymbol) {\n      Buffer3.prototype[customInspectSymbol] = Buffer3.prototype.inspect;\n    }\n    Buffer3.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n      if (isInstance(target, Uint8Array)) {\n        target = Buffer3.from(target, target.offset, target.byteLength);\n      }\n      if (!Buffer3.isBuffer(target)) {\n        throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);\n      }\n      if (start === void 0) {\n        start = 0;\n      }\n      if (end === void 0) {\n        end = target ? target.length : 0;\n      }\n      if (thisStart === void 0) {\n        thisStart = 0;\n      }\n      if (thisEnd === void 0) {\n        thisEnd = this.length;\n      }\n      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n        throw new RangeError(\"out of range index\");\n      }\n      if (thisStart >= thisEnd && start >= end) {\n        return 0;\n      }\n      if (thisStart >= thisEnd) {\n        return -1;\n      }\n      if (start >= end) {\n        return 1;\n      }\n      start >>>= 0;\n      end >>>= 0;\n      thisStart >>>= 0;\n      thisEnd >>>= 0;\n      if (this === target)\n        return 0;\n      let x = thisEnd - thisStart;\n      let y = end - start;\n      const len = Math.min(x, y);\n      const thisCopy = this.slice(thisStart, thisEnd);\n      const targetCopy = target.slice(start, end);\n      for (let i = 0; i < len; ++i) {\n        if (thisCopy[i] !== targetCopy[i]) {\n          x = thisCopy[i];\n          y = targetCopy[i];\n          break;\n        }\n      }\n      if (x < y)\n        return -1;\n      if (y < x)\n        return 1;\n      return 0;\n    };\n    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n      if (buffer.length === 0)\n        return -1;\n      if (typeof byteOffset === \"string\") {\n        encoding = byteOffset;\n        byteOffset = 0;\n      } else if (byteOffset > 2147483647) {\n        byteOffset = 2147483647;\n      } else if (byteOffset < -2147483648) {\n        byteOffset = -2147483648;\n      }\n      byteOffset = +byteOffset;\n      if (numberIsNaN(byteOffset)) {\n        byteOffset = dir ? 0 : buffer.length - 1;\n      }\n      if (byteOffset < 0)\n        byteOffset = buffer.length + byteOffset;\n      if (byteOffset >= buffer.length) {\n        if (dir)\n          return -1;\n        else\n          byteOffset = buffer.length - 1;\n      } else if (byteOffset < 0) {\n        if (dir)\n          byteOffset = 0;\n        else\n          return -1;\n      }\n      if (typeof val === \"string\") {\n        val = Buffer3.from(val, encoding);\n      }\n      if (Buffer3.isBuffer(val)) {\n        if (val.length === 0) {\n          return -1;\n        }\n        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n      } else if (typeof val === \"number\") {\n        val = val & 255;\n        if (typeof Uint8Array.prototype.indexOf === \"function\") {\n          if (dir) {\n            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n          } else {\n            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n          }\n        }\n        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n      }\n      throw new TypeError(\"val must be string, number or Buffer\");\n    }\n    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n      let indexSize = 1;\n      let arrLength = arr.length;\n      let valLength = val.length;\n      if (encoding !== void 0) {\n        encoding = String(encoding).toLowerCase();\n        if (encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\") {\n          if (arr.length < 2 || val.length < 2) {\n            return -1;\n          }\n          indexSize = 2;\n          arrLength /= 2;\n          valLength /= 2;\n          byteOffset /= 2;\n        }\n      }\n      function read(buf, i2) {\n        if (indexSize === 1) {\n          return buf[i2];\n        } else {\n          return buf.readUInt16BE(i2 * indexSize);\n        }\n      }\n      let i;\n      if (dir) {\n        let foundIndex = -1;\n        for (i = byteOffset; i < arrLength; i++) {\n          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n            if (foundIndex === -1)\n              foundIndex = i;\n            if (i - foundIndex + 1 === valLength)\n              return foundIndex * indexSize;\n          } else {\n            if (foundIndex !== -1)\n              i -= i - foundIndex;\n            foundIndex = -1;\n          }\n        }\n      } else {\n        if (byteOffset + valLength > arrLength)\n          byteOffset = arrLength - valLength;\n        for (i = byteOffset; i >= 0; i--) {\n          let found = true;\n          for (let j = 0; j < valLength; j++) {\n            if (read(arr, i + j) !== read(val, j)) {\n              found = false;\n              break;\n            }\n          }\n          if (found)\n            return i;\n        }\n      }\n      return -1;\n    }\n    Buffer3.prototype.includes = function includes(val, byteOffset, encoding) {\n      return this.indexOf(val, byteOffset, encoding) !== -1;\n    };\n    Buffer3.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n    };\n    Buffer3.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n    };\n    function hexWrite(buf, string, offset, length) {\n      offset = Number(offset) || 0;\n      const remaining = buf.length - offset;\n      if (!length) {\n        length = remaining;\n      } else {\n        length = Number(length);\n        if (length > remaining) {\n          length = remaining;\n        }\n      }\n      const strLen = string.length;\n      if (length > strLen / 2) {\n        length = strLen / 2;\n      }\n      let i;\n      for (i = 0; i < length; ++i) {\n        const parsed = parseInt(string.substr(i * 2, 2), 16);\n        if (numberIsNaN(parsed))\n          return i;\n        buf[offset + i] = parsed;\n      }\n      return i;\n    }\n    function utf8Write(buf, string, offset, length) {\n      return blitBuffer(utf8ToBytes3(string, buf.length - offset), buf, offset, length);\n    }\n    function asciiWrite(buf, string, offset, length) {\n      return blitBuffer(asciiToBytes(string), buf, offset, length);\n    }\n    function base64Write(buf, string, offset, length) {\n      return blitBuffer(base64ToBytes(string), buf, offset, length);\n    }\n    function ucs2Write(buf, string, offset, length) {\n      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n    }\n    Buffer3.prototype.write = function write(string, offset, length, encoding) {\n      if (offset === void 0) {\n        encoding = \"utf8\";\n        length = this.length;\n        offset = 0;\n      } else if (length === void 0 && typeof offset === \"string\") {\n        encoding = offset;\n        length = this.length;\n        offset = 0;\n      } else if (isFinite(offset)) {\n        offset = offset >>> 0;\n        if (isFinite(length)) {\n          length = length >>> 0;\n          if (encoding === void 0)\n            encoding = \"utf8\";\n        } else {\n          encoding = length;\n          length = void 0;\n        }\n      } else {\n        throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");\n      }\n      const remaining = this.length - offset;\n      if (length === void 0 || length > remaining)\n        length = remaining;\n      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n        throw new RangeError(\"Attempt to write outside buffer bounds\");\n      }\n      if (!encoding)\n        encoding = \"utf8\";\n      let loweredCase = false;\n      for (; ; ) {\n        switch (encoding) {\n          case \"hex\":\n            return hexWrite(this, string, offset, length);\n          case \"utf8\":\n          case \"utf-8\":\n            return utf8Write(this, string, offset, length);\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n            return asciiWrite(this, string, offset, length);\n          case \"base64\":\n            return base64Write(this, string, offset, length);\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return ucs2Write(this, string, offset, length);\n          default:\n            if (loweredCase)\n              throw new TypeError(\"Unknown encoding: \" + encoding);\n            encoding = (\"\" + encoding).toLowerCase();\n            loweredCase = true;\n        }\n      }\n    };\n    Buffer3.prototype.toJSON = function toJSON2() {\n      return {\n        type: \"Buffer\",\n        data: Array.prototype.slice.call(this._arr || this, 0)\n      };\n    };\n    function base64Slice(buf, start, end) {\n      if (start === 0 && end === buf.length) {\n        return base64.fromByteArray(buf);\n      } else {\n        return base64.fromByteArray(buf.slice(start, end));\n      }\n    }\n    function utf8Slice(buf, start, end) {\n      end = Math.min(buf.length, end);\n      const res = [];\n      let i = start;\n      while (i < end) {\n        const firstByte = buf[i];\n        let codePoint = null;\n        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n        if (i + bytesPerSequence <= end) {\n          let secondByte, thirdByte, fourthByte, tempCodePoint;\n          switch (bytesPerSequence) {\n            case 1:\n              if (firstByte < 128) {\n                codePoint = firstByte;\n              }\n              break;\n            case 2:\n              secondByte = buf[i + 1];\n              if ((secondByte & 192) === 128) {\n                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n                if (tempCodePoint > 127) {\n                  codePoint = tempCodePoint;\n                }\n              }\n              break;\n            case 3:\n              secondByte = buf[i + 1];\n              thirdByte = buf[i + 2];\n              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n                  codePoint = tempCodePoint;\n                }\n              }\n              break;\n            case 4:\n              secondByte = buf[i + 1];\n              thirdByte = buf[i + 2];\n              fourthByte = buf[i + 3];\n              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n                  codePoint = tempCodePoint;\n                }\n              }\n          }\n        }\n        if (codePoint === null) {\n          codePoint = 65533;\n          bytesPerSequence = 1;\n        } else if (codePoint > 65535) {\n          codePoint -= 65536;\n          res.push(codePoint >>> 10 & 1023 | 55296);\n          codePoint = 56320 | codePoint & 1023;\n        }\n        res.push(codePoint);\n        i += bytesPerSequence;\n      }\n      return decodeCodePointsArray(res);\n    }\n    const MAX_ARGUMENTS_LENGTH = 4096;\n    function decodeCodePointsArray(codePoints) {\n      const len = codePoints.length;\n      if (len <= MAX_ARGUMENTS_LENGTH) {\n        return String.fromCharCode.apply(String, codePoints);\n      }\n      let res = \"\";\n      let i = 0;\n      while (i < len) {\n        res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n      }\n      return res;\n    }\n    function asciiSlice(buf, start, end) {\n      let ret = \"\";\n      end = Math.min(buf.length, end);\n      for (let i = start; i < end; ++i) {\n        ret += String.fromCharCode(buf[i] & 127);\n      }\n      return ret;\n    }\n    function latin1Slice(buf, start, end) {\n      let ret = \"\";\n      end = Math.min(buf.length, end);\n      for (let i = start; i < end; ++i) {\n        ret += String.fromCharCode(buf[i]);\n      }\n      return ret;\n    }\n    function hexSlice(buf, start, end) {\n      const len = buf.length;\n      if (!start || start < 0)\n        start = 0;\n      if (!end || end < 0 || end > len)\n        end = len;\n      let out = \"\";\n      for (let i = start; i < end; ++i) {\n        out += hexSliceLookupTable[buf[i]];\n      }\n      return out;\n    }\n    function utf16leSlice(buf, start, end) {\n      const bytes3 = buf.slice(start, end);\n      let res = \"\";\n      for (let i = 0; i < bytes3.length - 1; i += 2) {\n        res += String.fromCharCode(bytes3[i] + bytes3[i + 1] * 256);\n      }\n      return res;\n    }\n    Buffer3.prototype.slice = function slice(start, end) {\n      const len = this.length;\n      start = ~~start;\n      end = end === void 0 ? len : ~~end;\n      if (start < 0) {\n        start += len;\n        if (start < 0)\n          start = 0;\n      } else if (start > len) {\n        start = len;\n      }\n      if (end < 0) {\n        end += len;\n        if (end < 0)\n          end = 0;\n      } else if (end > len) {\n        end = len;\n      }\n      if (end < start)\n        end = start;\n      const newBuf = this.subarray(start, end);\n      Object.setPrototypeOf(newBuf, Buffer3.prototype);\n      return newBuf;\n    };\n    function checkOffset(offset, ext, length) {\n      if (offset % 1 !== 0 || offset < 0)\n        throw new RangeError(\"offset is not uint\");\n      if (offset + ext > length)\n        throw new RangeError(\"Trying to access beyond buffer length\");\n    }\n    Buffer3.prototype.readUintLE = Buffer3.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert)\n        checkOffset(offset, byteLength2, this.length);\n      let val = this[offset];\n      let mul3 = 1;\n      let i = 0;\n      while (++i < byteLength2 && (mul3 *= 256)) {\n        val += this[offset + i] * mul3;\n      }\n      return val;\n    };\n    Buffer3.prototype.readUintBE = Buffer3.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        checkOffset(offset, byteLength2, this.length);\n      }\n      let val = this[offset + --byteLength2];\n      let mul3 = 1;\n      while (byteLength2 > 0 && (mul3 *= 256)) {\n        val += this[offset + --byteLength2] * mul3;\n      }\n      return val;\n    };\n    Buffer3.prototype.readUint8 = Buffer3.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 1, this.length);\n      return this[offset];\n    };\n    Buffer3.prototype.readUint16LE = Buffer3.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 2, this.length);\n      return this[offset] | this[offset + 1] << 8;\n    };\n    Buffer3.prototype.readUint16BE = Buffer3.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 2, this.length);\n      return this[offset] << 8 | this[offset + 1];\n    };\n    Buffer3.prototype.readUint32LE = Buffer3.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;\n    };\n    Buffer3.prototype.readUint32BE = Buffer3.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n    };\n    Buffer3.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {\n      offset = offset >>> 0;\n      validateNumber(offset, \"offset\");\n      const first = this[offset];\n      const last = this[offset + 7];\n      if (first === void 0 || last === void 0) {\n        boundsError(offset, this.length - 8);\n      }\n      const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;\n      const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;\n      return BigInt(lo) + (BigInt(hi) << BigInt(32));\n    });\n    Buffer3.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {\n      offset = offset >>> 0;\n      validateNumber(offset, \"offset\");\n      const first = this[offset];\n      const last = this[offset + 7];\n      if (first === void 0 || last === void 0) {\n        boundsError(offset, this.length - 8);\n      }\n      const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n      const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;\n      return (BigInt(hi) << BigInt(32)) + BigInt(lo);\n    });\n    Buffer3.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert)\n        checkOffset(offset, byteLength2, this.length);\n      let val = this[offset];\n      let mul3 = 1;\n      let i = 0;\n      while (++i < byteLength2 && (mul3 *= 256)) {\n        val += this[offset + i] * mul3;\n      }\n      mul3 *= 128;\n      if (val >= mul3)\n        val -= Math.pow(2, 8 * byteLength2);\n      return val;\n    };\n    Buffer3.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert)\n        checkOffset(offset, byteLength2, this.length);\n      let i = byteLength2;\n      let mul3 = 1;\n      let val = this[offset + --i];\n      while (i > 0 && (mul3 *= 256)) {\n        val += this[offset + --i] * mul3;\n      }\n      mul3 *= 128;\n      if (val >= mul3)\n        val -= Math.pow(2, 8 * byteLength2);\n      return val;\n    };\n    Buffer3.prototype.readInt8 = function readInt8(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 1, this.length);\n      if (!(this[offset] & 128))\n        return this[offset];\n      return (255 - this[offset] + 1) * -1;\n    };\n    Buffer3.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 2, this.length);\n      const val = this[offset] | this[offset + 1] << 8;\n      return val & 32768 ? val | 4294901760 : val;\n    };\n    Buffer3.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 2, this.length);\n      const val = this[offset + 1] | this[offset] << 8;\n      return val & 32768 ? val | 4294901760 : val;\n    };\n    Buffer3.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n    };\n    Buffer3.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n    };\n    Buffer3.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {\n      offset = offset >>> 0;\n      validateNumber(offset, \"offset\");\n      const first = this[offset];\n      const last = this[offset + 7];\n      if (first === void 0 || last === void 0) {\n        boundsError(offset, this.length - 8);\n      }\n      const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);\n      return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);\n    });\n    Buffer3.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {\n      offset = offset >>> 0;\n      validateNumber(offset, \"offset\");\n      const first = this[offset];\n      const last = this[offset + 7];\n      if (first === void 0 || last === void 0) {\n        boundsError(offset, this.length - 8);\n      }\n      const val = (first << 24) + // Overflow\n      this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n      return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);\n    });\n    Buffer3.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return ieee754.read(this, offset, true, 23, 4);\n    };\n    Buffer3.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return ieee754.read(this, offset, false, 23, 4);\n    };\n    Buffer3.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 8, this.length);\n      return ieee754.read(this, offset, true, 52, 8);\n    };\n    Buffer3.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 8, this.length);\n      return ieee754.read(this, offset, false, 52, 8);\n    };\n    function checkInt(buf, value, offset, ext, max, min) {\n      if (!Buffer3.isBuffer(buf))\n        throw new TypeError('\"buffer\" argument must be a Buffer instance');\n      if (value > max || value < min)\n        throw new RangeError('\"value\" argument is out of bounds');\n      if (offset + ext > buf.length)\n        throw new RangeError(\"Index out of range\");\n    }\n    Buffer3.prototype.writeUintLE = Buffer3.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n        checkInt(this, value, offset, byteLength2, maxBytes, 0);\n      }\n      let mul3 = 1;\n      let i = 0;\n      this[offset] = value & 255;\n      while (++i < byteLength2 && (mul3 *= 256)) {\n        this[offset + i] = value / mul3 & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer3.prototype.writeUintBE = Buffer3.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n        checkInt(this, value, offset, byteLength2, maxBytes, 0);\n      }\n      let i = byteLength2 - 1;\n      let mul3 = 1;\n      this[offset + i] = value & 255;\n      while (--i >= 0 && (mul3 *= 256)) {\n        this[offset + i] = value / mul3 & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer3.prototype.writeUint8 = Buffer3.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 1, 255, 0);\n      this[offset] = value & 255;\n      return offset + 1;\n    };\n    Buffer3.prototype.writeUint16LE = Buffer3.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 2, 65535, 0);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      return offset + 2;\n    };\n    Buffer3.prototype.writeUint16BE = Buffer3.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 2, 65535, 0);\n      this[offset] = value >>> 8;\n      this[offset + 1] = value & 255;\n      return offset + 2;\n    };\n    Buffer3.prototype.writeUint32LE = Buffer3.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 4, 4294967295, 0);\n      this[offset + 3] = value >>> 24;\n      this[offset + 2] = value >>> 16;\n      this[offset + 1] = value >>> 8;\n      this[offset] = value & 255;\n      return offset + 4;\n    };\n    Buffer3.prototype.writeUint32BE = Buffer3.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 4, 4294967295, 0);\n      this[offset] = value >>> 24;\n      this[offset + 1] = value >>> 16;\n      this[offset + 2] = value >>> 8;\n      this[offset + 3] = value & 255;\n      return offset + 4;\n    };\n    function wrtBigUInt64LE(buf, value, offset, min, max) {\n      checkIntBI(value, min, max, buf, offset, 7);\n      let lo = Number(value & BigInt(4294967295));\n      buf[offset++] = lo;\n      lo = lo >> 8;\n      buf[offset++] = lo;\n      lo = lo >> 8;\n      buf[offset++] = lo;\n      lo = lo >> 8;\n      buf[offset++] = lo;\n      let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n      buf[offset++] = hi;\n      hi = hi >> 8;\n      buf[offset++] = hi;\n      hi = hi >> 8;\n      buf[offset++] = hi;\n      hi = hi >> 8;\n      buf[offset++] = hi;\n      return offset;\n    }\n    function wrtBigUInt64BE(buf, value, offset, min, max) {\n      checkIntBI(value, min, max, buf, offset, 7);\n      let lo = Number(value & BigInt(4294967295));\n      buf[offset + 7] = lo;\n      lo = lo >> 8;\n      buf[offset + 6] = lo;\n      lo = lo >> 8;\n      buf[offset + 5] = lo;\n      lo = lo >> 8;\n      buf[offset + 4] = lo;\n      let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n      buf[offset + 3] = hi;\n      hi = hi >> 8;\n      buf[offset + 2] = hi;\n      hi = hi >> 8;\n      buf[offset + 1] = hi;\n      hi = hi >> 8;\n      buf[offset] = hi;\n      return offset + 8;\n    }\n    Buffer3.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {\n      return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    });\n    Buffer3.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {\n      return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    });\n    Buffer3.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        const limit = Math.pow(2, 8 * byteLength2 - 1);\n        checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n      }\n      let i = 0;\n      let mul3 = 1;\n      let sub = 0;\n      this[offset] = value & 255;\n      while (++i < byteLength2 && (mul3 *= 256)) {\n        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n          sub = 1;\n        }\n        this[offset + i] = (value / mul3 >> 0) - sub & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer3.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        const limit = Math.pow(2, 8 * byteLength2 - 1);\n        checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n      }\n      let i = byteLength2 - 1;\n      let mul3 = 1;\n      let sub = 0;\n      this[offset + i] = value & 255;\n      while (--i >= 0 && (mul3 *= 256)) {\n        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n          sub = 1;\n        }\n        this[offset + i] = (value / mul3 >> 0) - sub & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer3.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 1, 127, -128);\n      if (value < 0)\n        value = 255 + value + 1;\n      this[offset] = value & 255;\n      return offset + 1;\n    };\n    Buffer3.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 2, 32767, -32768);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      return offset + 2;\n    };\n    Buffer3.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 2, 32767, -32768);\n      this[offset] = value >>> 8;\n      this[offset + 1] = value & 255;\n      return offset + 2;\n    };\n    Buffer3.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 4, 2147483647, -2147483648);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      this[offset + 2] = value >>> 16;\n      this[offset + 3] = value >>> 24;\n      return offset + 4;\n    };\n    Buffer3.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 4, 2147483647, -2147483648);\n      if (value < 0)\n        value = 4294967295 + value + 1;\n      this[offset] = value >>> 24;\n      this[offset + 1] = value >>> 16;\n      this[offset + 2] = value >>> 8;\n      this[offset + 3] = value & 255;\n      return offset + 4;\n    };\n    Buffer3.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {\n      return wrtBigUInt64LE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    });\n    Buffer3.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {\n      return wrtBigUInt64BE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    });\n    function checkIEEE754(buf, value, offset, ext, max, min) {\n      if (offset + ext > buf.length)\n        throw new RangeError(\"Index out of range\");\n      if (offset < 0)\n        throw new RangeError(\"Index out of range\");\n    }\n    function writeFloat(buf, value, offset, littleEndian, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        checkIEEE754(buf, value, offset, 4);\n      }\n      ieee754.write(buf, value, offset, littleEndian, 23, 4);\n      return offset + 4;\n    }\n    Buffer3.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n      return writeFloat(this, value, offset, true, noAssert);\n    };\n    Buffer3.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n      return writeFloat(this, value, offset, false, noAssert);\n    };\n    function writeDouble(buf, value, offset, littleEndian, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        checkIEEE754(buf, value, offset, 8);\n      }\n      ieee754.write(buf, value, offset, littleEndian, 52, 8);\n      return offset + 8;\n    }\n    Buffer3.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n      return writeDouble(this, value, offset, true, noAssert);\n    };\n    Buffer3.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n      return writeDouble(this, value, offset, false, noAssert);\n    };\n    Buffer3.prototype.copy = function copy4(target, targetStart, start, end) {\n      if (!Buffer3.isBuffer(target))\n        throw new TypeError(\"argument should be a Buffer\");\n      if (!start)\n        start = 0;\n      if (!end && end !== 0)\n        end = this.length;\n      if (targetStart >= target.length)\n        targetStart = target.length;\n      if (!targetStart)\n        targetStart = 0;\n      if (end > 0 && end < start)\n        end = start;\n      if (end === start)\n        return 0;\n      if (target.length === 0 || this.length === 0)\n        return 0;\n      if (targetStart < 0) {\n        throw new RangeError(\"targetStart out of bounds\");\n      }\n      if (start < 0 || start >= this.length)\n        throw new RangeError(\"Index out of range\");\n      if (end < 0)\n        throw new RangeError(\"sourceEnd out of bounds\");\n      if (end > this.length)\n        end = this.length;\n      if (target.length - targetStart < end - start) {\n        end = target.length - targetStart + start;\n      }\n      const len = end - start;\n      if (this === target && typeof Uint8Array.prototype.copyWithin === \"function\") {\n        this.copyWithin(targetStart, start, end);\n      } else {\n        Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);\n      }\n      return len;\n    };\n    Buffer3.prototype.fill = function fill(val, start, end, encoding) {\n      if (typeof val === \"string\") {\n        if (typeof start === \"string\") {\n          encoding = start;\n          start = 0;\n          end = this.length;\n        } else if (typeof end === \"string\") {\n          encoding = end;\n          end = this.length;\n        }\n        if (encoding !== void 0 && typeof encoding !== \"string\") {\n          throw new TypeError(\"encoding must be a string\");\n        }\n        if (typeof encoding === \"string\" && !Buffer3.isEncoding(encoding)) {\n          throw new TypeError(\"Unknown encoding: \" + encoding);\n        }\n        if (val.length === 1) {\n          const code = val.charCodeAt(0);\n          if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") {\n            val = code;\n          }\n        }\n      } else if (typeof val === \"number\") {\n        val = val & 255;\n      } else if (typeof val === \"boolean\") {\n        val = Number(val);\n      }\n      if (start < 0 || this.length < start || this.length < end) {\n        throw new RangeError(\"Out of range index\");\n      }\n      if (end <= start) {\n        return this;\n      }\n      start = start >>> 0;\n      end = end === void 0 ? this.length : end >>> 0;\n      if (!val)\n        val = 0;\n      let i;\n      if (typeof val === \"number\") {\n        for (i = start; i < end; ++i) {\n          this[i] = val;\n        }\n      } else {\n        const bytes3 = Buffer3.isBuffer(val) ? val : Buffer3.from(val, encoding);\n        const len = bytes3.length;\n        if (len === 0) {\n          throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n        }\n        for (i = 0; i < end - start; ++i) {\n          this[i + start] = bytes3[i % len];\n        }\n      }\n      return this;\n    };\n    const errors = {};\n    function E(sym, getMessage, Base) {\n      errors[sym] = class NodeError extends Base {\n        constructor() {\n          super();\n          Object.defineProperty(this, \"message\", {\n            value: getMessage.apply(this, arguments),\n            writable: true,\n            configurable: true\n          });\n          this.name = `${this.name} [${sym}]`;\n          this.stack;\n          delete this.name;\n        }\n        get code() {\n          return sym;\n        }\n        set code(value) {\n          Object.defineProperty(this, \"code\", {\n            configurable: true,\n            enumerable: true,\n            value,\n            writable: true\n          });\n        }\n        toString() {\n          return `${this.name} [${sym}]: ${this.message}`;\n        }\n      };\n    }\n    E(\"ERR_BUFFER_OUT_OF_BOUNDS\", function(name) {\n      if (name) {\n        return `${name} is outside of buffer bounds`;\n      }\n      return \"Attempt to access memory outside buffer bounds\";\n    }, RangeError);\n    E(\"ERR_INVALID_ARG_TYPE\", function(name, actual) {\n      return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`;\n    }, TypeError);\n    E(\"ERR_OUT_OF_RANGE\", function(str, range, input) {\n      let msg = `The value of \"${str}\" is out of range.`;\n      let received = input;\n      if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n        received = addNumericalSeparator(String(input));\n      } else if (typeof input === \"bigint\") {\n        received = String(input);\n        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n          received = addNumericalSeparator(received);\n        }\n        received += \"n\";\n      }\n      msg += ` It must be ${range}. Received ${received}`;\n      return msg;\n    }, RangeError);\n    function addNumericalSeparator(val) {\n      let res = \"\";\n      let i = val.length;\n      const start = val[0] === \"-\" ? 1 : 0;\n      for (; i >= start + 4; i -= 3) {\n        res = `_${val.slice(i - 3, i)}${res}`;\n      }\n      return `${val.slice(0, i)}${res}`;\n    }\n    function checkBounds(buf, offset, byteLength2) {\n      validateNumber(offset, \"offset\");\n      if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {\n        boundsError(offset, buf.length - (byteLength2 + 1));\n      }\n    }\n    function checkIntBI(value, min, max, buf, offset, byteLength2) {\n      if (value > max || value < min) {\n        const n2 = typeof min === \"bigint\" ? \"n\" : \"\";\n        let range;\n        {\n          if (min === 0 || min === BigInt(0)) {\n            range = `>= 0${n2} and < 2${n2} ** ${(byteLength2 + 1) * 8}${n2}`;\n          } else {\n            range = `>= -(2${n2} ** ${(byteLength2 + 1) * 8 - 1}${n2}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n2}`;\n          }\n        }\n        throw new errors.ERR_OUT_OF_RANGE(\"value\", range, value);\n      }\n      checkBounds(buf, offset, byteLength2);\n    }\n    function validateNumber(value, name) {\n      if (typeof value !== \"number\") {\n        throw new errors.ERR_INVALID_ARG_TYPE(name, \"number\", value);\n      }\n    }\n    function boundsError(value, length, type) {\n      if (Math.floor(value) !== value) {\n        validateNumber(value, type);\n        throw new errors.ERR_OUT_OF_RANGE(\"offset\", \"an integer\", value);\n      }\n      if (length < 0) {\n        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();\n      }\n      throw new errors.ERR_OUT_OF_RANGE(\"offset\", `>= ${0} and <= ${length}`, value);\n    }\n    const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n    function base64clean(str) {\n      str = str.split(\"=\")[0];\n      str = str.trim().replace(INVALID_BASE64_RE, \"\");\n      if (str.length < 2)\n        return \"\";\n      while (str.length % 4 !== 0) {\n        str = str + \"=\";\n      }\n      return str;\n    }\n    function utf8ToBytes3(string, units) {\n      units = units || Infinity;\n      let codePoint;\n      const length = string.length;\n      let leadSurrogate = null;\n      const bytes3 = [];\n      for (let i = 0; i < length; ++i) {\n        codePoint = string.charCodeAt(i);\n        if (codePoint > 55295 && codePoint < 57344) {\n          if (!leadSurrogate) {\n            if (codePoint > 56319) {\n              if ((units -= 3) > -1)\n                bytes3.push(239, 191, 189);\n              continue;\n            } else if (i + 1 === length) {\n              if ((units -= 3) > -1)\n                bytes3.push(239, 191, 189);\n              continue;\n            }\n            leadSurrogate = codePoint;\n            continue;\n          }\n          if (codePoint < 56320) {\n            if ((units -= 3) > -1)\n              bytes3.push(239, 191, 189);\n            leadSurrogate = codePoint;\n            continue;\n          }\n          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\n        } else if (leadSurrogate) {\n          if ((units -= 3) > -1)\n            bytes3.push(239, 191, 189);\n        }\n        leadSurrogate = null;\n        if (codePoint < 128) {\n          if ((units -= 1) < 0)\n            break;\n          bytes3.push(codePoint);\n        } else if (codePoint < 2048) {\n          if ((units -= 2) < 0)\n            break;\n          bytes3.push(codePoint >> 6 | 192, codePoint & 63 | 128);\n        } else if (codePoint < 65536) {\n          if ((units -= 3) < 0)\n            break;\n          bytes3.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);\n        } else if (codePoint < 1114112) {\n          if ((units -= 4) < 0)\n            break;\n          bytes3.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);\n        } else {\n          throw new Error(\"Invalid code point\");\n        }\n      }\n      return bytes3;\n    }\n    function asciiToBytes(str) {\n      const byteArray = [];\n      for (let i = 0; i < str.length; ++i) {\n        byteArray.push(str.charCodeAt(i) & 255);\n      }\n      return byteArray;\n    }\n    function utf16leToBytes(str, units) {\n      let c, hi, lo;\n      const byteArray = [];\n      for (let i = 0; i < str.length; ++i) {\n        if ((units -= 2) < 0)\n          break;\n        c = str.charCodeAt(i);\n        hi = c >> 8;\n        lo = c % 256;\n        byteArray.push(lo);\n        byteArray.push(hi);\n      }\n      return byteArray;\n    }\n    function base64ToBytes(str) {\n      return base64.toByteArray(base64clean(str));\n    }\n    function blitBuffer(src, dst, offset, length) {\n      let i;\n      for (i = 0; i < length; ++i) {\n        if (i + offset >= dst.length || i >= src.length)\n          break;\n        dst[i + offset] = src[i];\n      }\n      return i;\n    }\n    function isInstance(obj, type) {\n      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n    }\n    function numberIsNaN(obj) {\n      return obj !== obj;\n    }\n    const hexSliceLookupTable = function() {\n      const alphabet = \"0123456789abcdef\";\n      const table = new Array(256);\n      for (let i = 0; i < 16; ++i) {\n        const i16 = i * 16;\n        for (let j = 0; j < 16; ++j) {\n          table[i16 + j] = alphabet[i] + alphabet[j];\n        }\n      }\n      return table;\n    }();\n    function defineBigIntMethod(fn) {\n      return typeof BigInt === \"undefined\" ? BufferBigIntNotDefined : fn;\n    }\n    function BufferBigIntNotDefined() {\n      throw new Error(\"BigInt not supported\");\n    }\n    return exports;\n  }\n  var exports$2, _dewExec$2, exports$1, _dewExec$1, exports, _dewExec;\n  var init_chunk_DtuTasat = __esm({\n    \"../../../node_modules/.pnpm/@jspm+core@2.1.0/node_modules/@jspm/core/nodelibs/browser/chunk-DtuTasat.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      exports$2 = {};\n      _dewExec$2 = false;\n      exports$1 = {};\n      _dewExec$1 = false;\n      exports = {};\n      _dewExec = false;\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@jspm+core@2.1.0/node_modules/@jspm/core/nodelibs/browser/buffer.js\n  var buffer_exports = {};\n  __export(buffer_exports, {\n    Buffer: () => Buffer2,\n    INSPECT_MAX_BYTES: () => INSPECT_MAX_BYTES,\n    default: () => exports2,\n    kMaxLength: () => kMaxLength\n  });\n  var exports2, Buffer2, INSPECT_MAX_BYTES, kMaxLength;\n  var init_buffer = __esm({\n    \"../../../node_modules/.pnpm/@jspm+core@2.1.0/node_modules/@jspm/core/nodelibs/browser/buffer.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_chunk_DtuTasat();\n      exports2 = dew();\n      exports2[\"Buffer\"];\n      exports2[\"SlowBuffer\"];\n      exports2[\"INSPECT_MAX_BYTES\"];\n      exports2[\"kMaxLength\"];\n      Buffer2 = exports2.Buffer;\n      INSPECT_MAX_BYTES = exports2.INSPECT_MAX_BYTES;\n      kMaxLength = exports2.kMaxLength;\n    }\n  });\n\n  // ../../../node_modules/.pnpm/esbuild-plugin-polyfill-node@0.3.0_esbuild@0.19.12/node_modules/esbuild-plugin-polyfill-node/polyfills/buffer.js\n  var init_buffer2 = __esm({\n    \"../../../node_modules/.pnpm/esbuild-plugin-polyfill-node@0.3.0_esbuild@0.19.12/node_modules/esbuild-plugin-polyfill-node/polyfills/buffer.js\"() {\n      \"use strict\";\n      init_buffer();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/v3/helpers/util.js\n  var util, objectUtil, ZodParsedType, getParsedType;\n  var init_util = __esm({\n    \"../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/v3/helpers/util.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      (function(util2) {\n        util2.assertEqual = (_) => {\n        };\n        function assertIs(_arg) {\n        }\n        util2.assertIs = assertIs;\n        function assertNever(_x) {\n          throw new Error();\n        }\n        util2.assertNever = assertNever;\n        util2.arrayToEnum = (items) => {\n          const obj = {};\n          for (const item of items) {\n            obj[item] = item;\n          }\n          return obj;\n        };\n        util2.getValidEnumValues = (obj) => {\n          const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n          const filtered = {};\n          for (const k of validKeys) {\n            filtered[k] = obj[k];\n          }\n          return util2.objectValues(filtered);\n        };\n        util2.objectValues = (obj) => {\n          return util2.objectKeys(obj).map(function(e) {\n            return obj[e];\n          });\n        };\n        util2.objectKeys = typeof Object.keys === \"function\" ? (obj) => Object.keys(obj) : (object2) => {\n          const keys = [];\n          for (const key2 in object2) {\n            if (Object.prototype.hasOwnProperty.call(object2, key2)) {\n              keys.push(key2);\n            }\n          }\n          return keys;\n        };\n        util2.find = (arr, checker) => {\n          for (const item of arr) {\n            if (checker(item))\n              return item;\n          }\n          return void 0;\n        };\n        util2.isInteger = typeof Number.isInteger === \"function\" ? (val) => Number.isInteger(val) : (val) => typeof val === \"number\" && Number.isFinite(val) && Math.floor(val) === val;\n        function joinValues(array, separator = \" | \") {\n          return array.map((val) => typeof val === \"string\" ? `'${val}'` : val).join(separator);\n        }\n        util2.joinValues = joinValues;\n        util2.jsonStringifyReplacer = (_, value) => {\n          if (typeof value === \"bigint\") {\n            return value.toString();\n          }\n          return value;\n        };\n      })(util || (util = {}));\n      (function(objectUtil2) {\n        objectUtil2.mergeShapes = (first, second) => {\n          return {\n            ...first,\n            ...second\n            // second overwrites first\n          };\n        };\n      })(objectUtil || (objectUtil = {}));\n      ZodParsedType = util.arrayToEnum([\n        \"string\",\n        \"nan\",\n        \"number\",\n        \"integer\",\n        \"float\",\n        \"boolean\",\n        \"date\",\n        \"bigint\",\n        \"symbol\",\n        \"function\",\n        \"undefined\",\n        \"null\",\n        \"array\",\n        \"object\",\n        \"unknown\",\n        \"promise\",\n        \"void\",\n        \"never\",\n        \"map\",\n        \"set\"\n      ]);\n      getParsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n          case \"undefined\":\n            return ZodParsedType.undefined;\n          case \"string\":\n            return ZodParsedType.string;\n          case \"number\":\n            return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n          case \"boolean\":\n            return ZodParsedType.boolean;\n          case \"function\":\n            return ZodParsedType.function;\n          case \"bigint\":\n            return ZodParsedType.bigint;\n          case \"symbol\":\n            return ZodParsedType.symbol;\n          case \"object\":\n            if (Array.isArray(data)) {\n              return ZodParsedType.array;\n            }\n            if (data === null) {\n              return ZodParsedType.null;\n            }\n            if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n              return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n              return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n              return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n              return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n          default:\n            return ZodParsedType.unknown;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/v3/ZodError.js\n  var ZodIssueCode, quotelessJson, ZodError;\n  var init_ZodError = __esm({\n    \"../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/v3/ZodError.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_util();\n      ZodIssueCode = util.arrayToEnum([\n        \"invalid_type\",\n        \"invalid_literal\",\n        \"custom\",\n        \"invalid_union\",\n        \"invalid_union_discriminator\",\n        \"invalid_enum_value\",\n        \"unrecognized_keys\",\n        \"invalid_arguments\",\n        \"invalid_return_type\",\n        \"invalid_date\",\n        \"invalid_string\",\n        \"too_small\",\n        \"too_big\",\n        \"invalid_intersection_types\",\n        \"not_multiple_of\",\n        \"not_finite\"\n      ]);\n      quotelessJson = (obj) => {\n        const json = JSON.stringify(obj, null, 2);\n        return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n      };\n      ZodError = class _ZodError extends Error {\n        get errors() {\n          return this.issues;\n        }\n        constructor(issues) {\n          super();\n          this.issues = [];\n          this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n          };\n          this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n          };\n          const actualProto = new.target.prototype;\n          if (Object.setPrototypeOf) {\n            Object.setPrototypeOf(this, actualProto);\n          } else {\n            this.__proto__ = actualProto;\n          }\n          this.name = \"ZodError\";\n          this.issues = issues;\n        }\n        format(_mapper) {\n          const mapper = _mapper || function(issue) {\n            return issue.message;\n          };\n          const fieldErrors = { _errors: [] };\n          const processError = (error) => {\n            for (const issue of error.issues) {\n              if (issue.code === \"invalid_union\") {\n                issue.unionErrors.map(processError);\n              } else if (issue.code === \"invalid_return_type\") {\n                processError(issue.returnTypeError);\n              } else if (issue.code === \"invalid_arguments\") {\n                processError(issue.argumentsError);\n              } else if (issue.path.length === 0) {\n                fieldErrors._errors.push(mapper(issue));\n              } else {\n                let curr = fieldErrors;\n                let i = 0;\n                while (i < issue.path.length) {\n                  const el = issue.path[i];\n                  const terminal = i === issue.path.length - 1;\n                  if (!terminal) {\n                    curr[el] = curr[el] || { _errors: [] };\n                  } else {\n                    curr[el] = curr[el] || { _errors: [] };\n                    curr[el]._errors.push(mapper(issue));\n                  }\n                  curr = curr[el];\n                  i++;\n                }\n              }\n            }\n          };\n          processError(this);\n          return fieldErrors;\n        }\n        static assert(value) {\n          if (!(value instanceof _ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n          }\n        }\n        toString() {\n          return this.message;\n        }\n        get message() {\n          return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n        }\n        get isEmpty() {\n          return this.issues.length === 0;\n        }\n        flatten(mapper = (issue) => issue.message) {\n          const fieldErrors = {};\n          const formErrors = [];\n          for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n              fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n              fieldErrors[sub.path[0]].push(mapper(sub));\n            } else {\n              formErrors.push(mapper(sub));\n            }\n          }\n          return { formErrors, fieldErrors };\n        }\n        get formErrors() {\n          return this.flatten();\n        }\n      };\n      ZodError.create = (issues) => {\n        const error = new ZodError(issues);\n        return error;\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/v3/locales/en.js\n  var errorMap, en_default;\n  var init_en = __esm({\n    \"../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/v3/locales/en.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_ZodError();\n      init_util();\n      errorMap = (issue, _ctx) => {\n        let message;\n        switch (issue.code) {\n          case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n              message = \"Required\";\n            } else {\n              message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n          case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n          case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n          case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n          case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n          case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n          case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n          case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n          case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n          case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n              if (\"includes\" in issue.validation) {\n                message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                if (typeof issue.validation.position === \"number\") {\n                  message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                }\n              } else if (\"startsWith\" in issue.validation) {\n                message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n              } else if (\"endsWith\" in issue.validation) {\n                message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n              } else {\n                util.assertNever(issue.validation);\n              }\n            } else if (issue.validation !== \"regex\") {\n              message = `Invalid ${issue.validation}`;\n            } else {\n              message = \"Invalid\";\n            }\n            break;\n          case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n              message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n              message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n              message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n              message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n              message = \"Invalid input\";\n            break;\n          case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n              message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n              message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n              message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n              message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n              message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n              message = \"Invalid input\";\n            break;\n          case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n          case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n          case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n          case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n          default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n        }\n        return { message };\n      };\n      en_default = errorMap;\n    }\n  });\n\n  // ../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/v3/errors.js\n  function setErrorMap(map) {\n    overrideErrorMap = map;\n  }\n  function getErrorMap() {\n    return overrideErrorMap;\n  }\n  var overrideErrorMap;\n  var init_errors = __esm({\n    \"../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/v3/errors.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_en();\n      overrideErrorMap = en_default;\n    }\n  });\n\n  // ../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/v3/helpers/parseUtil.js\n  function addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n      issueData,\n      data: ctx.data,\n      path: ctx.path,\n      errorMaps: [\n        ctx.common.contextualErrorMap,\n        // contextual error map is first priority\n        ctx.schemaErrorMap,\n        // then schema-bound map if available\n        overrideMap,\n        // then global override map\n        overrideMap === en_default ? void 0 : en_default\n        // then global default map\n      ].filter((x) => !!x)\n    });\n    ctx.common.issues.push(issue);\n  }\n  var makeIssue, EMPTY_PATH, ParseStatus, INVALID, DIRTY, OK, isAborted, isDirty, isValid, isAsync;\n  var init_parseUtil = __esm({\n    \"../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/v3/helpers/parseUtil.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_errors();\n      init_en();\n      makeIssue = (params) => {\n        const { data, path, errorMaps, issueData } = params;\n        const fullPath = [...path, ...issueData.path || []];\n        const fullIssue = {\n          ...issueData,\n          path: fullPath\n        };\n        if (issueData.message !== void 0) {\n          return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message\n          };\n        }\n        let errorMessage = \"\";\n        const maps = errorMaps.filter((m) => !!m).slice().reverse();\n        for (const map of maps) {\n          errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n        }\n        return {\n          ...issueData,\n          path: fullPath,\n          message: errorMessage\n        };\n      };\n      EMPTY_PATH = [];\n      ParseStatus = class _ParseStatus {\n        constructor() {\n          this.value = \"valid\";\n        }\n        dirty() {\n          if (this.value === \"valid\")\n            this.value = \"dirty\";\n        }\n        abort() {\n          if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n        }\n        static mergeArray(status, results) {\n          const arrayValue = [];\n          for (const s of results) {\n            if (s.status === \"aborted\")\n              return INVALID;\n            if (s.status === \"dirty\")\n              status.dirty();\n            arrayValue.push(s.value);\n          }\n          return { status: status.value, value: arrayValue };\n        }\n        static async mergeObjectAsync(status, pairs) {\n          const syncPairs = [];\n          for (const pair of pairs) {\n            const key2 = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n              key: key2,\n              value\n            });\n          }\n          return _ParseStatus.mergeObjectSync(status, syncPairs);\n        }\n        static mergeObjectSync(status, pairs) {\n          const finalObject = {};\n          for (const pair of pairs) {\n            const { key: key2, value } = pair;\n            if (key2.status === \"aborted\")\n              return INVALID;\n            if (value.status === \"aborted\")\n              return INVALID;\n            if (key2.status === \"dirty\")\n              status.dirty();\n            if (value.status === \"dirty\")\n              status.dirty();\n            if (key2.value !== \"__proto__\" && (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n              finalObject[key2.value] = value.value;\n            }\n          }\n          return { status: status.value, value: finalObject };\n        }\n      };\n      INVALID = Object.freeze({\n        status: \"aborted\"\n      });\n      DIRTY = (value) => ({ status: \"dirty\", value });\n      OK = (value) => ({ status: \"valid\", value });\n      isAborted = (x) => x.status === \"aborted\";\n      isDirty = (x) => x.status === \"dirty\";\n      isValid = (x) => x.status === \"valid\";\n      isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n    }\n  });\n\n  // ../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/v3/helpers/typeAliases.js\n  var init_typeAliases = __esm({\n    \"../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/v3/helpers/typeAliases.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/v3/helpers/errorUtil.js\n  var errorUtil;\n  var init_errorUtil = __esm({\n    \"../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/v3/helpers/errorUtil.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      (function(errorUtil2) {\n        errorUtil2.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n        errorUtil2.toString = (message) => typeof message === \"string\" ? message : message?.message;\n      })(errorUtil || (errorUtil = {}));\n    }\n  });\n\n  // ../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/v3/types.js\n  function processCreateParams(params) {\n    if (!params)\n      return {};\n    const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;\n    if (errorMap2 && (invalid_type_error || required_error)) {\n      throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap2)\n      return { errorMap: errorMap2, description };\n    const customMap = (iss, ctx) => {\n      const { message } = params;\n      if (iss.code === \"invalid_enum_value\") {\n        return { message: message ?? ctx.defaultError };\n      }\n      if (typeof ctx.data === \"undefined\") {\n        return { message: message ?? required_error ?? ctx.defaultError };\n      }\n      if (iss.code !== \"invalid_type\")\n        return { message: ctx.defaultError };\n      return { message: message ?? invalid_type_error ?? ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n  }\n  function timeRegexSource(args) {\n    let secondsRegexSource = `[0-5]\\\\d`;\n    if (args.precision) {\n      secondsRegexSource = `${secondsRegexSource}\\\\.\\\\d{${args.precision}}`;\n    } else if (args.precision == null) {\n      secondsRegexSource = `${secondsRegexSource}(\\\\.\\\\d+)?`;\n    }\n    const secondsQuantifier = args.precision ? \"+\" : \"?\";\n    return `([01]\\\\d|2[0-3]):[0-5]\\\\d(:${secondsRegexSource})${secondsQuantifier}`;\n  }\n  function timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n  }\n  function datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n      opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n  }\n  function isValidIP(ip, version29) {\n    if ((version29 === \"v4\" || !version29) && ipv4Regex.test(ip)) {\n      return true;\n    }\n    if ((version29 === \"v6\" || !version29) && ipv6Regex.test(ip)) {\n      return true;\n    }\n    return false;\n  }\n  function isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n      return false;\n    try {\n      const [header] = jwt.split(\".\");\n      const base64 = header.replace(/-/g, \"+\").replace(/_/g, \"/\").padEnd(header.length + (4 - header.length % 4) % 4, \"=\");\n      const decoded = JSON.parse(atob(base64));\n      if (typeof decoded !== \"object\" || decoded === null)\n        return false;\n      if (\"typ\" in decoded && decoded?.typ !== \"JWT\")\n        return false;\n      if (!decoded.alg)\n        return false;\n      if (alg && decoded.alg !== alg)\n        return false;\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  function isValidCidr(ip, version29) {\n    if ((version29 === \"v4\" || !version29) && ipv4CidrRegex.test(ip)) {\n      return true;\n    }\n    if ((version29 === \"v6\" || !version29) && ipv6CidrRegex.test(ip)) {\n      return true;\n    }\n    return false;\n  }\n  function floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = Number.parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = Number.parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return valInt % stepInt / 10 ** decCount;\n  }\n  function deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n      const newShape = {};\n      for (const key2 in schema.shape) {\n        const fieldSchema = schema.shape[key2];\n        newShape[key2] = ZodOptional.create(deepPartialify(fieldSchema));\n      }\n      return new ZodObject({\n        ...schema._def,\n        shape: () => newShape\n      });\n    } else if (schema instanceof ZodArray) {\n      return new ZodArray({\n        ...schema._def,\n        type: deepPartialify(schema.element)\n      });\n    } else if (schema instanceof ZodOptional) {\n      return ZodOptional.create(deepPartialify(schema.unwrap()));\n    } else if (schema instanceof ZodNullable) {\n      return ZodNullable.create(deepPartialify(schema.unwrap()));\n    } else if (schema instanceof ZodTuple) {\n      return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    } else {\n      return schema;\n    }\n  }\n  function mergeValues(a, b2) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b2);\n    if (a === b2) {\n      return { valid: true, data: a };\n    } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n      const bKeys = util.objectKeys(b2);\n      const sharedKeys = util.objectKeys(a).filter((key2) => bKeys.indexOf(key2) !== -1);\n      const newObj = { ...a, ...b2 };\n      for (const key2 of sharedKeys) {\n        const sharedValue = mergeValues(a[key2], b2[key2]);\n        if (!sharedValue.valid) {\n          return { valid: false };\n        }\n        newObj[key2] = sharedValue.data;\n      }\n      return { valid: true, data: newObj };\n    } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n      if (a.length !== b2.length) {\n        return { valid: false };\n      }\n      const newArray = [];\n      for (let index = 0; index < a.length; index++) {\n        const itemA = a[index];\n        const itemB = b2[index];\n        const sharedValue = mergeValues(itemA, itemB);\n        if (!sharedValue.valid) {\n          return { valid: false };\n        }\n        newArray.push(sharedValue.data);\n      }\n      return { valid: true, data: newArray };\n    } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b2) {\n      return { valid: true, data: a };\n    } else {\n      return { valid: false };\n    }\n  }\n  function createZodEnum(values, params) {\n    return new ZodEnum({\n      values,\n      typeName: ZodFirstPartyTypeKind.ZodEnum,\n      ...processCreateParams(params)\n    });\n  }\n  function cleanParams(params, data) {\n    const p = typeof params === \"function\" ? params(data) : typeof params === \"string\" ? { message: params } : params;\n    const p2 = typeof p === \"string\" ? { message: p } : p;\n    return p2;\n  }\n  function custom(check, _params = {}, fatal) {\n    if (check)\n      return ZodAny.create().superRefine((data, ctx) => {\n        const r2 = check(data);\n        if (r2 instanceof Promise) {\n          return r2.then((r3) => {\n            if (!r3) {\n              const params = cleanParams(_params, data);\n              const _fatal = params.fatal ?? fatal ?? true;\n              ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n            }\n          });\n        }\n        if (!r2) {\n          const params = cleanParams(_params, data);\n          const _fatal = params.fatal ?? fatal ?? true;\n          ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n        }\n        return;\n      });\n    return ZodAny.create();\n  }\n  var ParseInputLazyPath, handleResult, ZodType, cuidRegex, cuid2Regex, ulidRegex, uuidRegex, nanoidRegex, jwtRegex, durationRegex, emailRegex, _emojiRegex, emojiRegex, ipv4Regex, ipv4CidrRegex, ipv6Regex, ipv6CidrRegex, base64Regex, base64urlRegex, dateRegexSource, dateRegex, ZodString, ZodNumber, ZodBigInt, ZodBoolean, ZodDate, ZodSymbol, ZodUndefined, ZodNull, ZodAny, ZodUnknown, ZodNever, ZodVoid, ZodArray, ZodObject, ZodUnion, getDiscriminator, ZodDiscriminatedUnion, ZodIntersection, ZodTuple, ZodRecord, ZodMap, ZodSet, ZodFunction, ZodLazy, ZodLiteral, ZodEnum, ZodNativeEnum, ZodPromise, ZodEffects, ZodOptional, ZodNullable, ZodDefault, ZodCatch, ZodNaN, BRAND, ZodBranded, ZodPipeline, ZodReadonly, late, ZodFirstPartyTypeKind, instanceOfType, stringType, numberType, nanType, bigIntType, booleanType, dateType, symbolType, undefinedType, nullType, anyType, unknownType, neverType, voidType, arrayType, objectType, strictObjectType, unionType, discriminatedUnionType, intersectionType, tupleType, recordType, mapType, setType, functionType, lazyType, literalType, enumType, nativeEnumType, promiseType, effectsType, optionalType, nullableType, preprocessType, pipelineType, ostring, onumber, oboolean, coerce, NEVER;\n  var init_types = __esm({\n    \"../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/v3/types.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_ZodError();\n      init_errors();\n      init_errorUtil();\n      init_parseUtil();\n      init_util();\n      ParseInputLazyPath = class {\n        constructor(parent, value, path, key2) {\n          this._cachedPath = [];\n          this.parent = parent;\n          this.data = value;\n          this._path = path;\n          this._key = key2;\n        }\n        get path() {\n          if (!this._cachedPath.length) {\n            if (Array.isArray(this._key)) {\n              this._cachedPath.push(...this._path, ...this._key);\n            } else {\n              this._cachedPath.push(...this._path, this._key);\n            }\n          }\n          return this._cachedPath;\n        }\n      };\n      handleResult = (ctx, result) => {\n        if (isValid(result)) {\n          return { success: true, data: result.value };\n        } else {\n          if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n          }\n          return {\n            success: false,\n            get error() {\n              if (this._error)\n                return this._error;\n              const error = new ZodError(ctx.common.issues);\n              this._error = error;\n              return this._error;\n            }\n          };\n        }\n      };\n      ZodType = class {\n        get description() {\n          return this._def.description;\n        }\n        _getType(input) {\n          return getParsedType(input.data);\n        }\n        _getOrReturnCtx(input, ctx) {\n          return ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent\n          };\n        }\n        _processInputParams(input) {\n          return {\n            status: new ParseStatus(),\n            ctx: {\n              common: input.parent.common,\n              data: input.data,\n              parsedType: getParsedType(input.data),\n              schemaErrorMap: this._def.errorMap,\n              path: input.path,\n              parent: input.parent\n            }\n          };\n        }\n        _parseSync(input) {\n          const result = this._parse(input);\n          if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n          }\n          return result;\n        }\n        _parseAsync(input) {\n          const result = this._parse(input);\n          return Promise.resolve(result);\n        }\n        parse(data, params) {\n          const result = this.safeParse(data, params);\n          if (result.success)\n            return result.data;\n          throw result.error;\n        }\n        safeParse(data, params) {\n          const ctx = {\n            common: {\n              issues: [],\n              async: params?.async ?? false,\n              contextualErrorMap: params?.errorMap\n            },\n            path: params?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data)\n          };\n          const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n          return handleResult(ctx, result);\n        }\n        \"~validate\"(data) {\n          const ctx = {\n            common: {\n              issues: [],\n              async: !!this[\"~standard\"].async\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data)\n          };\n          if (!this[\"~standard\"].async) {\n            try {\n              const result = this._parseSync({ data, path: [], parent: ctx });\n              return isValid(result) ? {\n                value: result.value\n              } : {\n                issues: ctx.common.issues\n              };\n            } catch (err) {\n              if (err?.message?.toLowerCase()?.includes(\"encountered\")) {\n                this[\"~standard\"].async = true;\n              }\n              ctx.common = {\n                issues: [],\n                async: true\n              };\n            }\n          }\n          return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result) ? {\n            value: result.value\n          } : {\n            issues: ctx.common.issues\n          });\n        }\n        async parseAsync(data, params) {\n          const result = await this.safeParseAsync(data, params);\n          if (result.success)\n            return result.data;\n          throw result.error;\n        }\n        async safeParseAsync(data, params) {\n          const ctx = {\n            common: {\n              issues: [],\n              contextualErrorMap: params?.errorMap,\n              async: true\n            },\n            path: params?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data)\n          };\n          const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n          const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));\n          return handleResult(ctx, result);\n        }\n        refine(check, message) {\n          const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n              return { message };\n            } else if (typeof message === \"function\") {\n              return message(val);\n            } else {\n              return message;\n            }\n          };\n          return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n              code: ZodIssueCode.custom,\n              ...getIssueProperties(val)\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n              return result.then((data) => {\n                if (!data) {\n                  setError();\n                  return false;\n                } else {\n                  return true;\n                }\n              });\n            }\n            if (!result) {\n              setError();\n              return false;\n            } else {\n              return true;\n            }\n          });\n        }\n        refinement(check, refinementData) {\n          return this._refinement((val, ctx) => {\n            if (!check(val)) {\n              ctx.addIssue(typeof refinementData === \"function\" ? refinementData(val, ctx) : refinementData);\n              return false;\n            } else {\n              return true;\n            }\n          });\n        }\n        _refinement(refinement) {\n          return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement }\n          });\n        }\n        superRefine(refinement) {\n          return this._refinement(refinement);\n        }\n        constructor(def) {\n          this.spa = this.safeParseAsync;\n          this._def = def;\n          this.parse = this.parse.bind(this);\n          this.safeParse = this.safeParse.bind(this);\n          this.parseAsync = this.parseAsync.bind(this);\n          this.safeParseAsync = this.safeParseAsync.bind(this);\n          this.spa = this.spa.bind(this);\n          this.refine = this.refine.bind(this);\n          this.refinement = this.refinement.bind(this);\n          this.superRefine = this.superRefine.bind(this);\n          this.optional = this.optional.bind(this);\n          this.nullable = this.nullable.bind(this);\n          this.nullish = this.nullish.bind(this);\n          this.array = this.array.bind(this);\n          this.promise = this.promise.bind(this);\n          this.or = this.or.bind(this);\n          this.and = this.and.bind(this);\n          this.transform = this.transform.bind(this);\n          this.brand = this.brand.bind(this);\n          this.default = this.default.bind(this);\n          this.catch = this.catch.bind(this);\n          this.describe = this.describe.bind(this);\n          this.pipe = this.pipe.bind(this);\n          this.readonly = this.readonly.bind(this);\n          this.isNullable = this.isNullable.bind(this);\n          this.isOptional = this.isOptional.bind(this);\n          this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data)\n          };\n        }\n        optional() {\n          return ZodOptional.create(this, this._def);\n        }\n        nullable() {\n          return ZodNullable.create(this, this._def);\n        }\n        nullish() {\n          return this.nullable().optional();\n        }\n        array() {\n          return ZodArray.create(this);\n        }\n        promise() {\n          return ZodPromise.create(this, this._def);\n        }\n        or(option) {\n          return ZodUnion.create([this, option], this._def);\n        }\n        and(incoming) {\n          return ZodIntersection.create(this, incoming, this._def);\n        }\n        transform(transform) {\n          return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform }\n          });\n        }\n        default(def) {\n          const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n          return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault\n          });\n        }\n        brand() {\n          return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def)\n          });\n        }\n        catch(def) {\n          const catchValueFunc = typeof def === \"function\" ? def : () => def;\n          return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch\n          });\n        }\n        describe(description) {\n          const This = this.constructor;\n          return new This({\n            ...this._def,\n            description\n          });\n        }\n        pipe(target) {\n          return ZodPipeline.create(this, target);\n        }\n        readonly() {\n          return ZodReadonly.create(this);\n        }\n        isOptional() {\n          return this.safeParse(void 0).success;\n        }\n        isNullable() {\n          return this.safeParse(null).success;\n        }\n      };\n      cuidRegex = /^c[^\\s-]{8,}$/i;\n      cuid2Regex = /^[0-9a-z]+$/;\n      ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n      uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\n      nanoidRegex = /^[a-z0-9_-]{21}$/i;\n      jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\n      durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n      emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n      _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\n      ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\n      ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n      ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\n      ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n      base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n      base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n      dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\n      dateRegex = new RegExp(`^${dateRegexSource}$`);\n      ZodString = class _ZodString extends ZodType {\n        _parse(input) {\n          if (this._def.coerce) {\n            input.data = String(input.data);\n          }\n          const parsedType = this._getType(input);\n          if (parsedType !== ZodParsedType.string) {\n            const ctx2 = this._getOrReturnCtx(input);\n            addIssueToContext(ctx2, {\n              code: ZodIssueCode.invalid_type,\n              expected: ZodParsedType.string,\n              received: ctx2.parsedType\n            });\n            return INVALID;\n          }\n          const status = new ParseStatus();\n          let ctx = void 0;\n          for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n              if (input.data.length < check.value) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  code: ZodIssueCode.too_small,\n                  minimum: check.value,\n                  type: \"string\",\n                  inclusive: true,\n                  exact: false,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"max\") {\n              if (input.data.length > check.value) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  code: ZodIssueCode.too_big,\n                  maximum: check.value,\n                  type: \"string\",\n                  inclusive: true,\n                  exact: false,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"length\") {\n              const tooBig = input.data.length > check.value;\n              const tooSmall = input.data.length < check.value;\n              if (tooBig || tooSmall) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                if (tooBig) {\n                  addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: check.value,\n                    type: \"string\",\n                    inclusive: true,\n                    exact: true,\n                    message: check.message\n                  });\n                } else if (tooSmall) {\n                  addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: check.value,\n                    type: \"string\",\n                    inclusive: true,\n                    exact: true,\n                    message: check.message\n                  });\n                }\n                status.dirty();\n              }\n            } else if (check.kind === \"email\") {\n              if (!emailRegex.test(input.data)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  validation: \"email\",\n                  code: ZodIssueCode.invalid_string,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"emoji\") {\n              if (!emojiRegex) {\n                emojiRegex = new RegExp(_emojiRegex, \"u\");\n              }\n              if (!emojiRegex.test(input.data)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  validation: \"emoji\",\n                  code: ZodIssueCode.invalid_string,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"uuid\") {\n              if (!uuidRegex.test(input.data)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  validation: \"uuid\",\n                  code: ZodIssueCode.invalid_string,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"nanoid\") {\n              if (!nanoidRegex.test(input.data)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  validation: \"nanoid\",\n                  code: ZodIssueCode.invalid_string,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"cuid\") {\n              if (!cuidRegex.test(input.data)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  validation: \"cuid\",\n                  code: ZodIssueCode.invalid_string,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"cuid2\") {\n              if (!cuid2Regex.test(input.data)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  validation: \"cuid2\",\n                  code: ZodIssueCode.invalid_string,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"ulid\") {\n              if (!ulidRegex.test(input.data)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  validation: \"ulid\",\n                  code: ZodIssueCode.invalid_string,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"url\") {\n              try {\n                new URL(input.data);\n              } catch {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  validation: \"url\",\n                  code: ZodIssueCode.invalid_string,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"regex\") {\n              check.regex.lastIndex = 0;\n              const testResult = check.regex.test(input.data);\n              if (!testResult) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  validation: \"regex\",\n                  code: ZodIssueCode.invalid_string,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"trim\") {\n              input.data = input.data.trim();\n            } else if (check.kind === \"includes\") {\n              if (!input.data.includes(check.value, check.position)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  code: ZodIssueCode.invalid_string,\n                  validation: { includes: check.value, position: check.position },\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"toLowerCase\") {\n              input.data = input.data.toLowerCase();\n            } else if (check.kind === \"toUpperCase\") {\n              input.data = input.data.toUpperCase();\n            } else if (check.kind === \"startsWith\") {\n              if (!input.data.startsWith(check.value)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  code: ZodIssueCode.invalid_string,\n                  validation: { startsWith: check.value },\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"endsWith\") {\n              if (!input.data.endsWith(check.value)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  code: ZodIssueCode.invalid_string,\n                  validation: { endsWith: check.value },\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"datetime\") {\n              const regex = datetimeRegex(check);\n              if (!regex.test(input.data)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  code: ZodIssueCode.invalid_string,\n                  validation: \"datetime\",\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"date\") {\n              const regex = dateRegex;\n              if (!regex.test(input.data)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  code: ZodIssueCode.invalid_string,\n                  validation: \"date\",\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"time\") {\n              const regex = timeRegex(check);\n              if (!regex.test(input.data)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  code: ZodIssueCode.invalid_string,\n                  validation: \"time\",\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"duration\") {\n              if (!durationRegex.test(input.data)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  validation: \"duration\",\n                  code: ZodIssueCode.invalid_string,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"ip\") {\n              if (!isValidIP(input.data, check.version)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  validation: \"ip\",\n                  code: ZodIssueCode.invalid_string,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"jwt\") {\n              if (!isValidJWT(input.data, check.alg)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  validation: \"jwt\",\n                  code: ZodIssueCode.invalid_string,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"cidr\") {\n              if (!isValidCidr(input.data, check.version)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  validation: \"cidr\",\n                  code: ZodIssueCode.invalid_string,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"base64\") {\n              if (!base64Regex.test(input.data)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  validation: \"base64\",\n                  code: ZodIssueCode.invalid_string,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"base64url\") {\n              if (!base64urlRegex.test(input.data)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  validation: \"base64url\",\n                  code: ZodIssueCode.invalid_string,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else {\n              util.assertNever(check);\n            }\n          }\n          return { status: status.value, value: input.data };\n        }\n        _regex(regex, validation, message) {\n          return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message)\n          });\n        }\n        _addCheck(check) {\n          return new _ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check]\n          });\n        }\n        email(message) {\n          return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n        }\n        url(message) {\n          return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n        }\n        emoji(message) {\n          return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n        }\n        uuid(message) {\n          return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n        }\n        nanoid(message) {\n          return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n        }\n        cuid(message) {\n          return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n        }\n        cuid2(message) {\n          return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n        }\n        ulid(message) {\n          return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n        }\n        base64(message) {\n          return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n        }\n        base64url(message) {\n          return this._addCheck({\n            kind: \"base64url\",\n            ...errorUtil.errToObj(message)\n          });\n        }\n        jwt(options) {\n          return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\n        }\n        ip(options) {\n          return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n        }\n        cidr(options) {\n          return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\n        }\n        datetime(options) {\n          if (typeof options === \"string\") {\n            return this._addCheck({\n              kind: \"datetime\",\n              precision: null,\n              offset: false,\n              local: false,\n              message: options\n            });\n          }\n          return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n            offset: options?.offset ?? false,\n            local: options?.local ?? false,\n            ...errorUtil.errToObj(options?.message)\n          });\n        }\n        date(message) {\n          return this._addCheck({ kind: \"date\", message });\n        }\n        time(options) {\n          if (typeof options === \"string\") {\n            return this._addCheck({\n              kind: \"time\",\n              precision: null,\n              message: options\n            });\n          }\n          return this._addCheck({\n            kind: \"time\",\n            precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n            ...errorUtil.errToObj(options?.message)\n          });\n        }\n        duration(message) {\n          return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n        }\n        regex(regex, message) {\n          return this._addCheck({\n            kind: \"regex\",\n            regex,\n            ...errorUtil.errToObj(message)\n          });\n        }\n        includes(value, options) {\n          return this._addCheck({\n            kind: \"includes\",\n            value,\n            position: options?.position,\n            ...errorUtil.errToObj(options?.message)\n          });\n        }\n        startsWith(value, message) {\n          return this._addCheck({\n            kind: \"startsWith\",\n            value,\n            ...errorUtil.errToObj(message)\n          });\n        }\n        endsWith(value, message) {\n          return this._addCheck({\n            kind: \"endsWith\",\n            value,\n            ...errorUtil.errToObj(message)\n          });\n        }\n        min(minLength, message) {\n          return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message)\n          });\n        }\n        max(maxLength, message) {\n          return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message)\n          });\n        }\n        length(len, message) {\n          return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message)\n          });\n        }\n        /**\n         * Equivalent to `.min(1)`\n         */\n        nonempty(message) {\n          return this.min(1, errorUtil.errToObj(message));\n        }\n        trim() {\n          return new _ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }]\n          });\n        }\n        toLowerCase() {\n          return new _ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }]\n          });\n        }\n        toUpperCase() {\n          return new _ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }]\n          });\n        }\n        get isDatetime() {\n          return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n        }\n        get isDate() {\n          return !!this._def.checks.find((ch) => ch.kind === \"date\");\n        }\n        get isTime() {\n          return !!this._def.checks.find((ch) => ch.kind === \"time\");\n        }\n        get isDuration() {\n          return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n        }\n        get isEmail() {\n          return !!this._def.checks.find((ch) => ch.kind === \"email\");\n        }\n        get isURL() {\n          return !!this._def.checks.find((ch) => ch.kind === \"url\");\n        }\n        get isEmoji() {\n          return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n        }\n        get isUUID() {\n          return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n        }\n        get isNANOID() {\n          return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n        }\n        get isCUID() {\n          return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n        }\n        get isCUID2() {\n          return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n        }\n        get isULID() {\n          return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n        }\n        get isIP() {\n          return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n        }\n        get isCIDR() {\n          return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n        }\n        get isBase64() {\n          return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n        }\n        get isBase64url() {\n          return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n        }\n        get minLength() {\n          let min = null;\n          for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n              if (min === null || ch.value > min)\n                min = ch.value;\n            }\n          }\n          return min;\n        }\n        get maxLength() {\n          let max = null;\n          for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n              if (max === null || ch.value < max)\n                max = ch.value;\n            }\n          }\n          return max;\n        }\n      };\n      ZodString.create = (params) => {\n        return new ZodString({\n          checks: [],\n          typeName: ZodFirstPartyTypeKind.ZodString,\n          coerce: params?.coerce ?? false,\n          ...processCreateParams(params)\n        });\n      };\n      ZodNumber = class _ZodNumber extends ZodType {\n        constructor() {\n          super(...arguments);\n          this.min = this.gte;\n          this.max = this.lte;\n          this.step = this.multipleOf;\n        }\n        _parse(input) {\n          if (this._def.coerce) {\n            input.data = Number(input.data);\n          }\n          const parsedType = this._getType(input);\n          if (parsedType !== ZodParsedType.number) {\n            const ctx2 = this._getOrReturnCtx(input);\n            addIssueToContext(ctx2, {\n              code: ZodIssueCode.invalid_type,\n              expected: ZodParsedType.number,\n              received: ctx2.parsedType\n            });\n            return INVALID;\n          }\n          let ctx = void 0;\n          const status = new ParseStatus();\n          for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n              if (!util.isInteger(input.data)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  code: ZodIssueCode.invalid_type,\n                  expected: \"integer\",\n                  received: \"float\",\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"min\") {\n              const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n              if (tooSmall) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  code: ZodIssueCode.too_small,\n                  minimum: check.value,\n                  type: \"number\",\n                  inclusive: check.inclusive,\n                  exact: false,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"max\") {\n              const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n              if (tooBig) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  code: ZodIssueCode.too_big,\n                  maximum: check.value,\n                  type: \"number\",\n                  inclusive: check.inclusive,\n                  exact: false,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"multipleOf\") {\n              if (floatSafeRemainder(input.data, check.value) !== 0) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  code: ZodIssueCode.not_multiple_of,\n                  multipleOf: check.value,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"finite\") {\n              if (!Number.isFinite(input.data)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  code: ZodIssueCode.not_finite,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else {\n              util.assertNever(check);\n            }\n          }\n          return { status: status.value, value: input.data };\n        }\n        gte(value, message) {\n          return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n        }\n        gt(value, message) {\n          return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n        }\n        lte(value, message) {\n          return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n        }\n        lt(value, message) {\n          return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n        }\n        setLimit(kind, value, inclusive, message) {\n          return new _ZodNumber({\n            ...this._def,\n            checks: [\n              ...this._def.checks,\n              {\n                kind,\n                value,\n                inclusive,\n                message: errorUtil.toString(message)\n              }\n            ]\n          });\n        }\n        _addCheck(check) {\n          return new _ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check]\n          });\n        }\n        int(message) {\n          return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message)\n          });\n        }\n        positive(message) {\n          return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message)\n          });\n        }\n        negative(message) {\n          return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message)\n          });\n        }\n        nonpositive(message) {\n          return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message)\n          });\n        }\n        nonnegative(message) {\n          return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message)\n          });\n        }\n        multipleOf(value, message) {\n          return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message)\n          });\n        }\n        finite(message) {\n          return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message)\n          });\n        }\n        safe(message) {\n          return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message)\n          })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message)\n          });\n        }\n        get minValue() {\n          let min = null;\n          for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n              if (min === null || ch.value > min)\n                min = ch.value;\n            }\n          }\n          return min;\n        }\n        get maxValue() {\n          let max = null;\n          for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n              if (max === null || ch.value < max)\n                max = ch.value;\n            }\n          }\n          return max;\n        }\n        get isInt() {\n          return !!this._def.checks.find((ch) => ch.kind === \"int\" || ch.kind === \"multipleOf\" && util.isInteger(ch.value));\n        }\n        get isFinite() {\n          let max = null;\n          let min = null;\n          for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" || ch.kind === \"int\" || ch.kind === \"multipleOf\") {\n              return true;\n            } else if (ch.kind === \"min\") {\n              if (min === null || ch.value > min)\n                min = ch.value;\n            } else if (ch.kind === \"max\") {\n              if (max === null || ch.value < max)\n                max = ch.value;\n            }\n          }\n          return Number.isFinite(min) && Number.isFinite(max);\n        }\n      };\n      ZodNumber.create = (params) => {\n        return new ZodNumber({\n          checks: [],\n          typeName: ZodFirstPartyTypeKind.ZodNumber,\n          coerce: params?.coerce || false,\n          ...processCreateParams(params)\n        });\n      };\n      ZodBigInt = class _ZodBigInt extends ZodType {\n        constructor() {\n          super(...arguments);\n          this.min = this.gte;\n          this.max = this.lte;\n        }\n        _parse(input) {\n          if (this._def.coerce) {\n            try {\n              input.data = BigInt(input.data);\n            } catch {\n              return this._getInvalidInput(input);\n            }\n          }\n          const parsedType = this._getType(input);\n          if (parsedType !== ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n          }\n          let ctx = void 0;\n          const status = new ParseStatus();\n          for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n              const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n              if (tooSmall) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  code: ZodIssueCode.too_small,\n                  type: \"bigint\",\n                  minimum: check.value,\n                  inclusive: check.inclusive,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"max\") {\n              const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n              if (tooBig) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  code: ZodIssueCode.too_big,\n                  type: \"bigint\",\n                  maximum: check.value,\n                  inclusive: check.inclusive,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"multipleOf\") {\n              if (input.data % check.value !== BigInt(0)) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  code: ZodIssueCode.not_multiple_of,\n                  multipleOf: check.value,\n                  message: check.message\n                });\n                status.dirty();\n              }\n            } else {\n              util.assertNever(check);\n            }\n          }\n          return { status: status.value, value: input.data };\n        }\n        _getInvalidInput(input) {\n          const ctx = this._getOrReturnCtx(input);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.bigint,\n            received: ctx.parsedType\n          });\n          return INVALID;\n        }\n        gte(value, message) {\n          return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n        }\n        gt(value, message) {\n          return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n        }\n        lte(value, message) {\n          return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n        }\n        lt(value, message) {\n          return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n        }\n        setLimit(kind, value, inclusive, message) {\n          return new _ZodBigInt({\n            ...this._def,\n            checks: [\n              ...this._def.checks,\n              {\n                kind,\n                value,\n                inclusive,\n                message: errorUtil.toString(message)\n              }\n            ]\n          });\n        }\n        _addCheck(check) {\n          return new _ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check]\n          });\n        }\n        positive(message) {\n          return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message)\n          });\n        }\n        negative(message) {\n          return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message)\n          });\n        }\n        nonpositive(message) {\n          return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message)\n          });\n        }\n        nonnegative(message) {\n          return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message)\n          });\n        }\n        multipleOf(value, message) {\n          return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message)\n          });\n        }\n        get minValue() {\n          let min = null;\n          for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n              if (min === null || ch.value > min)\n                min = ch.value;\n            }\n          }\n          return min;\n        }\n        get maxValue() {\n          let max = null;\n          for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n              if (max === null || ch.value < max)\n                max = ch.value;\n            }\n          }\n          return max;\n        }\n      };\n      ZodBigInt.create = (params) => {\n        return new ZodBigInt({\n          checks: [],\n          typeName: ZodFirstPartyTypeKind.ZodBigInt,\n          coerce: params?.coerce ?? false,\n          ...processCreateParams(params)\n        });\n      };\n      ZodBoolean = class extends ZodType {\n        _parse(input) {\n          if (this._def.coerce) {\n            input.data = Boolean(input.data);\n          }\n          const parsedType = this._getType(input);\n          if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.invalid_type,\n              expected: ZodParsedType.boolean,\n              received: ctx.parsedType\n            });\n            return INVALID;\n          }\n          return OK(input.data);\n        }\n      };\n      ZodBoolean.create = (params) => {\n        return new ZodBoolean({\n          typeName: ZodFirstPartyTypeKind.ZodBoolean,\n          coerce: params?.coerce || false,\n          ...processCreateParams(params)\n        });\n      };\n      ZodDate = class _ZodDate extends ZodType {\n        _parse(input) {\n          if (this._def.coerce) {\n            input.data = new Date(input.data);\n          }\n          const parsedType = this._getType(input);\n          if (parsedType !== ZodParsedType.date) {\n            const ctx2 = this._getOrReturnCtx(input);\n            addIssueToContext(ctx2, {\n              code: ZodIssueCode.invalid_type,\n              expected: ZodParsedType.date,\n              received: ctx2.parsedType\n            });\n            return INVALID;\n          }\n          if (Number.isNaN(input.data.getTime())) {\n            const ctx2 = this._getOrReturnCtx(input);\n            addIssueToContext(ctx2, {\n              code: ZodIssueCode.invalid_date\n            });\n            return INVALID;\n          }\n          const status = new ParseStatus();\n          let ctx = void 0;\n          for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n              if (input.data.getTime() < check.value) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  code: ZodIssueCode.too_small,\n                  message: check.message,\n                  inclusive: true,\n                  exact: false,\n                  minimum: check.value,\n                  type: \"date\"\n                });\n                status.dirty();\n              }\n            } else if (check.kind === \"max\") {\n              if (input.data.getTime() > check.value) {\n                ctx = this._getOrReturnCtx(input, ctx);\n                addIssueToContext(ctx, {\n                  code: ZodIssueCode.too_big,\n                  message: check.message,\n                  inclusive: true,\n                  exact: false,\n                  maximum: check.value,\n                  type: \"date\"\n                });\n                status.dirty();\n              }\n            } else {\n              util.assertNever(check);\n            }\n          }\n          return {\n            status: status.value,\n            value: new Date(input.data.getTime())\n          };\n        }\n        _addCheck(check) {\n          return new _ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check]\n          });\n        }\n        min(minDate, message) {\n          return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message)\n          });\n        }\n        max(maxDate, message) {\n          return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message)\n          });\n        }\n        get minDate() {\n          let min = null;\n          for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n              if (min === null || ch.value > min)\n                min = ch.value;\n            }\n          }\n          return min != null ? new Date(min) : null;\n        }\n        get maxDate() {\n          let max = null;\n          for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n              if (max === null || ch.value < max)\n                max = ch.value;\n            }\n          }\n          return max != null ? new Date(max) : null;\n        }\n      };\n      ZodDate.create = (params) => {\n        return new ZodDate({\n          checks: [],\n          coerce: params?.coerce || false,\n          typeName: ZodFirstPartyTypeKind.ZodDate,\n          ...processCreateParams(params)\n        });\n      };\n      ZodSymbol = class extends ZodType {\n        _parse(input) {\n          const parsedType = this._getType(input);\n          if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.invalid_type,\n              expected: ZodParsedType.symbol,\n              received: ctx.parsedType\n            });\n            return INVALID;\n          }\n          return OK(input.data);\n        }\n      };\n      ZodSymbol.create = (params) => {\n        return new ZodSymbol({\n          typeName: ZodFirstPartyTypeKind.ZodSymbol,\n          ...processCreateParams(params)\n        });\n      };\n      ZodUndefined = class extends ZodType {\n        _parse(input) {\n          const parsedType = this._getType(input);\n          if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.invalid_type,\n              expected: ZodParsedType.undefined,\n              received: ctx.parsedType\n            });\n            return INVALID;\n          }\n          return OK(input.data);\n        }\n      };\n      ZodUndefined.create = (params) => {\n        return new ZodUndefined({\n          typeName: ZodFirstPartyTypeKind.ZodUndefined,\n          ...processCreateParams(params)\n        });\n      };\n      ZodNull = class extends ZodType {\n        _parse(input) {\n          const parsedType = this._getType(input);\n          if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.invalid_type,\n              expected: ZodParsedType.null,\n              received: ctx.parsedType\n            });\n            return INVALID;\n          }\n          return OK(input.data);\n        }\n      };\n      ZodNull.create = (params) => {\n        return new ZodNull({\n          typeName: ZodFirstPartyTypeKind.ZodNull,\n          ...processCreateParams(params)\n        });\n      };\n      ZodAny = class extends ZodType {\n        constructor() {\n          super(...arguments);\n          this._any = true;\n        }\n        _parse(input) {\n          return OK(input.data);\n        }\n      };\n      ZodAny.create = (params) => {\n        return new ZodAny({\n          typeName: ZodFirstPartyTypeKind.ZodAny,\n          ...processCreateParams(params)\n        });\n      };\n      ZodUnknown = class extends ZodType {\n        constructor() {\n          super(...arguments);\n          this._unknown = true;\n        }\n        _parse(input) {\n          return OK(input.data);\n        }\n      };\n      ZodUnknown.create = (params) => {\n        return new ZodUnknown({\n          typeName: ZodFirstPartyTypeKind.ZodUnknown,\n          ...processCreateParams(params)\n        });\n      };\n      ZodNever = class extends ZodType {\n        _parse(input) {\n          const ctx = this._getOrReturnCtx(input);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType\n          });\n          return INVALID;\n        }\n      };\n      ZodNever.create = (params) => {\n        return new ZodNever({\n          typeName: ZodFirstPartyTypeKind.ZodNever,\n          ...processCreateParams(params)\n        });\n      };\n      ZodVoid = class extends ZodType {\n        _parse(input) {\n          const parsedType = this._getType(input);\n          if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.invalid_type,\n              expected: ZodParsedType.void,\n              received: ctx.parsedType\n            });\n            return INVALID;\n          }\n          return OK(input.data);\n        }\n      };\n      ZodVoid.create = (params) => {\n        return new ZodVoid({\n          typeName: ZodFirstPartyTypeKind.ZodVoid,\n          ...processCreateParams(params)\n        });\n      };\n      ZodArray = class _ZodArray extends ZodType {\n        _parse(input) {\n          const { ctx, status } = this._processInputParams(input);\n          const def = this._def;\n          if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.invalid_type,\n              expected: ZodParsedType.array,\n              received: ctx.parsedType\n            });\n            return INVALID;\n          }\n          if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n              addIssueToContext(ctx, {\n                code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                minimum: tooSmall ? def.exactLength.value : void 0,\n                maximum: tooBig ? def.exactLength.value : void 0,\n                type: \"array\",\n                inclusive: true,\n                exact: true,\n                message: def.exactLength.message\n              });\n              status.dirty();\n            }\n          }\n          if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n              addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: def.minLength.value,\n                type: \"array\",\n                inclusive: true,\n                exact: false,\n                message: def.minLength.message\n              });\n              status.dirty();\n            }\n          }\n          if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n              addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: def.maxLength.value,\n                type: \"array\",\n                inclusive: true,\n                exact: false,\n                message: def.maxLength.message\n              });\n              status.dirty();\n            }\n          }\n          if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n              return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result2) => {\n              return ParseStatus.mergeArray(status, result2);\n            });\n          }\n          const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n          });\n          return ParseStatus.mergeArray(status, result);\n        }\n        get element() {\n          return this._def.type;\n        }\n        min(minLength, message) {\n          return new _ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) }\n          });\n        }\n        max(maxLength, message) {\n          return new _ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) }\n          });\n        }\n        length(len, message) {\n          return new _ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) }\n          });\n        }\n        nonempty(message) {\n          return this.min(1, message);\n        }\n      };\n      ZodArray.create = (schema, params) => {\n        return new ZodArray({\n          type: schema,\n          minLength: null,\n          maxLength: null,\n          exactLength: null,\n          typeName: ZodFirstPartyTypeKind.ZodArray,\n          ...processCreateParams(params)\n        });\n      };\n      ZodObject = class _ZodObject extends ZodType {\n        constructor() {\n          super(...arguments);\n          this._cached = null;\n          this.nonstrict = this.passthrough;\n          this.augment = this.extend;\n        }\n        _getCached() {\n          if (this._cached !== null)\n            return this._cached;\n          const shape = this._def.shape();\n          const keys = util.objectKeys(shape);\n          this._cached = { shape, keys };\n          return this._cached;\n        }\n        _parse(input) {\n          const parsedType = this._getType(input);\n          if (parsedType !== ZodParsedType.object) {\n            const ctx2 = this._getOrReturnCtx(input);\n            addIssueToContext(ctx2, {\n              code: ZodIssueCode.invalid_type,\n              expected: ZodParsedType.object,\n              received: ctx2.parsedType\n            });\n            return INVALID;\n          }\n          const { status, ctx } = this._processInputParams(input);\n          const { shape, keys: shapeKeys } = this._getCached();\n          const extraKeys = [];\n          if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === \"strip\")) {\n            for (const key2 in ctx.data) {\n              if (!shapeKeys.includes(key2)) {\n                extraKeys.push(key2);\n              }\n            }\n          }\n          const pairs = [];\n          for (const key2 of shapeKeys) {\n            const keyValidator = shape[key2];\n            const value = ctx.data[key2];\n            pairs.push({\n              key: { status: \"valid\", value: key2 },\n              value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key2)),\n              alwaysSet: key2 in ctx.data\n            });\n          }\n          if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n              for (const key2 of extraKeys) {\n                pairs.push({\n                  key: { status: \"valid\", value: key2 },\n                  value: { status: \"valid\", value: ctx.data[key2] }\n                });\n              }\n            } else if (unknownKeys === \"strict\") {\n              if (extraKeys.length > 0) {\n                addIssueToContext(ctx, {\n                  code: ZodIssueCode.unrecognized_keys,\n                  keys: extraKeys\n                });\n                status.dirty();\n              }\n            } else if (unknownKeys === \"strip\") {\n            } else {\n              throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n          } else {\n            const catchall = this._def.catchall;\n            for (const key2 of extraKeys) {\n              const value = ctx.data[key2];\n              pairs.push({\n                key: { status: \"valid\", value: key2 },\n                value: catchall._parse(\n                  new ParseInputLazyPath(ctx, value, ctx.path, key2)\n                  //, ctx.child(key), value, getParsedType(value)\n                ),\n                alwaysSet: key2 in ctx.data\n              });\n            }\n          }\n          if (ctx.common.async) {\n            return Promise.resolve().then(async () => {\n              const syncPairs = [];\n              for (const pair of pairs) {\n                const key2 = await pair.key;\n                const value = await pair.value;\n                syncPairs.push({\n                  key: key2,\n                  value,\n                  alwaysSet: pair.alwaysSet\n                });\n              }\n              return syncPairs;\n            }).then((syncPairs) => {\n              return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n          } else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n          }\n        }\n        get shape() {\n          return this._def.shape();\n        }\n        strict(message) {\n          errorUtil.errToObj;\n          return new _ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...message !== void 0 ? {\n              errorMap: (issue, ctx) => {\n                const defaultError = this._def.errorMap?.(issue, ctx).message ?? ctx.defaultError;\n                if (issue.code === \"unrecognized_keys\")\n                  return {\n                    message: errorUtil.errToObj(message).message ?? defaultError\n                  };\n                return {\n                  message: defaultError\n                };\n              }\n            } : {}\n          });\n        }\n        strip() {\n          return new _ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\"\n          });\n        }\n        passthrough() {\n          return new _ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\"\n          });\n        }\n        // const AugmentFactory =\n        //   <Def extends ZodObjectDef>(def: Def) =>\n        //   <Augmentation extends ZodRawShape>(\n        //     augmentation: Augmentation\n        //   ): ZodObject<\n        //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n        //     Def[\"unknownKeys\"],\n        //     Def[\"catchall\"]\n        //   > => {\n        //     return new ZodObject({\n        //       ...def,\n        //       shape: () => ({\n        //         ...def.shape(),\n        //         ...augmentation,\n        //       }),\n        //     }) as any;\n        //   };\n        extend(augmentation) {\n          return new _ZodObject({\n            ...this._def,\n            shape: () => ({\n              ...this._def.shape(),\n              ...augmentation\n            })\n          });\n        }\n        /**\n         * Prior to zod@1.0.12 there was a bug in the\n         * inferred type of merged objects. Please\n         * upgrade if you are experiencing issues.\n         */\n        merge(merging) {\n          const merged = new _ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n              ...this._def.shape(),\n              ...merging._def.shape()\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject\n          });\n          return merged;\n        }\n        // merge<\n        //   Incoming extends AnyZodObject,\n        //   Augmentation extends Incoming[\"shape\"],\n        //   NewOutput extends {\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   },\n        //   NewInput extends {\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }\n        // >(\n        //   merging: Incoming\n        // ): ZodObject<\n        //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n        //   Incoming[\"_def\"][\"unknownKeys\"],\n        //   Incoming[\"_def\"][\"catchall\"],\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   const merged: any = new ZodObject({\n        //     unknownKeys: merging._def.unknownKeys,\n        //     catchall: merging._def.catchall,\n        //     shape: () =>\n        //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n        //     typeName: ZodFirstPartyTypeKind.ZodObject,\n        //   }) as any;\n        //   return merged;\n        // }\n        setKey(key2, schema) {\n          return this.augment({ [key2]: schema });\n        }\n        // merge<Incoming extends AnyZodObject>(\n        //   merging: Incoming\n        // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n        // ZodObject<\n        //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n        //   Incoming[\"_def\"][\"unknownKeys\"],\n        //   Incoming[\"_def\"][\"catchall\"]\n        // > {\n        //   // const mergedShape = objectUtil.mergeShapes(\n        //   //   this._def.shape(),\n        //   //   merging._def.shape()\n        //   // );\n        //   const merged: any = new ZodObject({\n        //     unknownKeys: merging._def.unknownKeys,\n        //     catchall: merging._def.catchall,\n        //     shape: () =>\n        //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n        //     typeName: ZodFirstPartyTypeKind.ZodObject,\n        //   }) as any;\n        //   return merged;\n        // }\n        catchall(index) {\n          return new _ZodObject({\n            ...this._def,\n            catchall: index\n          });\n        }\n        pick(mask2) {\n          const shape = {};\n          for (const key2 of util.objectKeys(mask2)) {\n            if (mask2[key2] && this.shape[key2]) {\n              shape[key2] = this.shape[key2];\n            }\n          }\n          return new _ZodObject({\n            ...this._def,\n            shape: () => shape\n          });\n        }\n        omit(mask2) {\n          const shape = {};\n          for (const key2 of util.objectKeys(this.shape)) {\n            if (!mask2[key2]) {\n              shape[key2] = this.shape[key2];\n            }\n          }\n          return new _ZodObject({\n            ...this._def,\n            shape: () => shape\n          });\n        }\n        /**\n         * @deprecated\n         */\n        deepPartial() {\n          return deepPartialify(this);\n        }\n        partial(mask2) {\n          const newShape = {};\n          for (const key2 of util.objectKeys(this.shape)) {\n            const fieldSchema = this.shape[key2];\n            if (mask2 && !mask2[key2]) {\n              newShape[key2] = fieldSchema;\n            } else {\n              newShape[key2] = fieldSchema.optional();\n            }\n          }\n          return new _ZodObject({\n            ...this._def,\n            shape: () => newShape\n          });\n        }\n        required(mask2) {\n          const newShape = {};\n          for (const key2 of util.objectKeys(this.shape)) {\n            if (mask2 && !mask2[key2]) {\n              newShape[key2] = this.shape[key2];\n            } else {\n              const fieldSchema = this.shape[key2];\n              let newField = fieldSchema;\n              while (newField instanceof ZodOptional) {\n                newField = newField._def.innerType;\n              }\n              newShape[key2] = newField;\n            }\n          }\n          return new _ZodObject({\n            ...this._def,\n            shape: () => newShape\n          });\n        }\n        keyof() {\n          return createZodEnum(util.objectKeys(this.shape));\n        }\n      };\n      ZodObject.create = (shape, params) => {\n        return new ZodObject({\n          shape: () => shape,\n          unknownKeys: \"strip\",\n          catchall: ZodNever.create(),\n          typeName: ZodFirstPartyTypeKind.ZodObject,\n          ...processCreateParams(params)\n        });\n      };\n      ZodObject.strictCreate = (shape, params) => {\n        return new ZodObject({\n          shape: () => shape,\n          unknownKeys: \"strict\",\n          catchall: ZodNever.create(),\n          typeName: ZodFirstPartyTypeKind.ZodObject,\n          ...processCreateParams(params)\n        });\n      };\n      ZodObject.lazycreate = (shape, params) => {\n        return new ZodObject({\n          shape,\n          unknownKeys: \"strip\",\n          catchall: ZodNever.create(),\n          typeName: ZodFirstPartyTypeKind.ZodObject,\n          ...processCreateParams(params)\n        });\n      };\n      ZodUnion = class extends ZodType {\n        _parse(input) {\n          const { ctx } = this._processInputParams(input);\n          const options = this._def.options;\n          function handleResults(results) {\n            for (const result of results) {\n              if (result.result.status === \"valid\") {\n                return result.result;\n              }\n            }\n            for (const result of results) {\n              if (result.result.status === \"dirty\") {\n                ctx.common.issues.push(...result.ctx.common.issues);\n                return result.result;\n              }\n            }\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.invalid_union,\n              unionErrors\n            });\n            return INVALID;\n          }\n          if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n              const childCtx = {\n                ...ctx,\n                common: {\n                  ...ctx.common,\n                  issues: []\n                },\n                parent: null\n              };\n              return {\n                result: await option._parseAsync({\n                  data: ctx.data,\n                  path: ctx.path,\n                  parent: childCtx\n                }),\n                ctx: childCtx\n              };\n            })).then(handleResults);\n          } else {\n            let dirty = void 0;\n            const issues = [];\n            for (const option of options) {\n              const childCtx = {\n                ...ctx,\n                common: {\n                  ...ctx.common,\n                  issues: []\n                },\n                parent: null\n              };\n              const result = option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: childCtx\n              });\n              if (result.status === \"valid\") {\n                return result;\n              } else if (result.status === \"dirty\" && !dirty) {\n                dirty = { result, ctx: childCtx };\n              }\n              if (childCtx.common.issues.length) {\n                issues.push(childCtx.common.issues);\n              }\n            }\n            if (dirty) {\n              ctx.common.issues.push(...dirty.ctx.common.issues);\n              return dirty.result;\n            }\n            const unionErrors = issues.map((issues2) => new ZodError(issues2));\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.invalid_union,\n              unionErrors\n            });\n            return INVALID;\n          }\n        }\n        get options() {\n          return this._def.options;\n        }\n      };\n      ZodUnion.create = (types, params) => {\n        return new ZodUnion({\n          options: types,\n          typeName: ZodFirstPartyTypeKind.ZodUnion,\n          ...processCreateParams(params)\n        });\n      };\n      getDiscriminator = (type) => {\n        if (type instanceof ZodLazy) {\n          return getDiscriminator(type.schema);\n        } else if (type instanceof ZodEffects) {\n          return getDiscriminator(type.innerType());\n        } else if (type instanceof ZodLiteral) {\n          return [type.value];\n        } else if (type instanceof ZodEnum) {\n          return type.options;\n        } else if (type instanceof ZodNativeEnum) {\n          return util.objectValues(type.enum);\n        } else if (type instanceof ZodDefault) {\n          return getDiscriminator(type._def.innerType);\n        } else if (type instanceof ZodUndefined) {\n          return [void 0];\n        } else if (type instanceof ZodNull) {\n          return [null];\n        } else if (type instanceof ZodOptional) {\n          return [void 0, ...getDiscriminator(type.unwrap())];\n        } else if (type instanceof ZodNullable) {\n          return [null, ...getDiscriminator(type.unwrap())];\n        } else if (type instanceof ZodBranded) {\n          return getDiscriminator(type.unwrap());\n        } else if (type instanceof ZodReadonly) {\n          return getDiscriminator(type.unwrap());\n        } else if (type instanceof ZodCatch) {\n          return getDiscriminator(type._def.innerType);\n        } else {\n          return [];\n        }\n      };\n      ZodDiscriminatedUnion = class _ZodDiscriminatedUnion extends ZodType {\n        _parse(input) {\n          const { ctx } = this._processInputParams(input);\n          if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.invalid_type,\n              expected: ZodParsedType.object,\n              received: ctx.parsedType\n            });\n            return INVALID;\n          }\n          const discriminator = this.discriminator;\n          const discriminatorValue = ctx.data[discriminator];\n          const option = this.optionsMap.get(discriminatorValue);\n          if (!option) {\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.invalid_union_discriminator,\n              options: Array.from(this.optionsMap.keys()),\n              path: [discriminator]\n            });\n            return INVALID;\n          }\n          if (ctx.common.async) {\n            return option._parseAsync({\n              data: ctx.data,\n              path: ctx.path,\n              parent: ctx\n            });\n          } else {\n            return option._parseSync({\n              data: ctx.data,\n              path: ctx.path,\n              parent: ctx\n            });\n          }\n        }\n        get discriminator() {\n          return this._def.discriminator;\n        }\n        get options() {\n          return this._def.options;\n        }\n        get optionsMap() {\n          return this._def.optionsMap;\n        }\n        /**\n         * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n         * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n         * have a different value for each object in the union.\n         * @param discriminator the name of the discriminator property\n         * @param types an array of object schemas\n         * @param params\n         */\n        static create(discriminator, options, params) {\n          const optionsMap = /* @__PURE__ */ new Map();\n          for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n              throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n              if (optionsMap.has(value)) {\n                throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n              }\n              optionsMap.set(value, type);\n            }\n          }\n          return new _ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params)\n          });\n        }\n      };\n      ZodIntersection = class extends ZodType {\n        _parse(input) {\n          const { status, ctx } = this._processInputParams(input);\n          const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n              return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n              addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_intersection_types\n              });\n              return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n              status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n          };\n          if (ctx.common.async) {\n            return Promise.all([\n              this._def.left._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n              }),\n              this._def.right._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n              })\n            ]).then(([left, right]) => handleParsed(left, right));\n          } else {\n            return handleParsed(this._def.left._parseSync({\n              data: ctx.data,\n              path: ctx.path,\n              parent: ctx\n            }), this._def.right._parseSync({\n              data: ctx.data,\n              path: ctx.path,\n              parent: ctx\n            }));\n          }\n        }\n      };\n      ZodIntersection.create = (left, right, params) => {\n        return new ZodIntersection({\n          left,\n          right,\n          typeName: ZodFirstPartyTypeKind.ZodIntersection,\n          ...processCreateParams(params)\n        });\n      };\n      ZodTuple = class _ZodTuple extends ZodType {\n        _parse(input) {\n          const { status, ctx } = this._processInputParams(input);\n          if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.invalid_type,\n              expected: ZodParsedType.array,\n              received: ctx.parsedType\n            });\n            return INVALID;\n          }\n          if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.too_small,\n              minimum: this._def.items.length,\n              inclusive: true,\n              exact: false,\n              type: \"array\"\n            });\n            return INVALID;\n          }\n          const rest = this._def.rest;\n          if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.too_big,\n              maximum: this._def.items.length,\n              inclusive: true,\n              exact: false,\n              type: \"array\"\n            });\n            status.dirty();\n          }\n          const items = [...ctx.data].map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n              return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n          }).filter((x) => !!x);\n          if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n              return ParseStatus.mergeArray(status, results);\n            });\n          } else {\n            return ParseStatus.mergeArray(status, items);\n          }\n        }\n        get items() {\n          return this._def.items;\n        }\n        rest(rest) {\n          return new _ZodTuple({\n            ...this._def,\n            rest\n          });\n        }\n      };\n      ZodTuple.create = (schemas, params) => {\n        if (!Array.isArray(schemas)) {\n          throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n        }\n        return new ZodTuple({\n          items: schemas,\n          typeName: ZodFirstPartyTypeKind.ZodTuple,\n          rest: null,\n          ...processCreateParams(params)\n        });\n      };\n      ZodRecord = class _ZodRecord extends ZodType {\n        get keySchema() {\n          return this._def.keyType;\n        }\n        get valueSchema() {\n          return this._def.valueType;\n        }\n        _parse(input) {\n          const { status, ctx } = this._processInputParams(input);\n          if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.invalid_type,\n              expected: ZodParsedType.object,\n              received: ctx.parsedType\n            });\n            return INVALID;\n          }\n          const pairs = [];\n          const keyType = this._def.keyType;\n          const valueType = this._def.valueType;\n          for (const key2 in ctx.data) {\n            pairs.push({\n              key: keyType._parse(new ParseInputLazyPath(ctx, key2, ctx.path, key2)),\n              value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key2], ctx.path, key2)),\n              alwaysSet: key2 in ctx.data\n            });\n          }\n          if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n          } else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n          }\n        }\n        get element() {\n          return this._def.valueType;\n        }\n        static create(first, second, third) {\n          if (second instanceof ZodType) {\n            return new _ZodRecord({\n              keyType: first,\n              valueType: second,\n              typeName: ZodFirstPartyTypeKind.ZodRecord,\n              ...processCreateParams(third)\n            });\n          }\n          return new _ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second)\n          });\n        }\n      };\n      ZodMap = class extends ZodType {\n        get keySchema() {\n          return this._def.keyType;\n        }\n        get valueSchema() {\n          return this._def.valueType;\n        }\n        _parse(input) {\n          const { status, ctx } = this._processInputParams(input);\n          if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.invalid_type,\n              expected: ZodParsedType.map,\n              received: ctx.parsedType\n            });\n            return INVALID;\n          }\n          const keyType = this._def.keyType;\n          const valueType = this._def.valueType;\n          const pairs = [...ctx.data.entries()].map(([key2, value], index) => {\n            return {\n              key: keyType._parse(new ParseInputLazyPath(ctx, key2, ctx.path, [index, \"key\"])),\n              value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"]))\n            };\n          });\n          if (ctx.common.async) {\n            const finalMap = /* @__PURE__ */ new Map();\n            return Promise.resolve().then(async () => {\n              for (const pair of pairs) {\n                const key2 = await pair.key;\n                const value = await pair.value;\n                if (key2.status === \"aborted\" || value.status === \"aborted\") {\n                  return INVALID;\n                }\n                if (key2.status === \"dirty\" || value.status === \"dirty\") {\n                  status.dirty();\n                }\n                finalMap.set(key2.value, value.value);\n              }\n              return { status: status.value, value: finalMap };\n            });\n          } else {\n            const finalMap = /* @__PURE__ */ new Map();\n            for (const pair of pairs) {\n              const key2 = pair.key;\n              const value = pair.value;\n              if (key2.status === \"aborted\" || value.status === \"aborted\") {\n                return INVALID;\n              }\n              if (key2.status === \"dirty\" || value.status === \"dirty\") {\n                status.dirty();\n              }\n              finalMap.set(key2.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n          }\n        }\n      };\n      ZodMap.create = (keyType, valueType, params) => {\n        return new ZodMap({\n          valueType,\n          keyType,\n          typeName: ZodFirstPartyTypeKind.ZodMap,\n          ...processCreateParams(params)\n        });\n      };\n      ZodSet = class _ZodSet extends ZodType {\n        _parse(input) {\n          const { status, ctx } = this._processInputParams(input);\n          if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.invalid_type,\n              expected: ZodParsedType.set,\n              received: ctx.parsedType\n            });\n            return INVALID;\n          }\n          const def = this._def;\n          if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n              addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: def.minSize.value,\n                type: \"set\",\n                inclusive: true,\n                exact: false,\n                message: def.minSize.message\n              });\n              status.dirty();\n            }\n          }\n          if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n              addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: def.maxSize.value,\n                type: \"set\",\n                inclusive: true,\n                exact: false,\n                message: def.maxSize.message\n              });\n              status.dirty();\n            }\n          }\n          const valueType = this._def.valueType;\n          function finalizeSet(elements2) {\n            const parsedSet = /* @__PURE__ */ new Set();\n            for (const element of elements2) {\n              if (element.status === \"aborted\")\n                return INVALID;\n              if (element.status === \"dirty\")\n                status.dirty();\n              parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n          }\n          const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n          if (ctx.common.async) {\n            return Promise.all(elements).then((elements2) => finalizeSet(elements2));\n          } else {\n            return finalizeSet(elements);\n          }\n        }\n        min(minSize, message) {\n          return new _ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) }\n          });\n        }\n        max(maxSize, message) {\n          return new _ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) }\n          });\n        }\n        size(size, message) {\n          return this.min(size, message).max(size, message);\n        }\n        nonempty(message) {\n          return this.min(1, message);\n        }\n      };\n      ZodSet.create = (valueType, params) => {\n        return new ZodSet({\n          valueType,\n          minSize: null,\n          maxSize: null,\n          typeName: ZodFirstPartyTypeKind.ZodSet,\n          ...processCreateParams(params)\n        });\n      };\n      ZodFunction = class _ZodFunction extends ZodType {\n        constructor() {\n          super(...arguments);\n          this.validate = this.implement;\n        }\n        _parse(input) {\n          const { ctx } = this._processInputParams(input);\n          if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.invalid_type,\n              expected: ZodParsedType.function,\n              received: ctx.parsedType\n            });\n            return INVALID;\n          }\n          function makeArgsIssue(args, error) {\n            return makeIssue({\n              data: args,\n              path: ctx.path,\n              errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), en_default].filter((x) => !!x),\n              issueData: {\n                code: ZodIssueCode.invalid_arguments,\n                argumentsError: error\n              }\n            });\n          }\n          function makeReturnsIssue(returns, error) {\n            return makeIssue({\n              data: returns,\n              path: ctx.path,\n              errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), en_default].filter((x) => !!x),\n              issueData: {\n                code: ZodIssueCode.invalid_return_type,\n                returnTypeError: error\n              }\n            });\n          }\n          const params = { errorMap: ctx.common.contextualErrorMap };\n          const fn = ctx.data;\n          if (this._def.returns instanceof ZodPromise) {\n            const me = this;\n            return OK(async function(...args) {\n              const error = new ZodError([]);\n              const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {\n                error.addIssue(makeArgsIssue(args, e));\n                throw error;\n              });\n              const result = await Reflect.apply(fn, this, parsedArgs);\n              const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {\n                error.addIssue(makeReturnsIssue(result, e));\n                throw error;\n              });\n              return parsedReturns;\n            });\n          } else {\n            const me = this;\n            return OK(function(...args) {\n              const parsedArgs = me._def.args.safeParse(args, params);\n              if (!parsedArgs.success) {\n                throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n              }\n              const result = Reflect.apply(fn, this, parsedArgs.data);\n              const parsedReturns = me._def.returns.safeParse(result, params);\n              if (!parsedReturns.success) {\n                throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n              }\n              return parsedReturns.data;\n            });\n          }\n        }\n        parameters() {\n          return this._def.args;\n        }\n        returnType() {\n          return this._def.returns;\n        }\n        args(...items) {\n          return new _ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create())\n          });\n        }\n        returns(returnType) {\n          return new _ZodFunction({\n            ...this._def,\n            returns: returnType\n          });\n        }\n        implement(func) {\n          const validatedFunc = this.parse(func);\n          return validatedFunc;\n        }\n        strictImplement(func) {\n          const validatedFunc = this.parse(func);\n          return validatedFunc;\n        }\n        static create(args, returns, params) {\n          return new _ZodFunction({\n            args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params)\n          });\n        }\n      };\n      ZodLazy = class extends ZodType {\n        get schema() {\n          return this._def.getter();\n        }\n        _parse(input) {\n          const { ctx } = this._processInputParams(input);\n          const lazySchema = this._def.getter();\n          return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n        }\n      };\n      ZodLazy.create = (getter, params) => {\n        return new ZodLazy({\n          getter,\n          typeName: ZodFirstPartyTypeKind.ZodLazy,\n          ...processCreateParams(params)\n        });\n      };\n      ZodLiteral = class extends ZodType {\n        _parse(input) {\n          if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n              received: ctx.data,\n              code: ZodIssueCode.invalid_literal,\n              expected: this._def.value\n            });\n            return INVALID;\n          }\n          return { status: \"valid\", value: input.data };\n        }\n        get value() {\n          return this._def.value;\n        }\n      };\n      ZodLiteral.create = (value, params) => {\n        return new ZodLiteral({\n          value,\n          typeName: ZodFirstPartyTypeKind.ZodLiteral,\n          ...processCreateParams(params)\n        });\n      };\n      ZodEnum = class _ZodEnum extends ZodType {\n        _parse(input) {\n          if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n              expected: util.joinValues(expectedValues),\n              received: ctx.parsedType,\n              code: ZodIssueCode.invalid_type\n            });\n            return INVALID;\n          }\n          if (!this._cache) {\n            this._cache = new Set(this._def.values);\n          }\n          if (!this._cache.has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n              received: ctx.data,\n              code: ZodIssueCode.invalid_enum_value,\n              options: expectedValues\n            });\n            return INVALID;\n          }\n          return OK(input.data);\n        }\n        get options() {\n          return this._def.values;\n        }\n        get enum() {\n          const enumValues = {};\n          for (const val of this._def.values) {\n            enumValues[val] = val;\n          }\n          return enumValues;\n        }\n        get Values() {\n          const enumValues = {};\n          for (const val of this._def.values) {\n            enumValues[val] = val;\n          }\n          return enumValues;\n        }\n        get Enum() {\n          const enumValues = {};\n          for (const val of this._def.values) {\n            enumValues[val] = val;\n          }\n          return enumValues;\n        }\n        extract(values, newDef = this._def) {\n          return _ZodEnum.create(values, {\n            ...this._def,\n            ...newDef\n          });\n        }\n        exclude(values, newDef = this._def) {\n          return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef\n          });\n        }\n      };\n      ZodEnum.create = createZodEnum;\n      ZodNativeEnum = class extends ZodType {\n        _parse(input) {\n          const nativeEnumValues = util.getValidEnumValues(this._def.values);\n          const ctx = this._getOrReturnCtx(input);\n          if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n              expected: util.joinValues(expectedValues),\n              received: ctx.parsedType,\n              code: ZodIssueCode.invalid_type\n            });\n            return INVALID;\n          }\n          if (!this._cache) {\n            this._cache = new Set(util.getValidEnumValues(this._def.values));\n          }\n          if (!this._cache.has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n              received: ctx.data,\n              code: ZodIssueCode.invalid_enum_value,\n              options: expectedValues\n            });\n            return INVALID;\n          }\n          return OK(input.data);\n        }\n        get enum() {\n          return this._def.values;\n        }\n      };\n      ZodNativeEnum.create = (values, params) => {\n        return new ZodNativeEnum({\n          values,\n          typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n          ...processCreateParams(params)\n        });\n      };\n      ZodPromise = class extends ZodType {\n        unwrap() {\n          return this._def.type;\n        }\n        _parse(input) {\n          const { ctx } = this._processInputParams(input);\n          if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.invalid_type,\n              expected: ZodParsedType.promise,\n              received: ctx.parsedType\n            });\n            return INVALID;\n          }\n          const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);\n          return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n              path: ctx.path,\n              errorMap: ctx.common.contextualErrorMap\n            });\n          }));\n        }\n      };\n      ZodPromise.create = (schema, params) => {\n        return new ZodPromise({\n          type: schema,\n          typeName: ZodFirstPartyTypeKind.ZodPromise,\n          ...processCreateParams(params)\n        });\n      };\n      ZodEffects = class extends ZodType {\n        innerType() {\n          return this._def.schema;\n        }\n        sourceType() {\n          return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;\n        }\n        _parse(input) {\n          const { status, ctx } = this._processInputParams(input);\n          const effect = this._def.effect || null;\n          const checkCtx = {\n            addIssue: (arg) => {\n              addIssueToContext(ctx, arg);\n              if (arg.fatal) {\n                status.abort();\n              } else {\n                status.dirty();\n              }\n            },\n            get path() {\n              return ctx.path;\n            }\n          };\n          checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n          if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n              return Promise.resolve(processed).then(async (processed2) => {\n                if (status.value === \"aborted\")\n                  return INVALID;\n                const result = await this._def.schema._parseAsync({\n                  data: processed2,\n                  path: ctx.path,\n                  parent: ctx\n                });\n                if (result.status === \"aborted\")\n                  return INVALID;\n                if (result.status === \"dirty\")\n                  return DIRTY(result.value);\n                if (status.value === \"dirty\")\n                  return DIRTY(result.value);\n                return result;\n              });\n            } else {\n              if (status.value === \"aborted\")\n                return INVALID;\n              const result = this._def.schema._parseSync({\n                data: processed,\n                path: ctx.path,\n                parent: ctx\n              });\n              if (result.status === \"aborted\")\n                return INVALID;\n              if (result.status === \"dirty\")\n                return DIRTY(result.value);\n              if (status.value === \"dirty\")\n                return DIRTY(result.value);\n              return result;\n            }\n          }\n          if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n              const result = effect.refinement(acc, checkCtx);\n              if (ctx.common.async) {\n                return Promise.resolve(result);\n              }\n              if (result instanceof Promise) {\n                throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n              }\n              return acc;\n            };\n            if (ctx.common.async === false) {\n              const inner = this._def.schema._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n              });\n              if (inner.status === \"aborted\")\n                return INVALID;\n              if (inner.status === \"dirty\")\n                status.dirty();\n              executeRefinement(inner.value);\n              return { status: status.value, value: inner.value };\n            } else {\n              return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {\n                if (inner.status === \"aborted\")\n                  return INVALID;\n                if (inner.status === \"dirty\")\n                  status.dirty();\n                return executeRefinement(inner.value).then(() => {\n                  return { status: status.value, value: inner.value };\n                });\n              });\n            }\n          }\n          if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n              const base2 = this._def.schema._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n              });\n              if (!isValid(base2))\n                return INVALID;\n              const result = effect.transform(base2.value, checkCtx);\n              if (result instanceof Promise) {\n                throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n              }\n              return { status: status.value, value: result };\n            } else {\n              return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base2) => {\n                if (!isValid(base2))\n                  return INVALID;\n                return Promise.resolve(effect.transform(base2.value, checkCtx)).then((result) => ({\n                  status: status.value,\n                  value: result\n                }));\n              });\n            }\n          }\n          util.assertNever(effect);\n        }\n      };\n      ZodEffects.create = (schema, effect, params) => {\n        return new ZodEffects({\n          schema,\n          typeName: ZodFirstPartyTypeKind.ZodEffects,\n          effect,\n          ...processCreateParams(params)\n        });\n      };\n      ZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n        return new ZodEffects({\n          schema,\n          effect: { type: \"preprocess\", transform: preprocess },\n          typeName: ZodFirstPartyTypeKind.ZodEffects,\n          ...processCreateParams(params)\n        });\n      };\n      ZodOptional = class extends ZodType {\n        _parse(input) {\n          const parsedType = this._getType(input);\n          if (parsedType === ZodParsedType.undefined) {\n            return OK(void 0);\n          }\n          return this._def.innerType._parse(input);\n        }\n        unwrap() {\n          return this._def.innerType;\n        }\n      };\n      ZodOptional.create = (type, params) => {\n        return new ZodOptional({\n          innerType: type,\n          typeName: ZodFirstPartyTypeKind.ZodOptional,\n          ...processCreateParams(params)\n        });\n      };\n      ZodNullable = class extends ZodType {\n        _parse(input) {\n          const parsedType = this._getType(input);\n          if (parsedType === ZodParsedType.null) {\n            return OK(null);\n          }\n          return this._def.innerType._parse(input);\n        }\n        unwrap() {\n          return this._def.innerType;\n        }\n      };\n      ZodNullable.create = (type, params) => {\n        return new ZodNullable({\n          innerType: type,\n          typeName: ZodFirstPartyTypeKind.ZodNullable,\n          ...processCreateParams(params)\n        });\n      };\n      ZodDefault = class extends ZodType {\n        _parse(input) {\n          const { ctx } = this._processInputParams(input);\n          let data = ctx.data;\n          if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n          }\n          return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx\n          });\n        }\n        removeDefault() {\n          return this._def.innerType;\n        }\n      };\n      ZodDefault.create = (type, params) => {\n        return new ZodDefault({\n          innerType: type,\n          typeName: ZodFirstPartyTypeKind.ZodDefault,\n          defaultValue: typeof params.default === \"function\" ? params.default : () => params.default,\n          ...processCreateParams(params)\n        });\n      };\n      ZodCatch = class extends ZodType {\n        _parse(input) {\n          const { ctx } = this._processInputParams(input);\n          const newCtx = {\n            ...ctx,\n            common: {\n              ...ctx.common,\n              issues: []\n            }\n          };\n          const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n              ...newCtx\n            }\n          });\n          if (isAsync(result)) {\n            return result.then((result2) => {\n              return {\n                status: \"valid\",\n                value: result2.status === \"valid\" ? result2.value : this._def.catchValue({\n                  get error() {\n                    return new ZodError(newCtx.common.issues);\n                  },\n                  input: newCtx.data\n                })\n              };\n            });\n          } else {\n            return {\n              status: \"valid\",\n              value: result.status === \"valid\" ? result.value : this._def.catchValue({\n                get error() {\n                  return new ZodError(newCtx.common.issues);\n                },\n                input: newCtx.data\n              })\n            };\n          }\n        }\n        removeCatch() {\n          return this._def.innerType;\n        }\n      };\n      ZodCatch.create = (type, params) => {\n        return new ZodCatch({\n          innerType: type,\n          typeName: ZodFirstPartyTypeKind.ZodCatch,\n          catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n          ...processCreateParams(params)\n        });\n      };\n      ZodNaN = class extends ZodType {\n        _parse(input) {\n          const parsedType = this._getType(input);\n          if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.invalid_type,\n              expected: ZodParsedType.nan,\n              received: ctx.parsedType\n            });\n            return INVALID;\n          }\n          return { status: \"valid\", value: input.data };\n        }\n      };\n      ZodNaN.create = (params) => {\n        return new ZodNaN({\n          typeName: ZodFirstPartyTypeKind.ZodNaN,\n          ...processCreateParams(params)\n        });\n      };\n      BRAND = Symbol(\"zod_brand\");\n      ZodBranded = class extends ZodType {\n        _parse(input) {\n          const { ctx } = this._processInputParams(input);\n          const data = ctx.data;\n          return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx\n          });\n        }\n        unwrap() {\n          return this._def.type;\n        }\n      };\n      ZodPipeline = class _ZodPipeline extends ZodType {\n        _parse(input) {\n          const { status, ctx } = this._processInputParams(input);\n          if (ctx.common.async) {\n            const handleAsync = async () => {\n              const inResult = await this._def.in._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n              });\n              if (inResult.status === \"aborted\")\n                return INVALID;\n              if (inResult.status === \"dirty\") {\n                status.dirty();\n                return DIRTY(inResult.value);\n              } else {\n                return this._def.out._parseAsync({\n                  data: inResult.value,\n                  path: ctx.path,\n                  parent: ctx\n                });\n              }\n            };\n            return handleAsync();\n          } else {\n            const inResult = this._def.in._parseSync({\n              data: ctx.data,\n              path: ctx.path,\n              parent: ctx\n            });\n            if (inResult.status === \"aborted\")\n              return INVALID;\n            if (inResult.status === \"dirty\") {\n              status.dirty();\n              return {\n                status: \"dirty\",\n                value: inResult.value\n              };\n            } else {\n              return this._def.out._parseSync({\n                data: inResult.value,\n                path: ctx.path,\n                parent: ctx\n              });\n            }\n          }\n        }\n        static create(a, b2) {\n          return new _ZodPipeline({\n            in: a,\n            out: b2,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline\n          });\n        }\n      };\n      ZodReadonly = class extends ZodType {\n        _parse(input) {\n          const result = this._def.innerType._parse(input);\n          const freeze = (data) => {\n            if (isValid(data)) {\n              data.value = Object.freeze(data.value);\n            }\n            return data;\n          };\n          return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);\n        }\n        unwrap() {\n          return this._def.innerType;\n        }\n      };\n      ZodReadonly.create = (type, params) => {\n        return new ZodReadonly({\n          innerType: type,\n          typeName: ZodFirstPartyTypeKind.ZodReadonly,\n          ...processCreateParams(params)\n        });\n      };\n      late = {\n        object: ZodObject.lazycreate\n      };\n      (function(ZodFirstPartyTypeKind2) {\n        ZodFirstPartyTypeKind2[\"ZodString\"] = \"ZodString\";\n        ZodFirstPartyTypeKind2[\"ZodNumber\"] = \"ZodNumber\";\n        ZodFirstPartyTypeKind2[\"ZodNaN\"] = \"ZodNaN\";\n        ZodFirstPartyTypeKind2[\"ZodBigInt\"] = \"ZodBigInt\";\n        ZodFirstPartyTypeKind2[\"ZodBoolean\"] = \"ZodBoolean\";\n        ZodFirstPartyTypeKind2[\"ZodDate\"] = \"ZodDate\";\n        ZodFirstPartyTypeKind2[\"ZodSymbol\"] = \"ZodSymbol\";\n        ZodFirstPartyTypeKind2[\"ZodUndefined\"] = \"ZodUndefined\";\n        ZodFirstPartyTypeKind2[\"ZodNull\"] = \"ZodNull\";\n        ZodFirstPartyTypeKind2[\"ZodAny\"] = \"ZodAny\";\n        ZodFirstPartyTypeKind2[\"ZodUnknown\"] = \"ZodUnknown\";\n        ZodFirstPartyTypeKind2[\"ZodNever\"] = \"ZodNever\";\n        ZodFirstPartyTypeKind2[\"ZodVoid\"] = \"ZodVoid\";\n        ZodFirstPartyTypeKind2[\"ZodArray\"] = \"ZodArray\";\n        ZodFirstPartyTypeKind2[\"ZodObject\"] = \"ZodObject\";\n        ZodFirstPartyTypeKind2[\"ZodUnion\"] = \"ZodUnion\";\n        ZodFirstPartyTypeKind2[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n        ZodFirstPartyTypeKind2[\"ZodIntersection\"] = \"ZodIntersection\";\n        ZodFirstPartyTypeKind2[\"ZodTuple\"] = \"ZodTuple\";\n        ZodFirstPartyTypeKind2[\"ZodRecord\"] = \"ZodRecord\";\n        ZodFirstPartyTypeKind2[\"ZodMap\"] = \"ZodMap\";\n        ZodFirstPartyTypeKind2[\"ZodSet\"] = \"ZodSet\";\n        ZodFirstPartyTypeKind2[\"ZodFunction\"] = \"ZodFunction\";\n        ZodFirstPartyTypeKind2[\"ZodLazy\"] = \"ZodLazy\";\n        ZodFirstPartyTypeKind2[\"ZodLiteral\"] = \"ZodLiteral\";\n        ZodFirstPartyTypeKind2[\"ZodEnum\"] = \"ZodEnum\";\n        ZodFirstPartyTypeKind2[\"ZodEffects\"] = \"ZodEffects\";\n        ZodFirstPartyTypeKind2[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n        ZodFirstPartyTypeKind2[\"ZodOptional\"] = \"ZodOptional\";\n        ZodFirstPartyTypeKind2[\"ZodNullable\"] = \"ZodNullable\";\n        ZodFirstPartyTypeKind2[\"ZodDefault\"] = \"ZodDefault\";\n        ZodFirstPartyTypeKind2[\"ZodCatch\"] = \"ZodCatch\";\n        ZodFirstPartyTypeKind2[\"ZodPromise\"] = \"ZodPromise\";\n        ZodFirstPartyTypeKind2[\"ZodBranded\"] = \"ZodBranded\";\n        ZodFirstPartyTypeKind2[\"ZodPipeline\"] = \"ZodPipeline\";\n        ZodFirstPartyTypeKind2[\"ZodReadonly\"] = \"ZodReadonly\";\n      })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\n      instanceOfType = (cls, params = {\n        message: `Input not instance of ${cls.name}`\n      }) => custom((data) => data instanceof cls, params);\n      stringType = ZodString.create;\n      numberType = ZodNumber.create;\n      nanType = ZodNaN.create;\n      bigIntType = ZodBigInt.create;\n      booleanType = ZodBoolean.create;\n      dateType = ZodDate.create;\n      symbolType = ZodSymbol.create;\n      undefinedType = ZodUndefined.create;\n      nullType = ZodNull.create;\n      anyType = ZodAny.create;\n      unknownType = ZodUnknown.create;\n      neverType = ZodNever.create;\n      voidType = ZodVoid.create;\n      arrayType = ZodArray.create;\n      objectType = ZodObject.create;\n      strictObjectType = ZodObject.strictCreate;\n      unionType = ZodUnion.create;\n      discriminatedUnionType = ZodDiscriminatedUnion.create;\n      intersectionType = ZodIntersection.create;\n      tupleType = ZodTuple.create;\n      recordType = ZodRecord.create;\n      mapType = ZodMap.create;\n      setType = ZodSet.create;\n      functionType = ZodFunction.create;\n      lazyType = ZodLazy.create;\n      literalType = ZodLiteral.create;\n      enumType = ZodEnum.create;\n      nativeEnumType = ZodNativeEnum.create;\n      promiseType = ZodPromise.create;\n      effectsType = ZodEffects.create;\n      optionalType = ZodOptional.create;\n      nullableType = ZodNullable.create;\n      preprocessType = ZodEffects.createWithPreprocess;\n      pipelineType = ZodPipeline.create;\n      ostring = () => stringType().optional();\n      onumber = () => numberType().optional();\n      oboolean = () => booleanType().optional();\n      coerce = {\n        string: (arg) => ZodString.create({ ...arg, coerce: true }),\n        number: (arg) => ZodNumber.create({ ...arg, coerce: true }),\n        boolean: (arg) => ZodBoolean.create({\n          ...arg,\n          coerce: true\n        }),\n        bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),\n        date: (arg) => ZodDate.create({ ...arg, coerce: true })\n      };\n      NEVER = INVALID;\n    }\n  });\n\n  // ../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/v3/external.js\n  var external_exports = {};\n  __export(external_exports, {\n    BRAND: () => BRAND,\n    DIRTY: () => DIRTY,\n    EMPTY_PATH: () => EMPTY_PATH,\n    INVALID: () => INVALID,\n    NEVER: () => NEVER,\n    OK: () => OK,\n    ParseStatus: () => ParseStatus,\n    Schema: () => ZodType,\n    ZodAny: () => ZodAny,\n    ZodArray: () => ZodArray,\n    ZodBigInt: () => ZodBigInt,\n    ZodBoolean: () => ZodBoolean,\n    ZodBranded: () => ZodBranded,\n    ZodCatch: () => ZodCatch,\n    ZodDate: () => ZodDate,\n    ZodDefault: () => ZodDefault,\n    ZodDiscriminatedUnion: () => ZodDiscriminatedUnion,\n    ZodEffects: () => ZodEffects,\n    ZodEnum: () => ZodEnum,\n    ZodError: () => ZodError,\n    ZodFirstPartyTypeKind: () => ZodFirstPartyTypeKind,\n    ZodFunction: () => ZodFunction,\n    ZodIntersection: () => ZodIntersection,\n    ZodIssueCode: () => ZodIssueCode,\n    ZodLazy: () => ZodLazy,\n    ZodLiteral: () => ZodLiteral,\n    ZodMap: () => ZodMap,\n    ZodNaN: () => ZodNaN,\n    ZodNativeEnum: () => ZodNativeEnum,\n    ZodNever: () => ZodNever,\n    ZodNull: () => ZodNull,\n    ZodNullable: () => ZodNullable,\n    ZodNumber: () => ZodNumber,\n    ZodObject: () => ZodObject,\n    ZodOptional: () => ZodOptional,\n    ZodParsedType: () => ZodParsedType,\n    ZodPipeline: () => ZodPipeline,\n    ZodPromise: () => ZodPromise,\n    ZodReadonly: () => ZodReadonly,\n    ZodRecord: () => ZodRecord,\n    ZodSchema: () => ZodType,\n    ZodSet: () => ZodSet,\n    ZodString: () => ZodString,\n    ZodSymbol: () => ZodSymbol,\n    ZodTransformer: () => ZodEffects,\n    ZodTuple: () => ZodTuple,\n    ZodType: () => ZodType,\n    ZodUndefined: () => ZodUndefined,\n    ZodUnion: () => ZodUnion,\n    ZodUnknown: () => ZodUnknown,\n    ZodVoid: () => ZodVoid,\n    addIssueToContext: () => addIssueToContext,\n    any: () => anyType,\n    array: () => arrayType,\n    bigint: () => bigIntType,\n    boolean: () => booleanType,\n    coerce: () => coerce,\n    custom: () => custom,\n    date: () => dateType,\n    datetimeRegex: () => datetimeRegex,\n    defaultErrorMap: () => en_default,\n    discriminatedUnion: () => discriminatedUnionType,\n    effect: () => effectsType,\n    enum: () => enumType,\n    function: () => functionType,\n    getErrorMap: () => getErrorMap,\n    getParsedType: () => getParsedType,\n    instanceof: () => instanceOfType,\n    intersection: () => intersectionType,\n    isAborted: () => isAborted,\n    isAsync: () => isAsync,\n    isDirty: () => isDirty,\n    isValid: () => isValid,\n    late: () => late,\n    lazy: () => lazyType,\n    literal: () => literalType,\n    makeIssue: () => makeIssue,\n    map: () => mapType,\n    nan: () => nanType,\n    nativeEnum: () => nativeEnumType,\n    never: () => neverType,\n    null: () => nullType,\n    nullable: () => nullableType,\n    number: () => numberType,\n    object: () => objectType,\n    objectUtil: () => objectUtil,\n    oboolean: () => oboolean,\n    onumber: () => onumber,\n    optional: () => optionalType,\n    ostring: () => ostring,\n    pipeline: () => pipelineType,\n    preprocess: () => preprocessType,\n    promise: () => promiseType,\n    quotelessJson: () => quotelessJson,\n    record: () => recordType,\n    set: () => setType,\n    setErrorMap: () => setErrorMap,\n    strictObject: () => strictObjectType,\n    string: () => stringType,\n    symbol: () => symbolType,\n    transformer: () => effectsType,\n    tuple: () => tupleType,\n    undefined: () => undefinedType,\n    union: () => unionType,\n    unknown: () => unknownType,\n    util: () => util,\n    void: () => voidType\n  });\n  var init_external = __esm({\n    \"../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/v3/external.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_errors();\n      init_parseUtil();\n      init_typeAliases();\n      init_util();\n      init_types();\n      init_ZodError();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/v3/index.js\n  var init_v3 = __esm({\n    \"../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/v3/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_external();\n      init_external();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/index.js\n  var init_esm = __esm({\n    \"../../../node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_v3();\n      init_v3();\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/policyCore/policyDef/context/policyDefContext.ts\n  var init_policyDefContext = __esm({\n    \"../vincent-tool-sdk/src/lib/policyCore/policyDef/context/policyDefContext.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/policyCore/helpers/resultCreators.ts\n  function createDenyResult(params) {\n    if (params.result === void 0) {\n      return {\n        allow: false,\n        error: params.message,\n        result: void 0\n      };\n    }\n    return {\n      allow: false,\n      error: params.message,\n      result: params.result\n    };\n  }\n  function createDenyNoResult(message) {\n    return createDenyResult({ message });\n  }\n  function createAllowEvaluationResult(params) {\n    return {\n      allow: true,\n      evaluatedPolicies: params.evaluatedPolicies,\n      allowedPolicies: params.allowedPolicies,\n      deniedPolicy: void 0\n      // important for union discrimination\n    };\n  }\n  function createDenyEvaluationResult(params) {\n    return {\n      allow: false,\n      evaluatedPolicies: params.evaluatedPolicies,\n      allowedPolicies: params.allowedPolicies,\n      deniedPolicy: params.deniedPolicy\n    };\n  }\n  function returnNoResultDeny(message) {\n    return createDenyNoResult(message);\n  }\n  var init_resultCreators = __esm({\n    \"../vincent-tool-sdk/src/lib/policyCore/helpers/resultCreators.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/policyCore/helpers/typeGuards.ts\n  function isPolicyDenyResponse(val) {\n    return typeof val === \"object\" && val !== null && val.allow === false;\n  }\n  function isPolicyResponse(value) {\n    return typeof value === \"object\" && value !== null && \"allow\" in value && typeof value.allow === \"boolean\";\n  }\n  var init_typeGuards = __esm({\n    \"../vincent-tool-sdk/src/lib/policyCore/helpers/typeGuards.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/policyCore/helpers/zod.ts\n  function validateOrDeny(value, schema, phase, stage) {\n    const parsed = schema.safeParse(value);\n    if (!parsed.success) {\n      const descriptor = stage === \"input\" ? \"parameters\" : \"result\";\n      const message = `Invalid ${phase} ${descriptor}.`;\n      return createDenyResult({\n        message,\n        result: { zodError: parsed.error }\n      });\n    }\n    return parsed.data;\n  }\n  function getSchemaForPolicyResponseResult({\n    value,\n    allowResultSchema,\n    denyResultSchema\n  }) {\n    if (!isPolicyResponse(value)) {\n      console.log(\"getSchemaForPolicyResponseResult !isPolicyResponse\", value);\n      return {\n        schemaToUse: PolicyResponseShape,\n        parsedType: \"unknown\"\n      };\n    }\n    console.log(\"getSchemaForPolicyResponseResult value is\", value);\n    return {\n      schemaToUse: value.allow ? allowResultSchema : denyResultSchema,\n      parsedType: value.allow ? \"allow\" : \"deny\"\n    };\n  }\n  var PolicyResponseShape;\n  var init_zod = __esm({\n    \"../vincent-tool-sdk/src/lib/policyCore/helpers/zod.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_esm();\n      init_resultCreators();\n      init_typeGuards();\n      PolicyResponseShape = external_exports.object({\n        allow: external_exports.boolean(),\n        result: external_exports.unknown()\n      });\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/policyCore/helpers/index.ts\n  var init_helpers = __esm({\n    \"../vincent-tool-sdk/src/lib/policyCore/helpers/index.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_resultCreators();\n      init_typeGuards();\n      init_zod();\n      init_zod();\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/policyCore/vincentPolicy.ts\n  var init_vincentPolicy = __esm({\n    \"../vincent-tool-sdk/src/lib/policyCore/vincentPolicy.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_esm();\n      init_policyDefContext();\n      init_helpers();\n      init_resultCreators();\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/toolCore/toolDef/context/types.ts\n  var YouMustCallContextSucceedOrFail;\n  var init_types2 = __esm({\n    \"../vincent-tool-sdk/src/lib/toolCore/toolDef/context/types.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      YouMustCallContextSucceedOrFail = Symbol(\n        \"ExecuteToolResult must come from context.succeed() or context.fail()\"\n      );\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/toolCore/toolDef/context/resultCreators.ts\n  function createSuccess(result) {\n    return {\n      success: true,\n      result,\n      [YouMustCallContextSucceedOrFail]: \"ToolResult\"\n    };\n  }\n  function createSuccessNoResult() {\n    return {\n      success: true,\n      [YouMustCallContextSucceedOrFail]: \"ToolResult\"\n    };\n  }\n  function createFailure(result, error) {\n    return {\n      success: false,\n      result,\n      ...error ? { error } : {},\n      [YouMustCallContextSucceedOrFail]: \"ToolResult\"\n    };\n  }\n  function createFailureNoResult(error) {\n    return {\n      success: false,\n      result: void 0,\n      ...error ? { error } : {},\n      [YouMustCallContextSucceedOrFail]: \"ToolResult\"\n    };\n  }\n  var init_resultCreators2 = __esm({\n    \"../vincent-tool-sdk/src/lib/toolCore/toolDef/context/resultCreators.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_types2();\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/toolCore/toolDef/context/toolContext.ts\n  function createExecutionToolContext(params) {\n    const { baseContext, successSchema, failSchema, policiesByPackageName } = params;\n    const succeed = successSchema ? createSuccess : createSuccessNoResult;\n    const fail = failSchema ? createFailure : createFailureNoResult;\n    const allowedPolicies = {};\n    for (const key2 of Object.keys(policiesByPackageName)) {\n      const k = key2;\n      const entry = baseContext.policiesContext.allowedPolicies[k];\n      if (!entry)\n        continue;\n      allowedPolicies[k] = {\n        ...entry\n      };\n    }\n    const upgradedPoliciesContext = {\n      evaluatedPolicies: baseContext.policiesContext.evaluatedPolicies,\n      allow: true,\n      deniedPolicy: void 0,\n      allowedPolicies\n    };\n    return {\n      ...baseContext,\n      policiesContext: upgradedPoliciesContext,\n      succeed,\n      fail\n    };\n  }\n  function createPrecheckToolContext(params) {\n    const { baseContext, successSchema, failSchema } = params;\n    const succeed = successSchema ? createSuccess : createSuccessNoResult;\n    const fail = failSchema ? createFailure : createFailureNoResult;\n    return {\n      ...baseContext,\n      succeed,\n      fail\n    };\n  }\n  var init_toolContext = __esm({\n    \"../vincent-tool-sdk/src/lib/toolCore/toolDef/context/toolContext.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_resultCreators2();\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/toolCore/helpers/resultCreators.ts\n  function createToolSuccessResult(args) {\n    if (!args || args.result === void 0) {\n      return { success: true };\n    }\n    return { success: true, result: args.result };\n  }\n  function createToolFailureResult({\n    message,\n    result\n  }) {\n    if (result === void 0) {\n      return {\n        success: false,\n        error: message,\n        result: void 0\n      };\n    }\n    return {\n      success: false,\n      error: message,\n      result\n    };\n  }\n  function createToolFailureNoResult(message) {\n    return createToolFailureResult({ message });\n  }\n  function wrapFailure(value, message) {\n    return createToolFailureResult({ result: value, message });\n  }\n  function wrapNoResultFailure(message) {\n    return createToolFailureNoResult(message);\n  }\n  function wrapSuccess(value) {\n    return createToolSuccessResult({ result: value });\n  }\n  var init_resultCreators3 = __esm({\n    \"../vincent-tool-sdk/src/lib/toolCore/helpers/resultCreators.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/toolCore/helpers/typeGuards.ts\n  function isToolFailureResult(value) {\n    return typeof value === \"object\" && value !== null && \"success\" in value && value.success === false && \"result\" in value;\n  }\n  function isToolResult(value) {\n    return typeof value === \"object\" && value !== null && \"success\" in value && typeof value.success === \"boolean\" && \"result\" in value;\n  }\n  var init_typeGuards2 = __esm({\n    \"../vincent-tool-sdk/src/lib/toolCore/helpers/typeGuards.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/toolCore/helpers/zod.ts\n  function validateOrFail(value, schema, phase, stage) {\n    const effectiveSchema = schema ?? mustBeUndefinedSchema;\n    const parsed = effectiveSchema.safeParse(value);\n    if (!parsed.success) {\n      const descriptor = stage === \"input\" ? \"parameters\" : \"result\";\n      const message = `Invalid ${phase} ${descriptor}.`;\n      return createToolFailureResult({\n        message,\n        result: { zodError: parsed.error }\n      });\n    }\n    return parsed.data;\n  }\n  function getSchemaForToolResult({\n    value,\n    successResultSchema,\n    failureResultSchema\n  }) {\n    if (!isToolResult(value)) {\n      return {\n        schemaToUse: ToolResultShape,\n        parsedType: \"unknown\"\n      };\n    }\n    const schemaToUse = value.success ? successResultSchema ?? external_exports.undefined() : failureResultSchema ?? external_exports.undefined();\n    return {\n      schemaToUse,\n      parsedType: value.success ? \"success\" : \"failure\"\n    };\n  }\n  var ToolResultShape, mustBeUndefinedSchema;\n  var init_zod2 = __esm({\n    \"../vincent-tool-sdk/src/lib/toolCore/helpers/zod.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_esm();\n      init_resultCreators3();\n      init_typeGuards2();\n      ToolResultShape = external_exports.object({\n        success: external_exports.boolean(),\n        result: external_exports.unknown()\n      });\n      mustBeUndefinedSchema = external_exports.undefined();\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/toolCore/vincentTool.ts\n  function createVincentTool(toolDef) {\n    const { policyByPackageName } = toolDef.supportedPolicies;\n    const executeSuccessSchema2 = toolDef.executeSuccessSchema ?? external_exports.undefined();\n    const executeFailSchema2 = toolDef.executeFailSchema ?? external_exports.undefined();\n    const execute = async (params, baseToolContext) => {\n      try {\n        const context2 = createExecutionToolContext({\n          baseContext: baseToolContext,\n          successSchema: executeSuccessSchema2,\n          failSchema: executeFailSchema2,\n          policiesByPackageName: policyByPackageName\n        });\n        const parsedToolParams = validateOrFail(\n          params.toolParams,\n          toolDef.toolParamsSchema,\n          \"execute\",\n          \"input\"\n        );\n        if (isToolFailureResult(parsedToolParams)) {\n          return wrapFailure(parsedToolParams);\n        }\n        const result = await toolDef.execute(\n          // @ts-expect-error - TODO: fix this\n          { toolParams: parsedToolParams },\n          {\n            ...context2,\n            policiesContext: { ...context2.policiesContext, allow: true }\n          }\n        );\n        console.log(\"toolDef execute result\", result);\n        const { schemaToUse } = getSchemaForToolResult({\n          value: result,\n          successResultSchema: executeSuccessSchema2,\n          failureResultSchema: executeFailSchema2\n        });\n        const resultOrFailure = validateOrFail(\n          // @ts-expect-error - TODO: fix this\n          result.result,\n          schemaToUse,\n          \"execute\",\n          \"output\"\n        );\n        if (isToolFailureResult(resultOrFailure)) {\n          return wrapFailure(resultOrFailure);\n        }\n        return wrapSuccess(resultOrFailure);\n      } catch (err) {\n        return wrapNoResultFailure(err instanceof Error ? err.message : \"Unknown error\");\n      }\n    };\n    const precheckSuccessSchema2 = toolDef.precheckSuccessSchema ?? external_exports.undefined();\n    const precheckFailSchema2 = toolDef.precheckFailSchema ?? external_exports.undefined();\n    const { precheck: precheckFn } = toolDef;\n    const precheck = precheckFn ? async (params, baseToolContext) => {\n      try {\n        const context2 = createPrecheckToolContext({\n          baseContext: baseToolContext,\n          successSchema: precheckSuccessSchema2,\n          failSchema: precheckFailSchema2\n        });\n        const parsedToolParams = validateOrFail(\n          params.toolParams,\n          toolDef.toolParamsSchema,\n          \"precheck\",\n          \"input\"\n        );\n        if (isToolFailureResult(parsedToolParams)) {\n          return wrapFailure(parsedToolParams);\n        }\n        const result = await precheckFn(parsedToolParams, context2);\n        const { schemaToUse } = getSchemaForToolResult({\n          value: result,\n          successResultSchema: precheckSuccessSchema2,\n          failureResultSchema: precheckFailSchema2\n        });\n        const resultOrFailure = validateOrFail(\n          result,\n          schemaToUse,\n          \"precheck\",\n          \"output\"\n        );\n        if (isToolFailureResult(resultOrFailure)) {\n          return wrapFailure(resultOrFailure);\n        }\n        return wrapSuccess(resultOrFailure);\n      } catch (err) {\n        return wrapNoResultFailure(err instanceof Error ? err.message : \"Unknown error\");\n      }\n    } : void 0;\n    return {\n      execute,\n      precheck,\n      supportedPolicies: toolDef.supportedPolicies,\n      policyByPackageName,\n      toolParamsSchema: toolDef.toolParamsSchema,\n      __schemaTypes: {\n        precheckSuccessSchema: toolDef.precheckSuccessSchema,\n        precheckFailSchema: toolDef.precheckFailSchema,\n        executeSuccessSchema: toolDef.executeSuccessSchema,\n        executeFailSchema: toolDef.executeFailSchema\n      }\n    };\n  }\n  var init_vincentTool = __esm({\n    \"../vincent-tool-sdk/src/lib/toolCore/vincentTool.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_esm();\n      init_toolContext();\n      init_resultCreators3();\n      init_zod2();\n      init_typeGuards2();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/bn.js@5.2.2/node_modules/bn.js/lib/bn.js\n  var require_bn = __commonJS({\n    \"../../../node_modules/.pnpm/bn.js@5.2.2/node_modules/bn.js/lib/bn.js\"(exports3, module) {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      (function(module2, exports4) {\n        \"use strict\";\n        function assert4(val, msg) {\n          if (!val)\n            throw new Error(msg || \"Assertion failed\");\n        }\n        function inherits(ctor, superCtor) {\n          ctor.super_ = superCtor;\n          var TempCtor = function() {\n          };\n          TempCtor.prototype = superCtor.prototype;\n          ctor.prototype = new TempCtor();\n          ctor.prototype.constructor = ctor;\n        }\n        function BN3(number2, base2, endian) {\n          if (BN3.isBN(number2)) {\n            return number2;\n          }\n          this.negative = 0;\n          this.words = null;\n          this.length = 0;\n          this.red = null;\n          if (number2 !== null) {\n            if (base2 === \"le\" || base2 === \"be\") {\n              endian = base2;\n              base2 = 10;\n            }\n            this._init(number2 || 0, base2 || 10, endian || \"be\");\n          }\n        }\n        if (typeof module2 === \"object\") {\n          module2.exports = BN3;\n        } else {\n          exports4.BN = BN3;\n        }\n        BN3.BN = BN3;\n        BN3.wordSize = 26;\n        var Buffer3;\n        try {\n          if (typeof window !== \"undefined\" && typeof window.Buffer !== \"undefined\") {\n            Buffer3 = window.Buffer;\n          } else {\n            Buffer3 = (init_buffer(), __toCommonJS(buffer_exports)).Buffer;\n          }\n        } catch (e) {\n        }\n        BN3.isBN = function isBN(num) {\n          if (num instanceof BN3) {\n            return true;\n          }\n          return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);\n        };\n        BN3.max = function max(left, right) {\n          if (left.cmp(right) > 0)\n            return left;\n          return right;\n        };\n        BN3.min = function min(left, right) {\n          if (left.cmp(right) < 0)\n            return left;\n          return right;\n        };\n        BN3.prototype._init = function init3(number2, base2, endian) {\n          if (typeof number2 === \"number\") {\n            return this._initNumber(number2, base2, endian);\n          }\n          if (typeof number2 === \"object\") {\n            return this._initArray(number2, base2, endian);\n          }\n          if (base2 === \"hex\") {\n            base2 = 16;\n          }\n          assert4(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);\n          number2 = number2.toString().replace(/\\s+/g, \"\");\n          var start = 0;\n          if (number2[0] === \"-\") {\n            start++;\n            this.negative = 1;\n          }\n          if (start < number2.length) {\n            if (base2 === 16) {\n              this._parseHex(number2, start, endian);\n            } else {\n              this._parseBase(number2, base2, start);\n              if (endian === \"le\") {\n                this._initArray(this.toArray(), base2, endian);\n              }\n            }\n          }\n        };\n        BN3.prototype._initNumber = function _initNumber(number2, base2, endian) {\n          if (number2 < 0) {\n            this.negative = 1;\n            number2 = -number2;\n          }\n          if (number2 < 67108864) {\n            this.words = [number2 & 67108863];\n            this.length = 1;\n          } else if (number2 < 4503599627370496) {\n            this.words = [\n              number2 & 67108863,\n              number2 / 67108864 & 67108863\n            ];\n            this.length = 2;\n          } else {\n            assert4(number2 < 9007199254740992);\n            this.words = [\n              number2 & 67108863,\n              number2 / 67108864 & 67108863,\n              1\n            ];\n            this.length = 3;\n          }\n          if (endian !== \"le\")\n            return;\n          this._initArray(this.toArray(), base2, endian);\n        };\n        BN3.prototype._initArray = function _initArray(number2, base2, endian) {\n          assert4(typeof number2.length === \"number\");\n          if (number2.length <= 0) {\n            this.words = [0];\n            this.length = 1;\n            return this;\n          }\n          this.length = Math.ceil(number2.length / 3);\n          this.words = new Array(this.length);\n          for (var i = 0; i < this.length; i++) {\n            this.words[i] = 0;\n          }\n          var j, w;\n          var off2 = 0;\n          if (endian === \"be\") {\n            for (i = number2.length - 1, j = 0; i >= 0; i -= 3) {\n              w = number2[i] | number2[i - 1] << 8 | number2[i - 2] << 16;\n              this.words[j] |= w << off2 & 67108863;\n              this.words[j + 1] = w >>> 26 - off2 & 67108863;\n              off2 += 24;\n              if (off2 >= 26) {\n                off2 -= 26;\n                j++;\n              }\n            }\n          } else if (endian === \"le\") {\n            for (i = 0, j = 0; i < number2.length; i += 3) {\n              w = number2[i] | number2[i + 1] << 8 | number2[i + 2] << 16;\n              this.words[j] |= w << off2 & 67108863;\n              this.words[j + 1] = w >>> 26 - off2 & 67108863;\n              off2 += 24;\n              if (off2 >= 26) {\n                off2 -= 26;\n                j++;\n              }\n            }\n          }\n          return this._strip();\n        };\n        function parseHex4Bits(string, index) {\n          var c = string.charCodeAt(index);\n          if (c >= 48 && c <= 57) {\n            return c - 48;\n          } else if (c >= 65 && c <= 70) {\n            return c - 55;\n          } else if (c >= 97 && c <= 102) {\n            return c - 87;\n          } else {\n            assert4(false, \"Invalid character in \" + string);\n          }\n        }\n        function parseHexByte(string, lowerBound, index) {\n          var r2 = parseHex4Bits(string, index);\n          if (index - 1 >= lowerBound) {\n            r2 |= parseHex4Bits(string, index - 1) << 4;\n          }\n          return r2;\n        }\n        BN3.prototype._parseHex = function _parseHex(number2, start, endian) {\n          this.length = Math.ceil((number2.length - start) / 6);\n          this.words = new Array(this.length);\n          for (var i = 0; i < this.length; i++) {\n            this.words[i] = 0;\n          }\n          var off2 = 0;\n          var j = 0;\n          var w;\n          if (endian === \"be\") {\n            for (i = number2.length - 1; i >= start; i -= 2) {\n              w = parseHexByte(number2, start, i) << off2;\n              this.words[j] |= w & 67108863;\n              if (off2 >= 18) {\n                off2 -= 18;\n                j += 1;\n                this.words[j] |= w >>> 26;\n              } else {\n                off2 += 8;\n              }\n            }\n          } else {\n            var parseLength = number2.length - start;\n            for (i = parseLength % 2 === 0 ? start + 1 : start; i < number2.length; i += 2) {\n              w = parseHexByte(number2, start, i) << off2;\n              this.words[j] |= w & 67108863;\n              if (off2 >= 18) {\n                off2 -= 18;\n                j += 1;\n                this.words[j] |= w >>> 26;\n              } else {\n                off2 += 8;\n              }\n            }\n          }\n          this._strip();\n        };\n        function parseBase(str, start, end, mul3) {\n          var r2 = 0;\n          var b2 = 0;\n          var len = Math.min(str.length, end);\n          for (var i = start; i < len; i++) {\n            var c = str.charCodeAt(i) - 48;\n            r2 *= mul3;\n            if (c >= 49) {\n              b2 = c - 49 + 10;\n            } else if (c >= 17) {\n              b2 = c - 17 + 10;\n            } else {\n              b2 = c;\n            }\n            assert4(c >= 0 && b2 < mul3, \"Invalid character\");\n            r2 += b2;\n          }\n          return r2;\n        }\n        BN3.prototype._parseBase = function _parseBase(number2, base2, start) {\n          this.words = [0];\n          this.length = 1;\n          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {\n            limbLen++;\n          }\n          limbLen--;\n          limbPow = limbPow / base2 | 0;\n          var total = number2.length - start;\n          var mod2 = total % limbLen;\n          var end = Math.min(total, total - mod2) + start;\n          var word = 0;\n          for (var i = start; i < end; i += limbLen) {\n            word = parseBase(number2, i, i + limbLen, base2);\n            this.imuln(limbPow);\n            if (this.words[0] + word < 67108864) {\n              this.words[0] += word;\n            } else {\n              this._iaddn(word);\n            }\n          }\n          if (mod2 !== 0) {\n            var pow3 = 1;\n            word = parseBase(number2, i, number2.length, base2);\n            for (i = 0; i < mod2; i++) {\n              pow3 *= base2;\n            }\n            this.imuln(pow3);\n            if (this.words[0] + word < 67108864) {\n              this.words[0] += word;\n            } else {\n              this._iaddn(word);\n            }\n          }\n          this._strip();\n        };\n        BN3.prototype.copy = function copy4(dest) {\n          dest.words = new Array(this.length);\n          for (var i = 0; i < this.length; i++) {\n            dest.words[i] = this.words[i];\n          }\n          dest.length = this.length;\n          dest.negative = this.negative;\n          dest.red = this.red;\n        };\n        function move(dest, src) {\n          dest.words = src.words;\n          dest.length = src.length;\n          dest.negative = src.negative;\n          dest.red = src.red;\n        }\n        BN3.prototype._move = function _move(dest) {\n          move(dest, this);\n        };\n        BN3.prototype.clone = function clone() {\n          var r2 = new BN3(null);\n          this.copy(r2);\n          return r2;\n        };\n        BN3.prototype._expand = function _expand(size) {\n          while (this.length < size) {\n            this.words[this.length++] = 0;\n          }\n          return this;\n        };\n        BN3.prototype._strip = function strip() {\n          while (this.length > 1 && this.words[this.length - 1] === 0) {\n            this.length--;\n          }\n          return this._normSign();\n        };\n        BN3.prototype._normSign = function _normSign() {\n          if (this.length === 1 && this.words[0] === 0) {\n            this.negative = 0;\n          }\n          return this;\n        };\n        if (typeof Symbol !== \"undefined\" && typeof Symbol.for === \"function\") {\n          try {\n            BN3.prototype[Symbol.for(\"nodejs.util.inspect.custom\")] = inspect4;\n          } catch (e) {\n            BN3.prototype.inspect = inspect4;\n          }\n        } else {\n          BN3.prototype.inspect = inspect4;\n        }\n        function inspect4() {\n          return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n        }\n        var zeros3 = [\n          \"\",\n          \"0\",\n          \"00\",\n          \"000\",\n          \"0000\",\n          \"00000\",\n          \"000000\",\n          \"0000000\",\n          \"00000000\",\n          \"000000000\",\n          \"0000000000\",\n          \"00000000000\",\n          \"000000000000\",\n          \"0000000000000\",\n          \"00000000000000\",\n          \"000000000000000\",\n          \"0000000000000000\",\n          \"00000000000000000\",\n          \"000000000000000000\",\n          \"0000000000000000000\",\n          \"00000000000000000000\",\n          \"000000000000000000000\",\n          \"0000000000000000000000\",\n          \"00000000000000000000000\",\n          \"000000000000000000000000\",\n          \"0000000000000000000000000\"\n        ];\n        var groupSizes = [\n          0,\n          0,\n          25,\n          16,\n          12,\n          11,\n          10,\n          9,\n          8,\n          8,\n          7,\n          7,\n          7,\n          7,\n          6,\n          6,\n          6,\n          6,\n          6,\n          6,\n          6,\n          5,\n          5,\n          5,\n          5,\n          5,\n          5,\n          5,\n          5,\n          5,\n          5,\n          5,\n          5,\n          5,\n          5,\n          5,\n          5\n        ];\n        var groupBases = [\n          0,\n          0,\n          33554432,\n          43046721,\n          16777216,\n          48828125,\n          60466176,\n          40353607,\n          16777216,\n          43046721,\n          1e7,\n          19487171,\n          35831808,\n          62748517,\n          7529536,\n          11390625,\n          16777216,\n          24137569,\n          34012224,\n          47045881,\n          64e6,\n          4084101,\n          5153632,\n          6436343,\n          7962624,\n          9765625,\n          11881376,\n          14348907,\n          17210368,\n          20511149,\n          243e5,\n          28629151,\n          33554432,\n          39135393,\n          45435424,\n          52521875,\n          60466176\n        ];\n        BN3.prototype.toString = function toString(base2, padding3) {\n          base2 = base2 || 10;\n          padding3 = padding3 | 0 || 1;\n          var out;\n          if (base2 === 16 || base2 === \"hex\") {\n            out = \"\";\n            var off2 = 0;\n            var carry = 0;\n            for (var i = 0; i < this.length; i++) {\n              var w = this.words[i];\n              var word = ((w << off2 | carry) & 16777215).toString(16);\n              carry = w >>> 24 - off2 & 16777215;\n              off2 += 2;\n              if (off2 >= 26) {\n                off2 -= 26;\n                i--;\n              }\n              if (carry !== 0 || i !== this.length - 1) {\n                out = zeros3[6 - word.length] + word + out;\n              } else {\n                out = word + out;\n              }\n            }\n            if (carry !== 0) {\n              out = carry.toString(16) + out;\n            }\n            while (out.length % padding3 !== 0) {\n              out = \"0\" + out;\n            }\n            if (this.negative !== 0) {\n              out = \"-\" + out;\n            }\n            return out;\n          }\n          if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {\n            var groupSize = groupSizes[base2];\n            var groupBase = groupBases[base2];\n            out = \"\";\n            var c = this.clone();\n            c.negative = 0;\n            while (!c.isZero()) {\n              var r2 = c.modrn(groupBase).toString(base2);\n              c = c.idivn(groupBase);\n              if (!c.isZero()) {\n                out = zeros3[groupSize - r2.length] + r2 + out;\n              } else {\n                out = r2 + out;\n              }\n            }\n            if (this.isZero()) {\n              out = \"0\" + out;\n            }\n            while (out.length % padding3 !== 0) {\n              out = \"0\" + out;\n            }\n            if (this.negative !== 0) {\n              out = \"-\" + out;\n            }\n            return out;\n          }\n          assert4(false, \"Base should be between 2 and 36\");\n        };\n        BN3.prototype.toNumber = function toNumber2() {\n          var ret = this.words[0];\n          if (this.length === 2) {\n            ret += this.words[1] * 67108864;\n          } else if (this.length === 3 && this.words[2] === 1) {\n            ret += 4503599627370496 + this.words[1] * 67108864;\n          } else if (this.length > 2) {\n            assert4(false, \"Number can only safely store up to 53 bits\");\n          }\n          return this.negative !== 0 ? -ret : ret;\n        };\n        BN3.prototype.toJSON = function toJSON2() {\n          return this.toString(16, 2);\n        };\n        if (Buffer3) {\n          BN3.prototype.toBuffer = function toBuffer(endian, length) {\n            return this.toArrayLike(Buffer3, endian, length);\n          };\n        }\n        BN3.prototype.toArray = function toArray(endian, length) {\n          return this.toArrayLike(Array, endian, length);\n        };\n        var allocate = function allocate2(ArrayType, size) {\n          if (ArrayType.allocUnsafe) {\n            return ArrayType.allocUnsafe(size);\n          }\n          return new ArrayType(size);\n        };\n        BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n          this._strip();\n          var byteLength = this.byteLength();\n          var reqLength = length || Math.max(1, byteLength);\n          assert4(byteLength <= reqLength, \"byte array longer than desired length\");\n          assert4(reqLength > 0, \"Requested array length <= 0\");\n          var res = allocate(ArrayType, reqLength);\n          var postfix = endian === \"le\" ? \"LE\" : \"BE\";\n          this[\"_toArrayLike\" + postfix](res, byteLength);\n          return res;\n        };\n        BN3.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {\n          var position = 0;\n          var carry = 0;\n          for (var i = 0, shift = 0; i < this.length; i++) {\n            var word = this.words[i] << shift | carry;\n            res[position++] = word & 255;\n            if (position < res.length) {\n              res[position++] = word >> 8 & 255;\n            }\n            if (position < res.length) {\n              res[position++] = word >> 16 & 255;\n            }\n            if (shift === 6) {\n              if (position < res.length) {\n                res[position++] = word >> 24 & 255;\n              }\n              carry = 0;\n              shift = 0;\n            } else {\n              carry = word >>> 24;\n              shift += 2;\n            }\n          }\n          if (position < res.length) {\n            res[position++] = carry;\n            while (position < res.length) {\n              res[position++] = 0;\n            }\n          }\n        };\n        BN3.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {\n          var position = res.length - 1;\n          var carry = 0;\n          for (var i = 0, shift = 0; i < this.length; i++) {\n            var word = this.words[i] << shift | carry;\n            res[position--] = word & 255;\n            if (position >= 0) {\n              res[position--] = word >> 8 & 255;\n            }\n            if (position >= 0) {\n              res[position--] = word >> 16 & 255;\n            }\n            if (shift === 6) {\n              if (position >= 0) {\n                res[position--] = word >> 24 & 255;\n              }\n              carry = 0;\n              shift = 0;\n            } else {\n              carry = word >>> 24;\n              shift += 2;\n            }\n          }\n          if (position >= 0) {\n            res[position--] = carry;\n            while (position >= 0) {\n              res[position--] = 0;\n            }\n          }\n        };\n        if (Math.clz32) {\n          BN3.prototype._countBits = function _countBits(w) {\n            return 32 - Math.clz32(w);\n          };\n        } else {\n          BN3.prototype._countBits = function _countBits(w) {\n            var t = w;\n            var r2 = 0;\n            if (t >= 4096) {\n              r2 += 13;\n              t >>>= 13;\n            }\n            if (t >= 64) {\n              r2 += 7;\n              t >>>= 7;\n            }\n            if (t >= 8) {\n              r2 += 4;\n              t >>>= 4;\n            }\n            if (t >= 2) {\n              r2 += 2;\n              t >>>= 2;\n            }\n            return r2 + t;\n          };\n        }\n        BN3.prototype._zeroBits = function _zeroBits(w) {\n          if (w === 0)\n            return 26;\n          var t = w;\n          var r2 = 0;\n          if ((t & 8191) === 0) {\n            r2 += 13;\n            t >>>= 13;\n          }\n          if ((t & 127) === 0) {\n            r2 += 7;\n            t >>>= 7;\n          }\n          if ((t & 15) === 0) {\n            r2 += 4;\n            t >>>= 4;\n          }\n          if ((t & 3) === 0) {\n            r2 += 2;\n            t >>>= 2;\n          }\n          if ((t & 1) === 0) {\n            r2++;\n          }\n          return r2;\n        };\n        BN3.prototype.bitLength = function bitLength() {\n          var w = this.words[this.length - 1];\n          var hi = this._countBits(w);\n          return (this.length - 1) * 26 + hi;\n        };\n        function toBitArray(num) {\n          var w = new Array(num.bitLength());\n          for (var bit = 0; bit < w.length; bit++) {\n            var off2 = bit / 26 | 0;\n            var wbit = bit % 26;\n            w[bit] = num.words[off2] >>> wbit & 1;\n          }\n          return w;\n        }\n        BN3.prototype.zeroBits = function zeroBits() {\n          if (this.isZero())\n            return 0;\n          var r2 = 0;\n          for (var i = 0; i < this.length; i++) {\n            var b2 = this._zeroBits(this.words[i]);\n            r2 += b2;\n            if (b2 !== 26)\n              break;\n          }\n          return r2;\n        };\n        BN3.prototype.byteLength = function byteLength() {\n          return Math.ceil(this.bitLength() / 8);\n        };\n        BN3.prototype.toTwos = function toTwos2(width) {\n          if (this.negative !== 0) {\n            return this.abs().inotn(width).iaddn(1);\n          }\n          return this.clone();\n        };\n        BN3.prototype.fromTwos = function fromTwos2(width) {\n          if (this.testn(width - 1)) {\n            return this.notn(width).iaddn(1).ineg();\n          }\n          return this.clone();\n        };\n        BN3.prototype.isNeg = function isNeg() {\n          return this.negative !== 0;\n        };\n        BN3.prototype.neg = function neg3() {\n          return this.clone().ineg();\n        };\n        BN3.prototype.ineg = function ineg() {\n          if (!this.isZero()) {\n            this.negative ^= 1;\n          }\n          return this;\n        };\n        BN3.prototype.iuor = function iuor(num) {\n          while (this.length < num.length) {\n            this.words[this.length++] = 0;\n          }\n          for (var i = 0; i < num.length; i++) {\n            this.words[i] = this.words[i] | num.words[i];\n          }\n          return this._strip();\n        };\n        BN3.prototype.ior = function ior(num) {\n          assert4((this.negative | num.negative) === 0);\n          return this.iuor(num);\n        };\n        BN3.prototype.or = function or(num) {\n          if (this.length > num.length)\n            return this.clone().ior(num);\n          return num.clone().ior(this);\n        };\n        BN3.prototype.uor = function uor(num) {\n          if (this.length > num.length)\n            return this.clone().iuor(num);\n          return num.clone().iuor(this);\n        };\n        BN3.prototype.iuand = function iuand(num) {\n          var b2;\n          if (this.length > num.length) {\n            b2 = num;\n          } else {\n            b2 = this;\n          }\n          for (var i = 0; i < b2.length; i++) {\n            this.words[i] = this.words[i] & num.words[i];\n          }\n          this.length = b2.length;\n          return this._strip();\n        };\n        BN3.prototype.iand = function iand(num) {\n          assert4((this.negative | num.negative) === 0);\n          return this.iuand(num);\n        };\n        BN3.prototype.and = function and(num) {\n          if (this.length > num.length)\n            return this.clone().iand(num);\n          return num.clone().iand(this);\n        };\n        BN3.prototype.uand = function uand(num) {\n          if (this.length > num.length)\n            return this.clone().iuand(num);\n          return num.clone().iuand(this);\n        };\n        BN3.prototype.iuxor = function iuxor(num) {\n          var a;\n          var b2;\n          if (this.length > num.length) {\n            a = this;\n            b2 = num;\n          } else {\n            a = num;\n            b2 = this;\n          }\n          for (var i = 0; i < b2.length; i++) {\n            this.words[i] = a.words[i] ^ b2.words[i];\n          }\n          if (this !== a) {\n            for (; i < a.length; i++) {\n              this.words[i] = a.words[i];\n            }\n          }\n          this.length = a.length;\n          return this._strip();\n        };\n        BN3.prototype.ixor = function ixor(num) {\n          assert4((this.negative | num.negative) === 0);\n          return this.iuxor(num);\n        };\n        BN3.prototype.xor = function xor(num) {\n          if (this.length > num.length)\n            return this.clone().ixor(num);\n          return num.clone().ixor(this);\n        };\n        BN3.prototype.uxor = function uxor(num) {\n          if (this.length > num.length)\n            return this.clone().iuxor(num);\n          return num.clone().iuxor(this);\n        };\n        BN3.prototype.inotn = function inotn(width) {\n          assert4(typeof width === \"number\" && width >= 0);\n          var bytesNeeded = Math.ceil(width / 26) | 0;\n          var bitsLeft = width % 26;\n          this._expand(bytesNeeded);\n          if (bitsLeft > 0) {\n            bytesNeeded--;\n          }\n          for (var i = 0; i < bytesNeeded; i++) {\n            this.words[i] = ~this.words[i] & 67108863;\n          }\n          if (bitsLeft > 0) {\n            this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;\n          }\n          return this._strip();\n        };\n        BN3.prototype.notn = function notn(width) {\n          return this.clone().inotn(width);\n        };\n        BN3.prototype.setn = function setn(bit, val) {\n          assert4(typeof bit === \"number\" && bit >= 0);\n          var off2 = bit / 26 | 0;\n          var wbit = bit % 26;\n          this._expand(off2 + 1);\n          if (val) {\n            this.words[off2] = this.words[off2] | 1 << wbit;\n          } else {\n            this.words[off2] = this.words[off2] & ~(1 << wbit);\n          }\n          return this._strip();\n        };\n        BN3.prototype.iadd = function iadd(num) {\n          var r2;\n          if (this.negative !== 0 && num.negative === 0) {\n            this.negative = 0;\n            r2 = this.isub(num);\n            this.negative ^= 1;\n            return this._normSign();\n          } else if (this.negative === 0 && num.negative !== 0) {\n            num.negative = 0;\n            r2 = this.isub(num);\n            num.negative = 1;\n            return r2._normSign();\n          }\n          var a, b2;\n          if (this.length > num.length) {\n            a = this;\n            b2 = num;\n          } else {\n            a = num;\n            b2 = this;\n          }\n          var carry = 0;\n          for (var i = 0; i < b2.length; i++) {\n            r2 = (a.words[i] | 0) + (b2.words[i] | 0) + carry;\n            this.words[i] = r2 & 67108863;\n            carry = r2 >>> 26;\n          }\n          for (; carry !== 0 && i < a.length; i++) {\n            r2 = (a.words[i] | 0) + carry;\n            this.words[i] = r2 & 67108863;\n            carry = r2 >>> 26;\n          }\n          this.length = a.length;\n          if (carry !== 0) {\n            this.words[this.length] = carry;\n            this.length++;\n          } else if (a !== this) {\n            for (; i < a.length; i++) {\n              this.words[i] = a.words[i];\n            }\n          }\n          return this;\n        };\n        BN3.prototype.add = function add4(num) {\n          var res;\n          if (num.negative !== 0 && this.negative === 0) {\n            num.negative = 0;\n            res = this.sub(num);\n            num.negative ^= 1;\n            return res;\n          } else if (num.negative === 0 && this.negative !== 0) {\n            this.negative = 0;\n            res = num.sub(this);\n            this.negative = 1;\n            return res;\n          }\n          if (this.length > num.length)\n            return this.clone().iadd(num);\n          return num.clone().iadd(this);\n        };\n        BN3.prototype.isub = function isub(num) {\n          if (num.negative !== 0) {\n            num.negative = 0;\n            var r2 = this.iadd(num);\n            num.negative = 1;\n            return r2._normSign();\n          } else if (this.negative !== 0) {\n            this.negative = 0;\n            this.iadd(num);\n            this.negative = 1;\n            return this._normSign();\n          }\n          var cmp = this.cmp(num);\n          if (cmp === 0) {\n            this.negative = 0;\n            this.length = 1;\n            this.words[0] = 0;\n            return this;\n          }\n          var a, b2;\n          if (cmp > 0) {\n            a = this;\n            b2 = num;\n          } else {\n            a = num;\n            b2 = this;\n          }\n          var carry = 0;\n          for (var i = 0; i < b2.length; i++) {\n            r2 = (a.words[i] | 0) - (b2.words[i] | 0) + carry;\n            carry = r2 >> 26;\n            this.words[i] = r2 & 67108863;\n          }\n          for (; carry !== 0 && i < a.length; i++) {\n            r2 = (a.words[i] | 0) + carry;\n            carry = r2 >> 26;\n            this.words[i] = r2 & 67108863;\n          }\n          if (carry === 0 && i < a.length && a !== this) {\n            for (; i < a.length; i++) {\n              this.words[i] = a.words[i];\n            }\n          }\n          this.length = Math.max(this.length, i);\n          if (a !== this) {\n            this.negative = 1;\n          }\n          return this._strip();\n        };\n        BN3.prototype.sub = function sub(num) {\n          return this.clone().isub(num);\n        };\n        function smallMulTo(self2, num, out) {\n          out.negative = num.negative ^ self2.negative;\n          var len = self2.length + num.length | 0;\n          out.length = len;\n          len = len - 1 | 0;\n          var a = self2.words[0] | 0;\n          var b2 = num.words[0] | 0;\n          var r2 = a * b2;\n          var lo = r2 & 67108863;\n          var carry = r2 / 67108864 | 0;\n          out.words[0] = lo;\n          for (var k = 1; k < len; k++) {\n            var ncarry = carry >>> 26;\n            var rword = carry & 67108863;\n            var maxJ = Math.min(k, num.length - 1);\n            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n              var i = k - j | 0;\n              a = self2.words[i] | 0;\n              b2 = num.words[j] | 0;\n              r2 = a * b2 + rword;\n              ncarry += r2 / 67108864 | 0;\n              rword = r2 & 67108863;\n            }\n            out.words[k] = rword | 0;\n            carry = ncarry | 0;\n          }\n          if (carry !== 0) {\n            out.words[k] = carry | 0;\n          } else {\n            out.length--;\n          }\n          return out._strip();\n        }\n        var comb10MulTo = function comb10MulTo2(self2, num, out) {\n          var a = self2.words;\n          var b2 = num.words;\n          var o = out.words;\n          var c = 0;\n          var lo;\n          var mid;\n          var hi;\n          var a0 = a[0] | 0;\n          var al0 = a0 & 8191;\n          var ah0 = a0 >>> 13;\n          var a1 = a[1] | 0;\n          var al1 = a1 & 8191;\n          var ah1 = a1 >>> 13;\n          var a2 = a[2] | 0;\n          var al2 = a2 & 8191;\n          var ah2 = a2 >>> 13;\n          var a3 = a[3] | 0;\n          var al3 = a3 & 8191;\n          var ah3 = a3 >>> 13;\n          var a4 = a[4] | 0;\n          var al4 = a4 & 8191;\n          var ah4 = a4 >>> 13;\n          var a5 = a[5] | 0;\n          var al5 = a5 & 8191;\n          var ah5 = a5 >>> 13;\n          var a6 = a[6] | 0;\n          var al6 = a6 & 8191;\n          var ah6 = a6 >>> 13;\n          var a7 = a[7] | 0;\n          var al7 = a7 & 8191;\n          var ah7 = a7 >>> 13;\n          var a8 = a[8] | 0;\n          var al8 = a8 & 8191;\n          var ah8 = a8 >>> 13;\n          var a9 = a[9] | 0;\n          var al9 = a9 & 8191;\n          var ah9 = a9 >>> 13;\n          var b0 = b2[0] | 0;\n          var bl0 = b0 & 8191;\n          var bh0 = b0 >>> 13;\n          var b1 = b2[1] | 0;\n          var bl1 = b1 & 8191;\n          var bh1 = b1 >>> 13;\n          var b22 = b2[2] | 0;\n          var bl2 = b22 & 8191;\n          var bh2 = b22 >>> 13;\n          var b3 = b2[3] | 0;\n          var bl3 = b3 & 8191;\n          var bh3 = b3 >>> 13;\n          var b4 = b2[4] | 0;\n          var bl4 = b4 & 8191;\n          var bh4 = b4 >>> 13;\n          var b5 = b2[5] | 0;\n          var bl5 = b5 & 8191;\n          var bh5 = b5 >>> 13;\n          var b6 = b2[6] | 0;\n          var bl6 = b6 & 8191;\n          var bh6 = b6 >>> 13;\n          var b7 = b2[7] | 0;\n          var bl7 = b7 & 8191;\n          var bh7 = b7 >>> 13;\n          var b8 = b2[8] | 0;\n          var bl8 = b8 & 8191;\n          var bh8 = b8 >>> 13;\n          var b9 = b2[9] | 0;\n          var bl9 = b9 & 8191;\n          var bh9 = b9 >>> 13;\n          out.negative = self2.negative ^ num.negative;\n          out.length = 19;\n          lo = Math.imul(al0, bl0);\n          mid = Math.imul(al0, bh0);\n          mid = mid + Math.imul(ah0, bl0) | 0;\n          hi = Math.imul(ah0, bh0);\n          var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n          w0 &= 67108863;\n          lo = Math.imul(al1, bl0);\n          mid = Math.imul(al1, bh0);\n          mid = mid + Math.imul(ah1, bl0) | 0;\n          hi = Math.imul(ah1, bh0);\n          lo = lo + Math.imul(al0, bl1) | 0;\n          mid = mid + Math.imul(al0, bh1) | 0;\n          mid = mid + Math.imul(ah0, bl1) | 0;\n          hi = hi + Math.imul(ah0, bh1) | 0;\n          var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n          w1 &= 67108863;\n          lo = Math.imul(al2, bl0);\n          mid = Math.imul(al2, bh0);\n          mid = mid + Math.imul(ah2, bl0) | 0;\n          hi = Math.imul(ah2, bh0);\n          lo = lo + Math.imul(al1, bl1) | 0;\n          mid = mid + Math.imul(al1, bh1) | 0;\n          mid = mid + Math.imul(ah1, bl1) | 0;\n          hi = hi + Math.imul(ah1, bh1) | 0;\n          lo = lo + Math.imul(al0, bl2) | 0;\n          mid = mid + Math.imul(al0, bh2) | 0;\n          mid = mid + Math.imul(ah0, bl2) | 0;\n          hi = hi + Math.imul(ah0, bh2) | 0;\n          var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n          w2 &= 67108863;\n          lo = Math.imul(al3, bl0);\n          mid = Math.imul(al3, bh0);\n          mid = mid + Math.imul(ah3, bl0) | 0;\n          hi = Math.imul(ah3, bh0);\n          lo = lo + Math.imul(al2, bl1) | 0;\n          mid = mid + Math.imul(al2, bh1) | 0;\n          mid = mid + Math.imul(ah2, bl1) | 0;\n          hi = hi + Math.imul(ah2, bh1) | 0;\n          lo = lo + Math.imul(al1, bl2) | 0;\n          mid = mid + Math.imul(al1, bh2) | 0;\n          mid = mid + Math.imul(ah1, bl2) | 0;\n          hi = hi + Math.imul(ah1, bh2) | 0;\n          lo = lo + Math.imul(al0, bl3) | 0;\n          mid = mid + Math.imul(al0, bh3) | 0;\n          mid = mid + Math.imul(ah0, bl3) | 0;\n          hi = hi + Math.imul(ah0, bh3) | 0;\n          var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n          w3 &= 67108863;\n          lo = Math.imul(al4, bl0);\n          mid = Math.imul(al4, bh0);\n          mid = mid + Math.imul(ah4, bl0) | 0;\n          hi = Math.imul(ah4, bh0);\n          lo = lo + Math.imul(al3, bl1) | 0;\n          mid = mid + Math.imul(al3, bh1) | 0;\n          mid = mid + Math.imul(ah3, bl1) | 0;\n          hi = hi + Math.imul(ah3, bh1) | 0;\n          lo = lo + Math.imul(al2, bl2) | 0;\n          mid = mid + Math.imul(al2, bh2) | 0;\n          mid = mid + Math.imul(ah2, bl2) | 0;\n          hi = hi + Math.imul(ah2, bh2) | 0;\n          lo = lo + Math.imul(al1, bl3) | 0;\n          mid = mid + Math.imul(al1, bh3) | 0;\n          mid = mid + Math.imul(ah1, bl3) | 0;\n          hi = hi + Math.imul(ah1, bh3) | 0;\n          lo = lo + Math.imul(al0, bl4) | 0;\n          mid = mid + Math.imul(al0, bh4) | 0;\n          mid = mid + Math.imul(ah0, bl4) | 0;\n          hi = hi + Math.imul(ah0, bh4) | 0;\n          var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n          w4 &= 67108863;\n          lo = Math.imul(al5, bl0);\n          mid = Math.imul(al5, bh0);\n          mid = mid + Math.imul(ah5, bl0) | 0;\n          hi = Math.imul(ah5, bh0);\n          lo = lo + Math.imul(al4, bl1) | 0;\n          mid = mid + Math.imul(al4, bh1) | 0;\n          mid = mid + Math.imul(ah4, bl1) | 0;\n          hi = hi + Math.imul(ah4, bh1) | 0;\n          lo = lo + Math.imul(al3, bl2) | 0;\n          mid = mid + Math.imul(al3, bh2) | 0;\n          mid = mid + Math.imul(ah3, bl2) | 0;\n          hi = hi + Math.imul(ah3, bh2) | 0;\n          lo = lo + Math.imul(al2, bl3) | 0;\n          mid = mid + Math.imul(al2, bh3) | 0;\n          mid = mid + Math.imul(ah2, bl3) | 0;\n          hi = hi + Math.imul(ah2, bh3) | 0;\n          lo = lo + Math.imul(al1, bl4) | 0;\n          mid = mid + Math.imul(al1, bh4) | 0;\n          mid = mid + Math.imul(ah1, bl4) | 0;\n          hi = hi + Math.imul(ah1, bh4) | 0;\n          lo = lo + Math.imul(al0, bl5) | 0;\n          mid = mid + Math.imul(al0, bh5) | 0;\n          mid = mid + Math.imul(ah0, bl5) | 0;\n          hi = hi + Math.imul(ah0, bh5) | 0;\n          var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n          w5 &= 67108863;\n          lo = Math.imul(al6, bl0);\n          mid = Math.imul(al6, bh0);\n          mid = mid + Math.imul(ah6, bl0) | 0;\n          hi = Math.imul(ah6, bh0);\n          lo = lo + Math.imul(al5, bl1) | 0;\n          mid = mid + Math.imul(al5, bh1) | 0;\n          mid = mid + Math.imul(ah5, bl1) | 0;\n          hi = hi + Math.imul(ah5, bh1) | 0;\n          lo = lo + Math.imul(al4, bl2) | 0;\n          mid = mid + Math.imul(al4, bh2) | 0;\n          mid = mid + Math.imul(ah4, bl2) | 0;\n          hi = hi + Math.imul(ah4, bh2) | 0;\n          lo = lo + Math.imul(al3, bl3) | 0;\n          mid = mid + Math.imul(al3, bh3) | 0;\n          mid = mid + Math.imul(ah3, bl3) | 0;\n          hi = hi + Math.imul(ah3, bh3) | 0;\n          lo = lo + Math.imul(al2, bl4) | 0;\n          mid = mid + Math.imul(al2, bh4) | 0;\n          mid = mid + Math.imul(ah2, bl4) | 0;\n          hi = hi + Math.imul(ah2, bh4) | 0;\n          lo = lo + Math.imul(al1, bl5) | 0;\n          mid = mid + Math.imul(al1, bh5) | 0;\n          mid = mid + Math.imul(ah1, bl5) | 0;\n          hi = hi + Math.imul(ah1, bh5) | 0;\n          lo = lo + Math.imul(al0, bl6) | 0;\n          mid = mid + Math.imul(al0, bh6) | 0;\n          mid = mid + Math.imul(ah0, bl6) | 0;\n          hi = hi + Math.imul(ah0, bh6) | 0;\n          var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n          w6 &= 67108863;\n          lo = Math.imul(al7, bl0);\n          mid = Math.imul(al7, bh0);\n          mid = mid + Math.imul(ah7, bl0) | 0;\n          hi = Math.imul(ah7, bh0);\n          lo = lo + Math.imul(al6, bl1) | 0;\n          mid = mid + Math.imul(al6, bh1) | 0;\n          mid = mid + Math.imul(ah6, bl1) | 0;\n          hi = hi + Math.imul(ah6, bh1) | 0;\n          lo = lo + Math.imul(al5, bl2) | 0;\n          mid = mid + Math.imul(al5, bh2) | 0;\n          mid = mid + Math.imul(ah5, bl2) | 0;\n          hi = hi + Math.imul(ah5, bh2) | 0;\n          lo = lo + Math.imul(al4, bl3) | 0;\n          mid = mid + Math.imul(al4, bh3) | 0;\n          mid = mid + Math.imul(ah4, bl3) | 0;\n          hi = hi + Math.imul(ah4, bh3) | 0;\n          lo = lo + Math.imul(al3, bl4) | 0;\n          mid = mid + Math.imul(al3, bh4) | 0;\n          mid = mid + Math.imul(ah3, bl4) | 0;\n          hi = hi + Math.imul(ah3, bh4) | 0;\n          lo = lo + Math.imul(al2, bl5) | 0;\n          mid = mid + Math.imul(al2, bh5) | 0;\n          mid = mid + Math.imul(ah2, bl5) | 0;\n          hi = hi + Math.imul(ah2, bh5) | 0;\n          lo = lo + Math.imul(al1, bl6) | 0;\n          mid = mid + Math.imul(al1, bh6) | 0;\n          mid = mid + Math.imul(ah1, bl6) | 0;\n          hi = hi + Math.imul(ah1, bh6) | 0;\n          lo = lo + Math.imul(al0, bl7) | 0;\n          mid = mid + Math.imul(al0, bh7) | 0;\n          mid = mid + Math.imul(ah0, bl7) | 0;\n          hi = hi + Math.imul(ah0, bh7) | 0;\n          var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n          w7 &= 67108863;\n          lo = Math.imul(al8, bl0);\n          mid = Math.imul(al8, bh0);\n          mid = mid + Math.imul(ah8, bl0) | 0;\n          hi = Math.imul(ah8, bh0);\n          lo = lo + Math.imul(al7, bl1) | 0;\n          mid = mid + Math.imul(al7, bh1) | 0;\n          mid = mid + Math.imul(ah7, bl1) | 0;\n          hi = hi + Math.imul(ah7, bh1) | 0;\n          lo = lo + Math.imul(al6, bl2) | 0;\n          mid = mid + Math.imul(al6, bh2) | 0;\n          mid = mid + Math.imul(ah6, bl2) | 0;\n          hi = hi + Math.imul(ah6, bh2) | 0;\n          lo = lo + Math.imul(al5, bl3) | 0;\n          mid = mid + Math.imul(al5, bh3) | 0;\n          mid = mid + Math.imul(ah5, bl3) | 0;\n          hi = hi + Math.imul(ah5, bh3) | 0;\n          lo = lo + Math.imul(al4, bl4) | 0;\n          mid = mid + Math.imul(al4, bh4) | 0;\n          mid = mid + Math.imul(ah4, bl4) | 0;\n          hi = hi + Math.imul(ah4, bh4) | 0;\n          lo = lo + Math.imul(al3, bl5) | 0;\n          mid = mid + Math.imul(al3, bh5) | 0;\n          mid = mid + Math.imul(ah3, bl5) | 0;\n          hi = hi + Math.imul(ah3, bh5) | 0;\n          lo = lo + Math.imul(al2, bl6) | 0;\n          mid = mid + Math.imul(al2, bh6) | 0;\n          mid = mid + Math.imul(ah2, bl6) | 0;\n          hi = hi + Math.imul(ah2, bh6) | 0;\n          lo = lo + Math.imul(al1, bl7) | 0;\n          mid = mid + Math.imul(al1, bh7) | 0;\n          mid = mid + Math.imul(ah1, bl7) | 0;\n          hi = hi + Math.imul(ah1, bh7) | 0;\n          lo = lo + Math.imul(al0, bl8) | 0;\n          mid = mid + Math.imul(al0, bh8) | 0;\n          mid = mid + Math.imul(ah0, bl8) | 0;\n          hi = hi + Math.imul(ah0, bh8) | 0;\n          var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n          w8 &= 67108863;\n          lo = Math.imul(al9, bl0);\n          mid = Math.imul(al9, bh0);\n          mid = mid + Math.imul(ah9, bl0) | 0;\n          hi = Math.imul(ah9, bh0);\n          lo = lo + Math.imul(al8, bl1) | 0;\n          mid = mid + Math.imul(al8, bh1) | 0;\n          mid = mid + Math.imul(ah8, bl1) | 0;\n          hi = hi + Math.imul(ah8, bh1) | 0;\n          lo = lo + Math.imul(al7, bl2) | 0;\n          mid = mid + Math.imul(al7, bh2) | 0;\n          mid = mid + Math.imul(ah7, bl2) | 0;\n          hi = hi + Math.imul(ah7, bh2) | 0;\n          lo = lo + Math.imul(al6, bl3) | 0;\n          mid = mid + Math.imul(al6, bh3) | 0;\n          mid = mid + Math.imul(ah6, bl3) | 0;\n          hi = hi + Math.imul(ah6, bh3) | 0;\n          lo = lo + Math.imul(al5, bl4) | 0;\n          mid = mid + Math.imul(al5, bh4) | 0;\n          mid = mid + Math.imul(ah5, bl4) | 0;\n          hi = hi + Math.imul(ah5, bh4) | 0;\n          lo = lo + Math.imul(al4, bl5) | 0;\n          mid = mid + Math.imul(al4, bh5) | 0;\n          mid = mid + Math.imul(ah4, bl5) | 0;\n          hi = hi + Math.imul(ah4, bh5) | 0;\n          lo = lo + Math.imul(al3, bl6) | 0;\n          mid = mid + Math.imul(al3, bh6) | 0;\n          mid = mid + Math.imul(ah3, bl6) | 0;\n          hi = hi + Math.imul(ah3, bh6) | 0;\n          lo = lo + Math.imul(al2, bl7) | 0;\n          mid = mid + Math.imul(al2, bh7) | 0;\n          mid = mid + Math.imul(ah2, bl7) | 0;\n          hi = hi + Math.imul(ah2, bh7) | 0;\n          lo = lo + Math.imul(al1, bl8) | 0;\n          mid = mid + Math.imul(al1, bh8) | 0;\n          mid = mid + Math.imul(ah1, bl8) | 0;\n          hi = hi + Math.imul(ah1, bh8) | 0;\n          lo = lo + Math.imul(al0, bl9) | 0;\n          mid = mid + Math.imul(al0, bh9) | 0;\n          mid = mid + Math.imul(ah0, bl9) | 0;\n          hi = hi + Math.imul(ah0, bh9) | 0;\n          var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n          w9 &= 67108863;\n          lo = Math.imul(al9, bl1);\n          mid = Math.imul(al9, bh1);\n          mid = mid + Math.imul(ah9, bl1) | 0;\n          hi = Math.imul(ah9, bh1);\n          lo = lo + Math.imul(al8, bl2) | 0;\n          mid = mid + Math.imul(al8, bh2) | 0;\n          mid = mid + Math.imul(ah8, bl2) | 0;\n          hi = hi + Math.imul(ah8, bh2) | 0;\n          lo = lo + Math.imul(al7, bl3) | 0;\n          mid = mid + Math.imul(al7, bh3) | 0;\n          mid = mid + Math.imul(ah7, bl3) | 0;\n          hi = hi + Math.imul(ah7, bh3) | 0;\n          lo = lo + Math.imul(al6, bl4) | 0;\n          mid = mid + Math.imul(al6, bh4) | 0;\n          mid = mid + Math.imul(ah6, bl4) | 0;\n          hi = hi + Math.imul(ah6, bh4) | 0;\n          lo = lo + Math.imul(al5, bl5) | 0;\n          mid = mid + Math.imul(al5, bh5) | 0;\n          mid = mid + Math.imul(ah5, bl5) | 0;\n          hi = hi + Math.imul(ah5, bh5) | 0;\n          lo = lo + Math.imul(al4, bl6) | 0;\n          mid = mid + Math.imul(al4, bh6) | 0;\n          mid = mid + Math.imul(ah4, bl6) | 0;\n          hi = hi + Math.imul(ah4, bh6) | 0;\n          lo = lo + Math.imul(al3, bl7) | 0;\n          mid = mid + Math.imul(al3, bh7) | 0;\n          mid = mid + Math.imul(ah3, bl7) | 0;\n          hi = hi + Math.imul(ah3, bh7) | 0;\n          lo = lo + Math.imul(al2, bl8) | 0;\n          mid = mid + Math.imul(al2, bh8) | 0;\n          mid = mid + Math.imul(ah2, bl8) | 0;\n          hi = hi + Math.imul(ah2, bh8) | 0;\n          lo = lo + Math.imul(al1, bl9) | 0;\n          mid = mid + Math.imul(al1, bh9) | 0;\n          mid = mid + Math.imul(ah1, bl9) | 0;\n          hi = hi + Math.imul(ah1, bh9) | 0;\n          var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n          w10 &= 67108863;\n          lo = Math.imul(al9, bl2);\n          mid = Math.imul(al9, bh2);\n          mid = mid + Math.imul(ah9, bl2) | 0;\n          hi = Math.imul(ah9, bh2);\n          lo = lo + Math.imul(al8, bl3) | 0;\n          mid = mid + Math.imul(al8, bh3) | 0;\n          mid = mid + Math.imul(ah8, bl3) | 0;\n          hi = hi + Math.imul(ah8, bh3) | 0;\n          lo = lo + Math.imul(al7, bl4) | 0;\n          mid = mid + Math.imul(al7, bh4) | 0;\n          mid = mid + Math.imul(ah7, bl4) | 0;\n          hi = hi + Math.imul(ah7, bh4) | 0;\n          lo = lo + Math.imul(al6, bl5) | 0;\n          mid = mid + Math.imul(al6, bh5) | 0;\n          mid = mid + Math.imul(ah6, bl5) | 0;\n          hi = hi + Math.imul(ah6, bh5) | 0;\n          lo = lo + Math.imul(al5, bl6) | 0;\n          mid = mid + Math.imul(al5, bh6) | 0;\n          mid = mid + Math.imul(ah5, bl6) | 0;\n          hi = hi + Math.imul(ah5, bh6) | 0;\n          lo = lo + Math.imul(al4, bl7) | 0;\n          mid = mid + Math.imul(al4, bh7) | 0;\n          mid = mid + Math.imul(ah4, bl7) | 0;\n          hi = hi + Math.imul(ah4, bh7) | 0;\n          lo = lo + Math.imul(al3, bl8) | 0;\n          mid = mid + Math.imul(al3, bh8) | 0;\n          mid = mid + Math.imul(ah3, bl8) | 0;\n          hi = hi + Math.imul(ah3, bh8) | 0;\n          lo = lo + Math.imul(al2, bl9) | 0;\n          mid = mid + Math.imul(al2, bh9) | 0;\n          mid = mid + Math.imul(ah2, bl9) | 0;\n          hi = hi + Math.imul(ah2, bh9) | 0;\n          var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n          w11 &= 67108863;\n          lo = Math.imul(al9, bl3);\n          mid = Math.imul(al9, bh3);\n          mid = mid + Math.imul(ah9, bl3) | 0;\n          hi = Math.imul(ah9, bh3);\n          lo = lo + Math.imul(al8, bl4) | 0;\n          mid = mid + Math.imul(al8, bh4) | 0;\n          mid = mid + Math.imul(ah8, bl4) | 0;\n          hi = hi + Math.imul(ah8, bh4) | 0;\n          lo = lo + Math.imul(al7, bl5) | 0;\n          mid = mid + Math.imul(al7, bh5) | 0;\n          mid = mid + Math.imul(ah7, bl5) | 0;\n          hi = hi + Math.imul(ah7, bh5) | 0;\n          lo = lo + Math.imul(al6, bl6) | 0;\n          mid = mid + Math.imul(al6, bh6) | 0;\n          mid = mid + Math.imul(ah6, bl6) | 0;\n          hi = hi + Math.imul(ah6, bh6) | 0;\n          lo = lo + Math.imul(al5, bl7) | 0;\n          mid = mid + Math.imul(al5, bh7) | 0;\n          mid = mid + Math.imul(ah5, bl7) | 0;\n          hi = hi + Math.imul(ah5, bh7) | 0;\n          lo = lo + Math.imul(al4, bl8) | 0;\n          mid = mid + Math.imul(al4, bh8) | 0;\n          mid = mid + Math.imul(ah4, bl8) | 0;\n          hi = hi + Math.imul(ah4, bh8) | 0;\n          lo = lo + Math.imul(al3, bl9) | 0;\n          mid = mid + Math.imul(al3, bh9) | 0;\n          mid = mid + Math.imul(ah3, bl9) | 0;\n          hi = hi + Math.imul(ah3, bh9) | 0;\n          var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n          w12 &= 67108863;\n          lo = Math.imul(al9, bl4);\n          mid = Math.imul(al9, bh4);\n          mid = mid + Math.imul(ah9, bl4) | 0;\n          hi = Math.imul(ah9, bh4);\n          lo = lo + Math.imul(al8, bl5) | 0;\n          mid = mid + Math.imul(al8, bh5) | 0;\n          mid = mid + Math.imul(ah8, bl5) | 0;\n          hi = hi + Math.imul(ah8, bh5) | 0;\n          lo = lo + Math.imul(al7, bl6) | 0;\n          mid = mid + Math.imul(al7, bh6) | 0;\n          mid = mid + Math.imul(ah7, bl6) | 0;\n          hi = hi + Math.imul(ah7, bh6) | 0;\n          lo = lo + Math.imul(al6, bl7) | 0;\n          mid = mid + Math.imul(al6, bh7) | 0;\n          mid = mid + Math.imul(ah6, bl7) | 0;\n          hi = hi + Math.imul(ah6, bh7) | 0;\n          lo = lo + Math.imul(al5, bl8) | 0;\n          mid = mid + Math.imul(al5, bh8) | 0;\n          mid = mid + Math.imul(ah5, bl8) | 0;\n          hi = hi + Math.imul(ah5, bh8) | 0;\n          lo = lo + Math.imul(al4, bl9) | 0;\n          mid = mid + Math.imul(al4, bh9) | 0;\n          mid = mid + Math.imul(ah4, bl9) | 0;\n          hi = hi + Math.imul(ah4, bh9) | 0;\n          var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n          w13 &= 67108863;\n          lo = Math.imul(al9, bl5);\n          mid = Math.imul(al9, bh5);\n          mid = mid + Math.imul(ah9, bl5) | 0;\n          hi = Math.imul(ah9, bh5);\n          lo = lo + Math.imul(al8, bl6) | 0;\n          mid = mid + Math.imul(al8, bh6) | 0;\n          mid = mid + Math.imul(ah8, bl6) | 0;\n          hi = hi + Math.imul(ah8, bh6) | 0;\n          lo = lo + Math.imul(al7, bl7) | 0;\n          mid = mid + Math.imul(al7, bh7) | 0;\n          mid = mid + Math.imul(ah7, bl7) | 0;\n          hi = hi + Math.imul(ah7, bh7) | 0;\n          lo = lo + Math.imul(al6, bl8) | 0;\n          mid = mid + Math.imul(al6, bh8) | 0;\n          mid = mid + Math.imul(ah6, bl8) | 0;\n          hi = hi + Math.imul(ah6, bh8) | 0;\n          lo = lo + Math.imul(al5, bl9) | 0;\n          mid = mid + Math.imul(al5, bh9) | 0;\n          mid = mid + Math.imul(ah5, bl9) | 0;\n          hi = hi + Math.imul(ah5, bh9) | 0;\n          var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n          w14 &= 67108863;\n          lo = Math.imul(al9, bl6);\n          mid = Math.imul(al9, bh6);\n          mid = mid + Math.imul(ah9, bl6) | 0;\n          hi = Math.imul(ah9, bh6);\n          lo = lo + Math.imul(al8, bl7) | 0;\n          mid = mid + Math.imul(al8, bh7) | 0;\n          mid = mid + Math.imul(ah8, bl7) | 0;\n          hi = hi + Math.imul(ah8, bh7) | 0;\n          lo = lo + Math.imul(al7, bl8) | 0;\n          mid = mid + Math.imul(al7, bh8) | 0;\n          mid = mid + Math.imul(ah7, bl8) | 0;\n          hi = hi + Math.imul(ah7, bh8) | 0;\n          lo = lo + Math.imul(al6, bl9) | 0;\n          mid = mid + Math.imul(al6, bh9) | 0;\n          mid = mid + Math.imul(ah6, bl9) | 0;\n          hi = hi + Math.imul(ah6, bh9) | 0;\n          var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n          w15 &= 67108863;\n          lo = Math.imul(al9, bl7);\n          mid = Math.imul(al9, bh7);\n          mid = mid + Math.imul(ah9, bl7) | 0;\n          hi = Math.imul(ah9, bh7);\n          lo = lo + Math.imul(al8, bl8) | 0;\n          mid = mid + Math.imul(al8, bh8) | 0;\n          mid = mid + Math.imul(ah8, bl8) | 0;\n          hi = hi + Math.imul(ah8, bh8) | 0;\n          lo = lo + Math.imul(al7, bl9) | 0;\n          mid = mid + Math.imul(al7, bh9) | 0;\n          mid = mid + Math.imul(ah7, bl9) | 0;\n          hi = hi + Math.imul(ah7, bh9) | 0;\n          var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n          w16 &= 67108863;\n          lo = Math.imul(al9, bl8);\n          mid = Math.imul(al9, bh8);\n          mid = mid + Math.imul(ah9, bl8) | 0;\n          hi = Math.imul(ah9, bh8);\n          lo = lo + Math.imul(al8, bl9) | 0;\n          mid = mid + Math.imul(al8, bh9) | 0;\n          mid = mid + Math.imul(ah8, bl9) | 0;\n          hi = hi + Math.imul(ah8, bh9) | 0;\n          var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n          w17 &= 67108863;\n          lo = Math.imul(al9, bl9);\n          mid = Math.imul(al9, bh9);\n          mid = mid + Math.imul(ah9, bl9) | 0;\n          hi = Math.imul(ah9, bh9);\n          var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n          w18 &= 67108863;\n          o[0] = w0;\n          o[1] = w1;\n          o[2] = w2;\n          o[3] = w3;\n          o[4] = w4;\n          o[5] = w5;\n          o[6] = w6;\n          o[7] = w7;\n          o[8] = w8;\n          o[9] = w9;\n          o[10] = w10;\n          o[11] = w11;\n          o[12] = w12;\n          o[13] = w13;\n          o[14] = w14;\n          o[15] = w15;\n          o[16] = w16;\n          o[17] = w17;\n          o[18] = w18;\n          if (c !== 0) {\n            o[19] = c;\n            out.length++;\n          }\n          return out;\n        };\n        if (!Math.imul) {\n          comb10MulTo = smallMulTo;\n        }\n        function bigMulTo(self2, num, out) {\n          out.negative = num.negative ^ self2.negative;\n          out.length = self2.length + num.length;\n          var carry = 0;\n          var hncarry = 0;\n          for (var k = 0; k < out.length - 1; k++) {\n            var ncarry = hncarry;\n            hncarry = 0;\n            var rword = carry & 67108863;\n            var maxJ = Math.min(k, num.length - 1);\n            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n              var i = k - j;\n              var a = self2.words[i] | 0;\n              var b2 = num.words[j] | 0;\n              var r2 = a * b2;\n              var lo = r2 & 67108863;\n              ncarry = ncarry + (r2 / 67108864 | 0) | 0;\n              lo = lo + rword | 0;\n              rword = lo & 67108863;\n              ncarry = ncarry + (lo >>> 26) | 0;\n              hncarry += ncarry >>> 26;\n              ncarry &= 67108863;\n            }\n            out.words[k] = rword;\n            carry = ncarry;\n            ncarry = hncarry;\n          }\n          if (carry !== 0) {\n            out.words[k] = carry;\n          } else {\n            out.length--;\n          }\n          return out._strip();\n        }\n        function jumboMulTo(self2, num, out) {\n          return bigMulTo(self2, num, out);\n        }\n        BN3.prototype.mulTo = function mulTo(num, out) {\n          var res;\n          var len = this.length + num.length;\n          if (this.length === 10 && num.length === 10) {\n            res = comb10MulTo(this, num, out);\n          } else if (len < 63) {\n            res = smallMulTo(this, num, out);\n          } else if (len < 1024) {\n            res = bigMulTo(this, num, out);\n          } else {\n            res = jumboMulTo(this, num, out);\n          }\n          return res;\n        };\n        function FFTM(x, y) {\n          this.x = x;\n          this.y = y;\n        }\n        FFTM.prototype.makeRBT = function makeRBT(N2) {\n          var t = new Array(N2);\n          var l = BN3.prototype._countBits(N2) - 1;\n          for (var i = 0; i < N2; i++) {\n            t[i] = this.revBin(i, l, N2);\n          }\n          return t;\n        };\n        FFTM.prototype.revBin = function revBin(x, l, N2) {\n          if (x === 0 || x === N2 - 1)\n            return x;\n          var rb = 0;\n          for (var i = 0; i < l; i++) {\n            rb |= (x & 1) << l - i - 1;\n            x >>= 1;\n          }\n          return rb;\n        };\n        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N2) {\n          for (var i = 0; i < N2; i++) {\n            rtws[i] = rws[rbt[i]];\n            itws[i] = iws[rbt[i]];\n          }\n        };\n        FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N2, rbt) {\n          this.permute(rbt, rws, iws, rtws, itws, N2);\n          for (var s = 1; s < N2; s <<= 1) {\n            var l = s << 1;\n            var rtwdf = Math.cos(2 * Math.PI / l);\n            var itwdf = Math.sin(2 * Math.PI / l);\n            for (var p = 0; p < N2; p += l) {\n              var rtwdf_ = rtwdf;\n              var itwdf_ = itwdf;\n              for (var j = 0; j < s; j++) {\n                var re = rtws[p + j];\n                var ie = itws[p + j];\n                var ro = rtws[p + j + s];\n                var io = itws[p + j + s];\n                var rx = rtwdf_ * ro - itwdf_ * io;\n                io = rtwdf_ * io + itwdf_ * ro;\n                ro = rx;\n                rtws[p + j] = re + ro;\n                itws[p + j] = ie + io;\n                rtws[p + j + s] = re - ro;\n                itws[p + j + s] = ie - io;\n                if (j !== l) {\n                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                  rtwdf_ = rx;\n                }\n              }\n            }\n          }\n        };\n        FFTM.prototype.guessLen13b = function guessLen13b(n2, m) {\n          var N2 = Math.max(m, n2) | 1;\n          var odd = N2 & 1;\n          var i = 0;\n          for (N2 = N2 / 2 | 0; N2; N2 = N2 >>> 1) {\n            i++;\n          }\n          return 1 << i + 1 + odd;\n        };\n        FFTM.prototype.conjugate = function conjugate(rws, iws, N2) {\n          if (N2 <= 1)\n            return;\n          for (var i = 0; i < N2 / 2; i++) {\n            var t = rws[i];\n            rws[i] = rws[N2 - i - 1];\n            rws[N2 - i - 1] = t;\n            t = iws[i];\n            iws[i] = -iws[N2 - i - 1];\n            iws[N2 - i - 1] = -t;\n          }\n        };\n        FFTM.prototype.normalize13b = function normalize13b(ws, N2) {\n          var carry = 0;\n          for (var i = 0; i < N2 / 2; i++) {\n            var w = Math.round(ws[2 * i + 1] / N2) * 8192 + Math.round(ws[2 * i] / N2) + carry;\n            ws[i] = w & 67108863;\n            if (w < 67108864) {\n              carry = 0;\n            } else {\n              carry = w / 67108864 | 0;\n            }\n          }\n          return ws;\n        };\n        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N2) {\n          var carry = 0;\n          for (var i = 0; i < len; i++) {\n            carry = carry + (ws[i] | 0);\n            rws[2 * i] = carry & 8191;\n            carry = carry >>> 13;\n            rws[2 * i + 1] = carry & 8191;\n            carry = carry >>> 13;\n          }\n          for (i = 2 * len; i < N2; ++i) {\n            rws[i] = 0;\n          }\n          assert4(carry === 0);\n          assert4((carry & ~8191) === 0);\n        };\n        FFTM.prototype.stub = function stub(N2) {\n          var ph = new Array(N2);\n          for (var i = 0; i < N2; i++) {\n            ph[i] = 0;\n          }\n          return ph;\n        };\n        FFTM.prototype.mulp = function mulp(x, y, out) {\n          var N2 = 2 * this.guessLen13b(x.length, y.length);\n          var rbt = this.makeRBT(N2);\n          var _ = this.stub(N2);\n          var rws = new Array(N2);\n          var rwst = new Array(N2);\n          var iwst = new Array(N2);\n          var nrws = new Array(N2);\n          var nrwst = new Array(N2);\n          var niwst = new Array(N2);\n          var rmws = out.words;\n          rmws.length = N2;\n          this.convert13b(x.words, x.length, rws, N2);\n          this.convert13b(y.words, y.length, nrws, N2);\n          this.transform(rws, _, rwst, iwst, N2, rbt);\n          this.transform(nrws, _, nrwst, niwst, N2, rbt);\n          for (var i = 0; i < N2; i++) {\n            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n            rwst[i] = rx;\n          }\n          this.conjugate(rwst, iwst, N2);\n          this.transform(rwst, iwst, rmws, _, N2, rbt);\n          this.conjugate(rmws, _, N2);\n          this.normalize13b(rmws, N2);\n          out.negative = x.negative ^ y.negative;\n          out.length = x.length + y.length;\n          return out._strip();\n        };\n        BN3.prototype.mul = function mul3(num) {\n          var out = new BN3(null);\n          out.words = new Array(this.length + num.length);\n          return this.mulTo(num, out);\n        };\n        BN3.prototype.mulf = function mulf(num) {\n          var out = new BN3(null);\n          out.words = new Array(this.length + num.length);\n          return jumboMulTo(this, num, out);\n        };\n        BN3.prototype.imul = function imul(num) {\n          return this.clone().mulTo(num, this);\n        };\n        BN3.prototype.imuln = function imuln(num) {\n          var isNegNum = num < 0;\n          if (isNegNum)\n            num = -num;\n          assert4(typeof num === \"number\");\n          assert4(num < 67108864);\n          var carry = 0;\n          for (var i = 0; i < this.length; i++) {\n            var w = (this.words[i] | 0) * num;\n            var lo = (w & 67108863) + (carry & 67108863);\n            carry >>= 26;\n            carry += w / 67108864 | 0;\n            carry += lo >>> 26;\n            this.words[i] = lo & 67108863;\n          }\n          if (carry !== 0) {\n            this.words[i] = carry;\n            this.length++;\n          }\n          this.length = num === 0 ? 1 : this.length;\n          return isNegNum ? this.ineg() : this;\n        };\n        BN3.prototype.muln = function muln(num) {\n          return this.clone().imuln(num);\n        };\n        BN3.prototype.sqr = function sqr() {\n          return this.mul(this);\n        };\n        BN3.prototype.isqr = function isqr() {\n          return this.imul(this.clone());\n        };\n        BN3.prototype.pow = function pow3(num) {\n          var w = toBitArray(num);\n          if (w.length === 0)\n            return new BN3(1);\n          var res = this;\n          for (var i = 0; i < w.length; i++, res = res.sqr()) {\n            if (w[i] !== 0)\n              break;\n          }\n          if (++i < w.length) {\n            for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n              if (w[i] === 0)\n                continue;\n              res = res.mul(q);\n            }\n          }\n          return res;\n        };\n        BN3.prototype.iushln = function iushln(bits) {\n          assert4(typeof bits === \"number\" && bits >= 0);\n          var r2 = bits % 26;\n          var s = (bits - r2) / 26;\n          var carryMask = 67108863 >>> 26 - r2 << 26 - r2;\n          var i;\n          if (r2 !== 0) {\n            var carry = 0;\n            for (i = 0; i < this.length; i++) {\n              var newCarry = this.words[i] & carryMask;\n              var c = (this.words[i] | 0) - newCarry << r2;\n              this.words[i] = c | carry;\n              carry = newCarry >>> 26 - r2;\n            }\n            if (carry) {\n              this.words[i] = carry;\n              this.length++;\n            }\n          }\n          if (s !== 0) {\n            for (i = this.length - 1; i >= 0; i--) {\n              this.words[i + s] = this.words[i];\n            }\n            for (i = 0; i < s; i++) {\n              this.words[i] = 0;\n            }\n            this.length += s;\n          }\n          return this._strip();\n        };\n        BN3.prototype.ishln = function ishln(bits) {\n          assert4(this.negative === 0);\n          return this.iushln(bits);\n        };\n        BN3.prototype.iushrn = function iushrn(bits, hint, extended) {\n          assert4(typeof bits === \"number\" && bits >= 0);\n          var h;\n          if (hint) {\n            h = (hint - hint % 26) / 26;\n          } else {\n            h = 0;\n          }\n          var r2 = bits % 26;\n          var s = Math.min((bits - r2) / 26, this.length);\n          var mask2 = 67108863 ^ 67108863 >>> r2 << r2;\n          var maskedWords = extended;\n          h -= s;\n          h = Math.max(0, h);\n          if (maskedWords) {\n            for (var i = 0; i < s; i++) {\n              maskedWords.words[i] = this.words[i];\n            }\n            maskedWords.length = s;\n          }\n          if (s === 0) {\n          } else if (this.length > s) {\n            this.length -= s;\n            for (i = 0; i < this.length; i++) {\n              this.words[i] = this.words[i + s];\n            }\n          } else {\n            this.words[0] = 0;\n            this.length = 1;\n          }\n          var carry = 0;\n          for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n            var word = this.words[i] | 0;\n            this.words[i] = carry << 26 - r2 | word >>> r2;\n            carry = word & mask2;\n          }\n          if (maskedWords && carry !== 0) {\n            maskedWords.words[maskedWords.length++] = carry;\n          }\n          if (this.length === 0) {\n            this.words[0] = 0;\n            this.length = 1;\n          }\n          return this._strip();\n        };\n        BN3.prototype.ishrn = function ishrn(bits, hint, extended) {\n          assert4(this.negative === 0);\n          return this.iushrn(bits, hint, extended);\n        };\n        BN3.prototype.shln = function shln(bits) {\n          return this.clone().ishln(bits);\n        };\n        BN3.prototype.ushln = function ushln(bits) {\n          return this.clone().iushln(bits);\n        };\n        BN3.prototype.shrn = function shrn(bits) {\n          return this.clone().ishrn(bits);\n        };\n        BN3.prototype.ushrn = function ushrn(bits) {\n          return this.clone().iushrn(bits);\n        };\n        BN3.prototype.testn = function testn(bit) {\n          assert4(typeof bit === \"number\" && bit >= 0);\n          var r2 = bit % 26;\n          var s = (bit - r2) / 26;\n          var q = 1 << r2;\n          if (this.length <= s)\n            return false;\n          var w = this.words[s];\n          return !!(w & q);\n        };\n        BN3.prototype.imaskn = function imaskn(bits) {\n          assert4(typeof bits === \"number\" && bits >= 0);\n          var r2 = bits % 26;\n          var s = (bits - r2) / 26;\n          assert4(this.negative === 0, \"imaskn works only with positive numbers\");\n          if (this.length <= s) {\n            return this;\n          }\n          if (r2 !== 0) {\n            s++;\n          }\n          this.length = Math.min(s, this.length);\n          if (r2 !== 0) {\n            var mask2 = 67108863 ^ 67108863 >>> r2 << r2;\n            this.words[this.length - 1] &= mask2;\n          }\n          return this._strip();\n        };\n        BN3.prototype.maskn = function maskn(bits) {\n          return this.clone().imaskn(bits);\n        };\n        BN3.prototype.iaddn = function iaddn(num) {\n          assert4(typeof num === \"number\");\n          assert4(num < 67108864);\n          if (num < 0)\n            return this.isubn(-num);\n          if (this.negative !== 0) {\n            if (this.length === 1 && (this.words[0] | 0) <= num) {\n              this.words[0] = num - (this.words[0] | 0);\n              this.negative = 0;\n              return this;\n            }\n            this.negative = 0;\n            this.isubn(num);\n            this.negative = 1;\n            return this;\n          }\n          return this._iaddn(num);\n        };\n        BN3.prototype._iaddn = function _iaddn(num) {\n          this.words[0] += num;\n          for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {\n            this.words[i] -= 67108864;\n            if (i === this.length - 1) {\n              this.words[i + 1] = 1;\n            } else {\n              this.words[i + 1]++;\n            }\n          }\n          this.length = Math.max(this.length, i + 1);\n          return this;\n        };\n        BN3.prototype.isubn = function isubn(num) {\n          assert4(typeof num === \"number\");\n          assert4(num < 67108864);\n          if (num < 0)\n            return this.iaddn(-num);\n          if (this.negative !== 0) {\n            this.negative = 0;\n            this.iaddn(num);\n            this.negative = 1;\n            return this;\n          }\n          this.words[0] -= num;\n          if (this.length === 1 && this.words[0] < 0) {\n            this.words[0] = -this.words[0];\n            this.negative = 1;\n          } else {\n            for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n              this.words[i] += 67108864;\n              this.words[i + 1] -= 1;\n            }\n          }\n          return this._strip();\n        };\n        BN3.prototype.addn = function addn(num) {\n          return this.clone().iaddn(num);\n        };\n        BN3.prototype.subn = function subn(num) {\n          return this.clone().isubn(num);\n        };\n        BN3.prototype.iabs = function iabs() {\n          this.negative = 0;\n          return this;\n        };\n        BN3.prototype.abs = function abs() {\n          return this.clone().iabs();\n        };\n        BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {\n          var len = num.length + shift;\n          var i;\n          this._expand(len);\n          var w;\n          var carry = 0;\n          for (i = 0; i < num.length; i++) {\n            w = (this.words[i + shift] | 0) + carry;\n            var right = (num.words[i] | 0) * mul3;\n            w -= right & 67108863;\n            carry = (w >> 26) - (right / 67108864 | 0);\n            this.words[i + shift] = w & 67108863;\n          }\n          for (; i < this.length - shift; i++) {\n            w = (this.words[i + shift] | 0) + carry;\n            carry = w >> 26;\n            this.words[i + shift] = w & 67108863;\n          }\n          if (carry === 0)\n            return this._strip();\n          assert4(carry === -1);\n          carry = 0;\n          for (i = 0; i < this.length; i++) {\n            w = -(this.words[i] | 0) + carry;\n            carry = w >> 26;\n            this.words[i] = w & 67108863;\n          }\n          this.negative = 1;\n          return this._strip();\n        };\n        BN3.prototype._wordDiv = function _wordDiv(num, mode) {\n          var shift = this.length - num.length;\n          var a = this.clone();\n          var b2 = num;\n          var bhi = b2.words[b2.length - 1] | 0;\n          var bhiBits = this._countBits(bhi);\n          shift = 26 - bhiBits;\n          if (shift !== 0) {\n            b2 = b2.ushln(shift);\n            a.iushln(shift);\n            bhi = b2.words[b2.length - 1] | 0;\n          }\n          var m = a.length - b2.length;\n          var q;\n          if (mode !== \"mod\") {\n            q = new BN3(null);\n            q.length = m + 1;\n            q.words = new Array(q.length);\n            for (var i = 0; i < q.length; i++) {\n              q.words[i] = 0;\n            }\n          }\n          var diff = a.clone()._ishlnsubmul(b2, 1, m);\n          if (diff.negative === 0) {\n            a = diff;\n            if (q) {\n              q.words[m] = 1;\n            }\n          }\n          for (var j = m - 1; j >= 0; j--) {\n            var qj = (a.words[b2.length + j] | 0) * 67108864 + (a.words[b2.length + j - 1] | 0);\n            qj = Math.min(qj / bhi | 0, 67108863);\n            a._ishlnsubmul(b2, qj, j);\n            while (a.negative !== 0) {\n              qj--;\n              a.negative = 0;\n              a._ishlnsubmul(b2, 1, j);\n              if (!a.isZero()) {\n                a.negative ^= 1;\n              }\n            }\n            if (q) {\n              q.words[j] = qj;\n            }\n          }\n          if (q) {\n            q._strip();\n          }\n          a._strip();\n          if (mode !== \"div\" && shift !== 0) {\n            a.iushrn(shift);\n          }\n          return {\n            div: q || null,\n            mod: a\n          };\n        };\n        BN3.prototype.divmod = function divmod(num, mode, positive) {\n          assert4(!num.isZero());\n          if (this.isZero()) {\n            return {\n              div: new BN3(0),\n              mod: new BN3(0)\n            };\n          }\n          var div, mod2, res;\n          if (this.negative !== 0 && num.negative === 0) {\n            res = this.neg().divmod(num, mode);\n            if (mode !== \"mod\") {\n              div = res.div.neg();\n            }\n            if (mode !== \"div\") {\n              mod2 = res.mod.neg();\n              if (positive && mod2.negative !== 0) {\n                mod2.iadd(num);\n              }\n            }\n            return {\n              div,\n              mod: mod2\n            };\n          }\n          if (this.negative === 0 && num.negative !== 0) {\n            res = this.divmod(num.neg(), mode);\n            if (mode !== \"mod\") {\n              div = res.div.neg();\n            }\n            return {\n              div,\n              mod: res.mod\n            };\n          }\n          if ((this.negative & num.negative) !== 0) {\n            res = this.neg().divmod(num.neg(), mode);\n            if (mode !== \"div\") {\n              mod2 = res.mod.neg();\n              if (positive && mod2.negative !== 0) {\n                mod2.isub(num);\n              }\n            }\n            return {\n              div: res.div,\n              mod: mod2\n            };\n          }\n          if (num.length > this.length || this.cmp(num) < 0) {\n            return {\n              div: new BN3(0),\n              mod: this\n            };\n          }\n          if (num.length === 1) {\n            if (mode === \"div\") {\n              return {\n                div: this.divn(num.words[0]),\n                mod: null\n              };\n            }\n            if (mode === \"mod\") {\n              return {\n                div: null,\n                mod: new BN3(this.modrn(num.words[0]))\n              };\n            }\n            return {\n              div: this.divn(num.words[0]),\n              mod: new BN3(this.modrn(num.words[0]))\n            };\n          }\n          return this._wordDiv(num, mode);\n        };\n        BN3.prototype.div = function div(num) {\n          return this.divmod(num, \"div\", false).div;\n        };\n        BN3.prototype.mod = function mod2(num) {\n          return this.divmod(num, \"mod\", false).mod;\n        };\n        BN3.prototype.umod = function umod(num) {\n          return this.divmod(num, \"mod\", true).mod;\n        };\n        BN3.prototype.divRound = function divRound(num) {\n          var dm = this.divmod(num);\n          if (dm.mod.isZero())\n            return dm.div;\n          var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n          var half = num.ushrn(1);\n          var r2 = num.andln(1);\n          var cmp = mod2.cmp(half);\n          if (cmp < 0 || r2 === 1 && cmp === 0)\n            return dm.div;\n          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n        };\n        BN3.prototype.modrn = function modrn(num) {\n          var isNegNum = num < 0;\n          if (isNegNum)\n            num = -num;\n          assert4(num <= 67108863);\n          var p = (1 << 26) % num;\n          var acc = 0;\n          for (var i = this.length - 1; i >= 0; i--) {\n            acc = (p * acc + (this.words[i] | 0)) % num;\n          }\n          return isNegNum ? -acc : acc;\n        };\n        BN3.prototype.modn = function modn(num) {\n          return this.modrn(num);\n        };\n        BN3.prototype.idivn = function idivn(num) {\n          var isNegNum = num < 0;\n          if (isNegNum)\n            num = -num;\n          assert4(num <= 67108863);\n          var carry = 0;\n          for (var i = this.length - 1; i >= 0; i--) {\n            var w = (this.words[i] | 0) + carry * 67108864;\n            this.words[i] = w / num | 0;\n            carry = w % num;\n          }\n          this._strip();\n          return isNegNum ? this.ineg() : this;\n        };\n        BN3.prototype.divn = function divn(num) {\n          return this.clone().idivn(num);\n        };\n        BN3.prototype.egcd = function egcd(p) {\n          assert4(p.negative === 0);\n          assert4(!p.isZero());\n          var x = this;\n          var y = p.clone();\n          if (x.negative !== 0) {\n            x = x.umod(p);\n          } else {\n            x = x.clone();\n          }\n          var A = new BN3(1);\n          var B = new BN3(0);\n          var C = new BN3(0);\n          var D = new BN3(1);\n          var g = 0;\n          while (x.isEven() && y.isEven()) {\n            x.iushrn(1);\n            y.iushrn(1);\n            ++g;\n          }\n          var yp = y.clone();\n          var xp = x.clone();\n          while (!x.isZero()) {\n            for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n              ;\n            if (i > 0) {\n              x.iushrn(i);\n              while (i-- > 0) {\n                if (A.isOdd() || B.isOdd()) {\n                  A.iadd(yp);\n                  B.isub(xp);\n                }\n                A.iushrn(1);\n                B.iushrn(1);\n              }\n            }\n            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n              ;\n            if (j > 0) {\n              y.iushrn(j);\n              while (j-- > 0) {\n                if (C.isOdd() || D.isOdd()) {\n                  C.iadd(yp);\n                  D.isub(xp);\n                }\n                C.iushrn(1);\n                D.iushrn(1);\n              }\n            }\n            if (x.cmp(y) >= 0) {\n              x.isub(y);\n              A.isub(C);\n              B.isub(D);\n            } else {\n              y.isub(x);\n              C.isub(A);\n              D.isub(B);\n            }\n          }\n          return {\n            a: C,\n            b: D,\n            gcd: y.iushln(g)\n          };\n        };\n        BN3.prototype._invmp = function _invmp(p) {\n          assert4(p.negative === 0);\n          assert4(!p.isZero());\n          var a = this;\n          var b2 = p.clone();\n          if (a.negative !== 0) {\n            a = a.umod(p);\n          } else {\n            a = a.clone();\n          }\n          var x1 = new BN3(1);\n          var x2 = new BN3(0);\n          var delta = b2.clone();\n          while (a.cmpn(1) > 0 && b2.cmpn(1) > 0) {\n            for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n              ;\n            if (i > 0) {\n              a.iushrn(i);\n              while (i-- > 0) {\n                if (x1.isOdd()) {\n                  x1.iadd(delta);\n                }\n                x1.iushrn(1);\n              }\n            }\n            for (var j = 0, jm = 1; (b2.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n              ;\n            if (j > 0) {\n              b2.iushrn(j);\n              while (j-- > 0) {\n                if (x2.isOdd()) {\n                  x2.iadd(delta);\n                }\n                x2.iushrn(1);\n              }\n            }\n            if (a.cmp(b2) >= 0) {\n              a.isub(b2);\n              x1.isub(x2);\n            } else {\n              b2.isub(a);\n              x2.isub(x1);\n            }\n          }\n          var res;\n          if (a.cmpn(1) === 0) {\n            res = x1;\n          } else {\n            res = x2;\n          }\n          if (res.cmpn(0) < 0) {\n            res.iadd(p);\n          }\n          return res;\n        };\n        BN3.prototype.gcd = function gcd(num) {\n          if (this.isZero())\n            return num.abs();\n          if (num.isZero())\n            return this.abs();\n          var a = this.clone();\n          var b2 = num.clone();\n          a.negative = 0;\n          b2.negative = 0;\n          for (var shift = 0; a.isEven() && b2.isEven(); shift++) {\n            a.iushrn(1);\n            b2.iushrn(1);\n          }\n          do {\n            while (a.isEven()) {\n              a.iushrn(1);\n            }\n            while (b2.isEven()) {\n              b2.iushrn(1);\n            }\n            var r2 = a.cmp(b2);\n            if (r2 < 0) {\n              var t = a;\n              a = b2;\n              b2 = t;\n            } else if (r2 === 0 || b2.cmpn(1) === 0) {\n              break;\n            }\n            a.isub(b2);\n          } while (true);\n          return b2.iushln(shift);\n        };\n        BN3.prototype.invm = function invm(num) {\n          return this.egcd(num).a.umod(num);\n        };\n        BN3.prototype.isEven = function isEven() {\n          return (this.words[0] & 1) === 0;\n        };\n        BN3.prototype.isOdd = function isOdd() {\n          return (this.words[0] & 1) === 1;\n        };\n        BN3.prototype.andln = function andln(num) {\n          return this.words[0] & num;\n        };\n        BN3.prototype.bincn = function bincn(bit) {\n          assert4(typeof bit === \"number\");\n          var r2 = bit % 26;\n          var s = (bit - r2) / 26;\n          var q = 1 << r2;\n          if (this.length <= s) {\n            this._expand(s + 1);\n            this.words[s] |= q;\n            return this;\n          }\n          var carry = q;\n          for (var i = s; carry !== 0 && i < this.length; i++) {\n            var w = this.words[i] | 0;\n            w += carry;\n            carry = w >>> 26;\n            w &= 67108863;\n            this.words[i] = w;\n          }\n          if (carry !== 0) {\n            this.words[i] = carry;\n            this.length++;\n          }\n          return this;\n        };\n        BN3.prototype.isZero = function isZero() {\n          return this.length === 1 && this.words[0] === 0;\n        };\n        BN3.prototype.cmpn = function cmpn(num) {\n          var negative = num < 0;\n          if (this.negative !== 0 && !negative)\n            return -1;\n          if (this.negative === 0 && negative)\n            return 1;\n          this._strip();\n          var res;\n          if (this.length > 1) {\n            res = 1;\n          } else {\n            if (negative) {\n              num = -num;\n            }\n            assert4(num <= 67108863, \"Number is too big\");\n            var w = this.words[0] | 0;\n            res = w === num ? 0 : w < num ? -1 : 1;\n          }\n          if (this.negative !== 0)\n            return -res | 0;\n          return res;\n        };\n        BN3.prototype.cmp = function cmp(num) {\n          if (this.negative !== 0 && num.negative === 0)\n            return -1;\n          if (this.negative === 0 && num.negative !== 0)\n            return 1;\n          var res = this.ucmp(num);\n          if (this.negative !== 0)\n            return -res | 0;\n          return res;\n        };\n        BN3.prototype.ucmp = function ucmp(num) {\n          if (this.length > num.length)\n            return 1;\n          if (this.length < num.length)\n            return -1;\n          var res = 0;\n          for (var i = this.length - 1; i >= 0; i--) {\n            var a = this.words[i] | 0;\n            var b2 = num.words[i] | 0;\n            if (a === b2)\n              continue;\n            if (a < b2) {\n              res = -1;\n            } else if (a > b2) {\n              res = 1;\n            }\n            break;\n          }\n          return res;\n        };\n        BN3.prototype.gtn = function gtn(num) {\n          return this.cmpn(num) === 1;\n        };\n        BN3.prototype.gt = function gt(num) {\n          return this.cmp(num) === 1;\n        };\n        BN3.prototype.gten = function gten(num) {\n          return this.cmpn(num) >= 0;\n        };\n        BN3.prototype.gte = function gte(num) {\n          return this.cmp(num) >= 0;\n        };\n        BN3.prototype.ltn = function ltn(num) {\n          return this.cmpn(num) === -1;\n        };\n        BN3.prototype.lt = function lt(num) {\n          return this.cmp(num) === -1;\n        };\n        BN3.prototype.lten = function lten(num) {\n          return this.cmpn(num) <= 0;\n        };\n        BN3.prototype.lte = function lte(num) {\n          return this.cmp(num) <= 0;\n        };\n        BN3.prototype.eqn = function eqn(num) {\n          return this.cmpn(num) === 0;\n        };\n        BN3.prototype.eq = function eq4(num) {\n          return this.cmp(num) === 0;\n        };\n        BN3.red = function red(num) {\n          return new Red(num);\n        };\n        BN3.prototype.toRed = function toRed(ctx) {\n          assert4(!this.red, \"Already a number in reduction context\");\n          assert4(this.negative === 0, \"red works only with positives\");\n          return ctx.convertTo(this)._forceRed(ctx);\n        };\n        BN3.prototype.fromRed = function fromRed() {\n          assert4(this.red, \"fromRed works only with numbers in reduction context\");\n          return this.red.convertFrom(this);\n        };\n        BN3.prototype._forceRed = function _forceRed(ctx) {\n          this.red = ctx;\n          return this;\n        };\n        BN3.prototype.forceRed = function forceRed(ctx) {\n          assert4(!this.red, \"Already a number in reduction context\");\n          return this._forceRed(ctx);\n        };\n        BN3.prototype.redAdd = function redAdd(num) {\n          assert4(this.red, \"redAdd works only with red numbers\");\n          return this.red.add(this, num);\n        };\n        BN3.prototype.redIAdd = function redIAdd(num) {\n          assert4(this.red, \"redIAdd works only with red numbers\");\n          return this.red.iadd(this, num);\n        };\n        BN3.prototype.redSub = function redSub(num) {\n          assert4(this.red, \"redSub works only with red numbers\");\n          return this.red.sub(this, num);\n        };\n        BN3.prototype.redISub = function redISub(num) {\n          assert4(this.red, \"redISub works only with red numbers\");\n          return this.red.isub(this, num);\n        };\n        BN3.prototype.redShl = function redShl(num) {\n          assert4(this.red, \"redShl works only with red numbers\");\n          return this.red.shl(this, num);\n        };\n        BN3.prototype.redMul = function redMul(num) {\n          assert4(this.red, \"redMul works only with red numbers\");\n          this.red._verify2(this, num);\n          return this.red.mul(this, num);\n        };\n        BN3.prototype.redIMul = function redIMul(num) {\n          assert4(this.red, \"redMul works only with red numbers\");\n          this.red._verify2(this, num);\n          return this.red.imul(this, num);\n        };\n        BN3.prototype.redSqr = function redSqr() {\n          assert4(this.red, \"redSqr works only with red numbers\");\n          this.red._verify1(this);\n          return this.red.sqr(this);\n        };\n        BN3.prototype.redISqr = function redISqr() {\n          assert4(this.red, \"redISqr works only with red numbers\");\n          this.red._verify1(this);\n          return this.red.isqr(this);\n        };\n        BN3.prototype.redSqrt = function redSqrt() {\n          assert4(this.red, \"redSqrt works only with red numbers\");\n          this.red._verify1(this);\n          return this.red.sqrt(this);\n        };\n        BN3.prototype.redInvm = function redInvm() {\n          assert4(this.red, \"redInvm works only with red numbers\");\n          this.red._verify1(this);\n          return this.red.invm(this);\n        };\n        BN3.prototype.redNeg = function redNeg() {\n          assert4(this.red, \"redNeg works only with red numbers\");\n          this.red._verify1(this);\n          return this.red.neg(this);\n        };\n        BN3.prototype.redPow = function redPow(num) {\n          assert4(this.red && !num.red, \"redPow(normalNum)\");\n          this.red._verify1(this);\n          return this.red.pow(this, num);\n        };\n        var primes = {\n          k256: null,\n          p224: null,\n          p192: null,\n          p25519: null\n        };\n        function MPrime(name, p) {\n          this.name = name;\n          this.p = new BN3(p, 16);\n          this.n = this.p.bitLength();\n          this.k = new BN3(1).iushln(this.n).isub(this.p);\n          this.tmp = this._tmp();\n        }\n        MPrime.prototype._tmp = function _tmp() {\n          var tmp = new BN3(null);\n          tmp.words = new Array(Math.ceil(this.n / 13));\n          return tmp;\n        };\n        MPrime.prototype.ireduce = function ireduce(num) {\n          var r2 = num;\n          var rlen;\n          do {\n            this.split(r2, this.tmp);\n            r2 = this.imulK(r2);\n            r2 = r2.iadd(this.tmp);\n            rlen = r2.bitLength();\n          } while (rlen > this.n);\n          var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);\n          if (cmp === 0) {\n            r2.words[0] = 0;\n            r2.length = 1;\n          } else if (cmp > 0) {\n            r2.isub(this.p);\n          } else {\n            if (r2.strip !== void 0) {\n              r2.strip();\n            } else {\n              r2._strip();\n            }\n          }\n          return r2;\n        };\n        MPrime.prototype.split = function split3(input, out) {\n          input.iushrn(this.n, 0, out);\n        };\n        MPrime.prototype.imulK = function imulK(num) {\n          return num.imul(this.k);\n        };\n        function K256() {\n          MPrime.call(\n            this,\n            \"k256\",\n            \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\"\n          );\n        }\n        inherits(K256, MPrime);\n        K256.prototype.split = function split3(input, output2) {\n          var mask2 = 4194303;\n          var outLen = Math.min(input.length, 9);\n          for (var i = 0; i < outLen; i++) {\n            output2.words[i] = input.words[i];\n          }\n          output2.length = outLen;\n          if (input.length <= 9) {\n            input.words[0] = 0;\n            input.length = 1;\n            return;\n          }\n          var prev = input.words[9];\n          output2.words[output2.length++] = prev & mask2;\n          for (i = 10; i < input.length; i++) {\n            var next = input.words[i] | 0;\n            input.words[i - 10] = (next & mask2) << 4 | prev >>> 22;\n            prev = next;\n          }\n          prev >>>= 22;\n          input.words[i - 10] = prev;\n          if (prev === 0 && input.length > 10) {\n            input.length -= 10;\n          } else {\n            input.length -= 9;\n          }\n        };\n        K256.prototype.imulK = function imulK(num) {\n          num.words[num.length] = 0;\n          num.words[num.length + 1] = 0;\n          num.length += 2;\n          var lo = 0;\n          for (var i = 0; i < num.length; i++) {\n            var w = num.words[i] | 0;\n            lo += w * 977;\n            num.words[i] = lo & 67108863;\n            lo = w * 64 + (lo / 67108864 | 0);\n          }\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n            if (num.words[num.length - 1] === 0) {\n              num.length--;\n            }\n          }\n          return num;\n        };\n        function P224() {\n          MPrime.call(\n            this,\n            \"p224\",\n            \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\"\n          );\n        }\n        inherits(P224, MPrime);\n        function P192() {\n          MPrime.call(\n            this,\n            \"p192\",\n            \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\"\n          );\n        }\n        inherits(P192, MPrime);\n        function P25519() {\n          MPrime.call(\n            this,\n            \"25519\",\n            \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\"\n          );\n        }\n        inherits(P25519, MPrime);\n        P25519.prototype.imulK = function imulK(num) {\n          var carry = 0;\n          for (var i = 0; i < num.length; i++) {\n            var hi = (num.words[i] | 0) * 19 + carry;\n            var lo = hi & 67108863;\n            hi >>>= 26;\n            num.words[i] = lo;\n            carry = hi;\n          }\n          if (carry !== 0) {\n            num.words[num.length++] = carry;\n          }\n          return num;\n        };\n        BN3._prime = function prime(name) {\n          if (primes[name])\n            return primes[name];\n          var prime2;\n          if (name === \"k256\") {\n            prime2 = new K256();\n          } else if (name === \"p224\") {\n            prime2 = new P224();\n          } else if (name === \"p192\") {\n            prime2 = new P192();\n          } else if (name === \"p25519\") {\n            prime2 = new P25519();\n          } else {\n            throw new Error(\"Unknown prime \" + name);\n          }\n          primes[name] = prime2;\n          return prime2;\n        };\n        function Red(m) {\n          if (typeof m === \"string\") {\n            var prime = BN3._prime(m);\n            this.m = prime.p;\n            this.prime = prime;\n          } else {\n            assert4(m.gtn(1), \"modulus must be greater than 1\");\n            this.m = m;\n            this.prime = null;\n          }\n        }\n        Red.prototype._verify1 = function _verify1(a) {\n          assert4(a.negative === 0, \"red works only with positives\");\n          assert4(a.red, \"red works only with red numbers\");\n        };\n        Red.prototype._verify2 = function _verify2(a, b2) {\n          assert4((a.negative | b2.negative) === 0, \"red works only with positives\");\n          assert4(\n            a.red && a.red === b2.red,\n            \"red works only with red numbers\"\n          );\n        };\n        Red.prototype.imod = function imod(a) {\n          if (this.prime)\n            return this.prime.ireduce(a)._forceRed(this);\n          move(a, a.umod(this.m)._forceRed(this));\n          return a;\n        };\n        Red.prototype.neg = function neg3(a) {\n          if (a.isZero()) {\n            return a.clone();\n          }\n          return this.m.sub(a)._forceRed(this);\n        };\n        Red.prototype.add = function add4(a, b2) {\n          this._verify2(a, b2);\n          var res = a.add(b2);\n          if (res.cmp(this.m) >= 0) {\n            res.isub(this.m);\n          }\n          return res._forceRed(this);\n        };\n        Red.prototype.iadd = function iadd(a, b2) {\n          this._verify2(a, b2);\n          var res = a.iadd(b2);\n          if (res.cmp(this.m) >= 0) {\n            res.isub(this.m);\n          }\n          return res;\n        };\n        Red.prototype.sub = function sub(a, b2) {\n          this._verify2(a, b2);\n          var res = a.sub(b2);\n          if (res.cmpn(0) < 0) {\n            res.iadd(this.m);\n          }\n          return res._forceRed(this);\n        };\n        Red.prototype.isub = function isub(a, b2) {\n          this._verify2(a, b2);\n          var res = a.isub(b2);\n          if (res.cmpn(0) < 0) {\n            res.iadd(this.m);\n          }\n          return res;\n        };\n        Red.prototype.shl = function shl(a, num) {\n          this._verify1(a);\n          return this.imod(a.ushln(num));\n        };\n        Red.prototype.imul = function imul(a, b2) {\n          this._verify2(a, b2);\n          return this.imod(a.imul(b2));\n        };\n        Red.prototype.mul = function mul3(a, b2) {\n          this._verify2(a, b2);\n          return this.imod(a.mul(b2));\n        };\n        Red.prototype.isqr = function isqr(a) {\n          return this.imul(a, a.clone());\n        };\n        Red.prototype.sqr = function sqr(a) {\n          return this.mul(a, a);\n        };\n        Red.prototype.sqrt = function sqrt(a) {\n          if (a.isZero())\n            return a.clone();\n          var mod3 = this.m.andln(3);\n          assert4(mod3 % 2 === 1);\n          if (mod3 === 3) {\n            var pow3 = this.m.add(new BN3(1)).iushrn(2);\n            return this.pow(a, pow3);\n          }\n          var q = this.m.subn(1);\n          var s = 0;\n          while (!q.isZero() && q.andln(1) === 0) {\n            s++;\n            q.iushrn(1);\n          }\n          assert4(!q.isZero());\n          var one = new BN3(1).toRed(this);\n          var nOne = one.redNeg();\n          var lpow = this.m.subn(1).iushrn(1);\n          var z = this.m.bitLength();\n          z = new BN3(2 * z * z).toRed(this);\n          while (this.pow(z, lpow).cmp(nOne) !== 0) {\n            z.redIAdd(nOne);\n          }\n          var c = this.pow(z, q);\n          var r2 = this.pow(a, q.addn(1).iushrn(1));\n          var t = this.pow(a, q);\n          var m = s;\n          while (t.cmp(one) !== 0) {\n            var tmp = t;\n            for (var i = 0; tmp.cmp(one) !== 0; i++) {\n              tmp = tmp.redSqr();\n            }\n            assert4(i < m);\n            var b2 = this.pow(c, new BN3(1).iushln(m - i - 1));\n            r2 = r2.redMul(b2);\n            c = b2.redSqr();\n            t = t.redMul(c);\n            m = i;\n          }\n          return r2;\n        };\n        Red.prototype.invm = function invm(a) {\n          var inv = a._invmp(this.m);\n          if (inv.negative !== 0) {\n            inv.negative = 0;\n            return this.imod(inv).redNeg();\n          } else {\n            return this.imod(inv);\n          }\n        };\n        Red.prototype.pow = function pow3(a, num) {\n          if (num.isZero())\n            return new BN3(1).toRed(this);\n          if (num.cmpn(1) === 0)\n            return a.clone();\n          var windowSize = 4;\n          var wnd = new Array(1 << windowSize);\n          wnd[0] = new BN3(1).toRed(this);\n          wnd[1] = a;\n          for (var i = 2; i < wnd.length; i++) {\n            wnd[i] = this.mul(wnd[i - 1], a);\n          }\n          var res = wnd[0];\n          var current = 0;\n          var currentLen = 0;\n          var start = num.bitLength() % 26;\n          if (start === 0) {\n            start = 26;\n          }\n          for (i = num.length - 1; i >= 0; i--) {\n            var word = num.words[i];\n            for (var j = start - 1; j >= 0; j--) {\n              var bit = word >> j & 1;\n              if (res !== wnd[0]) {\n                res = this.sqr(res);\n              }\n              if (bit === 0 && current === 0) {\n                currentLen = 0;\n                continue;\n              }\n              current <<= 1;\n              current |= bit;\n              currentLen++;\n              if (currentLen !== windowSize && (i !== 0 || j !== 0))\n                continue;\n              res = this.mul(res, wnd[current]);\n              currentLen = 0;\n              current = 0;\n            }\n            start = 26;\n          }\n          return res;\n        };\n        Red.prototype.convertTo = function convertTo(num) {\n          var r2 = num.umod(this.m);\n          return r2 === num ? r2.clone() : r2;\n        };\n        Red.prototype.convertFrom = function convertFrom(num) {\n          var res = num.clone();\n          res.red = null;\n          return res;\n        };\n        BN3.mont = function mont(num) {\n          return new Mont(num);\n        };\n        function Mont(m) {\n          Red.call(this, m);\n          this.shift = this.m.bitLength();\n          if (this.shift % 26 !== 0) {\n            this.shift += 26 - this.shift % 26;\n          }\n          this.r = new BN3(1).iushln(this.shift);\n          this.r2 = this.imod(this.r.sqr());\n          this.rinv = this.r._invmp(this.m);\n          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n          this.minv = this.minv.umod(this.r);\n          this.minv = this.r.sub(this.minv);\n        }\n        inherits(Mont, Red);\n        Mont.prototype.convertTo = function convertTo(num) {\n          return this.imod(num.ushln(this.shift));\n        };\n        Mont.prototype.convertFrom = function convertFrom(num) {\n          var r2 = this.imod(num.mul(this.rinv));\n          r2.red = null;\n          return r2;\n        };\n        Mont.prototype.imul = function imul(a, b2) {\n          if (a.isZero() || b2.isZero()) {\n            a.words[0] = 0;\n            a.length = 1;\n            return a;\n          }\n          var t = a.imul(b2);\n          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n          var u = t.isub(c).iushrn(this.shift);\n          var res = u;\n          if (u.cmp(this.m) >= 0) {\n            res = u.isub(this.m);\n          } else if (u.cmpn(0) < 0) {\n            res = u.iadd(this.m);\n          }\n          return res._forceRed(this);\n        };\n        Mont.prototype.mul = function mul3(a, b2) {\n          if (a.isZero() || b2.isZero())\n            return new BN3(0)._forceRed(this);\n          var t = a.mul(b2);\n          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n          var u = t.isub(c).iushrn(this.shift);\n          var res = u;\n          if (u.cmp(this.m) >= 0) {\n            res = u.isub(this.m);\n          } else if (u.cmpn(0) < 0) {\n            res = u.iadd(this.m);\n          }\n          return res._forceRed(this);\n        };\n        Mont.prototype.invm = function invm(a) {\n          var res = this.imod(a._invmp(this.m).mul(this.r2));\n          return res._forceRed(this);\n        };\n      })(typeof module === \"undefined\" || module, exports3);\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+logger@5.8.0/node_modules/@ethersproject/logger/lib.esm/_version.js\n  var version2;\n  var init_version = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+logger@5.8.0/node_modules/@ethersproject/logger/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version2 = \"logger/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+logger@5.8.0/node_modules/@ethersproject/logger/lib.esm/index.js\n  function _checkNormalize() {\n    try {\n      const missing = [];\n      [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n        try {\n          if (\"test\".normalize(form) !== \"test\") {\n            throw new Error(\"bad normalize\");\n          }\n          ;\n        } catch (error) {\n          missing.push(form);\n        }\n      });\n      if (missing.length) {\n        throw new Error(\"missing \" + missing.join(\", \"));\n      }\n      if (String.fromCharCode(233).normalize(\"NFD\") !== String.fromCharCode(101, 769)) {\n        throw new Error(\"broken implementation\");\n      }\n    } catch (error) {\n      return error.message;\n    }\n    return null;\n  }\n  var _permanentCensorErrors, _censorErrors, LogLevels, _logLevel, _globalLogger, _normalizeError, LogLevel, ErrorCode, HEX, Logger;\n  var init_lib = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+logger@5.8.0/node_modules/@ethersproject/logger/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_version();\n      _permanentCensorErrors = false;\n      _censorErrors = false;\n      LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\n      _logLevel = LogLevels[\"default\"];\n      _globalLogger = null;\n      _normalizeError = _checkNormalize();\n      (function(LogLevel2) {\n        LogLevel2[\"DEBUG\"] = \"DEBUG\";\n        LogLevel2[\"INFO\"] = \"INFO\";\n        LogLevel2[\"WARNING\"] = \"WARNING\";\n        LogLevel2[\"ERROR\"] = \"ERROR\";\n        LogLevel2[\"OFF\"] = \"OFF\";\n      })(LogLevel || (LogLevel = {}));\n      (function(ErrorCode2) {\n        ErrorCode2[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n        ErrorCode2[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n        ErrorCode2[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n        ErrorCode2[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n        ErrorCode2[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n        ErrorCode2[\"TIMEOUT\"] = \"TIMEOUT\";\n        ErrorCode2[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n        ErrorCode2[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n        ErrorCode2[\"MISSING_NEW\"] = \"MISSING_NEW\";\n        ErrorCode2[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n        ErrorCode2[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n        ErrorCode2[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n        ErrorCode2[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n        ErrorCode2[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n        ErrorCode2[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n        ErrorCode2[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n        ErrorCode2[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n        ErrorCode2[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n        ErrorCode2[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n      })(ErrorCode || (ErrorCode = {}));\n      HEX = \"0123456789abcdef\";\n      Logger = class _Logger {\n        constructor(version29) {\n          Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version29,\n            writable: false\n          });\n        }\n        _log(logLevel, args) {\n          const level = logLevel.toLowerCase();\n          if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n          }\n          if (_logLevel > LogLevels[level]) {\n            return;\n          }\n          console.log.apply(console, args);\n        }\n        debug(...args) {\n          this._log(_Logger.levels.DEBUG, args);\n        }\n        info(...args) {\n          this._log(_Logger.levels.INFO, args);\n        }\n        warn(...args) {\n          this._log(_Logger.levels.WARNING, args);\n        }\n        makeError(message, code, params) {\n          if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n          }\n          if (!code) {\n            code = _Logger.errors.UNKNOWN_ERROR;\n          }\n          if (!params) {\n            params = {};\n          }\n          const messageDetails = [];\n          Object.keys(params).forEach((key2) => {\n            const value = params[key2];\n            try {\n              if (value instanceof Uint8Array) {\n                let hex = \"\";\n                for (let i = 0; i < value.length; i++) {\n                  hex += HEX[value[i] >> 4];\n                  hex += HEX[value[i] & 15];\n                }\n                messageDetails.push(key2 + \"=Uint8Array(0x\" + hex + \")\");\n              } else {\n                messageDetails.push(key2 + \"=\" + JSON.stringify(value));\n              }\n            } catch (error2) {\n              messageDetails.push(key2 + \"=\" + JSON.stringify(params[key2].toString()));\n            }\n          });\n          messageDetails.push(`code=${code}`);\n          messageDetails.push(`version=${this.version}`);\n          const reason = message;\n          let url = \"\";\n          switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n              url = \"NUMERIC_FAULT\";\n              const fault = message;\n              switch (fault) {\n                case \"overflow\":\n                case \"underflow\":\n                case \"division-by-zero\":\n                  url += \"-\" + fault;\n                  break;\n                case \"negative-power\":\n                case \"negative-width\":\n                  url += \"-unsupported\";\n                  break;\n                case \"unbound-bitwise-result\":\n                  url += \"-unbound-result\";\n                  break;\n              }\n              break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n              url = code;\n              break;\n          }\n          if (url) {\n            message += \" [ See: https://links.ethers.org/v5-errors-\" + url + \" ]\";\n          }\n          if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n          }\n          const error = new Error(message);\n          error.reason = reason;\n          error.code = code;\n          Object.keys(params).forEach(function(key2) {\n            error[key2] = params[key2];\n          });\n          return error;\n        }\n        throwError(message, code, params) {\n          throw this.makeError(message, code, params);\n        }\n        throwArgumentError(message, name, value) {\n          return this.throwError(message, _Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value\n          });\n        }\n        assert(condition, message, code, params) {\n          if (!!condition) {\n            return;\n          }\n          this.throwError(message, code, params);\n        }\n        assertArgument(condition, message, name, value) {\n          if (!!condition) {\n            return;\n          }\n          this.throwArgumentError(message, name, value);\n        }\n        checkNormalize(message) {\n          if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n          }\n          if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", _Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"String.prototype.normalize\",\n              form: _normalizeError\n            });\n          }\n        }\n        checkSafeUint53(value, message) {\n          if (typeof value !== \"number\") {\n            return;\n          }\n          if (message == null) {\n            message = \"value not safe\";\n          }\n          if (value < 0 || value >= 9007199254740991) {\n            this.throwError(message, _Logger.errors.NUMERIC_FAULT, {\n              operation: \"checkSafeInteger\",\n              fault: \"out-of-safe-range\",\n              value\n            });\n          }\n          if (value % 1) {\n            this.throwError(message, _Logger.errors.NUMERIC_FAULT, {\n              operation: \"checkSafeInteger\",\n              fault: \"non-integer\",\n              value\n            });\n          }\n        }\n        checkArgumentCount(count, expectedCount, message) {\n          if (message) {\n            message = \": \" + message;\n          } else {\n            message = \"\";\n          }\n          if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, _Logger.errors.MISSING_ARGUMENT, {\n              count,\n              expectedCount\n            });\n          }\n          if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, _Logger.errors.UNEXPECTED_ARGUMENT, {\n              count,\n              expectedCount\n            });\n          }\n        }\n        checkNew(target, kind) {\n          if (target === Object || target == null) {\n            this.throwError(\"missing new\", _Logger.errors.MISSING_NEW, { name: kind.name });\n          }\n        }\n        checkAbstract(target, kind) {\n          if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", _Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n          } else if (target === Object || target == null) {\n            this.throwError(\"missing new\", _Logger.errors.MISSING_NEW, { name: kind.name });\n          }\n        }\n        static globalLogger() {\n          if (!_globalLogger) {\n            _globalLogger = new _Logger(version2);\n          }\n          return _globalLogger;\n        }\n        static setCensorship(censorship, permanent) {\n          if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", _Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"setCensorship\"\n            });\n          }\n          if (_permanentCensorErrors) {\n            if (!censorship) {\n              return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", _Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"setCensorship\"\n            });\n          }\n          _censorErrors = !!censorship;\n          _permanentCensorErrors = !!permanent;\n        }\n        static setLogLevel(logLevel) {\n          const level = LogLevels[logLevel.toLowerCase()];\n          if (level == null) {\n            _Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n          }\n          _logLevel = level;\n        }\n        static from(version29) {\n          return new _Logger(version29);\n        }\n      };\n      Logger.errors = ErrorCode;\n      Logger.levels = LogLevel;\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+bytes@5.8.0/node_modules/@ethersproject/bytes/lib.esm/_version.js\n  var version3;\n  var init_version2 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+bytes@5.8.0/node_modules/@ethersproject/bytes/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version3 = \"bytes/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+bytes@5.8.0/node_modules/@ethersproject/bytes/lib.esm/index.js\n  function isHexable(value) {\n    return !!value.toHexString;\n  }\n  function addSlice(array) {\n    if (array.slice) {\n      return array;\n    }\n    array.slice = function() {\n      const args = Array.prototype.slice.call(arguments);\n      return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n  }\n  function isBytesLike(value) {\n    return isHexString(value) && !(value.length % 2) || isBytes(value);\n  }\n  function isInteger(value) {\n    return typeof value === \"number\" && value == value && value % 1 === 0;\n  }\n  function isBytes(value) {\n    if (value == null) {\n      return false;\n    }\n    if (value.constructor === Uint8Array) {\n      return true;\n    }\n    if (typeof value === \"string\") {\n      return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n      return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n      const v = value[i];\n      if (!isInteger(v) || v < 0 || v >= 256) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function arrayify(value, options) {\n    if (!options) {\n      options = {};\n    }\n    if (typeof value === \"number\") {\n      logger.checkSafeUint53(value, \"invalid arrayify value\");\n      const result = [];\n      while (value) {\n        result.unshift(value & 255);\n        value = parseInt(String(value / 256));\n      }\n      if (result.length === 0) {\n        result.push(0);\n      }\n      return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n      value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n      value = value.toHexString();\n    }\n    if (isHexString(value)) {\n      let hex = value.substring(2);\n      if (hex.length % 2) {\n        if (options.hexPad === \"left\") {\n          hex = \"0\" + hex;\n        } else if (options.hexPad === \"right\") {\n          hex += \"0\";\n        } else {\n          logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n        }\n      }\n      const result = [];\n      for (let i = 0; i < hex.length; i += 2) {\n        result.push(parseInt(hex.substring(i, i + 2), 16));\n      }\n      return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n      return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n  }\n  function concat(items) {\n    const objects = items.map((item) => arrayify(item));\n    const length = objects.reduce((accum, item) => accum + item.length, 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object2) => {\n      result.set(object2, offset);\n      return offset + object2.length;\n    }, 0);\n    return addSlice(result);\n  }\n  function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n      return result;\n    }\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n      start++;\n    }\n    if (start) {\n      result = result.slice(start);\n    }\n    return result;\n  }\n  function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n      logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n  }\n  function isHexString(value, length) {\n    if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n      return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n      return false;\n    }\n    return true;\n  }\n  function hexlify(value, options) {\n    if (!options) {\n      options = {};\n    }\n    if (typeof value === \"number\") {\n      logger.checkSafeUint53(value, \"invalid hexlify value\");\n      let hex = \"\";\n      while (value) {\n        hex = HexCharacters[value & 15] + hex;\n        value = Math.floor(value / 16);\n      }\n      if (hex.length) {\n        if (hex.length % 2) {\n          hex = \"0\" + hex;\n        }\n        return \"0x\" + hex;\n      }\n      return \"0x00\";\n    }\n    if (typeof value === \"bigint\") {\n      value = value.toString(16);\n      if (value.length % 2) {\n        return \"0x0\" + value;\n      }\n      return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n      value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n      return value.toHexString();\n    }\n    if (isHexString(value)) {\n      if (value.length % 2) {\n        if (options.hexPad === \"left\") {\n          value = \"0x0\" + value.substring(2);\n        } else if (options.hexPad === \"right\") {\n          value += \"0\";\n        } else {\n          logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n        }\n      }\n      return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n      let result = \"0x\";\n      for (let i = 0; i < value.length; i++) {\n        let v = value[i];\n        result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];\n      }\n      return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n  }\n  function hexDataLength(data) {\n    if (typeof data !== \"string\") {\n      data = hexlify(data);\n    } else if (!isHexString(data) || data.length % 2) {\n      return null;\n    }\n    return (data.length - 2) / 2;\n  }\n  function hexDataSlice(data, offset, endOffset) {\n    if (typeof data !== \"string\") {\n      data = hexlify(data);\n    } else if (!isHexString(data) || data.length % 2) {\n      logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n      return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n  }\n  function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n      result += hexlify(item).substring(2);\n    });\n    return result;\n  }\n  function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n      return \"0x0\";\n    }\n    return trimmed;\n  }\n  function hexStripZeros(value) {\n    if (typeof value !== \"string\") {\n      value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n      logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n      offset++;\n    }\n    return \"0x\" + value.substring(offset);\n  }\n  function hexZeroPad(value, length) {\n    if (typeof value !== \"string\") {\n      value = hexlify(value);\n    } else if (!isHexString(value)) {\n      logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n      logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n      value = \"0x0\" + value.substring(2);\n    }\n    return value;\n  }\n  function splitSignature(signature2) {\n    const result = {\n      r: \"0x\",\n      s: \"0x\",\n      _vs: \"0x\",\n      recoveryParam: 0,\n      v: 0,\n      yParityAndS: \"0x\",\n      compact: \"0x\"\n    };\n    if (isBytesLike(signature2)) {\n      let bytes3 = arrayify(signature2);\n      if (bytes3.length === 64) {\n        result.v = 27 + (bytes3[32] >> 7);\n        bytes3[32] &= 127;\n        result.r = hexlify(bytes3.slice(0, 32));\n        result.s = hexlify(bytes3.slice(32, 64));\n      } else if (bytes3.length === 65) {\n        result.r = hexlify(bytes3.slice(0, 32));\n        result.s = hexlify(bytes3.slice(32, 64));\n        result.v = bytes3[64];\n      } else {\n        logger.throwArgumentError(\"invalid signature string\", \"signature\", signature2);\n      }\n      if (result.v < 27) {\n        if (result.v === 0 || result.v === 1) {\n          result.v += 27;\n        } else {\n          logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature2);\n        }\n      }\n      result.recoveryParam = 1 - result.v % 2;\n      if (result.recoveryParam) {\n        bytes3[32] |= 128;\n      }\n      result._vs = hexlify(bytes3.slice(32, 64));\n    } else {\n      result.r = signature2.r;\n      result.s = signature2.s;\n      result.v = signature2.v;\n      result.recoveryParam = signature2.recoveryParam;\n      result._vs = signature2._vs;\n      if (result._vs != null) {\n        const vs2 = zeroPad(arrayify(result._vs), 32);\n        result._vs = hexlify(vs2);\n        const recoveryParam = vs2[0] >= 128 ? 1 : 0;\n        if (result.recoveryParam == null) {\n          result.recoveryParam = recoveryParam;\n        } else if (result.recoveryParam !== recoveryParam) {\n          logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature2);\n        }\n        vs2[0] &= 127;\n        const s = hexlify(vs2);\n        if (result.s == null) {\n          result.s = s;\n        } else if (result.s !== s) {\n          logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature2);\n        }\n      }\n      if (result.recoveryParam == null) {\n        if (result.v == null) {\n          logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature2);\n        } else if (result.v === 0 || result.v === 1) {\n          result.recoveryParam = result.v;\n        } else {\n          result.recoveryParam = 1 - result.v % 2;\n        }\n      } else {\n        if (result.v == null) {\n          result.v = 27 + result.recoveryParam;\n        } else {\n          const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;\n          if (result.recoveryParam !== recId) {\n            logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature2);\n          }\n        }\n      }\n      if (result.r == null || !isHexString(result.r)) {\n        logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature2);\n      } else {\n        result.r = hexZeroPad(result.r, 32);\n      }\n      if (result.s == null || !isHexString(result.s)) {\n        logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature2);\n      } else {\n        result.s = hexZeroPad(result.s, 32);\n      }\n      const vs = arrayify(result.s);\n      if (vs[0] >= 128) {\n        logger.throwArgumentError(\"signature s out of range\", \"signature\", signature2);\n      }\n      if (result.recoveryParam) {\n        vs[0] |= 128;\n      }\n      const _vs = hexlify(vs);\n      if (result._vs) {\n        if (!isHexString(result._vs)) {\n          logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature2);\n        }\n        result._vs = hexZeroPad(result._vs, 32);\n      }\n      if (result._vs == null) {\n        result._vs = _vs;\n      } else if (result._vs !== _vs) {\n        logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature2);\n      }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n  }\n  function joinSignature(signature2) {\n    signature2 = splitSignature(signature2);\n    return hexlify(concat([\n      signature2.r,\n      signature2.s,\n      signature2.recoveryParam ? \"0x1c\" : \"0x1b\"\n    ]));\n  }\n  var logger, HexCharacters;\n  var init_lib2 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+bytes@5.8.0/node_modules/@ethersproject/bytes/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib();\n      init_version2();\n      logger = new Logger(version3);\n      HexCharacters = \"0123456789abcdef\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+bignumber@5.8.0/node_modules/@ethersproject/bignumber/lib.esm/_version.js\n  var version4;\n  var init_version3 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+bignumber@5.8.0/node_modules/@ethersproject/bignumber/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version4 = \"bignumber/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+bignumber@5.8.0/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\n  function isBigNumberish(value) {\n    return value != null && (BigNumber.isBigNumber(value) || typeof value === \"number\" && value % 1 === 0 || typeof value === \"string\" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === \"bigint\" || isBytes(value));\n  }\n  function toHex(value) {\n    if (typeof value !== \"string\") {\n      return toHex(value.toString(16));\n    }\n    if (value[0] === \"-\") {\n      value = value.substring(1);\n      if (value[0] === \"-\") {\n        logger2.throwArgumentError(\"invalid hex\", \"value\", value);\n      }\n      value = toHex(value);\n      if (value === \"0x00\") {\n        return value;\n      }\n      return \"-\" + value;\n    }\n    if (value.substring(0, 2) !== \"0x\") {\n      value = \"0x\" + value;\n    }\n    if (value === \"0x\") {\n      return \"0x00\";\n    }\n    if (value.length % 2) {\n      value = \"0x0\" + value.substring(2);\n    }\n    while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n      value = \"0x\" + value.substring(4);\n    }\n    return value;\n  }\n  function toBigNumber(value) {\n    return BigNumber.from(toHex(value));\n  }\n  function toBN(value) {\n    const hex = BigNumber.from(value).toHexString();\n    if (hex[0] === \"-\") {\n      return new BN(\"-\" + hex.substring(3), 16);\n    }\n    return new BN(hex.substring(2), 16);\n  }\n  function throwFault(fault, operation, value) {\n    const params = { fault, operation };\n    if (value != null) {\n      params.value = value;\n    }\n    return logger2.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n  }\n  function _base36To16(value) {\n    return new BN(value, 36).toString(16);\n  }\n  function _base16To36(value) {\n    return new BN(value, 16).toString(36);\n  }\n  var import_bn, BN, logger2, _constructorGuard, MAX_SAFE, _warnedToStringRadix, BigNumber;\n  var init_bignumber = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+bignumber@5.8.0/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      import_bn = __toESM(require_bn());\n      init_lib2();\n      init_lib();\n      init_version3();\n      BN = import_bn.default.BN;\n      logger2 = new Logger(version4);\n      _constructorGuard = {};\n      MAX_SAFE = 9007199254740991;\n      _warnedToStringRadix = false;\n      BigNumber = class _BigNumber {\n        constructor(constructorGuard, hex) {\n          if (constructorGuard !== _constructorGuard) {\n            logger2.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"new (BigNumber)\"\n            });\n          }\n          this._hex = hex;\n          this._isBigNumber = true;\n          Object.freeze(this);\n        }\n        fromTwos(value) {\n          return toBigNumber(toBN(this).fromTwos(value));\n        }\n        toTwos(value) {\n          return toBigNumber(toBN(this).toTwos(value));\n        }\n        abs() {\n          if (this._hex[0] === \"-\") {\n            return _BigNumber.from(this._hex.substring(1));\n          }\n          return this;\n        }\n        add(other) {\n          return toBigNumber(toBN(this).add(toBN(other)));\n        }\n        sub(other) {\n          return toBigNumber(toBN(this).sub(toBN(other)));\n        }\n        div(other) {\n          const o = _BigNumber.from(other);\n          if (o.isZero()) {\n            throwFault(\"division-by-zero\", \"div\");\n          }\n          return toBigNumber(toBN(this).div(toBN(other)));\n        }\n        mul(other) {\n          return toBigNumber(toBN(this).mul(toBN(other)));\n        }\n        mod(other) {\n          const value = toBN(other);\n          if (value.isNeg()) {\n            throwFault(\"division-by-zero\", \"mod\");\n          }\n          return toBigNumber(toBN(this).umod(value));\n        }\n        pow(other) {\n          const value = toBN(other);\n          if (value.isNeg()) {\n            throwFault(\"negative-power\", \"pow\");\n          }\n          return toBigNumber(toBN(this).pow(value));\n        }\n        and(other) {\n          const value = toBN(other);\n          if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"and\");\n          }\n          return toBigNumber(toBN(this).and(value));\n        }\n        or(other) {\n          const value = toBN(other);\n          if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"or\");\n          }\n          return toBigNumber(toBN(this).or(value));\n        }\n        xor(other) {\n          const value = toBN(other);\n          if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"xor\");\n          }\n          return toBigNumber(toBN(this).xor(value));\n        }\n        mask(value) {\n          if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"mask\");\n          }\n          return toBigNumber(toBN(this).maskn(value));\n        }\n        shl(value) {\n          if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shl\");\n          }\n          return toBigNumber(toBN(this).shln(value));\n        }\n        shr(value) {\n          if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shr\");\n          }\n          return toBigNumber(toBN(this).shrn(value));\n        }\n        eq(other) {\n          return toBN(this).eq(toBN(other));\n        }\n        lt(other) {\n          return toBN(this).lt(toBN(other));\n        }\n        lte(other) {\n          return toBN(this).lte(toBN(other));\n        }\n        gt(other) {\n          return toBN(this).gt(toBN(other));\n        }\n        gte(other) {\n          return toBN(this).gte(toBN(other));\n        }\n        isNegative() {\n          return this._hex[0] === \"-\";\n        }\n        isZero() {\n          return toBN(this).isZero();\n        }\n        toNumber() {\n          try {\n            return toBN(this).toNumber();\n          } catch (error) {\n            throwFault(\"overflow\", \"toNumber\", this.toString());\n          }\n          return null;\n        }\n        toBigInt() {\n          try {\n            return BigInt(this.toString());\n          } catch (e) {\n          }\n          return logger2.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n            value: this.toString()\n          });\n        }\n        toString() {\n          if (arguments.length > 0) {\n            if (arguments[0] === 10) {\n              if (!_warnedToStringRadix) {\n                _warnedToStringRadix = true;\n                logger2.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n              }\n            } else if (arguments[0] === 16) {\n              logger2.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n            } else {\n              logger2.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n            }\n          }\n          return toBN(this).toString(10);\n        }\n        toHexString() {\n          return this._hex;\n        }\n        toJSON(key2) {\n          return { type: \"BigNumber\", hex: this.toHexString() };\n        }\n        static from(value) {\n          if (value instanceof _BigNumber) {\n            return value;\n          }\n          if (typeof value === \"string\") {\n            if (value.match(/^-?0x[0-9a-f]+$/i)) {\n              return new _BigNumber(_constructorGuard, toHex(value));\n            }\n            if (value.match(/^-?[0-9]+$/)) {\n              return new _BigNumber(_constructorGuard, toHex(new BN(value)));\n            }\n            return logger2.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n          }\n          if (typeof value === \"number\") {\n            if (value % 1) {\n              throwFault(\"underflow\", \"BigNumber.from\", value);\n            }\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n              throwFault(\"overflow\", \"BigNumber.from\", value);\n            }\n            return _BigNumber.from(String(value));\n          }\n          const anyValue = value;\n          if (typeof anyValue === \"bigint\") {\n            return _BigNumber.from(anyValue.toString());\n          }\n          if (isBytes(anyValue)) {\n            return _BigNumber.from(hexlify(anyValue));\n          }\n          if (anyValue) {\n            if (anyValue.toHexString) {\n              const hex = anyValue.toHexString();\n              if (typeof hex === \"string\") {\n                return _BigNumber.from(hex);\n              }\n            } else {\n              let hex = anyValue._hex;\n              if (hex == null && anyValue.type === \"BigNumber\") {\n                hex = anyValue.hex;\n              }\n              if (typeof hex === \"string\") {\n                if (isHexString(hex) || hex[0] === \"-\" && isHexString(hex.substring(1))) {\n                  return _BigNumber.from(hex);\n                }\n              }\n            }\n          }\n          return logger2.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n        }\n        static isBigNumber(value) {\n          return !!(value && value._isBigNumber);\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+bignumber@5.8.0/node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js\n  function throwFault2(message, fault, operation, value) {\n    const params = { fault, operation };\n    if (value !== void 0) {\n      params.value = value;\n    }\n    return logger3.throwError(message, Logger.errors.NUMERIC_FAULT, params);\n  }\n  function getMultiplier(decimals) {\n    if (typeof decimals !== \"number\") {\n      try {\n        decimals = BigNumber.from(decimals).toNumber();\n      } catch (e) {\n      }\n    }\n    if (typeof decimals === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n      return \"1\" + zeros.substring(0, decimals);\n    }\n    return logger3.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n  }\n  function formatFixed(value, decimals) {\n    if (decimals == null) {\n      decimals = 0;\n    }\n    const multiplier = getMultiplier(decimals);\n    value = BigNumber.from(value);\n    const negative = value.lt(Zero);\n    if (negative) {\n      value = value.mul(NegativeOne);\n    }\n    let fraction = value.mod(multiplier).toString();\n    while (fraction.length < multiplier.length - 1) {\n      fraction = \"0\" + fraction;\n    }\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n    const whole = value.div(multiplier).toString();\n    if (multiplier.length === 1) {\n      value = whole;\n    } else {\n      value = whole + \".\" + fraction;\n    }\n    if (negative) {\n      value = \"-\" + value;\n    }\n    return value;\n  }\n  function parseFixed(value, decimals) {\n    if (decimals == null) {\n      decimals = 0;\n    }\n    const multiplier = getMultiplier(decimals);\n    if (typeof value !== \"string\" || !value.match(/^-?[0-9.]+$/)) {\n      logger3.throwArgumentError(\"invalid decimal value\", \"value\", value);\n    }\n    const negative = value.substring(0, 1) === \"-\";\n    if (negative) {\n      value = value.substring(1);\n    }\n    if (value === \".\") {\n      logger3.throwArgumentError(\"missing value\", \"value\", value);\n    }\n    const comps = value.split(\".\");\n    if (comps.length > 2) {\n      logger3.throwArgumentError(\"too many decimal points\", \"value\", value);\n    }\n    let whole = comps[0], fraction = comps[1];\n    if (!whole) {\n      whole = \"0\";\n    }\n    if (!fraction) {\n      fraction = \"0\";\n    }\n    while (fraction[fraction.length - 1] === \"0\") {\n      fraction = fraction.substring(0, fraction.length - 1);\n    }\n    if (fraction.length > multiplier.length - 1) {\n      throwFault2(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n    }\n    if (fraction === \"\") {\n      fraction = \"0\";\n    }\n    while (fraction.length < multiplier.length - 1) {\n      fraction += \"0\";\n    }\n    const wholeValue = BigNumber.from(whole);\n    const fractionValue = BigNumber.from(fraction);\n    let wei = wholeValue.mul(multiplier).add(fractionValue);\n    if (negative) {\n      wei = wei.mul(NegativeOne);\n    }\n    return wei;\n  }\n  var logger3, _constructorGuard2, Zero, NegativeOne, zeros, FixedFormat, FixedNumber, ONE, BUMP;\n  var init_fixednumber = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+bignumber@5.8.0/node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib2();\n      init_lib();\n      init_version3();\n      init_bignumber();\n      logger3 = new Logger(version4);\n      _constructorGuard2 = {};\n      Zero = BigNumber.from(0);\n      NegativeOne = BigNumber.from(-1);\n      zeros = \"0\";\n      while (zeros.length < 256) {\n        zeros += zeros;\n      }\n      FixedFormat = class _FixedFormat {\n        constructor(constructorGuard, signed3, width, decimals) {\n          if (constructorGuard !== _constructorGuard2) {\n            logger3.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"new FixedFormat\"\n            });\n          }\n          this.signed = signed3;\n          this.width = width;\n          this.decimals = decimals;\n          this.name = (signed3 ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n          this._multiplier = getMultiplier(decimals);\n          Object.freeze(this);\n        }\n        static from(value) {\n          if (value instanceof _FixedFormat) {\n            return value;\n          }\n          if (typeof value === \"number\") {\n            value = `fixed128x${value}`;\n          }\n          let signed3 = true;\n          let width = 128;\n          let decimals = 18;\n          if (typeof value === \"string\") {\n            if (value === \"fixed\") {\n            } else if (value === \"ufixed\") {\n              signed3 = false;\n            } else {\n              const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n              if (!match) {\n                logger3.throwArgumentError(\"invalid fixed format\", \"format\", value);\n              }\n              signed3 = match[1] !== \"u\";\n              width = parseInt(match[2]);\n              decimals = parseInt(match[3]);\n            }\n          } else if (value) {\n            const check = (key2, type, defaultValue) => {\n              if (value[key2] == null) {\n                return defaultValue;\n              }\n              if (typeof value[key2] !== type) {\n                logger3.throwArgumentError(\"invalid fixed format (\" + key2 + \" not \" + type + \")\", \"format.\" + key2, value[key2]);\n              }\n              return value[key2];\n            };\n            signed3 = check(\"signed\", \"boolean\", signed3);\n            width = check(\"width\", \"number\", width);\n            decimals = check(\"decimals\", \"number\", decimals);\n          }\n          if (width % 8) {\n            logger3.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n          }\n          if (decimals > 80) {\n            logger3.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n          }\n          return new _FixedFormat(_constructorGuard2, signed3, width, decimals);\n        }\n      };\n      FixedNumber = class _FixedNumber {\n        constructor(constructorGuard, hex, value, format) {\n          if (constructorGuard !== _constructorGuard2) {\n            logger3.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"new FixedFormat\"\n            });\n          }\n          this.format = format;\n          this._hex = hex;\n          this._value = value;\n          this._isFixedNumber = true;\n          Object.freeze(this);\n        }\n        _checkFormat(other) {\n          if (this.format.name !== other.format.name) {\n            logger3.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n          }\n        }\n        addUnsafe(other) {\n          this._checkFormat(other);\n          const a = parseFixed(this._value, this.format.decimals);\n          const b2 = parseFixed(other._value, other.format.decimals);\n          return _FixedNumber.fromValue(a.add(b2), this.format.decimals, this.format);\n        }\n        subUnsafe(other) {\n          this._checkFormat(other);\n          const a = parseFixed(this._value, this.format.decimals);\n          const b2 = parseFixed(other._value, other.format.decimals);\n          return _FixedNumber.fromValue(a.sub(b2), this.format.decimals, this.format);\n        }\n        mulUnsafe(other) {\n          this._checkFormat(other);\n          const a = parseFixed(this._value, this.format.decimals);\n          const b2 = parseFixed(other._value, other.format.decimals);\n          return _FixedNumber.fromValue(a.mul(b2).div(this.format._multiplier), this.format.decimals, this.format);\n        }\n        divUnsafe(other) {\n          this._checkFormat(other);\n          const a = parseFixed(this._value, this.format.decimals);\n          const b2 = parseFixed(other._value, other.format.decimals);\n          return _FixedNumber.fromValue(a.mul(this.format._multiplier).div(b2), this.format.decimals, this.format);\n        }\n        floor() {\n          const comps = this.toString().split(\".\");\n          if (comps.length === 1) {\n            comps.push(\"0\");\n          }\n          let result = _FixedNumber.from(comps[0], this.format);\n          const hasFraction = !comps[1].match(/^(0*)$/);\n          if (this.isNegative() && hasFraction) {\n            result = result.subUnsafe(ONE.toFormat(result.format));\n          }\n          return result;\n        }\n        ceiling() {\n          const comps = this.toString().split(\".\");\n          if (comps.length === 1) {\n            comps.push(\"0\");\n          }\n          let result = _FixedNumber.from(comps[0], this.format);\n          const hasFraction = !comps[1].match(/^(0*)$/);\n          if (!this.isNegative() && hasFraction) {\n            result = result.addUnsafe(ONE.toFormat(result.format));\n          }\n          return result;\n        }\n        // @TODO: Support other rounding algorithms\n        round(decimals) {\n          if (decimals == null) {\n            decimals = 0;\n          }\n          const comps = this.toString().split(\".\");\n          if (comps.length === 1) {\n            comps.push(\"0\");\n          }\n          if (decimals < 0 || decimals > 80 || decimals % 1) {\n            logger3.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n          }\n          if (comps[1].length <= decimals) {\n            return this;\n          }\n          const factor = _FixedNumber.from(\"1\" + zeros.substring(0, decimals), this.format);\n          const bump = BUMP.toFormat(this.format);\n          return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);\n        }\n        isZero() {\n          return this._value === \"0.0\" || this._value === \"0\";\n        }\n        isNegative() {\n          return this._value[0] === \"-\";\n        }\n        toString() {\n          return this._value;\n        }\n        toHexString(width) {\n          if (width == null) {\n            return this._hex;\n          }\n          if (width % 8) {\n            logger3.throwArgumentError(\"invalid byte width\", \"width\", width);\n          }\n          const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n          return hexZeroPad(hex, width / 8);\n        }\n        toUnsafeFloat() {\n          return parseFloat(this.toString());\n        }\n        toFormat(format) {\n          return _FixedNumber.fromString(this._value, format);\n        }\n        static fromValue(value, decimals, format) {\n          if (format == null && decimals != null && !isBigNumberish(decimals)) {\n            format = decimals;\n            decimals = null;\n          }\n          if (decimals == null) {\n            decimals = 0;\n          }\n          if (format == null) {\n            format = \"fixed\";\n          }\n          return _FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n        }\n        static fromString(value, format) {\n          if (format == null) {\n            format = \"fixed\";\n          }\n          const fixedFormat = FixedFormat.from(format);\n          const numeric = parseFixed(value, fixedFormat.decimals);\n          if (!fixedFormat.signed && numeric.lt(Zero)) {\n            throwFault2(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n          }\n          let hex = null;\n          if (fixedFormat.signed) {\n            hex = numeric.toTwos(fixedFormat.width).toHexString();\n          } else {\n            hex = numeric.toHexString();\n            hex = hexZeroPad(hex, fixedFormat.width / 8);\n          }\n          const decimal = formatFixed(numeric, fixedFormat.decimals);\n          return new _FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);\n        }\n        static fromBytes(value, format) {\n          if (format == null) {\n            format = \"fixed\";\n          }\n          const fixedFormat = FixedFormat.from(format);\n          if (arrayify(value).length > fixedFormat.width / 8) {\n            throw new Error(\"overflow\");\n          }\n          let numeric = BigNumber.from(value);\n          if (fixedFormat.signed) {\n            numeric = numeric.fromTwos(fixedFormat.width);\n          }\n          const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();\n          const decimal = formatFixed(numeric, fixedFormat.decimals);\n          return new _FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);\n        }\n        static from(value, format) {\n          if (typeof value === \"string\") {\n            return _FixedNumber.fromString(value, format);\n          }\n          if (isBytes(value)) {\n            return _FixedNumber.fromBytes(value, format);\n          }\n          try {\n            return _FixedNumber.fromValue(value, 0, format);\n          } catch (error) {\n            if (error.code !== Logger.errors.INVALID_ARGUMENT) {\n              throw error;\n            }\n          }\n          return logger3.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n        }\n        static isFixedNumber(value) {\n          return !!(value && value._isFixedNumber);\n        }\n      };\n      ONE = FixedNumber.from(1);\n      BUMP = FixedNumber.from(\"0.5\");\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+bignumber@5.8.0/node_modules/@ethersproject/bignumber/lib.esm/index.js\n  var init_lib3 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+bignumber@5.8.0/node_modules/@ethersproject/bignumber/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_bignumber();\n      init_fixednumber();\n      init_bignumber();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+properties@5.8.0/node_modules/@ethersproject/properties/lib.esm/_version.js\n  var version5;\n  var init_version4 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+properties@5.8.0/node_modules/@ethersproject/properties/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version5 = \"properties/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+properties@5.8.0/node_modules/@ethersproject/properties/lib.esm/index.js\n  function defineReadOnly(object2, name, value) {\n    Object.defineProperty(object2, name, {\n      enumerable: true,\n      value,\n      writable: false\n    });\n  }\n  function getStatic(ctor, key2) {\n    for (let i = 0; i < 32; i++) {\n      if (ctor[key2]) {\n        return ctor[key2];\n      }\n      if (!ctor.prototype || typeof ctor.prototype !== \"object\") {\n        break;\n      }\n      ctor = Object.getPrototypeOf(ctor.prototype).constructor;\n    }\n    return null;\n  }\n  function resolveProperties(object2) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const promises = Object.keys(object2).map((key2) => {\n        const value = object2[key2];\n        return Promise.resolve(value).then((v) => ({ key: key2, value: v }));\n      });\n      const results = yield Promise.all(promises);\n      return results.reduce((accum, result) => {\n        accum[result.key] = result.value;\n        return accum;\n      }, {});\n    });\n  }\n  function checkProperties(object2, properties) {\n    if (!object2 || typeof object2 !== \"object\") {\n      logger4.throwArgumentError(\"invalid object\", \"object\", object2);\n    }\n    Object.keys(object2).forEach((key2) => {\n      if (!properties[key2]) {\n        logger4.throwArgumentError(\"invalid object key - \" + key2, \"transaction:\" + key2, object2);\n      }\n    });\n  }\n  function shallowCopy(object2) {\n    const result = {};\n    for (const key2 in object2) {\n      result[key2] = object2[key2];\n    }\n    return result;\n  }\n  function _isFrozen(object2) {\n    if (object2 === void 0 || object2 === null || opaque[typeof object2]) {\n      return true;\n    }\n    if (Array.isArray(object2) || typeof object2 === \"object\") {\n      if (!Object.isFrozen(object2)) {\n        return false;\n      }\n      const keys = Object.keys(object2);\n      for (let i = 0; i < keys.length; i++) {\n        let value = null;\n        try {\n          value = object2[keys[i]];\n        } catch (error) {\n          continue;\n        }\n        if (!_isFrozen(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return logger4.throwArgumentError(`Cannot deepCopy ${typeof object2}`, \"object\", object2);\n  }\n  function _deepCopy(object2) {\n    if (_isFrozen(object2)) {\n      return object2;\n    }\n    if (Array.isArray(object2)) {\n      return Object.freeze(object2.map((item) => deepCopy(item)));\n    }\n    if (typeof object2 === \"object\") {\n      const result = {};\n      for (const key2 in object2) {\n        const value = object2[key2];\n        if (value === void 0) {\n          continue;\n        }\n        defineReadOnly(result, key2, deepCopy(value));\n      }\n      return result;\n    }\n    return logger4.throwArgumentError(`Cannot deepCopy ${typeof object2}`, \"object\", object2);\n  }\n  function deepCopy(object2) {\n    return _deepCopy(object2);\n  }\n  var __awaiter, logger4, opaque, Description;\n  var init_lib4 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+properties@5.8.0/node_modules/@ethersproject/properties/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib();\n      init_version4();\n      __awaiter = function(thisArg, _arguments, P, generator) {\n        function adopt(value) {\n          return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n          });\n        }\n        return new (P || (P = Promise))(function(resolve, reject) {\n          function fulfilled(value) {\n            try {\n              step(generator.next(value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function rejected(value) {\n            try {\n              step(generator[\"throw\"](value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n          }\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n      };\n      logger4 = new Logger(version5);\n      opaque = { bigint: true, boolean: true, \"function\": true, number: true, string: true };\n      Description = class {\n        constructor(info) {\n          for (const key2 in info) {\n            this[key2] = deepCopy(info[key2]);\n          }\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/_version.js\n  var version6;\n  var init_version5 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version6 = \"abi/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/fragments.js\n  function checkModifier(type, name) {\n    if (type === \"bytes\" || type === \"string\") {\n      if (ModifiersBytes[name]) {\n        return true;\n      }\n    } else if (type === \"address\") {\n      if (name === \"payable\") {\n        return true;\n      }\n    } else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n      if (ModifiersNest[name]) {\n        return true;\n      }\n    }\n    if (ModifiersBytes[name] || name === \"payable\") {\n      logger5.throwArgumentError(\"invalid modifier\", \"name\", name);\n    }\n    return false;\n  }\n  function parseParamType(param, allowIndexed) {\n    let originalParam = param;\n    function throwError2(i) {\n      logger5.throwArgumentError(`unexpected character at position ${i}`, \"param\", param);\n    }\n    param = param.replace(/\\s/g, \" \");\n    function newNode(parent2) {\n      let node2 = { type: \"\", name: \"\", parent: parent2, state: { allowType: true } };\n      if (allowIndexed) {\n        node2.indexed = false;\n      }\n      return node2;\n    }\n    let parent = { type: \"\", name: \"\", state: { allowType: true } };\n    let node = parent;\n    for (let i = 0; i < param.length; i++) {\n      let c = param[i];\n      switch (c) {\n        case \"(\":\n          if (node.state.allowType && node.type === \"\") {\n            node.type = \"tuple\";\n          } else if (!node.state.allowParams) {\n            throwError2(i);\n          }\n          node.state.allowType = false;\n          node.type = verifyType(node.type);\n          node.components = [newNode(node)];\n          node = node.components[0];\n          break;\n        case \")\":\n          delete node.state;\n          if (node.name === \"indexed\") {\n            if (!allowIndexed) {\n              throwError2(i);\n            }\n            node.indexed = true;\n            node.name = \"\";\n          }\n          if (checkModifier(node.type, node.name)) {\n            node.name = \"\";\n          }\n          node.type = verifyType(node.type);\n          let child = node;\n          node = node.parent;\n          if (!node) {\n            throwError2(i);\n          }\n          delete child.parent;\n          node.state.allowParams = false;\n          node.state.allowName = true;\n          node.state.allowArray = true;\n          break;\n        case \",\":\n          delete node.state;\n          if (node.name === \"indexed\") {\n            if (!allowIndexed) {\n              throwError2(i);\n            }\n            node.indexed = true;\n            node.name = \"\";\n          }\n          if (checkModifier(node.type, node.name)) {\n            node.name = \"\";\n          }\n          node.type = verifyType(node.type);\n          let sibling = newNode(node.parent);\n          node.parent.components.push(sibling);\n          delete node.parent;\n          node = sibling;\n          break;\n        case \" \":\n          if (node.state.allowType) {\n            if (node.type !== \"\") {\n              node.type = verifyType(node.type);\n              delete node.state.allowType;\n              node.state.allowName = true;\n              node.state.allowParams = true;\n            }\n          }\n          if (node.state.allowName) {\n            if (node.name !== \"\") {\n              if (node.name === \"indexed\") {\n                if (!allowIndexed) {\n                  throwError2(i);\n                }\n                if (node.indexed) {\n                  throwError2(i);\n                }\n                node.indexed = true;\n                node.name = \"\";\n              } else if (checkModifier(node.type, node.name)) {\n                node.name = \"\";\n              } else {\n                node.state.allowName = false;\n              }\n            }\n          }\n          break;\n        case \"[\":\n          if (!node.state.allowArray) {\n            throwError2(i);\n          }\n          node.type += c;\n          node.state.allowArray = false;\n          node.state.allowName = false;\n          node.state.readArray = true;\n          break;\n        case \"]\":\n          if (!node.state.readArray) {\n            throwError2(i);\n          }\n          node.type += c;\n          node.state.readArray = false;\n          node.state.allowArray = true;\n          node.state.allowName = true;\n          break;\n        default:\n          if (node.state.allowType) {\n            node.type += c;\n            node.state.allowParams = true;\n            node.state.allowArray = true;\n          } else if (node.state.allowName) {\n            node.name += c;\n            delete node.state.allowArray;\n          } else if (node.state.readArray) {\n            node.type += c;\n          } else {\n            throwError2(i);\n          }\n      }\n    }\n    if (node.parent) {\n      logger5.throwArgumentError(\"unexpected eof\", \"param\", param);\n    }\n    delete parent.state;\n    if (node.name === \"indexed\") {\n      if (!allowIndexed) {\n        throwError2(originalParam.length - 7);\n      }\n      if (node.indexed) {\n        throwError2(originalParam.length - 7);\n      }\n      node.indexed = true;\n      node.name = \"\";\n    } else if (checkModifier(node.type, node.name)) {\n      node.name = \"\";\n    }\n    parent.type = verifyType(parent.type);\n    return parent;\n  }\n  function populate(object2, params) {\n    for (let key2 in params) {\n      defineReadOnly(object2, key2, params[key2]);\n    }\n  }\n  function parseParams(value, allowIndex) {\n    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));\n  }\n  function parseGas(value, params) {\n    params.gas = null;\n    let comps = value.split(\"@\");\n    if (comps.length !== 1) {\n      if (comps.length > 2) {\n        logger5.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n      }\n      if (!comps[1].match(/^[0-9]+$/)) {\n        logger5.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n      }\n      params.gas = BigNumber.from(comps[1]);\n      return comps[0];\n    }\n    return value;\n  }\n  function parseModifiers(value, params) {\n    params.constant = false;\n    params.payable = false;\n    params.stateMutability = \"nonpayable\";\n    value.split(\" \").forEach((modifier) => {\n      switch (modifier.trim()) {\n        case \"constant\":\n          params.constant = true;\n          break;\n        case \"payable\":\n          params.payable = true;\n          params.stateMutability = \"payable\";\n          break;\n        case \"nonpayable\":\n          params.payable = false;\n          params.stateMutability = \"nonpayable\";\n          break;\n        case \"pure\":\n          params.constant = true;\n          params.stateMutability = \"pure\";\n          break;\n        case \"view\":\n          params.constant = true;\n          params.stateMutability = \"view\";\n          break;\n        case \"external\":\n        case \"public\":\n        case \"\":\n          break;\n        default:\n          console.log(\"unknown modifier: \" + modifier);\n      }\n    });\n  }\n  function verifyState(value) {\n    let result = {\n      constant: false,\n      payable: true,\n      stateMutability: \"payable\"\n    };\n    if (value.stateMutability != null) {\n      result.stateMutability = value.stateMutability;\n      result.constant = result.stateMutability === \"view\" || result.stateMutability === \"pure\";\n      if (value.constant != null) {\n        if (!!value.constant !== result.constant) {\n          logger5.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n        }\n      }\n      result.payable = result.stateMutability === \"payable\";\n      if (value.payable != null) {\n        if (!!value.payable !== result.payable) {\n          logger5.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n        }\n      }\n    } else if (value.payable != null) {\n      result.payable = !!value.payable;\n      if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n        logger5.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n      }\n      result.constant = !!value.constant;\n      if (result.constant) {\n        result.stateMutability = \"view\";\n      } else {\n        result.stateMutability = result.payable ? \"payable\" : \"nonpayable\";\n      }\n      if (result.payable && result.constant) {\n        logger5.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n      }\n    } else if (value.constant != null) {\n      result.constant = !!value.constant;\n      result.payable = !result.constant;\n      result.stateMutability = result.constant ? \"view\" : \"payable\";\n    } else if (value.type !== \"constructor\") {\n      logger5.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n    return result;\n  }\n  function checkForbidden(fragment) {\n    const sig = fragment.format();\n    if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n      logger5.throwArgumentError(`cannot specify user defined ${sig} error`, \"fragment\", fragment);\n    }\n    return fragment;\n  }\n  function verifyType(type) {\n    if (type.match(/^uint($|[^1-9])/)) {\n      type = \"uint256\" + type.substring(4);\n    } else if (type.match(/^int($|[^1-9])/)) {\n      type = \"int256\" + type.substring(3);\n    }\n    return type;\n  }\n  function verifyIdentifier(value) {\n    if (!value || !value.match(regexIdentifier)) {\n      logger5.throwArgumentError(`invalid identifier \"${value}\"`, \"value\", value);\n    }\n    return value;\n  }\n  function splitNesting(value) {\n    value = value.trim();\n    let result = [];\n    let accum = \"\";\n    let depth = 0;\n    for (let offset = 0; offset < value.length; offset++) {\n      let c = value[offset];\n      if (c === \",\" && depth === 0) {\n        result.push(accum);\n        accum = \"\";\n      } else {\n        accum += c;\n        if (c === \"(\") {\n          depth++;\n        } else if (c === \")\") {\n          depth--;\n          if (depth === -1) {\n            logger5.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n          }\n        }\n      }\n    }\n    if (accum) {\n      result.push(accum);\n    }\n    return result;\n  }\n  var logger5, _constructorGuard3, ModifiersBytes, ModifiersNest, FormatTypes, paramTypeArray, ParamType, Fragment, EventFragment, ConstructorFragment, FunctionFragment, ErrorFragment, regexIdentifier, regexParen;\n  var init_fragments = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/fragments.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib3();\n      init_lib4();\n      init_lib();\n      init_version5();\n      logger5 = new Logger(version6);\n      _constructorGuard3 = {};\n      ModifiersBytes = { calldata: true, memory: true, storage: true };\n      ModifiersNest = { calldata: true, memory: true };\n      FormatTypes = Object.freeze({\n        // Bare formatting, as is needed for computing a sighash of an event or function\n        sighash: \"sighash\",\n        // Human-Readable with Minimal spacing and without names (compact human-readable)\n        minimal: \"minimal\",\n        // Human-Readable with nice spacing, including all names\n        full: \"full\",\n        // JSON-format a la Solidity\n        json: \"json\"\n      });\n      paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\n      ParamType = class _ParamType {\n        constructor(constructorGuard, params) {\n          if (constructorGuard !== _constructorGuard3) {\n            logger5.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"new ParamType()\"\n            });\n          }\n          populate(this, params);\n          let match = this.type.match(paramTypeArray);\n          if (match) {\n            populate(this, {\n              arrayLength: parseInt(match[2] || \"-1\"),\n              arrayChildren: _ParamType.fromObject({\n                type: match[1],\n                components: this.components\n              }),\n              baseType: \"array\"\n            });\n          } else {\n            populate(this, {\n              arrayLength: null,\n              arrayChildren: null,\n              baseType: this.components != null ? \"tuple\" : this.type\n            });\n          }\n          this._isParamType = true;\n          Object.freeze(this);\n        }\n        // Format the parameter fragment\n        //   - sighash: \"(uint256,address)\"\n        //   - minimal: \"tuple(uint256,address) indexed\"\n        //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n        format(format) {\n          if (!format) {\n            format = FormatTypes.sighash;\n          }\n          if (!FormatTypes[format]) {\n            logger5.throwArgumentError(\"invalid format type\", \"format\", format);\n          }\n          if (format === FormatTypes.json) {\n            let result2 = {\n              type: this.baseType === \"tuple\" ? \"tuple\" : this.type,\n              name: this.name || void 0\n            };\n            if (typeof this.indexed === \"boolean\") {\n              result2.indexed = this.indexed;\n            }\n            if (this.components) {\n              result2.components = this.components.map((comp) => JSON.parse(comp.format(format)));\n            }\n            return JSON.stringify(result2);\n          }\n          let result = \"\";\n          if (this.baseType === \"array\") {\n            result += this.arrayChildren.format(format);\n            result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\n          } else {\n            if (this.baseType === \"tuple\") {\n              if (format !== FormatTypes.sighash) {\n                result += this.type;\n              }\n              result += \"(\" + this.components.map((comp) => comp.format(format)).join(format === FormatTypes.full ? \", \" : \",\") + \")\";\n            } else {\n              result += this.type;\n            }\n          }\n          if (format !== FormatTypes.sighash) {\n            if (this.indexed === true) {\n              result += \" indexed\";\n            }\n            if (format === FormatTypes.full && this.name) {\n              result += \" \" + this.name;\n            }\n          }\n          return result;\n        }\n        static from(value, allowIndexed) {\n          if (typeof value === \"string\") {\n            return _ParamType.fromString(value, allowIndexed);\n          }\n          return _ParamType.fromObject(value);\n        }\n        static fromObject(value) {\n          if (_ParamType.isParamType(value)) {\n            return value;\n          }\n          return new _ParamType(_constructorGuard3, {\n            name: value.name || null,\n            type: verifyType(value.type),\n            indexed: value.indexed == null ? null : !!value.indexed,\n            components: value.components ? value.components.map(_ParamType.fromObject) : null\n          });\n        }\n        static fromString(value, allowIndexed) {\n          function ParamTypify(node) {\n            return _ParamType.fromObject({\n              name: node.name,\n              type: node.type,\n              indexed: node.indexed,\n              components: node.components\n            });\n          }\n          return ParamTypify(parseParamType(value, !!allowIndexed));\n        }\n        static isParamType(value) {\n          return !!(value != null && value._isParamType);\n        }\n      };\n      Fragment = class _Fragment {\n        constructor(constructorGuard, params) {\n          if (constructorGuard !== _constructorGuard3) {\n            logger5.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"new Fragment()\"\n            });\n          }\n          populate(this, params);\n          this._isFragment = true;\n          Object.freeze(this);\n        }\n        static from(value) {\n          if (_Fragment.isFragment(value)) {\n            return value;\n          }\n          if (typeof value === \"string\") {\n            return _Fragment.fromString(value);\n          }\n          return _Fragment.fromObject(value);\n        }\n        static fromObject(value) {\n          if (_Fragment.isFragment(value)) {\n            return value;\n          }\n          switch (value.type) {\n            case \"function\":\n              return FunctionFragment.fromObject(value);\n            case \"event\":\n              return EventFragment.fromObject(value);\n            case \"constructor\":\n              return ConstructorFragment.fromObject(value);\n            case \"error\":\n              return ErrorFragment.fromObject(value);\n            case \"fallback\":\n            case \"receive\":\n              return null;\n          }\n          return logger5.throwArgumentError(\"invalid fragment object\", \"value\", value);\n        }\n        static fromString(value) {\n          value = value.replace(/\\s/g, \" \");\n          value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n          value = value.trim();\n          if (value.split(\" \")[0] === \"event\") {\n            return EventFragment.fromString(value.substring(5).trim());\n          } else if (value.split(\" \")[0] === \"function\") {\n            return FunctionFragment.fromString(value.substring(8).trim());\n          } else if (value.split(\"(\")[0].trim() === \"constructor\") {\n            return ConstructorFragment.fromString(value.trim());\n          } else if (value.split(\" \")[0] === \"error\") {\n            return ErrorFragment.fromString(value.substring(5).trim());\n          }\n          return logger5.throwArgumentError(\"unsupported fragment\", \"value\", value);\n        }\n        static isFragment(value) {\n          return !!(value && value._isFragment);\n        }\n      };\n      EventFragment = class _EventFragment extends Fragment {\n        format(format) {\n          if (!format) {\n            format = FormatTypes.sighash;\n          }\n          if (!FormatTypes[format]) {\n            logger5.throwArgumentError(\"invalid format type\", \"format\", format);\n          }\n          if (format === FormatTypes.json) {\n            return JSON.stringify({\n              type: \"event\",\n              anonymous: this.anonymous,\n              name: this.name,\n              inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n          }\n          let result = \"\";\n          if (format !== FormatTypes.sighash) {\n            result += \"event \";\n          }\n          result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? \", \" : \",\") + \") \";\n          if (format !== FormatTypes.sighash) {\n            if (this.anonymous) {\n              result += \"anonymous \";\n            }\n          }\n          return result.trim();\n        }\n        static from(value) {\n          if (typeof value === \"string\") {\n            return _EventFragment.fromString(value);\n          }\n          return _EventFragment.fromObject(value);\n        }\n        static fromObject(value) {\n          if (_EventFragment.isEventFragment(value)) {\n            return value;\n          }\n          if (value.type !== \"event\") {\n            logger5.throwArgumentError(\"invalid event object\", \"value\", value);\n          }\n          const params = {\n            name: verifyIdentifier(value.name),\n            anonymous: value.anonymous,\n            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n            type: \"event\"\n          };\n          return new _EventFragment(_constructorGuard3, params);\n        }\n        static fromString(value) {\n          let match = value.match(regexParen);\n          if (!match) {\n            logger5.throwArgumentError(\"invalid event string\", \"value\", value);\n          }\n          let anonymous = false;\n          match[3].split(\" \").forEach((modifier) => {\n            switch (modifier.trim()) {\n              case \"anonymous\":\n                anonymous = true;\n                break;\n              case \"\":\n                break;\n              default:\n                logger5.warn(\"unknown modifier: \" + modifier);\n            }\n          });\n          return _EventFragment.fromObject({\n            name: match[1].trim(),\n            anonymous,\n            inputs: parseParams(match[2], true),\n            type: \"event\"\n          });\n        }\n        static isEventFragment(value) {\n          return value && value._isFragment && value.type === \"event\";\n        }\n      };\n      ConstructorFragment = class _ConstructorFragment extends Fragment {\n        format(format) {\n          if (!format) {\n            format = FormatTypes.sighash;\n          }\n          if (!FormatTypes[format]) {\n            logger5.throwArgumentError(\"invalid format type\", \"format\", format);\n          }\n          if (format === FormatTypes.json) {\n            return JSON.stringify({\n              type: \"constructor\",\n              stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : void 0,\n              payable: this.payable,\n              gas: this.gas ? this.gas.toNumber() : void 0,\n              inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n          }\n          if (format === FormatTypes.sighash) {\n            logger5.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"format(sighash)\"\n            });\n          }\n          let result = \"constructor(\" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? \", \" : \",\") + \") \";\n          if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n          }\n          return result.trim();\n        }\n        static from(value) {\n          if (typeof value === \"string\") {\n            return _ConstructorFragment.fromString(value);\n          }\n          return _ConstructorFragment.fromObject(value);\n        }\n        static fromObject(value) {\n          if (_ConstructorFragment.isConstructorFragment(value)) {\n            return value;\n          }\n          if (value.type !== \"constructor\") {\n            logger5.throwArgumentError(\"invalid constructor object\", \"value\", value);\n          }\n          let state = verifyState(value);\n          if (state.constant) {\n            logger5.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n          }\n          const params = {\n            name: null,\n            type: value.type,\n            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: value.gas ? BigNumber.from(value.gas) : null\n          };\n          return new _ConstructorFragment(_constructorGuard3, params);\n        }\n        static fromString(value) {\n          let params = { type: \"constructor\" };\n          value = parseGas(value, params);\n          let parens = value.match(regexParen);\n          if (!parens || parens[1].trim() !== \"constructor\") {\n            logger5.throwArgumentError(\"invalid constructor string\", \"value\", value);\n          }\n          params.inputs = parseParams(parens[2].trim(), false);\n          parseModifiers(parens[3].trim(), params);\n          return _ConstructorFragment.fromObject(params);\n        }\n        static isConstructorFragment(value) {\n          return value && value._isFragment && value.type === \"constructor\";\n        }\n      };\n      FunctionFragment = class _FunctionFragment extends ConstructorFragment {\n        format(format) {\n          if (!format) {\n            format = FormatTypes.sighash;\n          }\n          if (!FormatTypes[format]) {\n            logger5.throwArgumentError(\"invalid format type\", \"format\", format);\n          }\n          if (format === FormatTypes.json) {\n            return JSON.stringify({\n              type: \"function\",\n              name: this.name,\n              constant: this.constant,\n              stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : void 0,\n              payable: this.payable,\n              gas: this.gas ? this.gas.toNumber() : void 0,\n              inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n              outputs: this.outputs.map((output2) => JSON.parse(output2.format(format)))\n            });\n          }\n          let result = \"\";\n          if (format !== FormatTypes.sighash) {\n            result += \"function \";\n          }\n          result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? \", \" : \",\") + \") \";\n          if (format !== FormatTypes.sighash) {\n            if (this.stateMutability) {\n              if (this.stateMutability !== \"nonpayable\") {\n                result += this.stateMutability + \" \";\n              }\n            } else if (this.constant) {\n              result += \"view \";\n            }\n            if (this.outputs && this.outputs.length) {\n              result += \"returns (\" + this.outputs.map((output2) => output2.format(format)).join(\", \") + \") \";\n            }\n            if (this.gas != null) {\n              result += \"@\" + this.gas.toString() + \" \";\n            }\n          }\n          return result.trim();\n        }\n        static from(value) {\n          if (typeof value === \"string\") {\n            return _FunctionFragment.fromString(value);\n          }\n          return _FunctionFragment.fromObject(value);\n        }\n        static fromObject(value) {\n          if (_FunctionFragment.isFunctionFragment(value)) {\n            return value;\n          }\n          if (value.type !== \"function\") {\n            logger5.throwArgumentError(\"invalid function object\", \"value\", value);\n          }\n          let state = verifyState(value);\n          const params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            constant: state.constant,\n            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n            outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: value.gas ? BigNumber.from(value.gas) : null\n          };\n          return new _FunctionFragment(_constructorGuard3, params);\n        }\n        static fromString(value) {\n          let params = { type: \"function\" };\n          value = parseGas(value, params);\n          let comps = value.split(\" returns \");\n          if (comps.length > 2) {\n            logger5.throwArgumentError(\"invalid function string\", \"value\", value);\n          }\n          let parens = comps[0].match(regexParen);\n          if (!parens) {\n            logger5.throwArgumentError(\"invalid function signature\", \"value\", value);\n          }\n          params.name = parens[1].trim();\n          if (params.name) {\n            verifyIdentifier(params.name);\n          }\n          params.inputs = parseParams(parens[2], false);\n          parseModifiers(parens[3].trim(), params);\n          if (comps.length > 1) {\n            let returns = comps[1].match(regexParen);\n            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n              logger5.throwArgumentError(\"unexpected tokens\", \"value\", value);\n            }\n            params.outputs = parseParams(returns[2], false);\n          } else {\n            params.outputs = [];\n          }\n          return _FunctionFragment.fromObject(params);\n        }\n        static isFunctionFragment(value) {\n          return value && value._isFragment && value.type === \"function\";\n        }\n      };\n      ErrorFragment = class _ErrorFragment extends Fragment {\n        format(format) {\n          if (!format) {\n            format = FormatTypes.sighash;\n          }\n          if (!FormatTypes[format]) {\n            logger5.throwArgumentError(\"invalid format type\", \"format\", format);\n          }\n          if (format === FormatTypes.json) {\n            return JSON.stringify({\n              type: \"error\",\n              name: this.name,\n              inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n          }\n          let result = \"\";\n          if (format !== FormatTypes.sighash) {\n            result += \"error \";\n          }\n          result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? \", \" : \",\") + \") \";\n          return result.trim();\n        }\n        static from(value) {\n          if (typeof value === \"string\") {\n            return _ErrorFragment.fromString(value);\n          }\n          return _ErrorFragment.fromObject(value);\n        }\n        static fromObject(value) {\n          if (_ErrorFragment.isErrorFragment(value)) {\n            return value;\n          }\n          if (value.type !== \"error\") {\n            logger5.throwArgumentError(\"invalid error object\", \"value\", value);\n          }\n          const params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []\n          };\n          return checkForbidden(new _ErrorFragment(_constructorGuard3, params));\n        }\n        static fromString(value) {\n          let params = { type: \"error\" };\n          let parens = value.match(regexParen);\n          if (!parens) {\n            logger5.throwArgumentError(\"invalid error signature\", \"value\", value);\n          }\n          params.name = parens[1].trim();\n          if (params.name) {\n            verifyIdentifier(params.name);\n          }\n          params.inputs = parseParams(parens[2], false);\n          return checkForbidden(_ErrorFragment.fromObject(params));\n        }\n        static isErrorFragment(value) {\n          return value && value._isFragment && value.type === \"error\";\n        }\n      };\n      regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\n      regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js\n  function checkResultErrors(result) {\n    const errors = [];\n    const checkErrors = function(path, object2) {\n      if (!Array.isArray(object2)) {\n        return;\n      }\n      for (let key2 in object2) {\n        const childPath = path.slice();\n        childPath.push(key2);\n        try {\n          checkErrors(childPath, object2[key2]);\n        } catch (error) {\n          errors.push({ path: childPath, error });\n        }\n      }\n    };\n    checkErrors([], result);\n    return errors;\n  }\n  var logger6, Coder, Writer, Reader;\n  var init_abstract_coder = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib2();\n      init_lib3();\n      init_lib4();\n      init_lib();\n      init_version5();\n      logger6 = new Logger(version6);\n      Coder = class {\n        constructor(name, type, localName, dynamic) {\n          this.name = name;\n          this.type = type;\n          this.localName = localName;\n          this.dynamic = dynamic;\n        }\n        _throwError(message, value) {\n          logger6.throwArgumentError(message, this.localName, value);\n        }\n      };\n      Writer = class {\n        constructor(wordSize) {\n          defineReadOnly(this, \"wordSize\", wordSize || 32);\n          this._data = [];\n          this._dataLength = 0;\n          this._padding = new Uint8Array(wordSize);\n        }\n        get data() {\n          return hexConcat(this._data);\n        }\n        get length() {\n          return this._dataLength;\n        }\n        _writeData(data) {\n          this._data.push(data);\n          this._dataLength += data.length;\n          return data.length;\n        }\n        appendWriter(writer) {\n          return this._writeData(concat(writer._data));\n        }\n        // Arrayish items; padded on the right to wordSize\n        writeBytes(value) {\n          let bytes3 = arrayify(value);\n          const paddingOffset = bytes3.length % this.wordSize;\n          if (paddingOffset) {\n            bytes3 = concat([bytes3, this._padding.slice(paddingOffset)]);\n          }\n          return this._writeData(bytes3);\n        }\n        _getValue(value) {\n          let bytes3 = arrayify(BigNumber.from(value));\n          if (bytes3.length > this.wordSize) {\n            logger6.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n              length: this.wordSize,\n              offset: bytes3.length\n            });\n          }\n          if (bytes3.length % this.wordSize) {\n            bytes3 = concat([this._padding.slice(bytes3.length % this.wordSize), bytes3]);\n          }\n          return bytes3;\n        }\n        // BigNumberish items; padded on the left to wordSize\n        writeValue(value) {\n          return this._writeData(this._getValue(value));\n        }\n        writeUpdatableValue() {\n          const offset = this._data.length;\n          this._data.push(this._padding);\n          this._dataLength += this.wordSize;\n          return (value) => {\n            this._data[offset] = this._getValue(value);\n          };\n        }\n      };\n      Reader = class _Reader {\n        constructor(data, wordSize, coerceFunc, allowLoose) {\n          defineReadOnly(this, \"_data\", arrayify(data));\n          defineReadOnly(this, \"wordSize\", wordSize || 32);\n          defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n          defineReadOnly(this, \"allowLoose\", allowLoose);\n          this._offset = 0;\n        }\n        get data() {\n          return hexlify(this._data);\n        }\n        get consumed() {\n          return this._offset;\n        }\n        // The default Coerce function\n        static coerce(name, value) {\n          let match = name.match(\"^u?int([0-9]+)$\");\n          if (match && parseInt(match[1]) <= 48) {\n            value = value.toNumber();\n          }\n          return value;\n        }\n        coerce(name, value) {\n          if (this._coerceFunc) {\n            return this._coerceFunc(name, value);\n          }\n          return _Reader.coerce(name, value);\n        }\n        _peekBytes(offset, length, loose) {\n          let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n          if (this._offset + alignedLength > this._data.length) {\n            if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n              alignedLength = length;\n            } else {\n              logger6.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                length: this._data.length,\n                offset: this._offset + alignedLength\n              });\n            }\n          }\n          return this._data.slice(this._offset, this._offset + alignedLength);\n        }\n        subReader(offset) {\n          return new _Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n        }\n        readBytes(length, loose) {\n          let bytes3 = this._peekBytes(0, length, !!loose);\n          this._offset += bytes3.length;\n          return bytes3.slice(0, length);\n        }\n        readValue() {\n          return BigNumber.from(this.readBytes(this.wordSize));\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/js-sha3@0.8.0/node_modules/js-sha3/src/sha3.js\n  var require_sha3 = __commonJS({\n    \"../../../node_modules/.pnpm/js-sha3@0.8.0/node_modules/js-sha3/src/sha3.js\"(exports3, module) {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      (function() {\n        \"use strict\";\n        var INPUT_ERROR = \"input is invalid type\";\n        var FINALIZE_ERROR = \"finalize already called\";\n        var WINDOW = typeof window === \"object\";\n        var root = WINDOW ? window : {};\n        if (root.JS_SHA3_NO_WINDOW) {\n          WINDOW = false;\n        }\n        var WEB_WORKER = !WINDOW && typeof self === \"object\";\n        var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process_exports === \"object\" && process_exports.versions && process_exports.versions.node;\n        if (NODE_JS) {\n          root = global;\n        } else if (WEB_WORKER) {\n          root = self;\n        }\n        var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === \"object\" && module.exports;\n        var AMD = typeof define === \"function\" && define.amd;\n        var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== \"undefined\";\n        var HEX_CHARS = \"0123456789abcdef\".split(\"\");\n        var SHAKE_PADDING = [31, 7936, 2031616, 520093696];\n        var CSHAKE_PADDING = [4, 1024, 262144, 67108864];\n        var KECCAK_PADDING = [1, 256, 65536, 16777216];\n        var PADDING = [6, 1536, 393216, 100663296];\n        var SHIFT = [0, 8, 16, 24];\n        var RC = [\n          1,\n          0,\n          32898,\n          0,\n          32906,\n          2147483648,\n          2147516416,\n          2147483648,\n          32907,\n          0,\n          2147483649,\n          0,\n          2147516545,\n          2147483648,\n          32777,\n          2147483648,\n          138,\n          0,\n          136,\n          0,\n          2147516425,\n          0,\n          2147483658,\n          0,\n          2147516555,\n          0,\n          139,\n          2147483648,\n          32905,\n          2147483648,\n          32771,\n          2147483648,\n          32770,\n          2147483648,\n          128,\n          2147483648,\n          32778,\n          0,\n          2147483658,\n          2147483648,\n          2147516545,\n          2147483648,\n          32896,\n          2147483648,\n          2147483649,\n          0,\n          2147516424,\n          2147483648\n        ];\n        var BITS = [224, 256, 384, 512];\n        var SHAKE_BITS = [128, 256];\n        var OUTPUT_TYPES = [\"hex\", \"buffer\", \"arrayBuffer\", \"array\", \"digest\"];\n        var CSHAKE_BYTEPAD = {\n          \"128\": 168,\n          \"256\": 136\n        };\n        if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {\n          Array.isArray = function(obj) {\n            return Object.prototype.toString.call(obj) === \"[object Array]\";\n          };\n        }\n        if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n          ArrayBuffer.isView = function(obj) {\n            return typeof obj === \"object\" && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n          };\n        }\n        var createOutputMethod = function(bits2, padding3, outputType) {\n          return function(message) {\n            return new Keccak2(bits2, padding3, bits2).update(message)[outputType]();\n          };\n        };\n        var createShakeOutputMethod = function(bits2, padding3, outputType) {\n          return function(message, outputBits) {\n            return new Keccak2(bits2, padding3, outputBits).update(message)[outputType]();\n          };\n        };\n        var createCshakeOutputMethod = function(bits2, padding3, outputType) {\n          return function(message, outputBits, n2, s) {\n            return methods[\"cshake\" + bits2].update(message, outputBits, n2, s)[outputType]();\n          };\n        };\n        var createKmacOutputMethod = function(bits2, padding3, outputType) {\n          return function(key2, message, outputBits, s) {\n            return methods[\"kmac\" + bits2].update(key2, message, outputBits, s)[outputType]();\n          };\n        };\n        var createOutputMethods = function(method, createMethod2, bits2, padding3) {\n          for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {\n            var type = OUTPUT_TYPES[i2];\n            method[type] = createMethod2(bits2, padding3, type);\n          }\n          return method;\n        };\n        var createMethod = function(bits2, padding3) {\n          var method = createOutputMethod(bits2, padding3, \"hex\");\n          method.create = function() {\n            return new Keccak2(bits2, padding3, bits2);\n          };\n          method.update = function(message) {\n            return method.create().update(message);\n          };\n          return createOutputMethods(method, createOutputMethod, bits2, padding3);\n        };\n        var createShakeMethod = function(bits2, padding3) {\n          var method = createShakeOutputMethod(bits2, padding3, \"hex\");\n          method.create = function(outputBits) {\n            return new Keccak2(bits2, padding3, outputBits);\n          };\n          method.update = function(message, outputBits) {\n            return method.create(outputBits).update(message);\n          };\n          return createOutputMethods(method, createShakeOutputMethod, bits2, padding3);\n        };\n        var createCshakeMethod = function(bits2, padding3) {\n          var w = CSHAKE_BYTEPAD[bits2];\n          var method = createCshakeOutputMethod(bits2, padding3, \"hex\");\n          method.create = function(outputBits, n2, s) {\n            if (!n2 && !s) {\n              return methods[\"shake\" + bits2].create(outputBits);\n            } else {\n              return new Keccak2(bits2, padding3, outputBits).bytepad([n2, s], w);\n            }\n          };\n          method.update = function(message, outputBits, n2, s) {\n            return method.create(outputBits, n2, s).update(message);\n          };\n          return createOutputMethods(method, createCshakeOutputMethod, bits2, padding3);\n        };\n        var createKmacMethod = function(bits2, padding3) {\n          var w = CSHAKE_BYTEPAD[bits2];\n          var method = createKmacOutputMethod(bits2, padding3, \"hex\");\n          method.create = function(key2, outputBits, s) {\n            return new Kmac(bits2, padding3, outputBits).bytepad([\"KMAC\", s], w).bytepad([key2], w);\n          };\n          method.update = function(key2, message, outputBits, s) {\n            return method.create(key2, outputBits, s).update(message);\n          };\n          return createOutputMethods(method, createKmacOutputMethod, bits2, padding3);\n        };\n        var algorithms = [\n          { name: \"keccak\", padding: KECCAK_PADDING, bits: BITS, createMethod },\n          { name: \"sha3\", padding: PADDING, bits: BITS, createMethod },\n          { name: \"shake\", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },\n          { name: \"cshake\", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },\n          { name: \"kmac\", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }\n        ];\n        var methods = {}, methodNames = [];\n        for (var i = 0; i < algorithms.length; ++i) {\n          var algorithm = algorithms[i];\n          var bits = algorithm.bits;\n          for (var j = 0; j < bits.length; ++j) {\n            var methodName = algorithm.name + \"_\" + bits[j];\n            methodNames.push(methodName);\n            methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n            if (algorithm.name !== \"sha3\") {\n              var newMethodName = algorithm.name + bits[j];\n              methodNames.push(newMethodName);\n              methods[newMethodName] = methods[methodName];\n            }\n          }\n        }\n        function Keccak2(bits2, padding3, outputBits) {\n          this.blocks = [];\n          this.s = [];\n          this.padding = padding3;\n          this.outputBits = outputBits;\n          this.reset = true;\n          this.finalized = false;\n          this.block = 0;\n          this.start = 0;\n          this.blockCount = 1600 - (bits2 << 1) >> 5;\n          this.byteCount = this.blockCount << 2;\n          this.outputBlocks = outputBits >> 5;\n          this.extraBytes = (outputBits & 31) >> 3;\n          for (var i2 = 0; i2 < 50; ++i2) {\n            this.s[i2] = 0;\n          }\n        }\n        Keccak2.prototype.update = function(message) {\n          if (this.finalized) {\n            throw new Error(FINALIZE_ERROR);\n          }\n          var notString, type = typeof message;\n          if (type !== \"string\") {\n            if (type === \"object\") {\n              if (message === null) {\n                throw new Error(INPUT_ERROR);\n              } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n                message = new Uint8Array(message);\n              } else if (!Array.isArray(message)) {\n                if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n                  throw new Error(INPUT_ERROR);\n                }\n              }\n            } else {\n              throw new Error(INPUT_ERROR);\n            }\n            notString = true;\n          }\n          var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s = this.s, i2, code;\n          while (index < length) {\n            if (this.reset) {\n              this.reset = false;\n              blocks[0] = this.block;\n              for (i2 = 1; i2 < blockCount + 1; ++i2) {\n                blocks[i2] = 0;\n              }\n            }\n            if (notString) {\n              for (i2 = this.start; index < length && i2 < byteCount; ++index) {\n                blocks[i2 >> 2] |= message[index] << SHIFT[i2++ & 3];\n              }\n            } else {\n              for (i2 = this.start; index < length && i2 < byteCount; ++index) {\n                code = message.charCodeAt(index);\n                if (code < 128) {\n                  blocks[i2 >> 2] |= code << SHIFT[i2++ & 3];\n                } else if (code < 2048) {\n                  blocks[i2 >> 2] |= (192 | code >> 6) << SHIFT[i2++ & 3];\n                  blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];\n                } else if (code < 55296 || code >= 57344) {\n                  blocks[i2 >> 2] |= (224 | code >> 12) << SHIFT[i2++ & 3];\n                  blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];\n                  blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];\n                } else {\n                  code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);\n                  blocks[i2 >> 2] |= (240 | code >> 18) << SHIFT[i2++ & 3];\n                  blocks[i2 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i2++ & 3];\n                  blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];\n                  blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];\n                }\n              }\n            }\n            this.lastByteIndex = i2;\n            if (i2 >= byteCount) {\n              this.start = i2 - byteCount;\n              this.block = blocks[blockCount];\n              for (i2 = 0; i2 < blockCount; ++i2) {\n                s[i2] ^= blocks[i2];\n              }\n              f(s);\n              this.reset = true;\n            } else {\n              this.start = i2;\n            }\n          }\n          return this;\n        };\n        Keccak2.prototype.encode = function(x, right) {\n          var o = x & 255, n2 = 1;\n          var bytes3 = [o];\n          x = x >> 8;\n          o = x & 255;\n          while (o > 0) {\n            bytes3.unshift(o);\n            x = x >> 8;\n            o = x & 255;\n            ++n2;\n          }\n          if (right) {\n            bytes3.push(n2);\n          } else {\n            bytes3.unshift(n2);\n          }\n          this.update(bytes3);\n          return bytes3.length;\n        };\n        Keccak2.prototype.encodeString = function(str) {\n          var notString, type = typeof str;\n          if (type !== \"string\") {\n            if (type === \"object\") {\n              if (str === null) {\n                throw new Error(INPUT_ERROR);\n              } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {\n                str = new Uint8Array(str);\n              } else if (!Array.isArray(str)) {\n                if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {\n                  throw new Error(INPUT_ERROR);\n                }\n              }\n            } else {\n              throw new Error(INPUT_ERROR);\n            }\n            notString = true;\n          }\n          var bytes3 = 0, length = str.length;\n          if (notString) {\n            bytes3 = length;\n          } else {\n            for (var i2 = 0; i2 < str.length; ++i2) {\n              var code = str.charCodeAt(i2);\n              if (code < 128) {\n                bytes3 += 1;\n              } else if (code < 2048) {\n                bytes3 += 2;\n              } else if (code < 55296 || code >= 57344) {\n                bytes3 += 3;\n              } else {\n                code = 65536 + ((code & 1023) << 10 | str.charCodeAt(++i2) & 1023);\n                bytes3 += 4;\n              }\n            }\n          }\n          bytes3 += this.encode(bytes3 * 8);\n          this.update(str);\n          return bytes3;\n        };\n        Keccak2.prototype.bytepad = function(strs, w) {\n          var bytes3 = this.encode(w);\n          for (var i2 = 0; i2 < strs.length; ++i2) {\n            bytes3 += this.encodeString(strs[i2]);\n          }\n          var paddingBytes = w - bytes3 % w;\n          var zeros3 = [];\n          zeros3.length = paddingBytes;\n          this.update(zeros3);\n          return this;\n        };\n        Keccak2.prototype.finalize = function() {\n          if (this.finalized) {\n            return;\n          }\n          this.finalized = true;\n          var blocks = this.blocks, i2 = this.lastByteIndex, blockCount = this.blockCount, s = this.s;\n          blocks[i2 >> 2] |= this.padding[i2 & 3];\n          if (this.lastByteIndex === this.byteCount) {\n            blocks[0] = blocks[blockCount];\n            for (i2 = 1; i2 < blockCount + 1; ++i2) {\n              blocks[i2] = 0;\n            }\n          }\n          blocks[blockCount - 1] |= 2147483648;\n          for (i2 = 0; i2 < blockCount; ++i2) {\n            s[i2] ^= blocks[i2];\n          }\n          f(s);\n        };\n        Keccak2.prototype.toString = Keccak2.prototype.hex = function() {\n          this.finalize();\n          var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;\n          var hex = \"\", block;\n          while (j2 < outputBlocks) {\n            for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {\n              block = s[i2];\n              hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];\n            }\n            if (j2 % blockCount === 0) {\n              f(s);\n              i2 = 0;\n            }\n          }\n          if (extraBytes) {\n            block = s[i2];\n            hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];\n            if (extraBytes > 1) {\n              hex += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];\n            }\n            if (extraBytes > 2) {\n              hex += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];\n            }\n          }\n          return hex;\n        };\n        Keccak2.prototype.arrayBuffer = function() {\n          this.finalize();\n          var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;\n          var bytes3 = this.outputBits >> 3;\n          var buffer;\n          if (extraBytes) {\n            buffer = new ArrayBuffer(outputBlocks + 1 << 2);\n          } else {\n            buffer = new ArrayBuffer(bytes3);\n          }\n          var array = new Uint32Array(buffer);\n          while (j2 < outputBlocks) {\n            for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {\n              array[j2] = s[i2];\n            }\n            if (j2 % blockCount === 0) {\n              f(s);\n            }\n          }\n          if (extraBytes) {\n            array[i2] = s[i2];\n            buffer = buffer.slice(0, bytes3);\n          }\n          return buffer;\n        };\n        Keccak2.prototype.buffer = Keccak2.prototype.arrayBuffer;\n        Keccak2.prototype.digest = Keccak2.prototype.array = function() {\n          this.finalize();\n          var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;\n          var array = [], offset, block;\n          while (j2 < outputBlocks) {\n            for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {\n              offset = j2 << 2;\n              block = s[i2];\n              array[offset] = block & 255;\n              array[offset + 1] = block >> 8 & 255;\n              array[offset + 2] = block >> 16 & 255;\n              array[offset + 3] = block >> 24 & 255;\n            }\n            if (j2 % blockCount === 0) {\n              f(s);\n            }\n          }\n          if (extraBytes) {\n            offset = j2 << 2;\n            block = s[i2];\n            array[offset] = block & 255;\n            if (extraBytes > 1) {\n              array[offset + 1] = block >> 8 & 255;\n            }\n            if (extraBytes > 2) {\n              array[offset + 2] = block >> 16 & 255;\n            }\n          }\n          return array;\n        };\n        function Kmac(bits2, padding3, outputBits) {\n          Keccak2.call(this, bits2, padding3, outputBits);\n        }\n        Kmac.prototype = new Keccak2();\n        Kmac.prototype.finalize = function() {\n          this.encode(this.outputBits, true);\n          return Keccak2.prototype.finalize.call(this);\n        };\n        var f = function(s) {\n          var h, l, n2, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n          for (n2 = 0; n2 < 48; n2 += 2) {\n            c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n            c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n            c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n            c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n            c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n            c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n            c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n            c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n            c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n            c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n            h = c8 ^ (c2 << 1 | c3 >>> 31);\n            l = c9 ^ (c3 << 1 | c2 >>> 31);\n            s[0] ^= h;\n            s[1] ^= l;\n            s[10] ^= h;\n            s[11] ^= l;\n            s[20] ^= h;\n            s[21] ^= l;\n            s[30] ^= h;\n            s[31] ^= l;\n            s[40] ^= h;\n            s[41] ^= l;\n            h = c0 ^ (c4 << 1 | c5 >>> 31);\n            l = c1 ^ (c5 << 1 | c4 >>> 31);\n            s[2] ^= h;\n            s[3] ^= l;\n            s[12] ^= h;\n            s[13] ^= l;\n            s[22] ^= h;\n            s[23] ^= l;\n            s[32] ^= h;\n            s[33] ^= l;\n            s[42] ^= h;\n            s[43] ^= l;\n            h = c2 ^ (c6 << 1 | c7 >>> 31);\n            l = c3 ^ (c7 << 1 | c6 >>> 31);\n            s[4] ^= h;\n            s[5] ^= l;\n            s[14] ^= h;\n            s[15] ^= l;\n            s[24] ^= h;\n            s[25] ^= l;\n            s[34] ^= h;\n            s[35] ^= l;\n            s[44] ^= h;\n            s[45] ^= l;\n            h = c4 ^ (c8 << 1 | c9 >>> 31);\n            l = c5 ^ (c9 << 1 | c8 >>> 31);\n            s[6] ^= h;\n            s[7] ^= l;\n            s[16] ^= h;\n            s[17] ^= l;\n            s[26] ^= h;\n            s[27] ^= l;\n            s[36] ^= h;\n            s[37] ^= l;\n            s[46] ^= h;\n            s[47] ^= l;\n            h = c6 ^ (c0 << 1 | c1 >>> 31);\n            l = c7 ^ (c1 << 1 | c0 >>> 31);\n            s[8] ^= h;\n            s[9] ^= l;\n            s[18] ^= h;\n            s[19] ^= l;\n            s[28] ^= h;\n            s[29] ^= l;\n            s[38] ^= h;\n            s[39] ^= l;\n            s[48] ^= h;\n            s[49] ^= l;\n            b0 = s[0];\n            b1 = s[1];\n            b32 = s[11] << 4 | s[10] >>> 28;\n            b33 = s[10] << 4 | s[11] >>> 28;\n            b14 = s[20] << 3 | s[21] >>> 29;\n            b15 = s[21] << 3 | s[20] >>> 29;\n            b46 = s[31] << 9 | s[30] >>> 23;\n            b47 = s[30] << 9 | s[31] >>> 23;\n            b28 = s[40] << 18 | s[41] >>> 14;\n            b29 = s[41] << 18 | s[40] >>> 14;\n            b20 = s[2] << 1 | s[3] >>> 31;\n            b21 = s[3] << 1 | s[2] >>> 31;\n            b2 = s[13] << 12 | s[12] >>> 20;\n            b3 = s[12] << 12 | s[13] >>> 20;\n            b34 = s[22] << 10 | s[23] >>> 22;\n            b35 = s[23] << 10 | s[22] >>> 22;\n            b16 = s[33] << 13 | s[32] >>> 19;\n            b17 = s[32] << 13 | s[33] >>> 19;\n            b48 = s[42] << 2 | s[43] >>> 30;\n            b49 = s[43] << 2 | s[42] >>> 30;\n            b40 = s[5] << 30 | s[4] >>> 2;\n            b41 = s[4] << 30 | s[5] >>> 2;\n            b22 = s[14] << 6 | s[15] >>> 26;\n            b23 = s[15] << 6 | s[14] >>> 26;\n            b4 = s[25] << 11 | s[24] >>> 21;\n            b5 = s[24] << 11 | s[25] >>> 21;\n            b36 = s[34] << 15 | s[35] >>> 17;\n            b37 = s[35] << 15 | s[34] >>> 17;\n            b18 = s[45] << 29 | s[44] >>> 3;\n            b19 = s[44] << 29 | s[45] >>> 3;\n            b10 = s[6] << 28 | s[7] >>> 4;\n            b11 = s[7] << 28 | s[6] >>> 4;\n            b42 = s[17] << 23 | s[16] >>> 9;\n            b43 = s[16] << 23 | s[17] >>> 9;\n            b24 = s[26] << 25 | s[27] >>> 7;\n            b25 = s[27] << 25 | s[26] >>> 7;\n            b6 = s[36] << 21 | s[37] >>> 11;\n            b7 = s[37] << 21 | s[36] >>> 11;\n            b38 = s[47] << 24 | s[46] >>> 8;\n            b39 = s[46] << 24 | s[47] >>> 8;\n            b30 = s[8] << 27 | s[9] >>> 5;\n            b31 = s[9] << 27 | s[8] >>> 5;\n            b12 = s[18] << 20 | s[19] >>> 12;\n            b13 = s[19] << 20 | s[18] >>> 12;\n            b44 = s[29] << 7 | s[28] >>> 25;\n            b45 = s[28] << 7 | s[29] >>> 25;\n            b26 = s[38] << 8 | s[39] >>> 24;\n            b27 = s[39] << 8 | s[38] >>> 24;\n            b8 = s[48] << 14 | s[49] >>> 18;\n            b9 = s[49] << 14 | s[48] >>> 18;\n            s[0] = b0 ^ ~b2 & b4;\n            s[1] = b1 ^ ~b3 & b5;\n            s[10] = b10 ^ ~b12 & b14;\n            s[11] = b11 ^ ~b13 & b15;\n            s[20] = b20 ^ ~b22 & b24;\n            s[21] = b21 ^ ~b23 & b25;\n            s[30] = b30 ^ ~b32 & b34;\n            s[31] = b31 ^ ~b33 & b35;\n            s[40] = b40 ^ ~b42 & b44;\n            s[41] = b41 ^ ~b43 & b45;\n            s[2] = b2 ^ ~b4 & b6;\n            s[3] = b3 ^ ~b5 & b7;\n            s[12] = b12 ^ ~b14 & b16;\n            s[13] = b13 ^ ~b15 & b17;\n            s[22] = b22 ^ ~b24 & b26;\n            s[23] = b23 ^ ~b25 & b27;\n            s[32] = b32 ^ ~b34 & b36;\n            s[33] = b33 ^ ~b35 & b37;\n            s[42] = b42 ^ ~b44 & b46;\n            s[43] = b43 ^ ~b45 & b47;\n            s[4] = b4 ^ ~b6 & b8;\n            s[5] = b5 ^ ~b7 & b9;\n            s[14] = b14 ^ ~b16 & b18;\n            s[15] = b15 ^ ~b17 & b19;\n            s[24] = b24 ^ ~b26 & b28;\n            s[25] = b25 ^ ~b27 & b29;\n            s[34] = b34 ^ ~b36 & b38;\n            s[35] = b35 ^ ~b37 & b39;\n            s[44] = b44 ^ ~b46 & b48;\n            s[45] = b45 ^ ~b47 & b49;\n            s[6] = b6 ^ ~b8 & b0;\n            s[7] = b7 ^ ~b9 & b1;\n            s[16] = b16 ^ ~b18 & b10;\n            s[17] = b17 ^ ~b19 & b11;\n            s[26] = b26 ^ ~b28 & b20;\n            s[27] = b27 ^ ~b29 & b21;\n            s[36] = b36 ^ ~b38 & b30;\n            s[37] = b37 ^ ~b39 & b31;\n            s[46] = b46 ^ ~b48 & b40;\n            s[47] = b47 ^ ~b49 & b41;\n            s[8] = b8 ^ ~b0 & b2;\n            s[9] = b9 ^ ~b1 & b3;\n            s[18] = b18 ^ ~b10 & b12;\n            s[19] = b19 ^ ~b11 & b13;\n            s[28] = b28 ^ ~b20 & b22;\n            s[29] = b29 ^ ~b21 & b23;\n            s[38] = b38 ^ ~b30 & b32;\n            s[39] = b39 ^ ~b31 & b33;\n            s[48] = b48 ^ ~b40 & b42;\n            s[49] = b49 ^ ~b41 & b43;\n            s[0] ^= RC[n2];\n            s[1] ^= RC[n2 + 1];\n          }\n        };\n        if (COMMON_JS) {\n          module.exports = methods;\n        } else {\n          for (i = 0; i < methodNames.length; ++i) {\n            root[methodNames[i]] = methods[methodNames[i]];\n          }\n          if (AMD) {\n            define(function() {\n              return methods;\n            });\n          }\n        }\n      })();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+keccak256@5.8.0/node_modules/@ethersproject/keccak256/lib.esm/index.js\n  function keccak256(data) {\n    return \"0x\" + import_js_sha3.default.keccak_256(arrayify(data));\n  }\n  var import_js_sha3;\n  var init_lib5 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+keccak256@5.8.0/node_modules/@ethersproject/keccak256/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      import_js_sha3 = __toESM(require_sha3());\n      init_lib2();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+rlp@5.8.0/node_modules/@ethersproject/rlp/lib.esm/_version.js\n  var version7;\n  var init_version6 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+rlp@5.8.0/node_modules/@ethersproject/rlp/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version7 = \"rlp/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+rlp@5.8.0/node_modules/@ethersproject/rlp/lib.esm/index.js\n  var lib_exports = {};\n  __export(lib_exports, {\n    decode: () => decode,\n    encode: () => encode\n  });\n  function arrayifyInteger(value) {\n    const result = [];\n    while (value) {\n      result.unshift(value & 255);\n      value >>= 8;\n    }\n    return result;\n  }\n  function unarrayifyInteger(data, offset, length) {\n    let result = 0;\n    for (let i = 0; i < length; i++) {\n      result = result * 256 + data[offset + i];\n    }\n    return result;\n  }\n  function _encode(object2) {\n    if (Array.isArray(object2)) {\n      let payload = [];\n      object2.forEach(function(child) {\n        payload = payload.concat(_encode(child));\n      });\n      if (payload.length <= 55) {\n        payload.unshift(192 + payload.length);\n        return payload;\n      }\n      const length2 = arrayifyInteger(payload.length);\n      length2.unshift(247 + length2.length);\n      return length2.concat(payload);\n    }\n    if (!isBytesLike(object2)) {\n      logger7.throwArgumentError(\"RLP object must be BytesLike\", \"object\", object2);\n    }\n    const data = Array.prototype.slice.call(arrayify(object2));\n    if (data.length === 1 && data[0] <= 127) {\n      return data;\n    } else if (data.length <= 55) {\n      data.unshift(128 + data.length);\n      return data;\n    }\n    const length = arrayifyInteger(data.length);\n    length.unshift(183 + length.length);\n    return length.concat(data);\n  }\n  function encode(object2) {\n    return hexlify(_encode(object2));\n  }\n  function _decodeChildren(data, offset, childOffset, length) {\n    const result = [];\n    while (childOffset < offset + 1 + length) {\n      const decoded = _decode(data, childOffset);\n      result.push(decoded.result);\n      childOffset += decoded.consumed;\n      if (childOffset > offset + 1 + length) {\n        logger7.throwError(\"child data too short\", Logger.errors.BUFFER_OVERRUN, {});\n      }\n    }\n    return { consumed: 1 + length, result };\n  }\n  function _decode(data, offset) {\n    if (data.length === 0) {\n      logger7.throwError(\"data too short\", Logger.errors.BUFFER_OVERRUN, {});\n    }\n    if (data[offset] >= 248) {\n      const lengthLength = data[offset] - 247;\n      if (offset + 1 + lengthLength > data.length) {\n        logger7.throwError(\"data short segment too short\", Logger.errors.BUFFER_OVERRUN, {});\n      }\n      const length = unarrayifyInteger(data, offset + 1, lengthLength);\n      if (offset + 1 + lengthLength + length > data.length) {\n        logger7.throwError(\"data long segment too short\", Logger.errors.BUFFER_OVERRUN, {});\n      }\n      return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);\n    } else if (data[offset] >= 192) {\n      const length = data[offset] - 192;\n      if (offset + 1 + length > data.length) {\n        logger7.throwError(\"data array too short\", Logger.errors.BUFFER_OVERRUN, {});\n      }\n      return _decodeChildren(data, offset, offset + 1, length);\n    } else if (data[offset] >= 184) {\n      const lengthLength = data[offset] - 183;\n      if (offset + 1 + lengthLength > data.length) {\n        logger7.throwError(\"data array too short\", Logger.errors.BUFFER_OVERRUN, {});\n      }\n      const length = unarrayifyInteger(data, offset + 1, lengthLength);\n      if (offset + 1 + lengthLength + length > data.length) {\n        logger7.throwError(\"data array too short\", Logger.errors.BUFFER_OVERRUN, {});\n      }\n      const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));\n      return { consumed: 1 + lengthLength + length, result };\n    } else if (data[offset] >= 128) {\n      const length = data[offset] - 128;\n      if (offset + 1 + length > data.length) {\n        logger7.throwError(\"data too short\", Logger.errors.BUFFER_OVERRUN, {});\n      }\n      const result = hexlify(data.slice(offset + 1, offset + 1 + length));\n      return { consumed: 1 + length, result };\n    }\n    return { consumed: 1, result: hexlify(data[offset]) };\n  }\n  function decode(data) {\n    const bytes3 = arrayify(data);\n    const decoded = _decode(bytes3, 0);\n    if (decoded.consumed !== bytes3.length) {\n      logger7.throwArgumentError(\"invalid rlp data\", \"data\", data);\n    }\n    return decoded.result;\n  }\n  var logger7;\n  var init_lib6 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+rlp@5.8.0/node_modules/@ethersproject/rlp/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib2();\n      init_lib();\n      init_version6();\n      logger7 = new Logger(version7);\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+address@5.8.0/node_modules/@ethersproject/address/lib.esm/_version.js\n  var version8;\n  var init_version7 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+address@5.8.0/node_modules/@ethersproject/address/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version8 = \"address/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+address@5.8.0/node_modules/@ethersproject/address/lib.esm/index.js\n  function getChecksumAddress(address) {\n    if (!isHexString(address, 20)) {\n      logger8.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    address = address.toLowerCase();\n    const chars = address.substring(2).split(\"\");\n    const expanded = new Uint8Array(40);\n    for (let i = 0; i < 40; i++) {\n      expanded[i] = chars[i].charCodeAt(0);\n    }\n    const hashed = arrayify(keccak256(expanded));\n    for (let i = 0; i < 40; i += 2) {\n      if (hashed[i >> 1] >> 4 >= 8) {\n        chars[i] = chars[i].toUpperCase();\n      }\n      if ((hashed[i >> 1] & 15) >= 8) {\n        chars[i + 1] = chars[i + 1].toUpperCase();\n      }\n    }\n    return \"0x\" + chars.join(\"\");\n  }\n  function log10(x) {\n    if (Math.log10) {\n      return Math.log10(x);\n    }\n    return Math.log(x) / Math.LN10;\n  }\n  function ibanChecksum(address) {\n    address = address.toUpperCase();\n    address = address.substring(4) + address.substring(0, 2) + \"00\";\n    let expanded = address.split(\"\").map((c) => {\n      return ibanLookup[c];\n    }).join(\"\");\n    while (expanded.length >= safeDigits) {\n      let block = expanded.substring(0, safeDigits);\n      expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n    }\n    let checksum = String(98 - parseInt(expanded, 10) % 97);\n    while (checksum.length < 2) {\n      checksum = \"0\" + checksum;\n    }\n    return checksum;\n  }\n  function getAddress(address) {\n    let result = null;\n    if (typeof address !== \"string\") {\n      logger8.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n      if (address.substring(0, 2) !== \"0x\") {\n        address = \"0x\" + address;\n      }\n      result = getChecksumAddress(address);\n      if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {\n        logger8.throwArgumentError(\"bad address checksum\", \"address\", address);\n      }\n    } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n      if (address.substring(2, 4) !== ibanChecksum(address)) {\n        logger8.throwArgumentError(\"bad icap checksum\", \"address\", address);\n      }\n      result = _base36To16(address.substring(4));\n      while (result.length < 40) {\n        result = \"0\" + result;\n      }\n      result = getChecksumAddress(\"0x\" + result);\n    } else {\n      logger8.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    return result;\n  }\n  function isAddress(address) {\n    try {\n      getAddress(address);\n      return true;\n    } catch (error) {\n    }\n    return false;\n  }\n  function getIcapAddress(address) {\n    let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();\n    while (base36.length < 30) {\n      base36 = \"0\" + base36;\n    }\n    return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n  }\n  function getContractAddress(transaction) {\n    let from = null;\n    try {\n      from = getAddress(transaction.from);\n    } catch (error) {\n      logger8.throwArgumentError(\"missing from address\", \"transaction\", transaction);\n    }\n    const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));\n    return getAddress(hexDataSlice(keccak256(encode([from, nonce])), 12));\n  }\n  function getCreate2Address(from, salt, initCodeHash) {\n    if (hexDataLength(salt) !== 32) {\n      logger8.throwArgumentError(\"salt must be 32 bytes\", \"salt\", salt);\n    }\n    if (hexDataLength(initCodeHash) !== 32) {\n      logger8.throwArgumentError(\"initCodeHash must be 32 bytes\", \"initCodeHash\", initCodeHash);\n    }\n    return getAddress(hexDataSlice(keccak256(concat([\"0xff\", getAddress(from), salt, initCodeHash])), 12));\n  }\n  var logger8, MAX_SAFE_INTEGER, ibanLookup, safeDigits;\n  var init_lib7 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+address@5.8.0/node_modules/@ethersproject/address/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib2();\n      init_lib3();\n      init_lib5();\n      init_lib6();\n      init_lib();\n      init_version7();\n      logger8 = new Logger(version8);\n      MAX_SAFE_INTEGER = 9007199254740991;\n      ibanLookup = {};\n      for (let i = 0; i < 10; i++) {\n        ibanLookup[String(i)] = String(i);\n      }\n      for (let i = 0; i < 26; i++) {\n        ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n      }\n      safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/address.js\n  var AddressCoder;\n  var init_address = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/address.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib7();\n      init_lib2();\n      init_abstract_coder();\n      AddressCoder = class extends Coder {\n        constructor(localName) {\n          super(\"address\", \"address\", localName, false);\n        }\n        defaultValue() {\n          return \"0x0000000000000000000000000000000000000000\";\n        }\n        encode(writer, value) {\n          try {\n            value = getAddress(value);\n          } catch (error) {\n            this._throwError(error.message, value);\n          }\n          return writer.writeValue(value);\n        }\n        decode(reader) {\n          return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js\n  var AnonymousCoder;\n  var init_anonymous = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_abstract_coder();\n      AnonymousCoder = class extends Coder {\n        constructor(coder) {\n          super(coder.name, coder.type, void 0, coder.dynamic);\n          this.coder = coder;\n        }\n        defaultValue() {\n          return this.coder.defaultValue();\n        }\n        encode(writer, value) {\n          return this.coder.encode(writer, value);\n        }\n        decode(reader) {\n          return this.coder.decode(reader);\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/array.js\n  function pack(writer, coders, values) {\n    let arrayValues = null;\n    if (Array.isArray(values)) {\n      arrayValues = values;\n    } else if (values && typeof values === \"object\") {\n      let unique = {};\n      arrayValues = coders.map((coder) => {\n        const name = coder.localName;\n        if (!name) {\n          logger9.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"values\",\n            coder,\n            value: values\n          });\n        }\n        if (unique[name]) {\n          logger9.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"values\",\n            coder,\n            value: values\n          });\n        }\n        unique[name] = true;\n        return values[name];\n      });\n    } else {\n      logger9.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n    if (coders.length !== arrayValues.length) {\n      logger9.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n    let staticWriter = new Writer(writer.wordSize);\n    let dynamicWriter = new Writer(writer.wordSize);\n    let updateFuncs = [];\n    coders.forEach((coder, index) => {\n      let value = arrayValues[index];\n      if (coder.dynamic) {\n        let dynamicOffset = dynamicWriter.length;\n        coder.encode(dynamicWriter, value);\n        let updateFunc = staticWriter.writeUpdatableValue();\n        updateFuncs.push((baseOffset) => {\n          updateFunc(baseOffset + dynamicOffset);\n        });\n      } else {\n        coder.encode(staticWriter, value);\n      }\n    });\n    updateFuncs.forEach((func) => {\n      func(staticWriter.length);\n    });\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n  }\n  function unpack(reader, coders) {\n    let values = [];\n    let baseReader = reader.subReader(0);\n    coders.forEach((coder) => {\n      let value = null;\n      if (coder.dynamic) {\n        let offset = reader.readValue();\n        let offsetReader = baseReader.subReader(offset.toNumber());\n        try {\n          value = coder.decode(offsetReader);\n        } catch (error) {\n          if (error.code === Logger.errors.BUFFER_OVERRUN) {\n            throw error;\n          }\n          value = error;\n          value.baseType = coder.name;\n          value.name = coder.localName;\n          value.type = coder.type;\n        }\n      } else {\n        try {\n          value = coder.decode(reader);\n        } catch (error) {\n          if (error.code === Logger.errors.BUFFER_OVERRUN) {\n            throw error;\n          }\n          value = error;\n          value.baseType = coder.name;\n          value.name = coder.localName;\n          value.type = coder.type;\n        }\n      }\n      if (value != void 0) {\n        values.push(value);\n      }\n    });\n    const uniqueNames = coders.reduce((accum, coder) => {\n      const name = coder.localName;\n      if (name) {\n        if (!accum[name]) {\n          accum[name] = 0;\n        }\n        accum[name]++;\n      }\n      return accum;\n    }, {});\n    coders.forEach((coder, index) => {\n      let name = coder.localName;\n      if (!name || uniqueNames[name] !== 1) {\n        return;\n      }\n      if (name === \"length\") {\n        name = \"_length\";\n      }\n      if (values[name] != null) {\n        return;\n      }\n      const value = values[index];\n      if (value instanceof Error) {\n        Object.defineProperty(values, name, {\n          enumerable: true,\n          get: () => {\n            throw value;\n          }\n        });\n      } else {\n        values[name] = value;\n      }\n    });\n    for (let i = 0; i < values.length; i++) {\n      const value = values[i];\n      if (value instanceof Error) {\n        Object.defineProperty(values, i, {\n          enumerable: true,\n          get: () => {\n            throw value;\n          }\n        });\n      }\n    }\n    return Object.freeze(values);\n  }\n  var logger9, ArrayCoder;\n  var init_array = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/array.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib();\n      init_version5();\n      init_abstract_coder();\n      init_anonymous();\n      logger9 = new Logger(version6);\n      ArrayCoder = class extends Coder {\n        constructor(coder, length, localName) {\n          const type = coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\";\n          const dynamic = length === -1 || coder.dynamic;\n          super(\"array\", type, localName, dynamic);\n          this.coder = coder;\n          this.length = length;\n        }\n        defaultValue() {\n          const defaultChild = this.coder.defaultValue();\n          const result = [];\n          for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n          }\n          return result;\n        }\n        encode(writer, value) {\n          if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n          }\n          let count = this.length;\n          if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n          }\n          logger9.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? \" \" + this.localName : \"\"));\n          let coders = [];\n          for (let i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n          }\n          return pack(writer, coders, value);\n        }\n        decode(reader) {\n          let count = this.length;\n          if (count === -1) {\n            count = reader.readValue().toNumber();\n            if (count * 32 > reader._data.length) {\n              logger9.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n                length: reader._data.length,\n                count\n              });\n            }\n          }\n          let coders = [];\n          for (let i = 0; i < count; i++) {\n            coders.push(new AnonymousCoder(this.coder));\n          }\n          return reader.coerce(this.name, unpack(reader, coders));\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/boolean.js\n  var BooleanCoder;\n  var init_boolean = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/boolean.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_abstract_coder();\n      BooleanCoder = class extends Coder {\n        constructor(localName) {\n          super(\"bool\", \"bool\", localName, false);\n        }\n        defaultValue() {\n          return false;\n        }\n        encode(writer, value) {\n          return writer.writeValue(value ? 1 : 0);\n        }\n        decode(reader) {\n          return reader.coerce(this.type, !reader.readValue().isZero());\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/bytes.js\n  var DynamicBytesCoder, BytesCoder;\n  var init_bytes = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/bytes.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib2();\n      init_abstract_coder();\n      DynamicBytesCoder = class extends Coder {\n        constructor(type, localName) {\n          super(type, type, localName, true);\n        }\n        defaultValue() {\n          return \"0x\";\n        }\n        encode(writer, value) {\n          value = arrayify(value);\n          let length = writer.writeValue(value.length);\n          length += writer.writeBytes(value);\n          return length;\n        }\n        decode(reader) {\n          return reader.readBytes(reader.readValue().toNumber(), true);\n        }\n      };\n      BytesCoder = class extends DynamicBytesCoder {\n        constructor(localName) {\n          super(\"bytes\", localName);\n        }\n        decode(reader) {\n          return reader.coerce(this.name, hexlify(super.decode(reader)));\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js\n  var FixedBytesCoder;\n  var init_fixed_bytes = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib2();\n      init_abstract_coder();\n      FixedBytesCoder = class extends Coder {\n        constructor(size, localName) {\n          let name = \"bytes\" + String(size);\n          super(name, name, localName, false);\n          this.size = size;\n        }\n        defaultValue() {\n          return \"0x0000000000000000000000000000000000000000000000000000000000000000\".substring(0, 2 + this.size * 2);\n        }\n        encode(writer, value) {\n          let data = arrayify(value);\n          if (data.length !== this.size) {\n            this._throwError(\"incorrect data length\", value);\n          }\n          return writer.writeBytes(data);\n        }\n        decode(reader) {\n          return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/null.js\n  var NullCoder;\n  var init_null = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/null.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_abstract_coder();\n      NullCoder = class extends Coder {\n        constructor(localName) {\n          super(\"null\", \"\", localName, false);\n        }\n        defaultValue() {\n          return null;\n        }\n        encode(writer, value) {\n          if (value != null) {\n            this._throwError(\"not null\", value);\n          }\n          return writer.writeBytes([]);\n        }\n        decode(reader) {\n          reader.readBytes(0);\n          return reader.coerce(this.name, null);\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+constants@5.8.0/node_modules/@ethersproject/constants/lib.esm/addresses.js\n  var AddressZero;\n  var init_addresses = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+constants@5.8.0/node_modules/@ethersproject/constants/lib.esm/addresses.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      AddressZero = \"0x0000000000000000000000000000000000000000\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+constants@5.8.0/node_modules/@ethersproject/constants/lib.esm/bignumbers.js\n  var NegativeOne2, Zero2, One, Two, WeiPerEther, MaxUint256, MinInt256, MaxInt256;\n  var init_bignumbers = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+constants@5.8.0/node_modules/@ethersproject/constants/lib.esm/bignumbers.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib3();\n      NegativeOne2 = /* @__PURE__ */ BigNumber.from(-1);\n      Zero2 = /* @__PURE__ */ BigNumber.from(0);\n      One = /* @__PURE__ */ BigNumber.from(1);\n      Two = /* @__PURE__ */ BigNumber.from(2);\n      WeiPerEther = /* @__PURE__ */ BigNumber.from(\"1000000000000000000\");\n      MaxUint256 = /* @__PURE__ */ BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n      MinInt256 = /* @__PURE__ */ BigNumber.from(\"-0x8000000000000000000000000000000000000000000000000000000000000000\");\n      MaxInt256 = /* @__PURE__ */ BigNumber.from(\"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+constants@5.8.0/node_modules/@ethersproject/constants/lib.esm/hashes.js\n  var HashZero;\n  var init_hashes = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+constants@5.8.0/node_modules/@ethersproject/constants/lib.esm/hashes.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      HashZero = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+constants@5.8.0/node_modules/@ethersproject/constants/lib.esm/strings.js\n  var EtherSymbol;\n  var init_strings = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+constants@5.8.0/node_modules/@ethersproject/constants/lib.esm/strings.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      EtherSymbol = \"\\u039E\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+constants@5.8.0/node_modules/@ethersproject/constants/lib.esm/index.js\n  var lib_exports2 = {};\n  __export(lib_exports2, {\n    AddressZero: () => AddressZero,\n    EtherSymbol: () => EtherSymbol,\n    HashZero: () => HashZero,\n    MaxInt256: () => MaxInt256,\n    MaxUint256: () => MaxUint256,\n    MinInt256: () => MinInt256,\n    NegativeOne: () => NegativeOne2,\n    One: () => One,\n    Two: () => Two,\n    WeiPerEther: () => WeiPerEther,\n    Zero: () => Zero2\n  });\n  var init_lib8 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+constants@5.8.0/node_modules/@ethersproject/constants/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_addresses();\n      init_bignumbers();\n      init_hashes();\n      init_strings();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/number.js\n  var NumberCoder;\n  var init_number = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/number.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib3();\n      init_lib8();\n      init_abstract_coder();\n      NumberCoder = class extends Coder {\n        constructor(size, signed3, localName) {\n          const name = (signed3 ? \"int\" : \"uint\") + size * 8;\n          super(name, name, localName, false);\n          this.size = size;\n          this.signed = signed3;\n        }\n        defaultValue() {\n          return 0;\n        }\n        encode(writer, value) {\n          let v = BigNumber.from(value);\n          let maxUintValue = MaxUint256.mask(writer.wordSize * 8);\n          if (this.signed) {\n            let bounds = maxUintValue.mask(this.size * 8 - 1);\n            if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne2))) {\n              this._throwError(\"value out-of-bounds\", value);\n            }\n          } else if (v.lt(Zero2) || v.gt(maxUintValue.mask(this.size * 8))) {\n            this._throwError(\"value out-of-bounds\", value);\n          }\n          v = v.toTwos(this.size * 8).mask(this.size * 8);\n          if (this.signed) {\n            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n          }\n          return writer.writeValue(v);\n        }\n        decode(reader) {\n          let value = reader.readValue().mask(this.size * 8);\n          if (this.signed) {\n            value = value.fromTwos(this.size * 8);\n          }\n          return reader.coerce(this.name, value);\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+strings@5.8.0/node_modules/@ethersproject/strings/lib.esm/_version.js\n  var version9;\n  var init_version8 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+strings@5.8.0/node_modules/@ethersproject/strings/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version9 = \"strings/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+strings@5.8.0/node_modules/@ethersproject/strings/lib.esm/utf8.js\n  function errorFunc(reason, offset, bytes3, output2, badCodepoint) {\n    return logger10.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes3);\n  }\n  function ignoreFunc(reason, offset, bytes3, output2, badCodepoint) {\n    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\n      let i = 0;\n      for (let o = offset + 1; o < bytes3.length; o++) {\n        if (bytes3[o] >> 6 !== 2) {\n          break;\n        }\n        i++;\n      }\n      return i;\n    }\n    if (reason === Utf8ErrorReason.OVERRUN) {\n      return bytes3.length - offset - 1;\n    }\n    return 0;\n  }\n  function replaceFunc(reason, offset, bytes3, output2, badCodepoint) {\n    if (reason === Utf8ErrorReason.OVERLONG) {\n      output2.push(badCodepoint);\n      return 0;\n    }\n    output2.push(65533);\n    return ignoreFunc(reason, offset, bytes3, output2, badCodepoint);\n  }\n  function getUtf8CodePoints(bytes3, onError) {\n    if (onError == null) {\n      onError = Utf8ErrorFuncs.error;\n    }\n    bytes3 = arrayify(bytes3);\n    const result = [];\n    let i = 0;\n    while (i < bytes3.length) {\n      const c = bytes3[i++];\n      if (c >> 7 === 0) {\n        result.push(c);\n        continue;\n      }\n      let extraLength = null;\n      let overlongMask = null;\n      if ((c & 224) === 192) {\n        extraLength = 1;\n        overlongMask = 127;\n      } else if ((c & 240) === 224) {\n        extraLength = 2;\n        overlongMask = 2047;\n      } else if ((c & 248) === 240) {\n        extraLength = 3;\n        overlongMask = 65535;\n      } else {\n        if ((c & 192) === 128) {\n          i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes3, result);\n        } else {\n          i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes3, result);\n        }\n        continue;\n      }\n      if (i - 1 + extraLength >= bytes3.length) {\n        i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes3, result);\n        continue;\n      }\n      let res = c & (1 << 8 - extraLength - 1) - 1;\n      for (let j = 0; j < extraLength; j++) {\n        let nextChar = bytes3[i];\n        if ((nextChar & 192) != 128) {\n          i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes3, result);\n          res = null;\n          break;\n        }\n        ;\n        res = res << 6 | nextChar & 63;\n        i++;\n      }\n      if (res === null) {\n        continue;\n      }\n      if (res > 1114111) {\n        i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes3, result, res);\n        continue;\n      }\n      if (res >= 55296 && res <= 57343) {\n        i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes3, result, res);\n        continue;\n      }\n      if (res <= overlongMask) {\n        i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes3, result, res);\n        continue;\n      }\n      result.push(res);\n    }\n    return result;\n  }\n  function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {\n    if (form != UnicodeNormalizationForm.current) {\n      logger10.checkNormalize();\n      str = str.normalize(form);\n    }\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n      const c = str.charCodeAt(i);\n      if (c < 128) {\n        result.push(c);\n      } else if (c < 2048) {\n        result.push(c >> 6 | 192);\n        result.push(c & 63 | 128);\n      } else if ((c & 64512) == 55296) {\n        i++;\n        const c2 = str.charCodeAt(i);\n        if (i >= str.length || (c2 & 64512) !== 56320) {\n          throw new Error(\"invalid utf-8 string\");\n        }\n        const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);\n        result.push(pair >> 18 | 240);\n        result.push(pair >> 12 & 63 | 128);\n        result.push(pair >> 6 & 63 | 128);\n        result.push(pair & 63 | 128);\n      } else {\n        result.push(c >> 12 | 224);\n        result.push(c >> 6 & 63 | 128);\n        result.push(c & 63 | 128);\n      }\n    }\n    return arrayify(result);\n  }\n  function escapeChar(value) {\n    const hex = \"0000\" + value.toString(16);\n    return \"\\\\u\" + hex.substring(hex.length - 4);\n  }\n  function _toEscapedUtf8String(bytes3, onError) {\n    return '\"' + getUtf8CodePoints(bytes3, onError).map((codePoint) => {\n      if (codePoint < 256) {\n        switch (codePoint) {\n          case 8:\n            return \"\\\\b\";\n          case 9:\n            return \"\\\\t\";\n          case 10:\n            return \"\\\\n\";\n          case 13:\n            return \"\\\\r\";\n          case 34:\n            return '\\\\\"';\n          case 92:\n            return \"\\\\\\\\\";\n        }\n        if (codePoint >= 32 && codePoint < 127) {\n          return String.fromCharCode(codePoint);\n        }\n      }\n      if (codePoint <= 65535) {\n        return escapeChar(codePoint);\n      }\n      codePoint -= 65536;\n      return escapeChar((codePoint >> 10 & 1023) + 55296) + escapeChar((codePoint & 1023) + 56320);\n    }).join(\"\") + '\"';\n  }\n  function _toUtf8String(codePoints) {\n    return codePoints.map((codePoint) => {\n      if (codePoint <= 65535) {\n        return String.fromCharCode(codePoint);\n      }\n      codePoint -= 65536;\n      return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);\n    }).join(\"\");\n  }\n  function toUtf8String(bytes3, onError) {\n    return _toUtf8String(getUtf8CodePoints(bytes3, onError));\n  }\n  function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\n  }\n  var logger10, UnicodeNormalizationForm, Utf8ErrorReason, Utf8ErrorFuncs;\n  var init_utf8 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+strings@5.8.0/node_modules/@ethersproject/strings/lib.esm/utf8.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib2();\n      init_lib();\n      init_version8();\n      logger10 = new Logger(version9);\n      (function(UnicodeNormalizationForm2) {\n        UnicodeNormalizationForm2[\"current\"] = \"\";\n        UnicodeNormalizationForm2[\"NFC\"] = \"NFC\";\n        UnicodeNormalizationForm2[\"NFD\"] = \"NFD\";\n        UnicodeNormalizationForm2[\"NFKC\"] = \"NFKC\";\n        UnicodeNormalizationForm2[\"NFKD\"] = \"NFKD\";\n      })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));\n      (function(Utf8ErrorReason2) {\n        Utf8ErrorReason2[\"UNEXPECTED_CONTINUE\"] = \"unexpected continuation byte\";\n        Utf8ErrorReason2[\"BAD_PREFIX\"] = \"bad codepoint prefix\";\n        Utf8ErrorReason2[\"OVERRUN\"] = \"string overrun\";\n        Utf8ErrorReason2[\"MISSING_CONTINUE\"] = \"missing continuation byte\";\n        Utf8ErrorReason2[\"OUT_OF_RANGE\"] = \"out of UTF-8 range\";\n        Utf8ErrorReason2[\"UTF16_SURROGATE\"] = \"UTF-16 surrogate\";\n        Utf8ErrorReason2[\"OVERLONG\"] = \"overlong representation\";\n      })(Utf8ErrorReason || (Utf8ErrorReason = {}));\n      Utf8ErrorFuncs = Object.freeze({\n        error: errorFunc,\n        ignore: ignoreFunc,\n        replace: replaceFunc\n      });\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+strings@5.8.0/node_modules/@ethersproject/strings/lib.esm/bytes32.js\n  function formatBytes32String(text) {\n    const bytes3 = toUtf8Bytes(text);\n    if (bytes3.length > 31) {\n      throw new Error(\"bytes32 string must be less than 32 bytes\");\n    }\n    return hexlify(concat([bytes3, HashZero]).slice(0, 32));\n  }\n  function parseBytes32String(bytes3) {\n    const data = arrayify(bytes3);\n    if (data.length !== 32) {\n      throw new Error(\"invalid bytes32 - not 32 bytes long\");\n    }\n    if (data[31] !== 0) {\n      throw new Error(\"invalid bytes32 string - no null terminator\");\n    }\n    let length = 31;\n    while (data[length - 1] === 0) {\n      length--;\n    }\n    return toUtf8String(data.slice(0, length));\n  }\n  var init_bytes32 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+strings@5.8.0/node_modules/@ethersproject/strings/lib.esm/bytes32.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib8();\n      init_lib2();\n      init_utf8();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+strings@5.8.0/node_modules/@ethersproject/strings/lib.esm/idna.js\n  function bytes2(data) {\n    if (data.length % 4 !== 0) {\n      throw new Error(\"bad data\");\n    }\n    let result = [];\n    for (let i = 0; i < data.length; i += 4) {\n      result.push(parseInt(data.substring(i, i + 4), 16));\n    }\n    return result;\n  }\n  function createTable(data, func) {\n    if (!func) {\n      func = function(value) {\n        return [parseInt(value, 16)];\n      };\n    }\n    let lo = 0;\n    let result = {};\n    data.split(\",\").forEach((pair) => {\n      let comps = pair.split(\":\");\n      lo += parseInt(comps[0], 16);\n      result[lo] = func(comps[1]);\n    });\n    return result;\n  }\n  function createRangeTable(data) {\n    let hi = 0;\n    return data.split(\",\").map((v) => {\n      let comps = v.split(\"-\");\n      if (comps.length === 1) {\n        comps[1] = \"0\";\n      } else if (comps[1] === \"\") {\n        comps[1] = \"1\";\n      }\n      let lo = hi + parseInt(comps[0], 16);\n      hi = parseInt(comps[1], 16);\n      return { l: lo, h: hi };\n    });\n  }\n  function matchMap(value, ranges) {\n    let lo = 0;\n    for (let i = 0; i < ranges.length; i++) {\n      let range = ranges[i];\n      lo += range.l;\n      if (value >= lo && value <= lo + range.h && (value - lo) % (range.d || 1) === 0) {\n        if (range.e && range.e.indexOf(value - lo) !== -1) {\n          continue;\n        }\n        return range;\n      }\n    }\n    return null;\n  }\n  function flatten(values) {\n    return values.reduce((accum, value) => {\n      value.forEach((value2) => {\n        accum.push(value2);\n      });\n      return accum;\n    }, []);\n  }\n  function _nameprepTableA1(codepoint) {\n    return !!matchMap(codepoint, Table_A_1_ranges);\n  }\n  function _nameprepTableB2(codepoint) {\n    let range = matchMap(codepoint, Table_B_2_ranges);\n    if (range) {\n      return [codepoint + range.s];\n    }\n    let codes = Table_B_2_lut_abs[codepoint];\n    if (codes) {\n      return codes;\n    }\n    let shift = Table_B_2_lut_rel[codepoint];\n    if (shift) {\n      return [codepoint + shift[0]];\n    }\n    let complex = Table_B_2_complex[codepoint];\n    if (complex) {\n      return complex;\n    }\n    return null;\n  }\n  function _nameprepTableC(codepoint) {\n    return !!matchMap(codepoint, Table_C_ranges);\n  }\n  function nameprep(value) {\n    if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {\n      return value.toLowerCase();\n    }\n    let codes = toUtf8CodePoints(value);\n    codes = flatten(codes.map((code) => {\n      if (Table_B_1_flags.indexOf(code) >= 0) {\n        return [];\n      }\n      if (code >= 65024 && code <= 65039) {\n        return [];\n      }\n      let codesTableB2 = _nameprepTableB2(code);\n      if (codesTableB2) {\n        return codesTableB2;\n      }\n      return [code];\n    }));\n    codes = toUtf8CodePoints(_toUtf8String(codes), UnicodeNormalizationForm.NFKC);\n    codes.forEach((code) => {\n      if (_nameprepTableC(code)) {\n        throw new Error(\"STRINGPREP_CONTAINS_PROHIBITED\");\n      }\n    });\n    codes.forEach((code) => {\n      if (_nameprepTableA1(code)) {\n        throw new Error(\"STRINGPREP_CONTAINS_UNASSIGNED\");\n      }\n    });\n    let name = _toUtf8String(codes);\n    if (name.substring(0, 1) === \"-\" || name.substring(2, 4) === \"--\" || name.substring(name.length - 1) === \"-\") {\n      throw new Error(\"invalid hyphen\");\n    }\n    return name;\n  }\n  var Table_A_1_ranges, Table_B_1_flags, Table_B_2_ranges, Table_B_2_lut_abs, Table_B_2_lut_rel, Table_B_2_complex, Table_C_ranges;\n  var init_idna = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+strings@5.8.0/node_modules/@ethersproject/strings/lib.esm/idna.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_utf8();\n      Table_A_1_ranges = createRangeTable(\"221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d\");\n      Table_B_1_flags = \"ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff\".split(\",\").map((v) => parseInt(v, 16));\n      Table_B_2_ranges = [\n        { h: 25, s: 32, l: 65 },\n        { h: 30, s: 32, e: [23], l: 127 },\n        { h: 54, s: 1, e: [48], l: 64, d: 2 },\n        { h: 14, s: 1, l: 57, d: 2 },\n        { h: 44, s: 1, l: 17, d: 2 },\n        { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },\n        { h: 16, s: 1, l: 68, d: 2 },\n        { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },\n        { h: 26, s: 32, e: [17], l: 435 },\n        { h: 22, s: 1, l: 71, d: 2 },\n        { h: 15, s: 80, l: 40 },\n        { h: 31, s: 32, l: 16 },\n        { h: 32, s: 1, l: 80, d: 2 },\n        { h: 52, s: 1, l: 42, d: 2 },\n        { h: 12, s: 1, l: 55, d: 2 },\n        { h: 40, s: 1, e: [38], l: 15, d: 2 },\n        { h: 14, s: 1, l: 48, d: 2 },\n        { h: 37, s: 48, l: 49 },\n        { h: 148, s: 1, l: 6351, d: 2 },\n        { h: 88, s: 1, l: 160, d: 2 },\n        { h: 15, s: 16, l: 704 },\n        { h: 25, s: 26, l: 854 },\n        { h: 25, s: 32, l: 55915 },\n        { h: 37, s: 40, l: 1247 },\n        { h: 25, s: -119711, l: 53248 },\n        { h: 25, s: -119763, l: 52 },\n        { h: 25, s: -119815, l: 52 },\n        { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },\n        { h: 25, s: -119919, l: 52 },\n        { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },\n        { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },\n        { h: 25, s: -120075, l: 52 },\n        { h: 25, s: -120127, l: 52 },\n        { h: 25, s: -120179, l: 52 },\n        { h: 25, s: -120231, l: 52 },\n        { h: 25, s: -120283, l: 52 },\n        { h: 25, s: -120335, l: 52 },\n        { h: 24, s: -119543, e: [17], l: 56 },\n        { h: 24, s: -119601, e: [17], l: 58 },\n        { h: 24, s: -119659, e: [17], l: 58 },\n        { h: 24, s: -119717, e: [17], l: 58 },\n        { h: 24, s: -119775, e: [17], l: 58 }\n      ];\n      Table_B_2_lut_abs = createTable(\"b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3\");\n      Table_B_2_lut_rel = createTable(\"179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7\");\n      Table_B_2_complex = createTable(\"df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D\", bytes2);\n      Table_C_ranges = createRangeTable(\"80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001\");\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+strings@5.8.0/node_modules/@ethersproject/strings/lib.esm/index.js\n  var init_lib9 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+strings@5.8.0/node_modules/@ethersproject/strings/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_bytes32();\n      init_idna();\n      init_utf8();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/string.js\n  var StringCoder;\n  var init_string = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/string.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib9();\n      init_bytes();\n      StringCoder = class extends DynamicBytesCoder {\n        constructor(localName) {\n          super(\"string\", localName);\n        }\n        defaultValue() {\n          return \"\";\n        }\n        encode(writer, value) {\n          return super.encode(writer, toUtf8Bytes(value));\n        }\n        decode(reader) {\n          return toUtf8String(super.decode(reader));\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/tuple.js\n  var TupleCoder;\n  var init_tuple = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/coders/tuple.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_abstract_coder();\n      init_array();\n      TupleCoder = class extends Coder {\n        constructor(coders, localName) {\n          let dynamic = false;\n          const types = [];\n          coders.forEach((coder) => {\n            if (coder.dynamic) {\n              dynamic = true;\n            }\n            types.push(coder.type);\n          });\n          const type = \"tuple(\" + types.join(\",\") + \")\";\n          super(\"tuple\", type, localName, dynamic);\n          this.coders = coders;\n        }\n        defaultValue() {\n          const values = [];\n          this.coders.forEach((coder) => {\n            values.push(coder.defaultValue());\n          });\n          const uniqueNames = this.coders.reduce((accum, coder) => {\n            const name = coder.localName;\n            if (name) {\n              if (!accum[name]) {\n                accum[name] = 0;\n              }\n              accum[name]++;\n            }\n            return accum;\n          }, {});\n          this.coders.forEach((coder, index) => {\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) {\n              return;\n            }\n            if (name === \"length\") {\n              name = \"_length\";\n            }\n            if (values[name] != null) {\n              return;\n            }\n            values[name] = values[index];\n          });\n          return Object.freeze(values);\n        }\n        encode(writer, value) {\n          return pack(writer, this.coders, value);\n        }\n        decode(reader) {\n          return reader.coerce(this.name, unpack(reader, this.coders));\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/abi-coder.js\n  var logger11, paramTypeBytes, paramTypeNumber, AbiCoder, defaultAbiCoder;\n  var init_abi_coder = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/abi-coder.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib2();\n      init_lib4();\n      init_lib();\n      init_version5();\n      init_abstract_coder();\n      init_address();\n      init_array();\n      init_boolean();\n      init_bytes();\n      init_fixed_bytes();\n      init_null();\n      init_number();\n      init_string();\n      init_tuple();\n      init_fragments();\n      logger11 = new Logger(version6);\n      paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\n      paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\n      AbiCoder = class {\n        constructor(coerceFunc) {\n          defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n        }\n        _getCoder(param) {\n          switch (param.baseType) {\n            case \"address\":\n              return new AddressCoder(param.name);\n            case \"bool\":\n              return new BooleanCoder(param.name);\n            case \"string\":\n              return new StringCoder(param.name);\n            case \"bytes\":\n              return new BytesCoder(param.name);\n            case \"array\":\n              return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n              return new TupleCoder((param.components || []).map((component) => {\n                return this._getCoder(component);\n              }), param.name);\n            case \"\":\n              return new NullCoder(param.name);\n          }\n          let match = param.type.match(paramTypeNumber);\n          if (match) {\n            let size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || size % 8 !== 0) {\n              logger11.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new NumberCoder(size / 8, match[1] === \"int\", param.name);\n          }\n          match = param.type.match(paramTypeBytes);\n          if (match) {\n            let size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n              logger11.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new FixedBytesCoder(size, param.name);\n          }\n          return logger11.throwArgumentError(\"invalid type\", \"type\", param.type);\n        }\n        _getWordSize() {\n          return 32;\n        }\n        _getReader(data, allowLoose) {\n          return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n        }\n        _getWriter() {\n          return new Writer(this._getWordSize());\n        }\n        getDefaultValue(types) {\n          const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n          const coder = new TupleCoder(coders, \"_\");\n          return coder.defaultValue();\n        }\n        encode(types, values) {\n          if (types.length !== values.length) {\n            logger11.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n              count: { types: types.length, values: values.length },\n              value: { types, values }\n            });\n          }\n          const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n          const coder = new TupleCoder(coders, \"_\");\n          const writer = this._getWriter();\n          coder.encode(writer, values);\n          return writer.data;\n        }\n        decode(types, data, loose) {\n          const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n          const coder = new TupleCoder(coders, \"_\");\n          return coder.decode(this._getReader(arrayify(data), loose));\n        }\n      };\n      defaultAbiCoder = new AbiCoder();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+hash@5.8.0/node_modules/@ethersproject/hash/lib.esm/id.js\n  function id(text) {\n    return keccak256(toUtf8Bytes(text));\n  }\n  var init_id = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+hash@5.8.0/node_modules/@ethersproject/hash/lib.esm/id.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib5();\n      init_lib9();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+hash@5.8.0/node_modules/@ethersproject/hash/lib.esm/_version.js\n  var version10;\n  var init_version9 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+hash@5.8.0/node_modules/@ethersproject/hash/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version10 = \"hash/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+base64@5.8.0/node_modules/@ethersproject/base64/lib.esm/base64.js\n  function decode2(textData) {\n    textData = atob(textData);\n    const data = [];\n    for (let i = 0; i < textData.length; i++) {\n      data.push(textData.charCodeAt(i));\n    }\n    return arrayify(data);\n  }\n  function encode2(data) {\n    data = arrayify(data);\n    let textData = \"\";\n    for (let i = 0; i < data.length; i++) {\n      textData += String.fromCharCode(data[i]);\n    }\n    return btoa(textData);\n  }\n  var init_base64 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+base64@5.8.0/node_modules/@ethersproject/base64/lib.esm/base64.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib2();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+base64@5.8.0/node_modules/@ethersproject/base64/lib.esm/index.js\n  var lib_exports3 = {};\n  __export(lib_exports3, {\n    decode: () => decode2,\n    encode: () => encode2\n  });\n  var init_lib10 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+base64@5.8.0/node_modules/@ethersproject/base64/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_base64();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+hash@5.8.0/node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js\n  function flat(array, depth) {\n    if (depth == null) {\n      depth = 1;\n    }\n    const result = [];\n    const forEach = result.forEach;\n    const flatDeep = function(arr, depth2) {\n      forEach.call(arr, function(val) {\n        if (depth2 > 0 && Array.isArray(val)) {\n          flatDeep(val, depth2 - 1);\n        } else {\n          result.push(val);\n        }\n      });\n    };\n    flatDeep(array, depth);\n    return result;\n  }\n  function fromEntries(array) {\n    const result = {};\n    for (let i = 0; i < array.length; i++) {\n      const value = array[i];\n      result[value[0]] = value[1];\n    }\n    return result;\n  }\n  function decode_arithmetic(bytes3) {\n    let pos = 0;\n    function u16() {\n      return bytes3[pos++] << 8 | bytes3[pos++];\n    }\n    let symbol_count = u16();\n    let total = 1;\n    let acc = [0, 1];\n    for (let i = 1; i < symbol_count; i++) {\n      acc.push(total += u16());\n    }\n    let skip = u16();\n    let pos_payload = pos;\n    pos += skip;\n    let read_width = 0;\n    let read_buffer = 0;\n    function read_bit() {\n      if (read_width == 0) {\n        read_buffer = read_buffer << 8 | bytes3[pos++];\n        read_width = 8;\n      }\n      return read_buffer >> --read_width & 1;\n    }\n    const N2 = 31;\n    const FULL = Math.pow(2, N2);\n    const HALF = FULL >>> 1;\n    const QRTR = HALF >> 1;\n    const MASK = FULL - 1;\n    let register = 0;\n    for (let i = 0; i < N2; i++)\n      register = register << 1 | read_bit();\n    let symbols = [];\n    let low = 0;\n    let range = FULL;\n    while (true) {\n      let value = Math.floor(((register - low + 1) * total - 1) / range);\n      let start = 0;\n      let end = symbol_count;\n      while (end - start > 1) {\n        let mid = start + end >>> 1;\n        if (value < acc[mid]) {\n          end = mid;\n        } else {\n          start = mid;\n        }\n      }\n      if (start == 0)\n        break;\n      symbols.push(start);\n      let a = low + Math.floor(range * acc[start] / total);\n      let b2 = low + Math.floor(range * acc[start + 1] / total) - 1;\n      while (((a ^ b2) & HALF) == 0) {\n        register = register << 1 & MASK | read_bit();\n        a = a << 1 & MASK;\n        b2 = b2 << 1 & MASK | 1;\n      }\n      while (a & ~b2 & QRTR) {\n        register = register & HALF | register << 1 & MASK >>> 1 | read_bit();\n        a = a << 1 ^ HALF;\n        b2 = (b2 ^ HALF) << 1 | HALF | 1;\n      }\n      low = a;\n      range = 1 + b2 - a;\n    }\n    let offset = symbol_count - 4;\n    return symbols.map((x) => {\n      switch (x - offset) {\n        case 3:\n          return offset + 65792 + (bytes3[pos_payload++] << 16 | bytes3[pos_payload++] << 8 | bytes3[pos_payload++]);\n        case 2:\n          return offset + 256 + (bytes3[pos_payload++] << 8 | bytes3[pos_payload++]);\n        case 1:\n          return offset + bytes3[pos_payload++];\n        default:\n          return x - 1;\n      }\n    });\n  }\n  function read_payload(v) {\n    let pos = 0;\n    return () => v[pos++];\n  }\n  function read_compressed_payload(bytes3) {\n    return read_payload(decode_arithmetic(bytes3));\n  }\n  function signed(i) {\n    return i & 1 ? ~i >> 1 : i >> 1;\n  }\n  function read_counts(n2, next) {\n    let v = Array(n2);\n    for (let i = 0; i < n2; i++)\n      v[i] = 1 + next();\n    return v;\n  }\n  function read_ascending(n2, next) {\n    let v = Array(n2);\n    for (let i = 0, x = -1; i < n2; i++)\n      v[i] = x += 1 + next();\n    return v;\n  }\n  function read_deltas(n2, next) {\n    let v = Array(n2);\n    for (let i = 0, x = 0; i < n2; i++)\n      v[i] = x += signed(next());\n    return v;\n  }\n  function read_member_array(next, lookup) {\n    let v = read_ascending(next(), next);\n    let n2 = next();\n    let vX = read_ascending(n2, next);\n    let vN = read_counts(n2, next);\n    for (let i = 0; i < n2; i++) {\n      for (let j = 0; j < vN[i]; j++) {\n        v.push(vX[i] + j);\n      }\n    }\n    return lookup ? v.map((x) => lookup[x]) : v;\n  }\n  function read_mapped_map(next) {\n    let ret = [];\n    while (true) {\n      let w = next();\n      if (w == 0)\n        break;\n      ret.push(read_linear_table(w, next));\n    }\n    while (true) {\n      let w = next() - 1;\n      if (w < 0)\n        break;\n      ret.push(read_replacement_table(w, next));\n    }\n    return fromEntries(flat(ret));\n  }\n  function read_zero_terminated_array(next) {\n    let v = [];\n    while (true) {\n      let i = next();\n      if (i == 0)\n        break;\n      v.push(i);\n    }\n    return v;\n  }\n  function read_transposed(n2, w, next) {\n    let m = Array(n2).fill(void 0).map(() => []);\n    for (let i = 0; i < w; i++) {\n      read_deltas(n2, next).forEach((x, j) => m[j].push(x));\n    }\n    return m;\n  }\n  function read_linear_table(w, next) {\n    let dx = 1 + next();\n    let dy = next();\n    let vN = read_zero_terminated_array(next);\n    let m = read_transposed(vN.length, 1 + w, next);\n    return flat(m.map((v, i) => {\n      const x = v[0], ys = v.slice(1);\n      return Array(vN[i]).fill(void 0).map((_, j) => {\n        let j_dy = j * dy;\n        return [x + j * dx, ys.map((y) => y + j_dy)];\n      });\n    }));\n  }\n  function read_replacement_table(w, next) {\n    let n2 = 1 + next();\n    let m = read_transposed(n2, 1 + w, next);\n    return m.map((v) => [v[0], v.slice(1)]);\n  }\n  function read_emoji_trie(next) {\n    let sorted = read_member_array(next).sort((a, b2) => a - b2);\n    return read();\n    function read() {\n      let branches = [];\n      while (true) {\n        let keys = read_member_array(next, sorted);\n        if (keys.length == 0)\n          break;\n        branches.push({ set: new Set(keys), node: read() });\n      }\n      branches.sort((a, b2) => b2.set.size - a.set.size);\n      let temp = next();\n      let valid = temp % 3;\n      temp = temp / 3 | 0;\n      let fe0f = !!(temp & 1);\n      temp >>= 1;\n      let save = temp == 1;\n      let check = temp == 2;\n      return { branches, valid, fe0f, save, check };\n    }\n  }\n  var init_decoder = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+hash@5.8.0/node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+hash@5.8.0/node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js\n  function getData() {\n    return read_compressed_payload(decode2(\"\"));\n  }\n  var init_include = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+hash@5.8.0/node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib10();\n      init_decoder();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+hash@5.8.0/node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js\n  function explode_cp(name) {\n    return toUtf8CodePoints(name);\n  }\n  function filter_fe0f(cps) {\n    return cps.filter((cp) => cp != 65039);\n  }\n  function ens_normalize_post_check(name) {\n    for (let label of name.split(\".\")) {\n      let cps = explode_cp(label);\n      try {\n        for (let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {\n          if (cps[i] !== UNDERSCORE) {\n            throw new Error(`underscore only allowed at start`);\n          }\n        }\n        if (cps.length >= 4 && cps.every((cp) => cp < 128) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\n          throw new Error(`invalid label extension`);\n        }\n      } catch (err) {\n        throw new Error(`Invalid label \"${label}\": ${err.message}`);\n      }\n    }\n    return name;\n  }\n  function ens_normalize(name) {\n    return ens_normalize_post_check(normalize(name, filter_fe0f));\n  }\n  function normalize(name, emoji_filter) {\n    let input = explode_cp(name).reverse();\n    let output2 = [];\n    while (input.length) {\n      let emoji = consume_emoji_reversed(input);\n      if (emoji) {\n        output2.push(...emoji_filter(emoji));\n        continue;\n      }\n      let cp = input.pop();\n      if (VALID.has(cp)) {\n        output2.push(cp);\n        continue;\n      }\n      if (IGNORED.has(cp)) {\n        continue;\n      }\n      let cps = MAPPED[cp];\n      if (cps) {\n        output2.push(...cps);\n        continue;\n      }\n      throw new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);\n    }\n    return ens_normalize_post_check(nfc(String.fromCodePoint(...output2)));\n  }\n  function nfc(s) {\n    return s.normalize(\"NFC\");\n  }\n  function consume_emoji_reversed(cps, eaten) {\n    var _a;\n    let node = EMOJI_ROOT;\n    let emoji;\n    let saved;\n    let stack = [];\n    let pos = cps.length;\n    if (eaten)\n      eaten.length = 0;\n    while (pos) {\n      let cp = cps[--pos];\n      node = (_a = node.branches.find((x) => x.set.has(cp))) === null || _a === void 0 ? void 0 : _a.node;\n      if (!node)\n        break;\n      if (node.save) {\n        saved = cp;\n      } else if (node.check) {\n        if (cp === saved)\n          break;\n      }\n      stack.push(cp);\n      if (node.fe0f) {\n        stack.push(65039);\n        if (pos > 0 && cps[pos - 1] == 65039)\n          pos--;\n      }\n      if (node.valid) {\n        emoji = stack.slice();\n        if (node.valid == 2)\n          emoji.splice(1, 1);\n        if (eaten)\n          eaten.push(...cps.slice(pos).reverse());\n        cps.length = pos;\n      }\n    }\n    return emoji;\n  }\n  var r, VALID, IGNORED, MAPPED, EMOJI_ROOT, HYPHEN, UNDERSCORE;\n  var init_lib11 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+hash@5.8.0/node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib9();\n      init_include();\n      init_decoder();\n      r = getData();\n      VALID = new Set(read_member_array(r));\n      IGNORED = new Set(read_member_array(r));\n      MAPPED = read_mapped_map(r);\n      EMOJI_ROOT = read_emoji_trie(r);\n      HYPHEN = 45;\n      UNDERSCORE = 95;\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+hash@5.8.0/node_modules/@ethersproject/hash/lib.esm/namehash.js\n  function checkComponent(comp) {\n    if (comp.length === 0) {\n      throw new Error(\"invalid ENS name; empty component\");\n    }\n    return comp;\n  }\n  function ensNameSplit(name) {\n    const bytes3 = toUtf8Bytes(ens_normalize(name));\n    const comps = [];\n    if (name.length === 0) {\n      return comps;\n    }\n    let last = 0;\n    for (let i = 0; i < bytes3.length; i++) {\n      const d = bytes3[i];\n      if (d === 46) {\n        comps.push(checkComponent(bytes3.slice(last, i)));\n        last = i + 1;\n      }\n    }\n    if (last >= bytes3.length) {\n      throw new Error(\"invalid ENS name; empty component\");\n    }\n    comps.push(checkComponent(bytes3.slice(last)));\n    return comps;\n  }\n  function isValidName(name) {\n    try {\n      return ensNameSplit(name).length !== 0;\n    } catch (error) {\n    }\n    return false;\n  }\n  function namehash(name) {\n    if (typeof name !== \"string\") {\n      logger12.throwArgumentError(\"invalid ENS name; not a string\", \"name\", name);\n    }\n    let result = Zeros;\n    const comps = ensNameSplit(name);\n    while (comps.length) {\n      result = keccak256(concat([result, keccak256(comps.pop())]));\n    }\n    return hexlify(result);\n  }\n  function dnsEncode(name) {\n    return hexlify(concat(ensNameSplit(name).map((comp) => {\n      if (comp.length > 63) {\n        throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n      }\n      const bytes3 = new Uint8Array(comp.length + 1);\n      bytes3.set(comp, 1);\n      bytes3[0] = bytes3.length - 1;\n      return bytes3;\n    }))) + \"00\";\n  }\n  var logger12, Zeros;\n  var init_namehash = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+hash@5.8.0/node_modules/@ethersproject/hash/lib.esm/namehash.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib2();\n      init_lib9();\n      init_lib5();\n      init_lib();\n      init_version9();\n      init_lib11();\n      logger12 = new Logger(version10);\n      Zeros = new Uint8Array(32);\n      Zeros.fill(0);\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+hash@5.8.0/node_modules/@ethersproject/hash/lib.esm/message.js\n  function hashMessage(message) {\n    if (typeof message === \"string\") {\n      message = toUtf8Bytes(message);\n    }\n    return keccak256(concat([\n      toUtf8Bytes(messagePrefix),\n      toUtf8Bytes(String(message.length)),\n      message\n    ]));\n  }\n  var messagePrefix;\n  var init_message = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+hash@5.8.0/node_modules/@ethersproject/hash/lib.esm/message.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib2();\n      init_lib5();\n      init_lib9();\n      messagePrefix = \"\u0019Ethereum Signed Message:\\n\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+hash@5.8.0/node_modules/@ethersproject/hash/lib.esm/typed-data.js\n  function hexPadRight(value) {\n    const bytes3 = arrayify(value);\n    const padOffset = bytes3.length % 32;\n    if (padOffset) {\n      return hexConcat([bytes3, padding.slice(padOffset)]);\n    }\n    return hexlify(bytes3);\n  }\n  function checkString(key2) {\n    return function(value) {\n      if (typeof value !== \"string\") {\n        logger13.throwArgumentError(`invalid domain value for ${JSON.stringify(key2)}`, `domain.${key2}`, value);\n      }\n      return value;\n    };\n  }\n  function getBaseEncoder(type) {\n    {\n      const match = type.match(/^(u?)int(\\d*)$/);\n      if (match) {\n        const signed3 = match[1] === \"\";\n        const width = parseInt(match[2] || \"256\");\n        if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) {\n          logger13.throwArgumentError(\"invalid numeric width\", \"type\", type);\n        }\n        const boundsUpper = MaxUint2562.mask(signed3 ? width - 1 : width);\n        const boundsLower = signed3 ? boundsUpper.add(One2).mul(NegativeOne3) : Zero3;\n        return function(value) {\n          const v = BigNumber.from(value);\n          if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n            logger13.throwArgumentError(`value out-of-bounds for ${type}`, \"value\", value);\n          }\n          return hexZeroPad(v.toTwos(256).toHexString(), 32);\n        };\n      }\n    }\n    {\n      const match = type.match(/^bytes(\\d+)$/);\n      if (match) {\n        const width = parseInt(match[1]);\n        if (width === 0 || width > 32 || match[1] !== String(width)) {\n          logger13.throwArgumentError(\"invalid bytes width\", \"type\", type);\n        }\n        return function(value) {\n          const bytes3 = arrayify(value);\n          if (bytes3.length !== width) {\n            logger13.throwArgumentError(`invalid length for ${type}`, \"value\", value);\n          }\n          return hexPadRight(value);\n        };\n      }\n    }\n    switch (type) {\n      case \"address\":\n        return function(value) {\n          return hexZeroPad(getAddress(value), 32);\n        };\n      case \"bool\":\n        return function(value) {\n          return !value ? hexFalse : hexTrue;\n        };\n      case \"bytes\":\n        return function(value) {\n          return keccak256(value);\n        };\n      case \"string\":\n        return function(value) {\n          return id(value);\n        };\n    }\n    return null;\n  }\n  function encodeType(name, fields) {\n    return `${name}(${fields.map(({ name: name2, type }) => type + \" \" + name2).join(\",\")})`;\n  }\n  var __awaiter2, logger13, padding, NegativeOne3, Zero3, One2, MaxUint2562, hexTrue, hexFalse, domainFieldTypes, domainFieldNames, domainChecks, TypedDataEncoder;\n  var init_typed_data = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+hash@5.8.0/node_modules/@ethersproject/hash/lib.esm/typed-data.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib7();\n      init_lib3();\n      init_lib2();\n      init_lib5();\n      init_lib4();\n      init_lib();\n      init_version9();\n      init_id();\n      __awaiter2 = function(thisArg, _arguments, P, generator) {\n        function adopt(value) {\n          return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n          });\n        }\n        return new (P || (P = Promise))(function(resolve, reject) {\n          function fulfilled(value) {\n            try {\n              step(generator.next(value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function rejected(value) {\n            try {\n              step(generator[\"throw\"](value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n          }\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n      };\n      logger13 = new Logger(version10);\n      padding = new Uint8Array(32);\n      padding.fill(0);\n      NegativeOne3 = BigNumber.from(-1);\n      Zero3 = BigNumber.from(0);\n      One2 = BigNumber.from(1);\n      MaxUint2562 = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n      hexTrue = hexZeroPad(One2.toHexString(), 32);\n      hexFalse = hexZeroPad(Zero3.toHexString(), 32);\n      domainFieldTypes = {\n        name: \"string\",\n        version: \"string\",\n        chainId: \"uint256\",\n        verifyingContract: \"address\",\n        salt: \"bytes32\"\n      };\n      domainFieldNames = [\n        \"name\",\n        \"version\",\n        \"chainId\",\n        \"verifyingContract\",\n        \"salt\"\n      ];\n      domainChecks = {\n        name: checkString(\"name\"),\n        version: checkString(\"version\"),\n        chainId: function(value) {\n          try {\n            return BigNumber.from(value).toString();\n          } catch (error) {\n          }\n          return logger13.throwArgumentError(`invalid domain value for \"chainId\"`, \"domain.chainId\", value);\n        },\n        verifyingContract: function(value) {\n          try {\n            return getAddress(value).toLowerCase();\n          } catch (error) {\n          }\n          return logger13.throwArgumentError(`invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n        },\n        salt: function(value) {\n          try {\n            const bytes3 = arrayify(value);\n            if (bytes3.length !== 32) {\n              throw new Error(\"bad length\");\n            }\n            return hexlify(bytes3);\n          } catch (error) {\n          }\n          return logger13.throwArgumentError(`invalid domain value \"salt\"`, \"domain.salt\", value);\n        }\n      };\n      TypedDataEncoder = class _TypedDataEncoder {\n        constructor(types) {\n          defineReadOnly(this, \"types\", Object.freeze(deepCopy(types)));\n          defineReadOnly(this, \"_encoderCache\", {});\n          defineReadOnly(this, \"_types\", {});\n          const links = {};\n          const parents = {};\n          const subtypes = {};\n          Object.keys(types).forEach((type) => {\n            links[type] = {};\n            parents[type] = [];\n            subtypes[type] = {};\n          });\n          for (const name in types) {\n            const uniqueNames = {};\n            types[name].forEach((field) => {\n              if (uniqueNames[field.name]) {\n                logger13.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", types);\n              }\n              uniqueNames[field.name] = true;\n              const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n              if (baseType === name) {\n                logger13.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, \"types\", types);\n              }\n              const encoder = getBaseEncoder(baseType);\n              if (encoder) {\n                return;\n              }\n              if (!parents[baseType]) {\n                logger13.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, \"types\", types);\n              }\n              parents[baseType].push(name);\n              links[name][baseType] = true;\n            });\n          }\n          const primaryTypes = Object.keys(parents).filter((n2) => parents[n2].length === 0);\n          if (primaryTypes.length === 0) {\n            logger13.throwArgumentError(\"missing primary type\", \"types\", types);\n          } else if (primaryTypes.length > 1) {\n            logger13.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t) => JSON.stringify(t)).join(\", \")}`, \"types\", types);\n          }\n          defineReadOnly(this, \"primaryType\", primaryTypes[0]);\n          function checkCircular(type, found) {\n            if (found[type]) {\n              logger13.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, \"types\", types);\n            }\n            found[type] = true;\n            Object.keys(links[type]).forEach((child) => {\n              if (!parents[child]) {\n                return;\n              }\n              checkCircular(child, found);\n              Object.keys(found).forEach((subtype) => {\n                subtypes[subtype][child] = true;\n              });\n            });\n            delete found[type];\n          }\n          checkCircular(this.primaryType, {});\n          for (const name in subtypes) {\n            const st = Object.keys(subtypes[name]);\n            st.sort();\n            this._types[name] = encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\");\n          }\n        }\n        getEncoder(type) {\n          let encoder = this._encoderCache[type];\n          if (!encoder) {\n            encoder = this._encoderCache[type] = this._getEncoder(type);\n          }\n          return encoder;\n        }\n        _getEncoder(type) {\n          {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n              return encoder;\n            }\n          }\n          const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n          if (match) {\n            const subtype = match[1];\n            const subEncoder = this.getEncoder(subtype);\n            const length = parseInt(match[3]);\n            return (value) => {\n              if (length >= 0 && value.length !== length) {\n                logger13.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n              }\n              let result = value.map(subEncoder);\n              if (this._types[subtype]) {\n                result = result.map(keccak256);\n              }\n              return keccak256(hexConcat(result));\n            };\n          }\n          const fields = this.types[type];\n          if (fields) {\n            const encodedType = id(this._types[type]);\n            return (value) => {\n              const values = fields.map(({ name, type: type2 }) => {\n                const result = this.getEncoder(type2)(value[name]);\n                if (this._types[type2]) {\n                  return keccak256(result);\n                }\n                return result;\n              });\n              values.unshift(encodedType);\n              return hexConcat(values);\n            };\n          }\n          return logger13.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n        }\n        encodeType(name) {\n          const result = this._types[name];\n          if (!result) {\n            logger13.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, \"name\", name);\n          }\n          return result;\n        }\n        encodeData(type, value) {\n          return this.getEncoder(type)(value);\n        }\n        hashStruct(name, value) {\n          return keccak256(this.encodeData(name, value));\n        }\n        encode(value) {\n          return this.encodeData(this.primaryType, value);\n        }\n        hash(value) {\n          return this.hashStruct(this.primaryType, value);\n        }\n        _visit(type, value, callback) {\n          {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n              return callback(type, value);\n            }\n          }\n          const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n          if (match) {\n            const subtype = match[1];\n            const length = parseInt(match[3]);\n            if (length >= 0 && value.length !== length) {\n              logger13.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n            }\n            return value.map((v) => this._visit(subtype, v, callback));\n          }\n          const fields = this.types[type];\n          if (fields) {\n            return fields.reduce((accum, { name, type: type2 }) => {\n              accum[name] = this._visit(type2, value[name], callback);\n              return accum;\n            }, {});\n          }\n          return logger13.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n        }\n        visit(value, callback) {\n          return this._visit(this.primaryType, value, callback);\n        }\n        static from(types) {\n          return new _TypedDataEncoder(types);\n        }\n        static getPrimaryType(types) {\n          return _TypedDataEncoder.from(types).primaryType;\n        }\n        static hashStruct(name, types, value) {\n          return _TypedDataEncoder.from(types).hashStruct(name, value);\n        }\n        static hashDomain(domain2) {\n          const domainFields = [];\n          for (const name in domain2) {\n            const type = domainFieldTypes[name];\n            if (!type) {\n              logger13.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain2);\n            }\n            domainFields.push({ name, type });\n          }\n          domainFields.sort((a, b2) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b2.name);\n          });\n          return _TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain2);\n        }\n        static encode(domain2, types, value) {\n          return hexConcat([\n            \"0x1901\",\n            _TypedDataEncoder.hashDomain(domain2),\n            _TypedDataEncoder.from(types).hash(value)\n          ]);\n        }\n        static hash(domain2, types, value) {\n          return keccak256(_TypedDataEncoder.encode(domain2, types, value));\n        }\n        // Replaces all address types with ENS names with their looked up address\n        static resolveNames(domain2, types, value, resolveName2) {\n          return __awaiter2(this, void 0, void 0, function* () {\n            domain2 = shallowCopy(domain2);\n            const ensCache = {};\n            if (domain2.verifyingContract && !isHexString(domain2.verifyingContract, 20)) {\n              ensCache[domain2.verifyingContract] = \"0x\";\n            }\n            const encoder = _TypedDataEncoder.from(types);\n            encoder.visit(value, (type, value2) => {\n              if (type === \"address\" && !isHexString(value2, 20)) {\n                ensCache[value2] = \"0x\";\n              }\n              return value2;\n            });\n            for (const name in ensCache) {\n              ensCache[name] = yield resolveName2(name);\n            }\n            if (domain2.verifyingContract && ensCache[domain2.verifyingContract]) {\n              domain2.verifyingContract = ensCache[domain2.verifyingContract];\n            }\n            value = encoder.visit(value, (type, value2) => {\n              if (type === \"address\" && ensCache[value2]) {\n                return ensCache[value2];\n              }\n              return value2;\n            });\n            return { domain: domain2, value };\n          });\n        }\n        static getPayload(domain2, types, value) {\n          _TypedDataEncoder.hashDomain(domain2);\n          const domainValues = {};\n          const domainTypes = [];\n          domainFieldNames.forEach((name) => {\n            const value2 = domain2[name];\n            if (value2 == null) {\n              return;\n            }\n            domainValues[name] = domainChecks[name](value2);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n          });\n          const encoder = _TypedDataEncoder.from(types);\n          const typesWithDomain = shallowCopy(types);\n          if (typesWithDomain.EIP712Domain) {\n            logger13.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n          } else {\n            typesWithDomain.EIP712Domain = domainTypes;\n          }\n          encoder.encode(value);\n          return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type, value2) => {\n              if (type.match(/^bytes(\\d*)/)) {\n                return hexlify(arrayify(value2));\n              }\n              if (type.match(/^u?int/)) {\n                return BigNumber.from(value2).toString();\n              }\n              switch (type) {\n                case \"address\":\n                  return value2.toLowerCase();\n                case \"bool\":\n                  return !!value2;\n                case \"string\":\n                  if (typeof value2 !== \"string\") {\n                    logger13.throwArgumentError(`invalid string`, \"value\", value2);\n                  }\n                  return value2;\n              }\n              return logger13.throwArgumentError(\"unsupported type\", \"type\", type);\n            })\n          };\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+hash@5.8.0/node_modules/@ethersproject/hash/lib.esm/index.js\n  var init_lib12 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+hash@5.8.0/node_modules/@ethersproject/hash/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_id();\n      init_namehash();\n      init_message();\n      init_typed_data();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/interface.js\n  function wrapAccessError(property, error) {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n    wrap.error = error;\n    return wrap;\n  }\n  var logger14, LogDescription, TransactionDescription, ErrorDescription, Indexed, BuiltinErrors, Interface;\n  var init_interface = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/interface.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib7();\n      init_lib3();\n      init_lib2();\n      init_lib12();\n      init_lib5();\n      init_lib4();\n      init_abi_coder();\n      init_abstract_coder();\n      init_fragments();\n      init_lib();\n      init_version5();\n      logger14 = new Logger(version6);\n      LogDescription = class extends Description {\n      };\n      TransactionDescription = class extends Description {\n      };\n      ErrorDescription = class extends Description {\n      };\n      Indexed = class extends Description {\n        static isIndexed(value) {\n          return !!(value && value._isIndexed);\n        }\n      };\n      BuiltinErrors = {\n        \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [\"string\"], reason: true },\n        \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [\"uint256\"] }\n      };\n      Interface = class {\n        constructor(fragments) {\n          let abi = [];\n          if (typeof fragments === \"string\") {\n            abi = JSON.parse(fragments);\n          } else {\n            abi = fragments;\n          }\n          defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n          }).filter((fragment) => fragment != null));\n          defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n          defineReadOnly(this, \"functions\", {});\n          defineReadOnly(this, \"errors\", {});\n          defineReadOnly(this, \"events\", {});\n          defineReadOnly(this, \"structs\", {});\n          this.fragments.forEach((fragment) => {\n            let bucket = null;\n            switch (fragment.type) {\n              case \"constructor\":\n                if (this.deploy) {\n                  logger14.warn(\"duplicate definition - constructor\");\n                  return;\n                }\n                defineReadOnly(this, \"deploy\", fragment);\n                return;\n              case \"function\":\n                bucket = this.functions;\n                break;\n              case \"event\":\n                bucket = this.events;\n                break;\n              case \"error\":\n                bucket = this.errors;\n                break;\n              default:\n                return;\n            }\n            let signature2 = fragment.format();\n            if (bucket[signature2]) {\n              logger14.warn(\"duplicate definition - \" + signature2);\n              return;\n            }\n            bucket[signature2] = fragment;\n          });\n          if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n              payable: false,\n              type: \"constructor\"\n            }));\n          }\n          defineReadOnly(this, \"_isInterface\", true);\n        }\n        format(format) {\n          if (!format) {\n            format = FormatTypes.full;\n          }\n          if (format === FormatTypes.sighash) {\n            logger14.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n          }\n          const abi = this.fragments.map((fragment) => fragment.format(format));\n          if (format === FormatTypes.json) {\n            return JSON.stringify(abi.map((j) => JSON.parse(j)));\n          }\n          return abi;\n        }\n        // Sub-classes can override these to handle other blockchains\n        static getAbiCoder() {\n          return defaultAbiCoder;\n        }\n        static getAddress(address) {\n          return getAddress(address);\n        }\n        static getSighash(fragment) {\n          return hexDataSlice(id(fragment.format()), 0, 4);\n        }\n        static getEventTopic(eventFragment) {\n          return id(eventFragment.format());\n        }\n        // Find a function definition by any means necessary (unless it is ambiguous)\n        getFunction(nameOrSignatureOrSighash) {\n          if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n              if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                return this.functions[name];\n              }\n            }\n            logger14.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n          }\n          if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => f.split(\n              \"(\"\n              /* fix:) */\n            )[0] === name);\n            if (matching.length === 0) {\n              logger14.throwArgumentError(\"no matching function\", \"name\", name);\n            } else if (matching.length > 1) {\n              logger14.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n            return this.functions[matching[0]];\n          }\n          const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n          if (!result) {\n            logger14.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n          }\n          return result;\n        }\n        // Find an event definition by any means necessary (unless it is ambiguous)\n        getEvent(nameOrSignatureOrTopic) {\n          if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n              if (topichash === this.getEventTopic(name)) {\n                return this.events[name];\n              }\n            }\n            logger14.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n          }\n          if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => f.split(\n              \"(\"\n              /* fix:) */\n            )[0] === name);\n            if (matching.length === 0) {\n              logger14.throwArgumentError(\"no matching event\", \"name\", name);\n            } else if (matching.length > 1) {\n              logger14.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n            return this.events[matching[0]];\n          }\n          const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n          if (!result) {\n            logger14.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n          }\n          return result;\n        }\n        // Find a function definition by any means necessary (unless it is ambiguous)\n        getError(nameOrSignatureOrSighash) {\n          if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n              const error = this.errors[name];\n              if (nameOrSignatureOrSighash === getSighash(error)) {\n                return this.errors[name];\n              }\n            }\n            logger14.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n          }\n          if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => f.split(\n              \"(\"\n              /* fix:) */\n            )[0] === name);\n            if (matching.length === 0) {\n              logger14.throwArgumentError(\"no matching error\", \"name\", name);\n            } else if (matching.length > 1) {\n              logger14.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n            return this.errors[matching[0]];\n          }\n          const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n          if (!result) {\n            logger14.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n          }\n          return result;\n        }\n        // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n        getSighash(fragment) {\n          if (typeof fragment === \"string\") {\n            try {\n              fragment = this.getFunction(fragment);\n            } catch (error) {\n              try {\n                fragment = this.getError(fragment);\n              } catch (_) {\n                throw error;\n              }\n            }\n          }\n          return getStatic(this.constructor, \"getSighash\")(fragment);\n        }\n        // Get the topic (the bytes32 hash) used by Solidity to identify an event\n        getEventTopic(eventFragment) {\n          if (typeof eventFragment === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n          }\n          return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n        }\n        _decodeParams(params, data) {\n          return this._abiCoder.decode(params, data);\n        }\n        _encodeParams(params, values) {\n          return this._abiCoder.encode(params, values);\n        }\n        encodeDeploy(values) {\n          return this._encodeParams(this.deploy.inputs, values || []);\n        }\n        decodeErrorResult(fragment, data) {\n          if (typeof fragment === \"string\") {\n            fragment = this.getError(fragment);\n          }\n          const bytes3 = arrayify(data);\n          if (hexlify(bytes3.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger14.throwArgumentError(`data signature does not match error ${fragment.name}.`, \"data\", hexlify(bytes3));\n          }\n          return this._decodeParams(fragment.inputs, bytes3.slice(4));\n        }\n        encodeErrorResult(fragment, values) {\n          if (typeof fragment === \"string\") {\n            fragment = this.getError(fragment);\n          }\n          return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [])\n          ]));\n        }\n        // Decode the data for a function call (e.g. tx.data)\n        decodeFunctionData(functionFragment, data) {\n          if (typeof functionFragment === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n          }\n          const bytes3 = arrayify(data);\n          if (hexlify(bytes3.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger14.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes3));\n          }\n          return this._decodeParams(functionFragment.inputs, bytes3.slice(4));\n        }\n        // Encode the data for a function call (e.g. tx.data)\n        encodeFunctionData(functionFragment, values) {\n          if (typeof functionFragment === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n          }\n          return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n          ]));\n        }\n        // Decode the result from a function call (e.g. from eth_call)\n        decodeFunctionResult(functionFragment, data) {\n          if (typeof functionFragment === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n          }\n          let bytes3 = arrayify(data);\n          let reason = null;\n          let message = \"\";\n          let errorArgs = null;\n          let errorName = null;\n          let errorSignature = null;\n          switch (bytes3.length % this._abiCoder._getWordSize()) {\n            case 0:\n              try {\n                return this._abiCoder.decode(functionFragment.outputs, bytes3);\n              } catch (error) {\n              }\n              break;\n            case 4: {\n              const selector = hexlify(bytes3.slice(0, 4));\n              const builtin = BuiltinErrors[selector];\n              if (builtin) {\n                errorArgs = this._abiCoder.decode(builtin.inputs, bytes3.slice(4));\n                errorName = builtin.name;\n                errorSignature = builtin.signature;\n                if (builtin.reason) {\n                  reason = errorArgs[0];\n                }\n                if (errorName === \"Error\") {\n                  message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;\n                } else if (errorName === \"Panic\") {\n                  message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;\n                }\n              } else {\n                try {\n                  const error = this.getError(selector);\n                  errorArgs = this._abiCoder.decode(error.inputs, bytes3.slice(4));\n                  errorName = error.name;\n                  errorSignature = error.format();\n                } catch (error) {\n                }\n              }\n              break;\n            }\n          }\n          return logger14.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            data: hexlify(data),\n            errorArgs,\n            errorName,\n            errorSignature,\n            reason\n          });\n        }\n        // Encode the result for a function call (e.g. for eth_call)\n        encodeFunctionResult(functionFragment, values) {\n          if (typeof functionFragment === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n          }\n          return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n        }\n        // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n        encodeFilterTopics(eventFragment, values) {\n          if (typeof eventFragment === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n          }\n          if (values.length > eventFragment.inputs.length) {\n            logger14.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n              argument: \"values\",\n              value: values\n            });\n          }\n          let topics = [];\n          if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n          }\n          const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n              return id(value);\n            } else if (param.type === \"bytes\") {\n              return keccak256(hexlify(value));\n            }\n            if (param.type === \"bool\" && typeof value === \"boolean\") {\n              value = value ? \"0x01\" : \"0x00\";\n            }\n            if (param.type.match(/^u?int/)) {\n              value = BigNumber.from(value).toHexString();\n            }\n            if (param.type === \"address\") {\n              this._abiCoder.encode([\"address\"], [value]);\n            }\n            return hexZeroPad(hexlify(value), 32);\n          };\n          values.forEach((value, index) => {\n            let param = eventFragment.inputs[index];\n            if (!param.indexed) {\n              if (value != null) {\n                logger14.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n              }\n              return;\n            }\n            if (value == null) {\n              topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n              logger14.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n            } else if (Array.isArray(value)) {\n              topics.push(value.map((value2) => encodeTopic(param, value2)));\n            } else {\n              topics.push(encodeTopic(param, value));\n            }\n          });\n          while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n          }\n          return topics;\n        }\n        encodeEventLog(eventFragment, values) {\n          if (typeof eventFragment === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n          }\n          const topics = [];\n          const dataTypes = [];\n          const dataValues = [];\n          if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n          }\n          if (values.length !== eventFragment.inputs.length) {\n            logger14.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n          }\n          eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n              if (param.type === \"string\") {\n                topics.push(id(value));\n              } else if (param.type === \"bytes\") {\n                topics.push(keccak256(value));\n              } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                throw new Error(\"not implemented\");\n              } else {\n                topics.push(this._abiCoder.encode([param.type], [value]));\n              }\n            } else {\n              dataTypes.push(param);\n              dataValues.push(value);\n            }\n          });\n          return {\n            data: this._abiCoder.encode(dataTypes, dataValues),\n            topics\n          };\n        }\n        // Decode a filter for the event and the search criteria\n        decodeEventLog(eventFragment, data, topics) {\n          if (typeof eventFragment === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n          }\n          if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n              logger14.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n          }\n          let indexed = [];\n          let nonIndexed = [];\n          let dynamic = [];\n          eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n              if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                dynamic.push(true);\n              } else {\n                indexed.push(param);\n                dynamic.push(false);\n              }\n            } else {\n              nonIndexed.push(param);\n              dynamic.push(false);\n            }\n          });\n          let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n          let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n          let result = [];\n          let nonIndexedIndex = 0, indexedIndex = 0;\n          eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n              if (resultIndexed == null) {\n                result[index] = new Indexed({ _isIndexed: true, hash: null });\n              } else if (dynamic[index]) {\n                result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n              } else {\n                try {\n                  result[index] = resultIndexed[indexedIndex++];\n                } catch (error) {\n                  result[index] = error;\n                }\n              }\n            } else {\n              try {\n                result[index] = resultNonIndexed[nonIndexedIndex++];\n              } catch (error) {\n                result[index] = error;\n              }\n            }\n            if (param.name && result[param.name] == null) {\n              const value = result[index];\n              if (value instanceof Error) {\n                Object.defineProperty(result, param.name, {\n                  enumerable: true,\n                  get: () => {\n                    throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);\n                  }\n                });\n              } else {\n                result[param.name] = value;\n              }\n            }\n          });\n          for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n              Object.defineProperty(result, i, {\n                enumerable: true,\n                get: () => {\n                  throw wrapAccessError(`index ${i}`, value);\n                }\n              });\n            }\n          }\n          return Object.freeze(result);\n        }\n        // Given a transaction, find the matching function fragment (if any) and\n        // determine all its properties and call parameters\n        parseTransaction(tx) {\n          let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n          if (!fragment) {\n            return null;\n          }\n          return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\")\n          });\n        }\n        // @TODO\n        //parseCallResult(data: BytesLike): ??\n        // Given an event log, find the matching event fragment (if any) and\n        // determine all its properties and values\n        parseLog(log) {\n          let fragment = this.getEvent(log.topics[0]);\n          if (!fragment || fragment.anonymous) {\n            return null;\n          }\n          return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n          });\n        }\n        parseError(data) {\n          const hexData = hexlify(data);\n          let fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n          if (!fragment) {\n            return null;\n          }\n          return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment)\n          });\n        }\n        /*\n        static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n            if (Interface.isInterface(value)) {\n                return value;\n            }\n            if (typeof(value) === \"string\") {\n                return new Interface(JSON.parse(value));\n            }\n            return new Interface(value);\n        }\n        */\n        static isInterface(value) {\n          return !!(value && value._isInterface);\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/index.js\n  var init_lib13 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+abi@5.8.0/node_modules/@ethersproject/abi/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_fragments();\n      init_abi_coder();\n      init_interface();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+abstract-provider@5.8.0/node_modules/@ethersproject/abstract-provider/lib.esm/_version.js\n  var version11;\n  var init_version10 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+abstract-provider@5.8.0/node_modules/@ethersproject/abstract-provider/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version11 = \"abstract-provider/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+abstract-provider@5.8.0/node_modules/@ethersproject/abstract-provider/lib.esm/index.js\n  var __awaiter3, logger15, ForkEvent, Provider;\n  var init_lib14 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+abstract-provider@5.8.0/node_modules/@ethersproject/abstract-provider/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib3();\n      init_lib4();\n      init_lib();\n      init_version10();\n      __awaiter3 = function(thisArg, _arguments, P, generator) {\n        function adopt(value) {\n          return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n          });\n        }\n        return new (P || (P = Promise))(function(resolve, reject) {\n          function fulfilled(value) {\n            try {\n              step(generator.next(value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function rejected(value) {\n            try {\n              step(generator[\"throw\"](value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n          }\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n      };\n      logger15 = new Logger(version11);\n      ForkEvent = class extends Description {\n        static isForkEvent(value) {\n          return !!(value && value._isForkEvent);\n        }\n      };\n      Provider = class _Provider {\n        constructor() {\n          logger15.checkAbstract(new.target, _Provider);\n          defineReadOnly(this, \"_isProvider\", true);\n        }\n        getFeeData() {\n          return __awaiter3(this, void 0, void 0, function* () {\n            const { block, gasPrice } = yield resolveProperties({\n              block: this.getBlock(\"latest\"),\n              gasPrice: this.getGasPrice().catch((error) => {\n                return null;\n              })\n            });\n            let lastBaseFeePerGas = null, maxFeePerGas = null, maxPriorityFeePerGas = null;\n            if (block && block.baseFeePerGas) {\n              lastBaseFeePerGas = block.baseFeePerGas;\n              maxPriorityFeePerGas = BigNumber.from(\"1500000000\");\n              maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);\n            }\n            return { lastBaseFeePerGas, maxFeePerGas, maxPriorityFeePerGas, gasPrice };\n          });\n        }\n        // Alias for \"on\"\n        addListener(eventName, listener) {\n          return this.on(eventName, listener);\n        }\n        // Alias for \"off\"\n        removeListener(eventName, listener) {\n          return this.off(eventName, listener);\n        }\n        static isProvider(value) {\n          return !!(value && value._isProvider);\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+abstract-signer@5.8.0/node_modules/@ethersproject/abstract-signer/lib.esm/_version.js\n  var version12;\n  var init_version11 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+abstract-signer@5.8.0/node_modules/@ethersproject/abstract-signer/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version12 = \"abstract-signer/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+abstract-signer@5.8.0/node_modules/@ethersproject/abstract-signer/lib.esm/index.js\n  var __awaiter4, logger16, allowedTransactionKeys, forwardErrors, Signer, VoidSigner;\n  var init_lib15 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+abstract-signer@5.8.0/node_modules/@ethersproject/abstract-signer/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib4();\n      init_lib();\n      init_version11();\n      __awaiter4 = function(thisArg, _arguments, P, generator) {\n        function adopt(value) {\n          return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n          });\n        }\n        return new (P || (P = Promise))(function(resolve, reject) {\n          function fulfilled(value) {\n            try {\n              step(generator.next(value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function rejected(value) {\n            try {\n              step(generator[\"throw\"](value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n          }\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n      };\n      logger16 = new Logger(version12);\n      allowedTransactionKeys = [\n        \"accessList\",\n        \"ccipReadEnabled\",\n        \"chainId\",\n        \"customData\",\n        \"data\",\n        \"from\",\n        \"gasLimit\",\n        \"gasPrice\",\n        \"maxFeePerGas\",\n        \"maxPriorityFeePerGas\",\n        \"nonce\",\n        \"to\",\n        \"type\",\n        \"value\"\n      ];\n      forwardErrors = [\n        Logger.errors.INSUFFICIENT_FUNDS,\n        Logger.errors.NONCE_EXPIRED,\n        Logger.errors.REPLACEMENT_UNDERPRICED\n      ];\n      Signer = class _Signer {\n        ///////////////////\n        // Sub-classes MUST call super\n        constructor() {\n          logger16.checkAbstract(new.target, _Signer);\n          defineReadOnly(this, \"_isSigner\", true);\n        }\n        ///////////////////\n        // Sub-classes MAY override these\n        getBalance(blockTag) {\n          return __awaiter4(this, void 0, void 0, function* () {\n            this._checkProvider(\"getBalance\");\n            return yield this.provider.getBalance(this.getAddress(), blockTag);\n          });\n        }\n        getTransactionCount(blockTag) {\n          return __awaiter4(this, void 0, void 0, function* () {\n            this._checkProvider(\"getTransactionCount\");\n            return yield this.provider.getTransactionCount(this.getAddress(), blockTag);\n          });\n        }\n        // Populates \"from\" if unspecified, and estimates the gas for the transaction\n        estimateGas(transaction) {\n          return __awaiter4(this, void 0, void 0, function* () {\n            this._checkProvider(\"estimateGas\");\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\n            return yield this.provider.estimateGas(tx);\n          });\n        }\n        // Populates \"from\" if unspecified, and calls with the transaction\n        call(transaction, blockTag) {\n          return __awaiter4(this, void 0, void 0, function* () {\n            this._checkProvider(\"call\");\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\n            return yield this.provider.call(tx, blockTag);\n          });\n        }\n        // Populates all fields in a transaction, signs it and sends it to the network\n        sendTransaction(transaction) {\n          return __awaiter4(this, void 0, void 0, function* () {\n            this._checkProvider(\"sendTransaction\");\n            const tx = yield this.populateTransaction(transaction);\n            const signedTx = yield this.signTransaction(tx);\n            return yield this.provider.sendTransaction(signedTx);\n          });\n        }\n        getChainId() {\n          return __awaiter4(this, void 0, void 0, function* () {\n            this._checkProvider(\"getChainId\");\n            const network = yield this.provider.getNetwork();\n            return network.chainId;\n          });\n        }\n        getGasPrice() {\n          return __awaiter4(this, void 0, void 0, function* () {\n            this._checkProvider(\"getGasPrice\");\n            return yield this.provider.getGasPrice();\n          });\n        }\n        getFeeData() {\n          return __awaiter4(this, void 0, void 0, function* () {\n            this._checkProvider(\"getFeeData\");\n            return yield this.provider.getFeeData();\n          });\n        }\n        resolveName(name) {\n          return __awaiter4(this, void 0, void 0, function* () {\n            this._checkProvider(\"resolveName\");\n            return yield this.provider.resolveName(name);\n          });\n        }\n        // Checks a transaction does not contain invalid keys and if\n        // no \"from\" is provided, populates it.\n        // - does NOT require a provider\n        // - adds \"from\" is not present\n        // - returns a COPY (safe to mutate the result)\n        // By default called from: (overriding these prevents it)\n        //   - call\n        //   - estimateGas\n        //   - populateTransaction (and therefor sendTransaction)\n        checkTransaction(transaction) {\n          for (const key2 in transaction) {\n            if (allowedTransactionKeys.indexOf(key2) === -1) {\n              logger16.throwArgumentError(\"invalid transaction key: \" + key2, \"transaction\", transaction);\n            }\n          }\n          const tx = shallowCopy(transaction);\n          if (tx.from == null) {\n            tx.from = this.getAddress();\n          } else {\n            tx.from = Promise.all([\n              Promise.resolve(tx.from),\n              this.getAddress()\n            ]).then((result) => {\n              if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n                logger16.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n              }\n              return result[0];\n            });\n          }\n          return tx;\n        }\n        // Populates ALL keys for a transaction and checks that \"from\" matches\n        // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n        // By default called from: (overriding these prevents it)\n        //   - sendTransaction\n        //\n        // Notes:\n        //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n        populateTransaction(transaction) {\n          return __awaiter4(this, void 0, void 0, function* () {\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\n            if (tx.to != null) {\n              tx.to = Promise.resolve(tx.to).then((to) => __awaiter4(this, void 0, void 0, function* () {\n                if (to == null) {\n                  return null;\n                }\n                const address = yield this.resolveName(to);\n                if (address == null) {\n                  logger16.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n              }));\n              tx.to.catch((error) => {\n              });\n            }\n            const hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;\n            if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\n              logger16.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\n            } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\n              logger16.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\n            }\n            if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {\n              tx.type = 2;\n            } else if (tx.type === 0 || tx.type === 1) {\n              if (tx.gasPrice == null) {\n                tx.gasPrice = this.getGasPrice();\n              }\n            } else {\n              const feeData = yield this.getFeeData();\n              if (tx.type == null) {\n                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                  tx.type = 2;\n                  if (tx.gasPrice != null) {\n                    const gasPrice = tx.gasPrice;\n                    delete tx.gasPrice;\n                    tx.maxFeePerGas = gasPrice;\n                    tx.maxPriorityFeePerGas = gasPrice;\n                  } else {\n                    if (tx.maxFeePerGas == null) {\n                      tx.maxFeePerGas = feeData.maxFeePerGas;\n                    }\n                    if (tx.maxPriorityFeePerGas == null) {\n                      tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                    }\n                  }\n                } else if (feeData.gasPrice != null) {\n                  if (hasEip1559) {\n                    logger16.throwError(\"network does not support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                      operation: \"populateTransaction\"\n                    });\n                  }\n                  if (tx.gasPrice == null) {\n                    tx.gasPrice = feeData.gasPrice;\n                  }\n                  tx.type = 0;\n                } else {\n                  logger16.throwError(\"failed to get consistent fee data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"signer.getFeeData\"\n                  });\n                }\n              } else if (tx.type === 2) {\n                if (tx.maxFeePerGas == null) {\n                  tx.maxFeePerGas = feeData.maxFeePerGas;\n                }\n                if (tx.maxPriorityFeePerGas == null) {\n                  tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                }\n              }\n            }\n            if (tx.nonce == null) {\n              tx.nonce = this.getTransactionCount(\"pending\");\n            }\n            if (tx.gasLimit == null) {\n              tx.gasLimit = this.estimateGas(tx).catch((error) => {\n                if (forwardErrors.indexOf(error.code) >= 0) {\n                  throw error;\n                }\n                return logger16.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                  error,\n                  tx\n                });\n              });\n            }\n            if (tx.chainId == null) {\n              tx.chainId = this.getChainId();\n            } else {\n              tx.chainId = Promise.all([\n                Promise.resolve(tx.chainId),\n                this.getChainId()\n              ]).then((results) => {\n                if (results[1] !== 0 && results[0] !== results[1]) {\n                  logger16.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n                }\n                return results[0];\n              });\n            }\n            return yield resolveProperties(tx);\n          });\n        }\n        ///////////////////\n        // Sub-classes SHOULD leave these alone\n        _checkProvider(operation) {\n          if (!this.provider) {\n            logger16.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: operation || \"_checkProvider\"\n            });\n          }\n        }\n        static isSigner(value) {\n          return !!(value && value._isSigner);\n        }\n      };\n      VoidSigner = class _VoidSigner extends Signer {\n        constructor(address, provider) {\n          super();\n          defineReadOnly(this, \"address\", address);\n          defineReadOnly(this, \"provider\", provider || null);\n        }\n        getAddress() {\n          return Promise.resolve(this.address);\n        }\n        _fail(message, operation) {\n          return Promise.resolve().then(() => {\n            logger16.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation });\n          });\n        }\n        signMessage(message) {\n          return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n        }\n        signTransaction(transaction) {\n          return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n        }\n        _signTypedData(domain2, types, value) {\n          return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n        }\n        connect(provider) {\n          return new _VoidSigner(this.address, provider);\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/minimalistic-assert@1.0.1/node_modules/minimalistic-assert/index.js\n  var require_minimalistic_assert = __commonJS({\n    \"../../../node_modules/.pnpm/minimalistic-assert@1.0.1/node_modules/minimalistic-assert/index.js\"(exports3, module) {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      module.exports = assert4;\n      function assert4(val, msg) {\n        if (!val)\n          throw new Error(msg || \"Assertion failed\");\n      }\n      assert4.equal = function assertEqual2(l, r2, msg) {\n        if (l != r2)\n          throw new Error(msg || \"Assertion failed: \" + l + \" != \" + r2);\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js\n  var require_inherits_browser = __commonJS({\n    \"../../../node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js\"(exports3, module) {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      if (typeof Object.create === \"function\") {\n        module.exports = function inherits(ctor, superCtor) {\n          if (superCtor) {\n            ctor.super_ = superCtor;\n            ctor.prototype = Object.create(superCtor.prototype, {\n              constructor: {\n                value: ctor,\n                enumerable: false,\n                writable: true,\n                configurable: true\n              }\n            });\n          }\n        };\n      } else {\n        module.exports = function inherits(ctor, superCtor) {\n          if (superCtor) {\n            ctor.super_ = superCtor;\n            var TempCtor = function() {\n            };\n            TempCtor.prototype = superCtor.prototype;\n            ctor.prototype = new TempCtor();\n            ctor.prototype.constructor = ctor;\n          }\n        };\n      }\n    }\n  });\n\n  // ../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/utils.js\n  var require_utils = __commonJS({\n    \"../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/utils.js\"(exports3) {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      var assert4 = require_minimalistic_assert();\n      var inherits = require_inherits_browser();\n      exports3.inherits = inherits;\n      function isSurrogatePair(msg, i) {\n        if ((msg.charCodeAt(i) & 64512) !== 55296) {\n          return false;\n        }\n        if (i < 0 || i + 1 >= msg.length) {\n          return false;\n        }\n        return (msg.charCodeAt(i + 1) & 64512) === 56320;\n      }\n      function toArray(msg, enc) {\n        if (Array.isArray(msg))\n          return msg.slice();\n        if (!msg)\n          return [];\n        var res = [];\n        if (typeof msg === \"string\") {\n          if (!enc) {\n            var p = 0;\n            for (var i = 0; i < msg.length; i++) {\n              var c = msg.charCodeAt(i);\n              if (c < 128) {\n                res[p++] = c;\n              } else if (c < 2048) {\n                res[p++] = c >> 6 | 192;\n                res[p++] = c & 63 | 128;\n              } else if (isSurrogatePair(msg, i)) {\n                c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);\n                res[p++] = c >> 18 | 240;\n                res[p++] = c >> 12 & 63 | 128;\n                res[p++] = c >> 6 & 63 | 128;\n                res[p++] = c & 63 | 128;\n              } else {\n                res[p++] = c >> 12 | 224;\n                res[p++] = c >> 6 & 63 | 128;\n                res[p++] = c & 63 | 128;\n              }\n            }\n          } else if (enc === \"hex\") {\n            msg = msg.replace(/[^a-z0-9]+/ig, \"\");\n            if (msg.length % 2 !== 0)\n              msg = \"0\" + msg;\n            for (i = 0; i < msg.length; i += 2)\n              res.push(parseInt(msg[i] + msg[i + 1], 16));\n          }\n        } else {\n          for (i = 0; i < msg.length; i++)\n            res[i] = msg[i] | 0;\n        }\n        return res;\n      }\n      exports3.toArray = toArray;\n      function toHex2(msg) {\n        var res = \"\";\n        for (var i = 0; i < msg.length; i++)\n          res += zero2(msg[i].toString(16));\n        return res;\n      }\n      exports3.toHex = toHex2;\n      function htonl(w) {\n        var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;\n        return res >>> 0;\n      }\n      exports3.htonl = htonl;\n      function toHex32(msg, endian) {\n        var res = \"\";\n        for (var i = 0; i < msg.length; i++) {\n          var w = msg[i];\n          if (endian === \"little\")\n            w = htonl(w);\n          res += zero8(w.toString(16));\n        }\n        return res;\n      }\n      exports3.toHex32 = toHex32;\n      function zero2(word) {\n        if (word.length === 1)\n          return \"0\" + word;\n        else\n          return word;\n      }\n      exports3.zero2 = zero2;\n      function zero8(word) {\n        if (word.length === 7)\n          return \"0\" + word;\n        else if (word.length === 6)\n          return \"00\" + word;\n        else if (word.length === 5)\n          return \"000\" + word;\n        else if (word.length === 4)\n          return \"0000\" + word;\n        else if (word.length === 3)\n          return \"00000\" + word;\n        else if (word.length === 2)\n          return \"000000\" + word;\n        else if (word.length === 1)\n          return \"0000000\" + word;\n        else\n          return word;\n      }\n      exports3.zero8 = zero8;\n      function join32(msg, start, end, endian) {\n        var len = end - start;\n        assert4(len % 4 === 0);\n        var res = new Array(len / 4);\n        for (var i = 0, k = start; i < res.length; i++, k += 4) {\n          var w;\n          if (endian === \"big\")\n            w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];\n          else\n            w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n          res[i] = w >>> 0;\n        }\n        return res;\n      }\n      exports3.join32 = join32;\n      function split32(msg, endian) {\n        var res = new Array(msg.length * 4);\n        for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n          var m = msg[i];\n          if (endian === \"big\") {\n            res[k] = m >>> 24;\n            res[k + 1] = m >>> 16 & 255;\n            res[k + 2] = m >>> 8 & 255;\n            res[k + 3] = m & 255;\n          } else {\n            res[k + 3] = m >>> 24;\n            res[k + 2] = m >>> 16 & 255;\n            res[k + 1] = m >>> 8 & 255;\n            res[k] = m & 255;\n          }\n        }\n        return res;\n      }\n      exports3.split32 = split32;\n      function rotr32(w, b2) {\n        return w >>> b2 | w << 32 - b2;\n      }\n      exports3.rotr32 = rotr32;\n      function rotl32(w, b2) {\n        return w << b2 | w >>> 32 - b2;\n      }\n      exports3.rotl32 = rotl32;\n      function sum32(a, b2) {\n        return a + b2 >>> 0;\n      }\n      exports3.sum32 = sum32;\n      function sum32_3(a, b2, c) {\n        return a + b2 + c >>> 0;\n      }\n      exports3.sum32_3 = sum32_3;\n      function sum32_4(a, b2, c, d) {\n        return a + b2 + c + d >>> 0;\n      }\n      exports3.sum32_4 = sum32_4;\n      function sum32_5(a, b2, c, d, e) {\n        return a + b2 + c + d + e >>> 0;\n      }\n      exports3.sum32_5 = sum32_5;\n      function sum64(buf, pos, ah, al) {\n        var bh = buf[pos];\n        var bl = buf[pos + 1];\n        var lo = al + bl >>> 0;\n        var hi = (lo < al ? 1 : 0) + ah + bh;\n        buf[pos] = hi >>> 0;\n        buf[pos + 1] = lo;\n      }\n      exports3.sum64 = sum64;\n      function sum64_hi(ah, al, bh, bl) {\n        var lo = al + bl >>> 0;\n        var hi = (lo < al ? 1 : 0) + ah + bh;\n        return hi >>> 0;\n      }\n      exports3.sum64_hi = sum64_hi;\n      function sum64_lo(ah, al, bh, bl) {\n        var lo = al + bl;\n        return lo >>> 0;\n      }\n      exports3.sum64_lo = sum64_lo;\n      function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n        var carry = 0;\n        var lo = al;\n        lo = lo + bl >>> 0;\n        carry += lo < al ? 1 : 0;\n        lo = lo + cl >>> 0;\n        carry += lo < cl ? 1 : 0;\n        lo = lo + dl >>> 0;\n        carry += lo < dl ? 1 : 0;\n        var hi = ah + bh + ch + dh + carry;\n        return hi >>> 0;\n      }\n      exports3.sum64_4_hi = sum64_4_hi;\n      function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n        var lo = al + bl + cl + dl;\n        return lo >>> 0;\n      }\n      exports3.sum64_4_lo = sum64_4_lo;\n      function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n        var carry = 0;\n        var lo = al;\n        lo = lo + bl >>> 0;\n        carry += lo < al ? 1 : 0;\n        lo = lo + cl >>> 0;\n        carry += lo < cl ? 1 : 0;\n        lo = lo + dl >>> 0;\n        carry += lo < dl ? 1 : 0;\n        lo = lo + el >>> 0;\n        carry += lo < el ? 1 : 0;\n        var hi = ah + bh + ch + dh + eh + carry;\n        return hi >>> 0;\n      }\n      exports3.sum64_5_hi = sum64_5_hi;\n      function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n        var lo = al + bl + cl + dl + el;\n        return lo >>> 0;\n      }\n      exports3.sum64_5_lo = sum64_5_lo;\n      function rotr64_hi(ah, al, num) {\n        var r2 = al << 32 - num | ah >>> num;\n        return r2 >>> 0;\n      }\n      exports3.rotr64_hi = rotr64_hi;\n      function rotr64_lo(ah, al, num) {\n        var r2 = ah << 32 - num | al >>> num;\n        return r2 >>> 0;\n      }\n      exports3.rotr64_lo = rotr64_lo;\n      function shr64_hi(ah, al, num) {\n        return ah >>> num;\n      }\n      exports3.shr64_hi = shr64_hi;\n      function shr64_lo(ah, al, num) {\n        var r2 = ah << 32 - num | al >>> num;\n        return r2 >>> 0;\n      }\n      exports3.shr64_lo = shr64_lo;\n    }\n  });\n\n  // ../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/common.js\n  var require_common = __commonJS({\n    \"../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/common.js\"(exports3) {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      var utils = require_utils();\n      var assert4 = require_minimalistic_assert();\n      function BlockHash() {\n        this.pending = null;\n        this.pendingTotal = 0;\n        this.blockSize = this.constructor.blockSize;\n        this.outSize = this.constructor.outSize;\n        this.hmacStrength = this.constructor.hmacStrength;\n        this.padLength = this.constructor.padLength / 8;\n        this.endian = \"big\";\n        this._delta8 = this.blockSize / 8;\n        this._delta32 = this.blockSize / 32;\n      }\n      exports3.BlockHash = BlockHash;\n      BlockHash.prototype.update = function update2(msg, enc) {\n        msg = utils.toArray(msg, enc);\n        if (!this.pending)\n          this.pending = msg;\n        else\n          this.pending = this.pending.concat(msg);\n        this.pendingTotal += msg.length;\n        if (this.pending.length >= this._delta8) {\n          msg = this.pending;\n          var r2 = msg.length % this._delta8;\n          this.pending = msg.slice(msg.length - r2, msg.length);\n          if (this.pending.length === 0)\n            this.pending = null;\n          msg = utils.join32(msg, 0, msg.length - r2, this.endian);\n          for (var i = 0; i < msg.length; i += this._delta32)\n            this._update(msg, i, i + this._delta32);\n        }\n        return this;\n      };\n      BlockHash.prototype.digest = function digest(enc) {\n        this.update(this._pad());\n        assert4(this.pending === null);\n        return this._digest(enc);\n      };\n      BlockHash.prototype._pad = function pad() {\n        var len = this.pendingTotal;\n        var bytes3 = this._delta8;\n        var k = bytes3 - (len + this.padLength) % bytes3;\n        var res = new Array(k + this.padLength);\n        res[0] = 128;\n        for (var i = 1; i < k; i++)\n          res[i] = 0;\n        len <<= 3;\n        if (this.endian === \"big\") {\n          for (var t = 8; t < this.padLength; t++)\n            res[i++] = 0;\n          res[i++] = 0;\n          res[i++] = 0;\n          res[i++] = 0;\n          res[i++] = 0;\n          res[i++] = len >>> 24 & 255;\n          res[i++] = len >>> 16 & 255;\n          res[i++] = len >>> 8 & 255;\n          res[i++] = len & 255;\n        } else {\n          res[i++] = len & 255;\n          res[i++] = len >>> 8 & 255;\n          res[i++] = len >>> 16 & 255;\n          res[i++] = len >>> 24 & 255;\n          res[i++] = 0;\n          res[i++] = 0;\n          res[i++] = 0;\n          res[i++] = 0;\n          for (t = 8; t < this.padLength; t++)\n            res[i++] = 0;\n        }\n        return res;\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/common.js\n  var require_common2 = __commonJS({\n    \"../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/common.js\"(exports3) {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      var utils = require_utils();\n      var rotr32 = utils.rotr32;\n      function ft_1(s, x, y, z) {\n        if (s === 0)\n          return ch32(x, y, z);\n        if (s === 1 || s === 3)\n          return p32(x, y, z);\n        if (s === 2)\n          return maj32(x, y, z);\n      }\n      exports3.ft_1 = ft_1;\n      function ch32(x, y, z) {\n        return x & y ^ ~x & z;\n      }\n      exports3.ch32 = ch32;\n      function maj32(x, y, z) {\n        return x & y ^ x & z ^ y & z;\n      }\n      exports3.maj32 = maj32;\n      function p32(x, y, z) {\n        return x ^ y ^ z;\n      }\n      exports3.p32 = p32;\n      function s0_256(x) {\n        return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n      }\n      exports3.s0_256 = s0_256;\n      function s1_256(x) {\n        return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n      }\n      exports3.s1_256 = s1_256;\n      function g0_256(x) {\n        return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;\n      }\n      exports3.g0_256 = g0_256;\n      function g1_256(x) {\n        return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;\n      }\n      exports3.g1_256 = g1_256;\n    }\n  });\n\n  // ../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/1.js\n  var require__ = __commonJS({\n    \"../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/1.js\"(exports3, module) {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      var utils = require_utils();\n      var common = require_common();\n      var shaCommon = require_common2();\n      var rotl32 = utils.rotl32;\n      var sum32 = utils.sum32;\n      var sum32_5 = utils.sum32_5;\n      var ft_1 = shaCommon.ft_1;\n      var BlockHash = common.BlockHash;\n      var sha1_K = [\n        1518500249,\n        1859775393,\n        2400959708,\n        3395469782\n      ];\n      function SHA1() {\n        if (!(this instanceof SHA1))\n          return new SHA1();\n        BlockHash.call(this);\n        this.h = [\n          1732584193,\n          4023233417,\n          2562383102,\n          271733878,\n          3285377520\n        ];\n        this.W = new Array(80);\n      }\n      utils.inherits(SHA1, BlockHash);\n      module.exports = SHA1;\n      SHA1.blockSize = 512;\n      SHA1.outSize = 160;\n      SHA1.hmacStrength = 80;\n      SHA1.padLength = 64;\n      SHA1.prototype._update = function _update(msg, start) {\n        var W = this.W;\n        for (var i = 0; i < 16; i++)\n          W[i] = msg[start + i];\n        for (; i < W.length; i++)\n          W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n        var a = this.h[0];\n        var b2 = this.h[1];\n        var c = this.h[2];\n        var d = this.h[3];\n        var e = this.h[4];\n        for (i = 0; i < W.length; i++) {\n          var s = ~~(i / 20);\n          var t = sum32_5(rotl32(a, 5), ft_1(s, b2, c, d), e, W[i], sha1_K[s]);\n          e = d;\n          d = c;\n          c = rotl32(b2, 30);\n          b2 = a;\n          a = t;\n        }\n        this.h[0] = sum32(this.h[0], a);\n        this.h[1] = sum32(this.h[1], b2);\n        this.h[2] = sum32(this.h[2], c);\n        this.h[3] = sum32(this.h[3], d);\n        this.h[4] = sum32(this.h[4], e);\n      };\n      SHA1.prototype._digest = function digest(enc) {\n        if (enc === \"hex\")\n          return utils.toHex32(this.h, \"big\");\n        else\n          return utils.split32(this.h, \"big\");\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/256.js\n  var require__2 = __commonJS({\n    \"../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/256.js\"(exports3, module) {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      var utils = require_utils();\n      var common = require_common();\n      var shaCommon = require_common2();\n      var assert4 = require_minimalistic_assert();\n      var sum32 = utils.sum32;\n      var sum32_4 = utils.sum32_4;\n      var sum32_5 = utils.sum32_5;\n      var ch32 = shaCommon.ch32;\n      var maj32 = shaCommon.maj32;\n      var s0_256 = shaCommon.s0_256;\n      var s1_256 = shaCommon.s1_256;\n      var g0_256 = shaCommon.g0_256;\n      var g1_256 = shaCommon.g1_256;\n      var BlockHash = common.BlockHash;\n      var sha256_K = [\n        1116352408,\n        1899447441,\n        3049323471,\n        3921009573,\n        961987163,\n        1508970993,\n        2453635748,\n        2870763221,\n        3624381080,\n        310598401,\n        607225278,\n        1426881987,\n        1925078388,\n        2162078206,\n        2614888103,\n        3248222580,\n        3835390401,\n        4022224774,\n        264347078,\n        604807628,\n        770255983,\n        1249150122,\n        1555081692,\n        1996064986,\n        2554220882,\n        2821834349,\n        2952996808,\n        3210313671,\n        3336571891,\n        3584528711,\n        113926993,\n        338241895,\n        666307205,\n        773529912,\n        1294757372,\n        1396182291,\n        1695183700,\n        1986661051,\n        2177026350,\n        2456956037,\n        2730485921,\n        2820302411,\n        3259730800,\n        3345764771,\n        3516065817,\n        3600352804,\n        4094571909,\n        275423344,\n        430227734,\n        506948616,\n        659060556,\n        883997877,\n        958139571,\n        1322822218,\n        1537002063,\n        1747873779,\n        1955562222,\n        2024104815,\n        2227730452,\n        2361852424,\n        2428436474,\n        2756734187,\n        3204031479,\n        3329325298\n      ];\n      function SHA2562() {\n        if (!(this instanceof SHA2562))\n          return new SHA2562();\n        BlockHash.call(this);\n        this.h = [\n          1779033703,\n          3144134277,\n          1013904242,\n          2773480762,\n          1359893119,\n          2600822924,\n          528734635,\n          1541459225\n        ];\n        this.k = sha256_K;\n        this.W = new Array(64);\n      }\n      utils.inherits(SHA2562, BlockHash);\n      module.exports = SHA2562;\n      SHA2562.blockSize = 512;\n      SHA2562.outSize = 256;\n      SHA2562.hmacStrength = 192;\n      SHA2562.padLength = 64;\n      SHA2562.prototype._update = function _update(msg, start) {\n        var W = this.W;\n        for (var i = 0; i < 16; i++)\n          W[i] = msg[start + i];\n        for (; i < W.length; i++)\n          W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n        var a = this.h[0];\n        var b2 = this.h[1];\n        var c = this.h[2];\n        var d = this.h[3];\n        var e = this.h[4];\n        var f = this.h[5];\n        var g = this.h[6];\n        var h = this.h[7];\n        assert4(this.k.length === W.length);\n        for (i = 0; i < W.length; i++) {\n          var T12 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n          var T2 = sum32(s0_256(a), maj32(a, b2, c));\n          h = g;\n          g = f;\n          f = e;\n          e = sum32(d, T12);\n          d = c;\n          c = b2;\n          b2 = a;\n          a = sum32(T12, T2);\n        }\n        this.h[0] = sum32(this.h[0], a);\n        this.h[1] = sum32(this.h[1], b2);\n        this.h[2] = sum32(this.h[2], c);\n        this.h[3] = sum32(this.h[3], d);\n        this.h[4] = sum32(this.h[4], e);\n        this.h[5] = sum32(this.h[5], f);\n        this.h[6] = sum32(this.h[6], g);\n        this.h[7] = sum32(this.h[7], h);\n      };\n      SHA2562.prototype._digest = function digest(enc) {\n        if (enc === \"hex\")\n          return utils.toHex32(this.h, \"big\");\n        else\n          return utils.split32(this.h, \"big\");\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/224.js\n  var require__3 = __commonJS({\n    \"../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/224.js\"(exports3, module) {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      var utils = require_utils();\n      var SHA2562 = require__2();\n      function SHA224() {\n        if (!(this instanceof SHA224))\n          return new SHA224();\n        SHA2562.call(this);\n        this.h = [\n          3238371032,\n          914150663,\n          812702999,\n          4144912697,\n          4290775857,\n          1750603025,\n          1694076839,\n          3204075428\n        ];\n      }\n      utils.inherits(SHA224, SHA2562);\n      module.exports = SHA224;\n      SHA224.blockSize = 512;\n      SHA224.outSize = 224;\n      SHA224.hmacStrength = 192;\n      SHA224.padLength = 64;\n      SHA224.prototype._digest = function digest(enc) {\n        if (enc === \"hex\")\n          return utils.toHex32(this.h.slice(0, 7), \"big\");\n        else\n          return utils.split32(this.h.slice(0, 7), \"big\");\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/512.js\n  var require__4 = __commonJS({\n    \"../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/512.js\"(exports3, module) {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      var utils = require_utils();\n      var common = require_common();\n      var assert4 = require_minimalistic_assert();\n      var rotr64_hi = utils.rotr64_hi;\n      var rotr64_lo = utils.rotr64_lo;\n      var shr64_hi = utils.shr64_hi;\n      var shr64_lo = utils.shr64_lo;\n      var sum64 = utils.sum64;\n      var sum64_hi = utils.sum64_hi;\n      var sum64_lo = utils.sum64_lo;\n      var sum64_4_hi = utils.sum64_4_hi;\n      var sum64_4_lo = utils.sum64_4_lo;\n      var sum64_5_hi = utils.sum64_5_hi;\n      var sum64_5_lo = utils.sum64_5_lo;\n      var BlockHash = common.BlockHash;\n      var sha512_K = [\n        1116352408,\n        3609767458,\n        1899447441,\n        602891725,\n        3049323471,\n        3964484399,\n        3921009573,\n        2173295548,\n        961987163,\n        4081628472,\n        1508970993,\n        3053834265,\n        2453635748,\n        2937671579,\n        2870763221,\n        3664609560,\n        3624381080,\n        2734883394,\n        310598401,\n        1164996542,\n        607225278,\n        1323610764,\n        1426881987,\n        3590304994,\n        1925078388,\n        4068182383,\n        2162078206,\n        991336113,\n        2614888103,\n        633803317,\n        3248222580,\n        3479774868,\n        3835390401,\n        2666613458,\n        4022224774,\n        944711139,\n        264347078,\n        2341262773,\n        604807628,\n        2007800933,\n        770255983,\n        1495990901,\n        1249150122,\n        1856431235,\n        1555081692,\n        3175218132,\n        1996064986,\n        2198950837,\n        2554220882,\n        3999719339,\n        2821834349,\n        766784016,\n        2952996808,\n        2566594879,\n        3210313671,\n        3203337956,\n        3336571891,\n        1034457026,\n        3584528711,\n        2466948901,\n        113926993,\n        3758326383,\n        338241895,\n        168717936,\n        666307205,\n        1188179964,\n        773529912,\n        1546045734,\n        1294757372,\n        1522805485,\n        1396182291,\n        2643833823,\n        1695183700,\n        2343527390,\n        1986661051,\n        1014477480,\n        2177026350,\n        1206759142,\n        2456956037,\n        344077627,\n        2730485921,\n        1290863460,\n        2820302411,\n        3158454273,\n        3259730800,\n        3505952657,\n        3345764771,\n        106217008,\n        3516065817,\n        3606008344,\n        3600352804,\n        1432725776,\n        4094571909,\n        1467031594,\n        275423344,\n        851169720,\n        430227734,\n        3100823752,\n        506948616,\n        1363258195,\n        659060556,\n        3750685593,\n        883997877,\n        3785050280,\n        958139571,\n        3318307427,\n        1322822218,\n        3812723403,\n        1537002063,\n        2003034995,\n        1747873779,\n        3602036899,\n        1955562222,\n        1575990012,\n        2024104815,\n        1125592928,\n        2227730452,\n        2716904306,\n        2361852424,\n        442776044,\n        2428436474,\n        593698344,\n        2756734187,\n        3733110249,\n        3204031479,\n        2999351573,\n        3329325298,\n        3815920427,\n        3391569614,\n        3928383900,\n        3515267271,\n        566280711,\n        3940187606,\n        3454069534,\n        4118630271,\n        4000239992,\n        116418474,\n        1914138554,\n        174292421,\n        2731055270,\n        289380356,\n        3203993006,\n        460393269,\n        320620315,\n        685471733,\n        587496836,\n        852142971,\n        1086792851,\n        1017036298,\n        365543100,\n        1126000580,\n        2618297676,\n        1288033470,\n        3409855158,\n        1501505948,\n        4234509866,\n        1607167915,\n        987167468,\n        1816402316,\n        1246189591\n      ];\n      function SHA5122() {\n        if (!(this instanceof SHA5122))\n          return new SHA5122();\n        BlockHash.call(this);\n        this.h = [\n          1779033703,\n          4089235720,\n          3144134277,\n          2227873595,\n          1013904242,\n          4271175723,\n          2773480762,\n          1595750129,\n          1359893119,\n          2917565137,\n          2600822924,\n          725511199,\n          528734635,\n          4215389547,\n          1541459225,\n          327033209\n        ];\n        this.k = sha512_K;\n        this.W = new Array(160);\n      }\n      utils.inherits(SHA5122, BlockHash);\n      module.exports = SHA5122;\n      SHA5122.blockSize = 1024;\n      SHA5122.outSize = 512;\n      SHA5122.hmacStrength = 192;\n      SHA5122.padLength = 128;\n      SHA5122.prototype._prepareBlock = function _prepareBlock(msg, start) {\n        var W = this.W;\n        for (var i = 0; i < 32; i++)\n          W[i] = msg[start + i];\n        for (; i < W.length; i += 2) {\n          var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);\n          var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n          var c1_hi = W[i - 14];\n          var c1_lo = W[i - 13];\n          var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);\n          var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n          var c3_hi = W[i - 32];\n          var c3_lo = W[i - 31];\n          W[i] = sum64_4_hi(\n            c0_hi,\n            c0_lo,\n            c1_hi,\n            c1_lo,\n            c2_hi,\n            c2_lo,\n            c3_hi,\n            c3_lo\n          );\n          W[i + 1] = sum64_4_lo(\n            c0_hi,\n            c0_lo,\n            c1_hi,\n            c1_lo,\n            c2_hi,\n            c2_lo,\n            c3_hi,\n            c3_lo\n          );\n        }\n      };\n      SHA5122.prototype._update = function _update(msg, start) {\n        this._prepareBlock(msg, start);\n        var W = this.W;\n        var ah = this.h[0];\n        var al = this.h[1];\n        var bh = this.h[2];\n        var bl = this.h[3];\n        var ch = this.h[4];\n        var cl = this.h[5];\n        var dh = this.h[6];\n        var dl = this.h[7];\n        var eh = this.h[8];\n        var el = this.h[9];\n        var fh = this.h[10];\n        var fl = this.h[11];\n        var gh = this.h[12];\n        var gl = this.h[13];\n        var hh = this.h[14];\n        var hl = this.h[15];\n        assert4(this.k.length === W.length);\n        for (var i = 0; i < W.length; i += 2) {\n          var c0_hi = hh;\n          var c0_lo = hl;\n          var c1_hi = s1_512_hi(eh, el);\n          var c1_lo = s1_512_lo(eh, el);\n          var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n          var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n          var c3_hi = this.k[i];\n          var c3_lo = this.k[i + 1];\n          var c4_hi = W[i];\n          var c4_lo = W[i + 1];\n          var T1_hi = sum64_5_hi(\n            c0_hi,\n            c0_lo,\n            c1_hi,\n            c1_lo,\n            c2_hi,\n            c2_lo,\n            c3_hi,\n            c3_lo,\n            c4_hi,\n            c4_lo\n          );\n          var T1_lo = sum64_5_lo(\n            c0_hi,\n            c0_lo,\n            c1_hi,\n            c1_lo,\n            c2_hi,\n            c2_lo,\n            c3_hi,\n            c3_lo,\n            c4_hi,\n            c4_lo\n          );\n          c0_hi = s0_512_hi(ah, al);\n          c0_lo = s0_512_lo(ah, al);\n          c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n          c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n          var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n          var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n          hh = gh;\n          hl = gl;\n          gh = fh;\n          gl = fl;\n          fh = eh;\n          fl = el;\n          eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n          el = sum64_lo(dl, dl, T1_hi, T1_lo);\n          dh = ch;\n          dl = cl;\n          ch = bh;\n          cl = bl;\n          bh = ah;\n          bl = al;\n          ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n          al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n        }\n        sum64(this.h, 0, ah, al);\n        sum64(this.h, 2, bh, bl);\n        sum64(this.h, 4, ch, cl);\n        sum64(this.h, 6, dh, dl);\n        sum64(this.h, 8, eh, el);\n        sum64(this.h, 10, fh, fl);\n        sum64(this.h, 12, gh, gl);\n        sum64(this.h, 14, hh, hl);\n      };\n      SHA5122.prototype._digest = function digest(enc) {\n        if (enc === \"hex\")\n          return utils.toHex32(this.h, \"big\");\n        else\n          return utils.split32(this.h, \"big\");\n      };\n      function ch64_hi(xh, xl, yh, yl, zh) {\n        var r2 = xh & yh ^ ~xh & zh;\n        if (r2 < 0)\n          r2 += 4294967296;\n        return r2;\n      }\n      function ch64_lo(xh, xl, yh, yl, zh, zl) {\n        var r2 = xl & yl ^ ~xl & zl;\n        if (r2 < 0)\n          r2 += 4294967296;\n        return r2;\n      }\n      function maj64_hi(xh, xl, yh, yl, zh) {\n        var r2 = xh & yh ^ xh & zh ^ yh & zh;\n        if (r2 < 0)\n          r2 += 4294967296;\n        return r2;\n      }\n      function maj64_lo(xh, xl, yh, yl, zh, zl) {\n        var r2 = xl & yl ^ xl & zl ^ yl & zl;\n        if (r2 < 0)\n          r2 += 4294967296;\n        return r2;\n      }\n      function s0_512_hi(xh, xl) {\n        var c0_hi = rotr64_hi(xh, xl, 28);\n        var c1_hi = rotr64_hi(xl, xh, 2);\n        var c2_hi = rotr64_hi(xl, xh, 7);\n        var r2 = c0_hi ^ c1_hi ^ c2_hi;\n        if (r2 < 0)\n          r2 += 4294967296;\n        return r2;\n      }\n      function s0_512_lo(xh, xl) {\n        var c0_lo = rotr64_lo(xh, xl, 28);\n        var c1_lo = rotr64_lo(xl, xh, 2);\n        var c2_lo = rotr64_lo(xl, xh, 7);\n        var r2 = c0_lo ^ c1_lo ^ c2_lo;\n        if (r2 < 0)\n          r2 += 4294967296;\n        return r2;\n      }\n      function s1_512_hi(xh, xl) {\n        var c0_hi = rotr64_hi(xh, xl, 14);\n        var c1_hi = rotr64_hi(xh, xl, 18);\n        var c2_hi = rotr64_hi(xl, xh, 9);\n        var r2 = c0_hi ^ c1_hi ^ c2_hi;\n        if (r2 < 0)\n          r2 += 4294967296;\n        return r2;\n      }\n      function s1_512_lo(xh, xl) {\n        var c0_lo = rotr64_lo(xh, xl, 14);\n        var c1_lo = rotr64_lo(xh, xl, 18);\n        var c2_lo = rotr64_lo(xl, xh, 9);\n        var r2 = c0_lo ^ c1_lo ^ c2_lo;\n        if (r2 < 0)\n          r2 += 4294967296;\n        return r2;\n      }\n      function g0_512_hi(xh, xl) {\n        var c0_hi = rotr64_hi(xh, xl, 1);\n        var c1_hi = rotr64_hi(xh, xl, 8);\n        var c2_hi = shr64_hi(xh, xl, 7);\n        var r2 = c0_hi ^ c1_hi ^ c2_hi;\n        if (r2 < 0)\n          r2 += 4294967296;\n        return r2;\n      }\n      function g0_512_lo(xh, xl) {\n        var c0_lo = rotr64_lo(xh, xl, 1);\n        var c1_lo = rotr64_lo(xh, xl, 8);\n        var c2_lo = shr64_lo(xh, xl, 7);\n        var r2 = c0_lo ^ c1_lo ^ c2_lo;\n        if (r2 < 0)\n          r2 += 4294967296;\n        return r2;\n      }\n      function g1_512_hi(xh, xl) {\n        var c0_hi = rotr64_hi(xh, xl, 19);\n        var c1_hi = rotr64_hi(xl, xh, 29);\n        var c2_hi = shr64_hi(xh, xl, 6);\n        var r2 = c0_hi ^ c1_hi ^ c2_hi;\n        if (r2 < 0)\n          r2 += 4294967296;\n        return r2;\n      }\n      function g1_512_lo(xh, xl) {\n        var c0_lo = rotr64_lo(xh, xl, 19);\n        var c1_lo = rotr64_lo(xl, xh, 29);\n        var c2_lo = shr64_lo(xh, xl, 6);\n        var r2 = c0_lo ^ c1_lo ^ c2_lo;\n        if (r2 < 0)\n          r2 += 4294967296;\n        return r2;\n      }\n    }\n  });\n\n  // ../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/384.js\n  var require__5 = __commonJS({\n    \"../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/384.js\"(exports3, module) {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      var utils = require_utils();\n      var SHA5122 = require__4();\n      function SHA384() {\n        if (!(this instanceof SHA384))\n          return new SHA384();\n        SHA5122.call(this);\n        this.h = [\n          3418070365,\n          3238371032,\n          1654270250,\n          914150663,\n          2438529370,\n          812702999,\n          355462360,\n          4144912697,\n          1731405415,\n          4290775857,\n          2394180231,\n          1750603025,\n          3675008525,\n          1694076839,\n          1203062813,\n          3204075428\n        ];\n      }\n      utils.inherits(SHA384, SHA5122);\n      module.exports = SHA384;\n      SHA384.blockSize = 1024;\n      SHA384.outSize = 384;\n      SHA384.hmacStrength = 192;\n      SHA384.padLength = 128;\n      SHA384.prototype._digest = function digest(enc) {\n        if (enc === \"hex\")\n          return utils.toHex32(this.h.slice(0, 12), \"big\");\n        else\n          return utils.split32(this.h.slice(0, 12), \"big\");\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha.js\n  var require_sha = __commonJS({\n    \"../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha.js\"(exports3) {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      exports3.sha1 = require__();\n      exports3.sha224 = require__3();\n      exports3.sha256 = require__2();\n      exports3.sha384 = require__5();\n      exports3.sha512 = require__4();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/ripemd.js\n  var require_ripemd = __commonJS({\n    \"../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/ripemd.js\"(exports3) {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      var utils = require_utils();\n      var common = require_common();\n      var rotl32 = utils.rotl32;\n      var sum32 = utils.sum32;\n      var sum32_3 = utils.sum32_3;\n      var sum32_4 = utils.sum32_4;\n      var BlockHash = common.BlockHash;\n      function RIPEMD160() {\n        if (!(this instanceof RIPEMD160))\n          return new RIPEMD160();\n        BlockHash.call(this);\n        this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];\n        this.endian = \"little\";\n      }\n      utils.inherits(RIPEMD160, BlockHash);\n      exports3.ripemd160 = RIPEMD160;\n      RIPEMD160.blockSize = 512;\n      RIPEMD160.outSize = 160;\n      RIPEMD160.hmacStrength = 192;\n      RIPEMD160.padLength = 64;\n      RIPEMD160.prototype._update = function update2(msg, start) {\n        var A = this.h[0];\n        var B = this.h[1];\n        var C = this.h[2];\n        var D = this.h[3];\n        var E = this.h[4];\n        var Ah = A;\n        var Bh = B;\n        var Ch = C;\n        var Dh = D;\n        var Eh = E;\n        for (var j = 0; j < 80; j++) {\n          var T = sum32(\n            rotl32(\n              sum32_4(A, f(j, B, C, D), msg[r2[j] + start], K(j)),\n              s[j]\n            ),\n            E\n          );\n          A = E;\n          E = D;\n          D = rotl32(C, 10);\n          C = B;\n          B = T;\n          T = sum32(\n            rotl32(\n              sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n              sh[j]\n            ),\n            Eh\n          );\n          Ah = Eh;\n          Eh = Dh;\n          Dh = rotl32(Ch, 10);\n          Ch = Bh;\n          Bh = T;\n        }\n        T = sum32_3(this.h[1], C, Dh);\n        this.h[1] = sum32_3(this.h[2], D, Eh);\n        this.h[2] = sum32_3(this.h[3], E, Ah);\n        this.h[3] = sum32_3(this.h[4], A, Bh);\n        this.h[4] = sum32_3(this.h[0], B, Ch);\n        this.h[0] = T;\n      };\n      RIPEMD160.prototype._digest = function digest(enc) {\n        if (enc === \"hex\")\n          return utils.toHex32(this.h, \"little\");\n        else\n          return utils.split32(this.h, \"little\");\n      };\n      function f(j, x, y, z) {\n        if (j <= 15)\n          return x ^ y ^ z;\n        else if (j <= 31)\n          return x & y | ~x & z;\n        else if (j <= 47)\n          return (x | ~y) ^ z;\n        else if (j <= 63)\n          return x & z | y & ~z;\n        else\n          return x ^ (y | ~z);\n      }\n      function K(j) {\n        if (j <= 15)\n          return 0;\n        else if (j <= 31)\n          return 1518500249;\n        else if (j <= 47)\n          return 1859775393;\n        else if (j <= 63)\n          return 2400959708;\n        else\n          return 2840853838;\n      }\n      function Kh(j) {\n        if (j <= 15)\n          return 1352829926;\n        else if (j <= 31)\n          return 1548603684;\n        else if (j <= 47)\n          return 1836072691;\n        else if (j <= 63)\n          return 2053994217;\n        else\n          return 0;\n      }\n      var r2 = [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        7,\n        4,\n        13,\n        1,\n        10,\n        6,\n        15,\n        3,\n        12,\n        0,\n        9,\n        5,\n        2,\n        14,\n        11,\n        8,\n        3,\n        10,\n        14,\n        4,\n        9,\n        15,\n        8,\n        1,\n        2,\n        7,\n        0,\n        6,\n        13,\n        11,\n        5,\n        12,\n        1,\n        9,\n        11,\n        10,\n        0,\n        8,\n        12,\n        4,\n        13,\n        3,\n        7,\n        15,\n        14,\n        5,\n        6,\n        2,\n        4,\n        0,\n        5,\n        9,\n        7,\n        12,\n        2,\n        10,\n        14,\n        1,\n        3,\n        8,\n        11,\n        6,\n        15,\n        13\n      ];\n      var rh = [\n        5,\n        14,\n        7,\n        0,\n        9,\n        2,\n        11,\n        4,\n        13,\n        6,\n        15,\n        8,\n        1,\n        10,\n        3,\n        12,\n        6,\n        11,\n        3,\n        7,\n        0,\n        13,\n        5,\n        10,\n        14,\n        15,\n        8,\n        12,\n        4,\n        9,\n        1,\n        2,\n        15,\n        5,\n        1,\n        3,\n        7,\n        14,\n        6,\n        9,\n        11,\n        8,\n        12,\n        2,\n        10,\n        0,\n        4,\n        13,\n        8,\n        6,\n        4,\n        1,\n        3,\n        11,\n        15,\n        0,\n        5,\n        12,\n        2,\n        13,\n        9,\n        7,\n        10,\n        14,\n        12,\n        15,\n        10,\n        4,\n        1,\n        5,\n        8,\n        7,\n        6,\n        2,\n        13,\n        14,\n        0,\n        3,\n        9,\n        11\n      ];\n      var s = [\n        11,\n        14,\n        15,\n        12,\n        5,\n        8,\n        7,\n        9,\n        11,\n        13,\n        14,\n        15,\n        6,\n        7,\n        9,\n        8,\n        7,\n        6,\n        8,\n        13,\n        11,\n        9,\n        7,\n        15,\n        7,\n        12,\n        15,\n        9,\n        11,\n        7,\n        13,\n        12,\n        11,\n        13,\n        6,\n        7,\n        14,\n        9,\n        13,\n        15,\n        14,\n        8,\n        13,\n        6,\n        5,\n        12,\n        7,\n        5,\n        11,\n        12,\n        14,\n        15,\n        14,\n        15,\n        9,\n        8,\n        9,\n        14,\n        5,\n        6,\n        8,\n        6,\n        5,\n        12,\n        9,\n        15,\n        5,\n        11,\n        6,\n        8,\n        13,\n        12,\n        5,\n        12,\n        13,\n        14,\n        11,\n        8,\n        5,\n        6\n      ];\n      var sh = [\n        8,\n        9,\n        9,\n        11,\n        13,\n        15,\n        15,\n        5,\n        7,\n        7,\n        8,\n        11,\n        14,\n        14,\n        12,\n        6,\n        9,\n        13,\n        15,\n        7,\n        12,\n        8,\n        9,\n        11,\n        7,\n        7,\n        12,\n        7,\n        6,\n        15,\n        13,\n        11,\n        9,\n        7,\n        15,\n        11,\n        8,\n        6,\n        6,\n        14,\n        12,\n        13,\n        5,\n        14,\n        13,\n        13,\n        7,\n        5,\n        15,\n        5,\n        8,\n        11,\n        14,\n        14,\n        6,\n        14,\n        6,\n        9,\n        12,\n        9,\n        12,\n        5,\n        15,\n        8,\n        8,\n        5,\n        12,\n        9,\n        12,\n        5,\n        14,\n        6,\n        8,\n        13,\n        6,\n        5,\n        15,\n        13,\n        11,\n        11\n      ];\n    }\n  });\n\n  // ../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/hmac.js\n  var require_hmac = __commonJS({\n    \"../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/hmac.js\"(exports3, module) {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      var utils = require_utils();\n      var assert4 = require_minimalistic_assert();\n      function Hmac(hash4, key2, enc) {\n        if (!(this instanceof Hmac))\n          return new Hmac(hash4, key2, enc);\n        this.Hash = hash4;\n        this.blockSize = hash4.blockSize / 8;\n        this.outSize = hash4.outSize / 8;\n        this.inner = null;\n        this.outer = null;\n        this._init(utils.toArray(key2, enc));\n      }\n      module.exports = Hmac;\n      Hmac.prototype._init = function init3(key2) {\n        if (key2.length > this.blockSize)\n          key2 = new this.Hash().update(key2).digest();\n        assert4(key2.length <= this.blockSize);\n        for (var i = key2.length; i < this.blockSize; i++)\n          key2.push(0);\n        for (i = 0; i < key2.length; i++)\n          key2[i] ^= 54;\n        this.inner = new this.Hash().update(key2);\n        for (i = 0; i < key2.length; i++)\n          key2[i] ^= 106;\n        this.outer = new this.Hash().update(key2);\n      };\n      Hmac.prototype.update = function update2(msg, enc) {\n        this.inner.update(msg, enc);\n        return this;\n      };\n      Hmac.prototype.digest = function digest(enc) {\n        this.outer.update(this.inner.digest());\n        return this.outer.digest(enc);\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash.js\n  var require_hash = __commonJS({\n    \"../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash.js\"(exports3) {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      var hash4 = exports3;\n      hash4.utils = require_utils();\n      hash4.common = require_common();\n      hash4.sha = require_sha();\n      hash4.ripemd = require_ripemd();\n      hash4.hmac = require_hmac();\n      hash4.sha1 = hash4.sha.sha1;\n      hash4.sha256 = hash4.sha.sha256;\n      hash4.sha224 = hash4.sha.sha224;\n      hash4.sha384 = hash4.sha.sha384;\n      hash4.sha512 = hash4.sha.sha512;\n      hash4.ripemd160 = hash4.ripemd.ripemd160;\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+signing-key@5.8.0/node_modules/@ethersproject/signing-key/lib.esm/elliptic.js\n  function createCommonjsModule(fn, basedir, module) {\n    return module = {\n      path: basedir,\n      exports: {},\n      require: function(path, base2) {\n        return commonjsRequire(path, base2 === void 0 || base2 === null ? module.path : base2);\n      }\n    }, fn(module, module.exports), module.exports;\n  }\n  function commonjsRequire() {\n    throw new Error(\"Dynamic requires are not currently supported by @rollup/plugin-commonjs\");\n  }\n  function assert2(val, msg) {\n    if (!val)\n      throw new Error(msg || \"Assertion failed\");\n  }\n  function BaseCurve(type, conf) {\n    this.type = type;\n    this.p = new import_bn2.default(conf.p, 16);\n    this.red = conf.prime ? import_bn2.default.red(conf.prime) : import_bn2.default.mont(this.p);\n    this.zero = new import_bn2.default(0).toRed(this.red);\n    this.one = new import_bn2.default(1).toRed(this.red);\n    this.two = new import_bn2.default(2).toRed(this.red);\n    this.n = conf.n && new import_bn2.default(conf.n, 16);\n    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n    this._wnafT1 = new Array(4);\n    this._wnafT2 = new Array(4);\n    this._wnafT3 = new Array(4);\n    this._wnafT4 = new Array(4);\n    this._bitLength = this.n ? this.n.bitLength() : 0;\n    var adjustCount = this.n && this.p.div(this.n);\n    if (!adjustCount || adjustCount.cmpn(100) > 0) {\n      this.redN = null;\n    } else {\n      this._maxwellTrick = true;\n      this.redN = this.n.toRed(this.red);\n    }\n  }\n  function BasePoint(curve, type) {\n    this.curve = curve;\n    this.type = type;\n    this.precomputed = null;\n  }\n  function ShortCurve(conf) {\n    base.call(this, \"short\", conf);\n    this.a = new import_bn2.default(conf.a, 16).toRed(this.red);\n    this.b = new import_bn2.default(conf.b, 16).toRed(this.red);\n    this.tinv = this.two.redInvm();\n    this.zeroA = this.a.fromRed().cmpn(0) === 0;\n    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\n    this.endo = this._getEndomorphism(conf);\n    this._endoWnafT1 = new Array(4);\n    this._endoWnafT2 = new Array(4);\n  }\n  function Point(curve, x, y, isRed) {\n    base.BasePoint.call(this, curve, \"affine\");\n    if (x === null && y === null) {\n      this.x = null;\n      this.y = null;\n      this.inf = true;\n    } else {\n      this.x = new import_bn2.default(x, 16);\n      this.y = new import_bn2.default(y, 16);\n      if (isRed) {\n        this.x.forceRed(this.curve.red);\n        this.y.forceRed(this.curve.red);\n      }\n      if (!this.x.red)\n        this.x = this.x.toRed(this.curve.red);\n      if (!this.y.red)\n        this.y = this.y.toRed(this.curve.red);\n      this.inf = false;\n    }\n  }\n  function JPoint(curve, x, y, z) {\n    base.BasePoint.call(this, curve, \"jacobian\");\n    if (x === null && y === null && z === null) {\n      this.x = this.curve.one;\n      this.y = this.curve.one;\n      this.z = new import_bn2.default(0);\n    } else {\n      this.x = new import_bn2.default(x, 16);\n      this.y = new import_bn2.default(y, 16);\n      this.z = new import_bn2.default(z, 16);\n    }\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n    this.zOne = this.z === this.curve.one;\n  }\n  function HmacDRBG(options) {\n    if (!(this instanceof HmacDRBG))\n      return new HmacDRBG(options);\n    this.hash = options.hash;\n    this.predResist = !!options.predResist;\n    this.outLen = this.hash.outSize;\n    this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n    this._reseed = null;\n    this.reseedInterval = null;\n    this.K = null;\n    this.V = null;\n    var entropy = utils_1.toArray(options.entropy, options.entropyEnc || \"hex\");\n    var nonce = utils_1.toArray(options.nonce, options.nonceEnc || \"hex\");\n    var pers = utils_1.toArray(options.pers, options.persEnc || \"hex\");\n    minimalisticAssert(\n      entropy.length >= this.minEntropy / 8,\n      \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\"\n    );\n    this._init(entropy, nonce, pers);\n  }\n  function KeyPair(ec2, options) {\n    this.ec = ec2;\n    this.priv = null;\n    this.pub = null;\n    if (options.priv)\n      this._importPrivate(options.priv, options.privEnc);\n    if (options.pub)\n      this._importPublic(options.pub, options.pubEnc);\n  }\n  function Signature(options, enc) {\n    if (options instanceof Signature)\n      return options;\n    if (this._importDER(options, enc))\n      return;\n    assert$4(options.r && options.s, \"Signature without r or s\");\n    this.r = new import_bn2.default(options.r, 16);\n    this.s = new import_bn2.default(options.s, 16);\n    if (options.recoveryParam === void 0)\n      this.recoveryParam = null;\n    else\n      this.recoveryParam = options.recoveryParam;\n  }\n  function Position() {\n    this.place = 0;\n  }\n  function getLength(buf, p) {\n    var initial = buf[p.place++];\n    if (!(initial & 128)) {\n      return initial;\n    }\n    var octetLen = initial & 15;\n    if (octetLen === 0 || octetLen > 4) {\n      return false;\n    }\n    if (buf[p.place] === 0) {\n      return false;\n    }\n    var val = 0;\n    for (var i = 0, off2 = p.place; i < octetLen; i++, off2++) {\n      val <<= 8;\n      val |= buf[off2];\n      val >>>= 0;\n    }\n    if (val <= 127) {\n      return false;\n    }\n    p.place = off2;\n    return val;\n  }\n  function rmPadding(buf) {\n    var i = 0;\n    var len = buf.length - 1;\n    while (!buf[i] && !(buf[i + 1] & 128) && i < len) {\n      i++;\n    }\n    if (i === 0) {\n      return buf;\n    }\n    return buf.slice(i);\n  }\n  function constructLength(arr, len) {\n    if (len < 128) {\n      arr.push(len);\n      return;\n    }\n    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n    arr.push(octets | 128);\n    while (--octets) {\n      arr.push(len >>> (octets << 3) & 255);\n    }\n    arr.push(len);\n  }\n  function EC(options) {\n    if (!(this instanceof EC))\n      return new EC(options);\n    if (typeof options === \"string\") {\n      assert$5(\n        Object.prototype.hasOwnProperty.call(curves_1, options),\n        \"Unknown curve \" + options\n      );\n      options = curves_1[options];\n    }\n    if (options instanceof curves_1.PresetCurve)\n      options = { curve: options };\n    this.curve = options.curve.curve;\n    this.n = this.curve.n;\n    this.nh = this.n.ushrn(1);\n    this.g = this.curve.g;\n    this.g = options.curve.g;\n    this.g.precompute(options.curve.n.bitLength() + 1);\n    this.hash = options.hash || options.curve.hash;\n  }\n  var import_bn2, import_hash2, minimalisticAssert, utils_1, utils_1$1, getNAF, getJSF, assert$1, base, inherits_browser, assert$2, short_1, curve_1, curves_1, hmacDrbg, assert$3, key, assert$4, signature, rand, assert$5, ec, elliptic_1, EC$1;\n  var init_elliptic = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+signing-key@5.8.0/node_modules/@ethersproject/signing-key/lib.esm/elliptic.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      import_bn2 = __toESM(require_bn());\n      import_hash2 = __toESM(require_hash());\n      minimalisticAssert = assert2;\n      assert2.equal = function assertEqual(l, r2, msg) {\n        if (l != r2)\n          throw new Error(msg || \"Assertion failed: \" + l + \" != \" + r2);\n      };\n      utils_1 = createCommonjsModule(function(module, exports3) {\n        \"use strict\";\n        var utils = exports3;\n        function toArray(msg, enc) {\n          if (Array.isArray(msg))\n            return msg.slice();\n          if (!msg)\n            return [];\n          var res = [];\n          if (typeof msg !== \"string\") {\n            for (var i = 0; i < msg.length; i++)\n              res[i] = msg[i] | 0;\n            return res;\n          }\n          if (enc === \"hex\") {\n            msg = msg.replace(/[^a-z0-9]+/ig, \"\");\n            if (msg.length % 2 !== 0)\n              msg = \"0\" + msg;\n            for (var i = 0; i < msg.length; i += 2)\n              res.push(parseInt(msg[i] + msg[i + 1], 16));\n          } else {\n            for (var i = 0; i < msg.length; i++) {\n              var c = msg.charCodeAt(i);\n              var hi = c >> 8;\n              var lo = c & 255;\n              if (hi)\n                res.push(hi, lo);\n              else\n                res.push(lo);\n            }\n          }\n          return res;\n        }\n        utils.toArray = toArray;\n        function zero2(word) {\n          if (word.length === 1)\n            return \"0\" + word;\n          else\n            return word;\n        }\n        utils.zero2 = zero2;\n        function toHex2(msg) {\n          var res = \"\";\n          for (var i = 0; i < msg.length; i++)\n            res += zero2(msg[i].toString(16));\n          return res;\n        }\n        utils.toHex = toHex2;\n        utils.encode = function encode4(arr, enc) {\n          if (enc === \"hex\")\n            return toHex2(arr);\n          else\n            return arr;\n        };\n      });\n      utils_1$1 = createCommonjsModule(function(module, exports3) {\n        \"use strict\";\n        var utils = exports3;\n        utils.assert = minimalisticAssert;\n        utils.toArray = utils_1.toArray;\n        utils.zero2 = utils_1.zero2;\n        utils.toHex = utils_1.toHex;\n        utils.encode = utils_1.encode;\n        function getNAF2(num, w, bits) {\n          var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n          var i;\n          for (i = 0; i < naf.length; i += 1) {\n            naf[i] = 0;\n          }\n          var ws = 1 << w + 1;\n          var k = num.clone();\n          for (i = 0; i < naf.length; i++) {\n            var z;\n            var mod2 = k.andln(ws - 1);\n            if (k.isOdd()) {\n              if (mod2 > (ws >> 1) - 1)\n                z = (ws >> 1) - mod2;\n              else\n                z = mod2;\n              k.isubn(z);\n            } else {\n              z = 0;\n            }\n            naf[i] = z;\n            k.iushrn(1);\n          }\n          return naf;\n        }\n        utils.getNAF = getNAF2;\n        function getJSF2(k1, k2) {\n          var jsf = [\n            [],\n            []\n          ];\n          k1 = k1.clone();\n          k2 = k2.clone();\n          var d1 = 0;\n          var d2 = 0;\n          var m8;\n          while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n            var m14 = k1.andln(3) + d1 & 3;\n            var m24 = k2.andln(3) + d2 & 3;\n            if (m14 === 3)\n              m14 = -1;\n            if (m24 === 3)\n              m24 = -1;\n            var u1;\n            if ((m14 & 1) === 0) {\n              u1 = 0;\n            } else {\n              m8 = k1.andln(7) + d1 & 7;\n              if ((m8 === 3 || m8 === 5) && m24 === 2)\n                u1 = -m14;\n              else\n                u1 = m14;\n            }\n            jsf[0].push(u1);\n            var u2;\n            if ((m24 & 1) === 0) {\n              u2 = 0;\n            } else {\n              m8 = k2.andln(7) + d2 & 7;\n              if ((m8 === 3 || m8 === 5) && m14 === 2)\n                u2 = -m24;\n              else\n                u2 = m24;\n            }\n            jsf[1].push(u2);\n            if (2 * d1 === u1 + 1)\n              d1 = 1 - d1;\n            if (2 * d2 === u2 + 1)\n              d2 = 1 - d2;\n            k1.iushrn(1);\n            k2.iushrn(1);\n          }\n          return jsf;\n        }\n        utils.getJSF = getJSF2;\n        function cachedProperty(obj, name, computer) {\n          var key2 = \"_\" + name;\n          obj.prototype[name] = function cachedProperty2() {\n            return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);\n          };\n        }\n        utils.cachedProperty = cachedProperty;\n        function parseBytes(bytes3) {\n          return typeof bytes3 === \"string\" ? utils.toArray(bytes3, \"hex\") : bytes3;\n        }\n        utils.parseBytes = parseBytes;\n        function intFromLE(bytes3) {\n          return new import_bn2.default(bytes3, \"hex\", \"le\");\n        }\n        utils.intFromLE = intFromLE;\n      });\n      getNAF = utils_1$1.getNAF;\n      getJSF = utils_1$1.getJSF;\n      assert$1 = utils_1$1.assert;\n      base = BaseCurve;\n      BaseCurve.prototype.point = function point() {\n        throw new Error(\"Not implemented\");\n      };\n      BaseCurve.prototype.validate = function validate() {\n        throw new Error(\"Not implemented\");\n      };\n      BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n        assert$1(p.precomputed);\n        var doubles = p._getDoubles();\n        var naf = getNAF(k, 1, this._bitLength);\n        var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);\n        I /= 3;\n        var repr = [];\n        var j;\n        var nafW;\n        for (j = 0; j < naf.length; j += doubles.step) {\n          nafW = 0;\n          for (var l = j + doubles.step - 1; l >= j; l--)\n            nafW = (nafW << 1) + naf[l];\n          repr.push(nafW);\n        }\n        var a = this.jpoint(null, null, null);\n        var b2 = this.jpoint(null, null, null);\n        for (var i = I; i > 0; i--) {\n          for (j = 0; j < repr.length; j++) {\n            nafW = repr[j];\n            if (nafW === i)\n              b2 = b2.mixedAdd(doubles.points[j]);\n            else if (nafW === -i)\n              b2 = b2.mixedAdd(doubles.points[j].neg());\n          }\n          a = a.add(b2);\n        }\n        return a.toP();\n      };\n      BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n        var w = 4;\n        var nafPoints = p._getNAFPoints(w);\n        w = nafPoints.wnd;\n        var wnd = nafPoints.points;\n        var naf = getNAF(k, w, this._bitLength);\n        var acc = this.jpoint(null, null, null);\n        for (var i = naf.length - 1; i >= 0; i--) {\n          for (var l = 0; i >= 0 && naf[i] === 0; i--)\n            l++;\n          if (i >= 0)\n            l++;\n          acc = acc.dblp(l);\n          if (i < 0)\n            break;\n          var z = naf[i];\n          assert$1(z !== 0);\n          if (p.type === \"affine\") {\n            if (z > 0)\n              acc = acc.mixedAdd(wnd[z - 1 >> 1]);\n            else\n              acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());\n          } else {\n            if (z > 0)\n              acc = acc.add(wnd[z - 1 >> 1]);\n            else\n              acc = acc.add(wnd[-z - 1 >> 1].neg());\n          }\n        }\n        return p.type === \"affine\" ? acc.toP() : acc;\n      };\n      BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {\n        var wndWidth = this._wnafT1;\n        var wnd = this._wnafT2;\n        var naf = this._wnafT3;\n        var max = 0;\n        var i;\n        var j;\n        var p;\n        for (i = 0; i < len; i++) {\n          p = points[i];\n          var nafPoints = p._getNAFPoints(defW);\n          wndWidth[i] = nafPoints.wnd;\n          wnd[i] = nafPoints.points;\n        }\n        for (i = len - 1; i >= 1; i -= 2) {\n          var a = i - 1;\n          var b2 = i;\n          if (wndWidth[a] !== 1 || wndWidth[b2] !== 1) {\n            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);\n            naf[b2] = getNAF(coeffs[b2], wndWidth[b2], this._bitLength);\n            max = Math.max(naf[a].length, max);\n            max = Math.max(naf[b2].length, max);\n            continue;\n          }\n          var comb = [\n            points[a],\n            /* 1 */\n            null,\n            /* 3 */\n            null,\n            /* 5 */\n            points[b2]\n            /* 7 */\n          ];\n          if (points[a].y.cmp(points[b2].y) === 0) {\n            comb[1] = points[a].add(points[b2]);\n            comb[2] = points[a].toJ().mixedAdd(points[b2].neg());\n          } else if (points[a].y.cmp(points[b2].y.redNeg()) === 0) {\n            comb[1] = points[a].toJ().mixedAdd(points[b2]);\n            comb[2] = points[a].add(points[b2].neg());\n          } else {\n            comb[1] = points[a].toJ().mixedAdd(points[b2]);\n            comb[2] = points[a].toJ().mixedAdd(points[b2].neg());\n          }\n          var index = [\n            -3,\n            /* -1 -1 */\n            -1,\n            /* -1 0 */\n            -5,\n            /* -1 1 */\n            -7,\n            /* 0 -1 */\n            0,\n            /* 0 0 */\n            7,\n            /* 0 1 */\n            5,\n            /* 1 -1 */\n            1,\n            /* 1 0 */\n            3\n            /* 1 1 */\n          ];\n          var jsf = getJSF(coeffs[a], coeffs[b2]);\n          max = Math.max(jsf[0].length, max);\n          naf[a] = new Array(max);\n          naf[b2] = new Array(max);\n          for (j = 0; j < max; j++) {\n            var ja = jsf[0][j] | 0;\n            var jb = jsf[1][j] | 0;\n            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n            naf[b2][j] = 0;\n            wnd[a] = comb;\n          }\n        }\n        var acc = this.jpoint(null, null, null);\n        var tmp = this._wnafT4;\n        for (i = max; i >= 0; i--) {\n          var k = 0;\n          while (i >= 0) {\n            var zero = true;\n            for (j = 0; j < len; j++) {\n              tmp[j] = naf[j][i] | 0;\n              if (tmp[j] !== 0)\n                zero = false;\n            }\n            if (!zero)\n              break;\n            k++;\n            i--;\n          }\n          if (i >= 0)\n            k++;\n          acc = acc.dblp(k);\n          if (i < 0)\n            break;\n          for (j = 0; j < len; j++) {\n            var z = tmp[j];\n            p;\n            if (z === 0)\n              continue;\n            else if (z > 0)\n              p = wnd[j][z - 1 >> 1];\n            else if (z < 0)\n              p = wnd[j][-z - 1 >> 1].neg();\n            if (p.type === \"affine\")\n              acc = acc.mixedAdd(p);\n            else\n              acc = acc.add(p);\n          }\n        }\n        for (i = 0; i < len; i++)\n          wnd[i] = null;\n        if (jacobianResult)\n          return acc;\n        else\n          return acc.toP();\n      };\n      BaseCurve.BasePoint = BasePoint;\n      BasePoint.prototype.eq = function eq() {\n        throw new Error(\"Not implemented\");\n      };\n      BasePoint.prototype.validate = function validate2() {\n        return this.curve.validate(this);\n      };\n      BaseCurve.prototype.decodePoint = function decodePoint(bytes3, enc) {\n        bytes3 = utils_1$1.toArray(bytes3, enc);\n        var len = this.p.byteLength();\n        if ((bytes3[0] === 4 || bytes3[0] === 6 || bytes3[0] === 7) && bytes3.length - 1 === 2 * len) {\n          if (bytes3[0] === 6)\n            assert$1(bytes3[bytes3.length - 1] % 2 === 0);\n          else if (bytes3[0] === 7)\n            assert$1(bytes3[bytes3.length - 1] % 2 === 1);\n          var res = this.point(\n            bytes3.slice(1, 1 + len),\n            bytes3.slice(1 + len, 1 + 2 * len)\n          );\n          return res;\n        } else if ((bytes3[0] === 2 || bytes3[0] === 3) && bytes3.length - 1 === len) {\n          return this.pointFromX(bytes3.slice(1, 1 + len), bytes3[0] === 3);\n        }\n        throw new Error(\"Unknown point format\");\n      };\n      BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n        return this.encode(enc, true);\n      };\n      BasePoint.prototype._encode = function _encode2(compact) {\n        var len = this.curve.p.byteLength();\n        var x = this.getX().toArray(\"be\", len);\n        if (compact)\n          return [this.getY().isEven() ? 2 : 3].concat(x);\n        return [4].concat(x, this.getY().toArray(\"be\", len));\n      };\n      BasePoint.prototype.encode = function encode3(enc, compact) {\n        return utils_1$1.encode(this._encode(compact), enc);\n      };\n      BasePoint.prototype.precompute = function precompute(power) {\n        if (this.precomputed)\n          return this;\n        var precomputed = {\n          doubles: null,\n          naf: null,\n          beta: null\n        };\n        precomputed.naf = this._getNAFPoints(8);\n        precomputed.doubles = this._getDoubles(4, power);\n        precomputed.beta = this._getBeta();\n        this.precomputed = precomputed;\n        return this;\n      };\n      BasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n        if (!this.precomputed)\n          return false;\n        var doubles = this.precomputed.doubles;\n        if (!doubles)\n          return false;\n        return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n      };\n      BasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n        if (this.precomputed && this.precomputed.doubles)\n          return this.precomputed.doubles;\n        var doubles = [this];\n        var acc = this;\n        for (var i = 0; i < power; i += step) {\n          for (var j = 0; j < step; j++)\n            acc = acc.dbl();\n          doubles.push(acc);\n        }\n        return {\n          step,\n          points: doubles\n        };\n      };\n      BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n        if (this.precomputed && this.precomputed.naf)\n          return this.precomputed.naf;\n        var res = [this];\n        var max = (1 << wnd) - 1;\n        var dbl3 = max === 1 ? null : this.dbl();\n        for (var i = 1; i < max; i++)\n          res[i] = res[i - 1].add(dbl3);\n        return {\n          wnd,\n          points: res\n        };\n      };\n      BasePoint.prototype._getBeta = function _getBeta() {\n        return null;\n      };\n      BasePoint.prototype.dblp = function dblp(k) {\n        var r2 = this;\n        for (var i = 0; i < k; i++)\n          r2 = r2.dbl();\n        return r2;\n      };\n      inherits_browser = createCommonjsModule(function(module) {\n        if (typeof Object.create === \"function\") {\n          module.exports = function inherits(ctor, superCtor) {\n            if (superCtor) {\n              ctor.super_ = superCtor;\n              ctor.prototype = Object.create(superCtor.prototype, {\n                constructor: {\n                  value: ctor,\n                  enumerable: false,\n                  writable: true,\n                  configurable: true\n                }\n              });\n            }\n          };\n        } else {\n          module.exports = function inherits(ctor, superCtor) {\n            if (superCtor) {\n              ctor.super_ = superCtor;\n              var TempCtor = function() {\n              };\n              TempCtor.prototype = superCtor.prototype;\n              ctor.prototype = new TempCtor();\n              ctor.prototype.constructor = ctor;\n            }\n          };\n        }\n      });\n      assert$2 = utils_1$1.assert;\n      inherits_browser(ShortCurve, base);\n      short_1 = ShortCurve;\n      ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n        if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)\n          return;\n        var beta;\n        var lambda;\n        if (conf.beta) {\n          beta = new import_bn2.default(conf.beta, 16).toRed(this.red);\n        } else {\n          var betas = this._getEndoRoots(this.p);\n          beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n          beta = beta.toRed(this.red);\n        }\n        if (conf.lambda) {\n          lambda = new import_bn2.default(conf.lambda, 16);\n        } else {\n          var lambdas = this._getEndoRoots(this.n);\n          if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n            lambda = lambdas[0];\n          } else {\n            lambda = lambdas[1];\n            assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n          }\n        }\n        var basis;\n        if (conf.basis) {\n          basis = conf.basis.map(function(vec) {\n            return {\n              a: new import_bn2.default(vec.a, 16),\n              b: new import_bn2.default(vec.b, 16)\n            };\n          });\n        } else {\n          basis = this._getEndoBasis(lambda);\n        }\n        return {\n          beta,\n          lambda,\n          basis\n        };\n      };\n      ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n        var red = num === this.p ? this.red : import_bn2.default.mont(num);\n        var tinv = new import_bn2.default(2).toRed(red).redInvm();\n        var ntinv = tinv.redNeg();\n        var s = new import_bn2.default(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n        var l1 = ntinv.redAdd(s).fromRed();\n        var l2 = ntinv.redSub(s).fromRed();\n        return [l1, l2];\n      };\n      ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n        var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));\n        var u = lambda;\n        var v = this.n.clone();\n        var x1 = new import_bn2.default(1);\n        var y1 = new import_bn2.default(0);\n        var x2 = new import_bn2.default(0);\n        var y2 = new import_bn2.default(1);\n        var a0;\n        var b0;\n        var a1;\n        var b1;\n        var a2;\n        var b2;\n        var prevR;\n        var i = 0;\n        var r2;\n        var x;\n        while (u.cmpn(0) !== 0) {\n          var q = v.div(u);\n          r2 = v.sub(q.mul(u));\n          x = x2.sub(q.mul(x1));\n          var y = y2.sub(q.mul(y1));\n          if (!a1 && r2.cmp(aprxSqrt) < 0) {\n            a0 = prevR.neg();\n            b0 = x1;\n            a1 = r2.neg();\n            b1 = x;\n          } else if (a1 && ++i === 2) {\n            break;\n          }\n          prevR = r2;\n          v = u;\n          u = r2;\n          x2 = x1;\n          x1 = x;\n          y2 = y1;\n          y1 = y;\n        }\n        a2 = r2.neg();\n        b2 = x;\n        var len1 = a1.sqr().add(b1.sqr());\n        var len2 = a2.sqr().add(b2.sqr());\n        if (len2.cmp(len1) >= 0) {\n          a2 = a0;\n          b2 = b0;\n        }\n        if (a1.negative) {\n          a1 = a1.neg();\n          b1 = b1.neg();\n        }\n        if (a2.negative) {\n          a2 = a2.neg();\n          b2 = b2.neg();\n        }\n        return [\n          { a: a1, b: b1 },\n          { a: a2, b: b2 }\n        ];\n      };\n      ShortCurve.prototype._endoSplit = function _endoSplit(k) {\n        var basis = this.endo.basis;\n        var v1 = basis[0];\n        var v2 = basis[1];\n        var c1 = v2.b.mul(k).divRound(this.n);\n        var c2 = v1.b.neg().mul(k).divRound(this.n);\n        var p1 = c1.mul(v1.a);\n        var p2 = c2.mul(v2.a);\n        var q1 = c1.mul(v1.b);\n        var q2 = c2.mul(v2.b);\n        var k1 = k.sub(p1).sub(p2);\n        var k2 = q1.add(q2).neg();\n        return { k1, k2 };\n      };\n      ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n        x = new import_bn2.default(x, 16);\n        if (!x.red)\n          x = x.toRed(this.red);\n        var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n        var y = y2.redSqrt();\n        if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n          throw new Error(\"invalid point\");\n        var isOdd = y.fromRed().isOdd();\n        if (odd && !isOdd || !odd && isOdd)\n          y = y.redNeg();\n        return this.point(x, y);\n      };\n      ShortCurve.prototype.validate = function validate3(point3) {\n        if (point3.inf)\n          return true;\n        var x = point3.x;\n        var y = point3.y;\n        var ax = this.a.redMul(x);\n        var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n        return y.redSqr().redISub(rhs).cmpn(0) === 0;\n      };\n      ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n        var npoints = this._endoWnafT1;\n        var ncoeffs = this._endoWnafT2;\n        for (var i = 0; i < points.length; i++) {\n          var split3 = this._endoSplit(coeffs[i]);\n          var p = points[i];\n          var beta = p._getBeta();\n          if (split3.k1.negative) {\n            split3.k1.ineg();\n            p = p.neg(true);\n          }\n          if (split3.k2.negative) {\n            split3.k2.ineg();\n            beta = beta.neg(true);\n          }\n          npoints[i * 2] = p;\n          npoints[i * 2 + 1] = beta;\n          ncoeffs[i * 2] = split3.k1;\n          ncoeffs[i * 2 + 1] = split3.k2;\n        }\n        var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);\n        for (var j = 0; j < i * 2; j++) {\n          npoints[j] = null;\n          ncoeffs[j] = null;\n        }\n        return res;\n      };\n      inherits_browser(Point, base.BasePoint);\n      ShortCurve.prototype.point = function point2(x, y, isRed) {\n        return new Point(this, x, y, isRed);\n      };\n      ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n        return Point.fromJSON(this, obj, red);\n      };\n      Point.prototype._getBeta = function _getBeta2() {\n        if (!this.curve.endo)\n          return;\n        var pre = this.precomputed;\n        if (pre && pre.beta)\n          return pre.beta;\n        var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n        if (pre) {\n          var curve = this.curve;\n          var endoMul = function(p) {\n            return curve.point(p.x.redMul(curve.endo.beta), p.y);\n          };\n          pre.beta = beta;\n          beta.precomputed = {\n            beta: null,\n            naf: pre.naf && {\n              wnd: pre.naf.wnd,\n              points: pre.naf.points.map(endoMul)\n            },\n            doubles: pre.doubles && {\n              step: pre.doubles.step,\n              points: pre.doubles.points.map(endoMul)\n            }\n          };\n        }\n        return beta;\n      };\n      Point.prototype.toJSON = function toJSON() {\n        if (!this.precomputed)\n          return [this.x, this.y];\n        return [this.x, this.y, this.precomputed && {\n          doubles: this.precomputed.doubles && {\n            step: this.precomputed.doubles.step,\n            points: this.precomputed.doubles.points.slice(1)\n          },\n          naf: this.precomputed.naf && {\n            wnd: this.precomputed.naf.wnd,\n            points: this.precomputed.naf.points.slice(1)\n          }\n        }];\n      };\n      Point.fromJSON = function fromJSON(curve, obj, red) {\n        if (typeof obj === \"string\")\n          obj = JSON.parse(obj);\n        var res = curve.point(obj[0], obj[1], red);\n        if (!obj[2])\n          return res;\n        function obj2point(obj2) {\n          return curve.point(obj2[0], obj2[1], red);\n        }\n        var pre = obj[2];\n        res.precomputed = {\n          beta: null,\n          doubles: pre.doubles && {\n            step: pre.doubles.step,\n            points: [res].concat(pre.doubles.points.map(obj2point))\n          },\n          naf: pre.naf && {\n            wnd: pre.naf.wnd,\n            points: [res].concat(pre.naf.points.map(obj2point))\n          }\n        };\n        return res;\n      };\n      Point.prototype.inspect = function inspect() {\n        if (this.isInfinity())\n          return \"<EC Point Infinity>\";\n        return \"<EC Point x: \" + this.x.fromRed().toString(16, 2) + \" y: \" + this.y.fromRed().toString(16, 2) + \">\";\n      };\n      Point.prototype.isInfinity = function isInfinity() {\n        return this.inf;\n      };\n      Point.prototype.add = function add(p) {\n        if (this.inf)\n          return p;\n        if (p.inf)\n          return this;\n        if (this.eq(p))\n          return this.dbl();\n        if (this.neg().eq(p))\n          return this.curve.point(null, null);\n        if (this.x.cmp(p.x) === 0)\n          return this.curve.point(null, null);\n        var c = this.y.redSub(p.y);\n        if (c.cmpn(0) !== 0)\n          c = c.redMul(this.x.redSub(p.x).redInvm());\n        var nx = c.redSqr().redISub(this.x).redISub(p.x);\n        var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n        return this.curve.point(nx, ny);\n      };\n      Point.prototype.dbl = function dbl() {\n        if (this.inf)\n          return this;\n        var ys1 = this.y.redAdd(this.y);\n        if (ys1.cmpn(0) === 0)\n          return this.curve.point(null, null);\n        var a = this.curve.a;\n        var x2 = this.x.redSqr();\n        var dyinv = ys1.redInvm();\n        var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n        var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n        var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n        return this.curve.point(nx, ny);\n      };\n      Point.prototype.getX = function getX() {\n        return this.x.fromRed();\n      };\n      Point.prototype.getY = function getY() {\n        return this.y.fromRed();\n      };\n      Point.prototype.mul = function mul(k) {\n        k = new import_bn2.default(k, 16);\n        if (this.isInfinity())\n          return this;\n        else if (this._hasDoubles(k))\n          return this.curve._fixedNafMul(this, k);\n        else if (this.curve.endo)\n          return this.curve._endoWnafMulAdd([this], [k]);\n        else\n          return this.curve._wnafMul(this, k);\n      };\n      Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n        var points = [this, p2];\n        var coeffs = [k1, k2];\n        if (this.curve.endo)\n          return this.curve._endoWnafMulAdd(points, coeffs);\n        else\n          return this.curve._wnafMulAdd(1, points, coeffs, 2);\n      };\n      Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n        var points = [this, p2];\n        var coeffs = [k1, k2];\n        if (this.curve.endo)\n          return this.curve._endoWnafMulAdd(points, coeffs, true);\n        else\n          return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n      };\n      Point.prototype.eq = function eq2(p) {\n        return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n      };\n      Point.prototype.neg = function neg(_precompute) {\n        if (this.inf)\n          return this;\n        var res = this.curve.point(this.x, this.y.redNeg());\n        if (_precompute && this.precomputed) {\n          var pre = this.precomputed;\n          var negate = function(p) {\n            return p.neg();\n          };\n          res.precomputed = {\n            naf: pre.naf && {\n              wnd: pre.naf.wnd,\n              points: pre.naf.points.map(negate)\n            },\n            doubles: pre.doubles && {\n              step: pre.doubles.step,\n              points: pre.doubles.points.map(negate)\n            }\n          };\n        }\n        return res;\n      };\n      Point.prototype.toJ = function toJ() {\n        if (this.inf)\n          return this.curve.jpoint(null, null, null);\n        var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n        return res;\n      };\n      inherits_browser(JPoint, base.BasePoint);\n      ShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n        return new JPoint(this, x, y, z);\n      };\n      JPoint.prototype.toP = function toP() {\n        if (this.isInfinity())\n          return this.curve.point(null, null);\n        var zinv = this.z.redInvm();\n        var zinv2 = zinv.redSqr();\n        var ax = this.x.redMul(zinv2);\n        var ay = this.y.redMul(zinv2).redMul(zinv);\n        return this.curve.point(ax, ay);\n      };\n      JPoint.prototype.neg = function neg2() {\n        return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n      };\n      JPoint.prototype.add = function add2(p) {\n        if (this.isInfinity())\n          return p;\n        if (p.isInfinity())\n          return this;\n        var pz2 = p.z.redSqr();\n        var z2 = this.z.redSqr();\n        var u1 = this.x.redMul(pz2);\n        var u2 = p.x.redMul(z2);\n        var s1 = this.y.redMul(pz2.redMul(p.z));\n        var s2 = p.y.redMul(z2.redMul(this.z));\n        var h = u1.redSub(u2);\n        var r2 = s1.redSub(s2);\n        if (h.cmpn(0) === 0) {\n          if (r2.cmpn(0) !== 0)\n            return this.curve.jpoint(null, null, null);\n          else\n            return this.dbl();\n        }\n        var h2 = h.redSqr();\n        var h3 = h2.redMul(h);\n        var v = u1.redMul(h2);\n        var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);\n        var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n        var nz = this.z.redMul(p.z).redMul(h);\n        return this.curve.jpoint(nx, ny, nz);\n      };\n      JPoint.prototype.mixedAdd = function mixedAdd(p) {\n        if (this.isInfinity())\n          return p.toJ();\n        if (p.isInfinity())\n          return this;\n        var z2 = this.z.redSqr();\n        var u1 = this.x;\n        var u2 = p.x.redMul(z2);\n        var s1 = this.y;\n        var s2 = p.y.redMul(z2).redMul(this.z);\n        var h = u1.redSub(u2);\n        var r2 = s1.redSub(s2);\n        if (h.cmpn(0) === 0) {\n          if (r2.cmpn(0) !== 0)\n            return this.curve.jpoint(null, null, null);\n          else\n            return this.dbl();\n        }\n        var h2 = h.redSqr();\n        var h3 = h2.redMul(h);\n        var v = u1.redMul(h2);\n        var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);\n        var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n        var nz = this.z.redMul(h);\n        return this.curve.jpoint(nx, ny, nz);\n      };\n      JPoint.prototype.dblp = function dblp2(pow3) {\n        if (pow3 === 0)\n          return this;\n        if (this.isInfinity())\n          return this;\n        if (!pow3)\n          return this.dbl();\n        var i;\n        if (this.curve.zeroA || this.curve.threeA) {\n          var r2 = this;\n          for (i = 0; i < pow3; i++)\n            r2 = r2.dbl();\n          return r2;\n        }\n        var a = this.curve.a;\n        var tinv = this.curve.tinv;\n        var jx = this.x;\n        var jy = this.y;\n        var jz = this.z;\n        var jz4 = jz.redSqr().redSqr();\n        var jyd = jy.redAdd(jy);\n        for (i = 0; i < pow3; i++) {\n          var jx2 = jx.redSqr();\n          var jyd2 = jyd.redSqr();\n          var jyd4 = jyd2.redSqr();\n          var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n          var t1 = jx.redMul(jyd2);\n          var nx = c.redSqr().redISub(t1.redAdd(t1));\n          var t2 = t1.redISub(nx);\n          var dny = c.redMul(t2);\n          dny = dny.redIAdd(dny).redISub(jyd4);\n          var nz = jyd.redMul(jz);\n          if (i + 1 < pow3)\n            jz4 = jz4.redMul(jyd4);\n          jx = nx;\n          jz = nz;\n          jyd = dny;\n        }\n        return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n      };\n      JPoint.prototype.dbl = function dbl2() {\n        if (this.isInfinity())\n          return this;\n        if (this.curve.zeroA)\n          return this._zeroDbl();\n        else if (this.curve.threeA)\n          return this._threeDbl();\n        else\n          return this._dbl();\n      };\n      JPoint.prototype._zeroDbl = function _zeroDbl() {\n        var nx;\n        var ny;\n        var nz;\n        if (this.zOne) {\n          var xx = this.x.redSqr();\n          var yy = this.y.redSqr();\n          var yyyy = yy.redSqr();\n          var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n          s = s.redIAdd(s);\n          var m = xx.redAdd(xx).redIAdd(xx);\n          var t = m.redSqr().redISub(s).redISub(s);\n          var yyyy8 = yyyy.redIAdd(yyyy);\n          yyyy8 = yyyy8.redIAdd(yyyy8);\n          yyyy8 = yyyy8.redIAdd(yyyy8);\n          nx = t;\n          ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n          nz = this.y.redAdd(this.y);\n        } else {\n          var a = this.x.redSqr();\n          var b2 = this.y.redSqr();\n          var c = b2.redSqr();\n          var d = this.x.redAdd(b2).redSqr().redISub(a).redISub(c);\n          d = d.redIAdd(d);\n          var e = a.redAdd(a).redIAdd(a);\n          var f = e.redSqr();\n          var c8 = c.redIAdd(c);\n          c8 = c8.redIAdd(c8);\n          c8 = c8.redIAdd(c8);\n          nx = f.redISub(d).redISub(d);\n          ny = e.redMul(d.redISub(nx)).redISub(c8);\n          nz = this.y.redMul(this.z);\n          nz = nz.redIAdd(nz);\n        }\n        return this.curve.jpoint(nx, ny, nz);\n      };\n      JPoint.prototype._threeDbl = function _threeDbl() {\n        var nx;\n        var ny;\n        var nz;\n        if (this.zOne) {\n          var xx = this.x.redSqr();\n          var yy = this.y.redSqr();\n          var yyyy = yy.redSqr();\n          var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n          s = s.redIAdd(s);\n          var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);\n          var t = m.redSqr().redISub(s).redISub(s);\n          nx = t;\n          var yyyy8 = yyyy.redIAdd(yyyy);\n          yyyy8 = yyyy8.redIAdd(yyyy8);\n          yyyy8 = yyyy8.redIAdd(yyyy8);\n          ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n          nz = this.y.redAdd(this.y);\n        } else {\n          var delta = this.z.redSqr();\n          var gamma = this.y.redSqr();\n          var beta = this.x.redMul(gamma);\n          var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n          alpha = alpha.redAdd(alpha).redIAdd(alpha);\n          var beta4 = beta.redIAdd(beta);\n          beta4 = beta4.redIAdd(beta4);\n          var beta8 = beta4.redAdd(beta4);\n          nx = alpha.redSqr().redISub(beta8);\n          nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\n          var ggamma8 = gamma.redSqr();\n          ggamma8 = ggamma8.redIAdd(ggamma8);\n          ggamma8 = ggamma8.redIAdd(ggamma8);\n          ggamma8 = ggamma8.redIAdd(ggamma8);\n          ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n        }\n        return this.curve.jpoint(nx, ny, nz);\n      };\n      JPoint.prototype._dbl = function _dbl() {\n        var a = this.curve.a;\n        var jx = this.x;\n        var jy = this.y;\n        var jz = this.z;\n        var jz4 = jz.redSqr().redSqr();\n        var jx2 = jx.redSqr();\n        var jy2 = jy.redSqr();\n        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n        var jxd4 = jx.redAdd(jx);\n        jxd4 = jxd4.redIAdd(jxd4);\n        var t1 = jxd4.redMul(jy2);\n        var nx = c.redSqr().redISub(t1.redAdd(t1));\n        var t2 = t1.redISub(nx);\n        var jyd8 = jy2.redSqr();\n        jyd8 = jyd8.redIAdd(jyd8);\n        jyd8 = jyd8.redIAdd(jyd8);\n        jyd8 = jyd8.redIAdd(jyd8);\n        var ny = c.redMul(t2).redISub(jyd8);\n        var nz = jy.redAdd(jy).redMul(jz);\n        return this.curve.jpoint(nx, ny, nz);\n      };\n      JPoint.prototype.trpl = function trpl() {\n        if (!this.curve.zeroA)\n          return this.dbl().add(this);\n        var xx = this.x.redSqr();\n        var yy = this.y.redSqr();\n        var zz = this.z.redSqr();\n        var yyyy = yy.redSqr();\n        var m = xx.redAdd(xx).redIAdd(xx);\n        var mm = m.redSqr();\n        var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n        e = e.redIAdd(e);\n        e = e.redAdd(e).redIAdd(e);\n        e = e.redISub(mm);\n        var ee = e.redSqr();\n        var t = yyyy.redIAdd(yyyy);\n        t = t.redIAdd(t);\n        t = t.redIAdd(t);\n        t = t.redIAdd(t);\n        var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);\n        var yyu4 = yy.redMul(u);\n        yyu4 = yyu4.redIAdd(yyu4);\n        yyu4 = yyu4.redIAdd(yyu4);\n        var nx = this.x.redMul(ee).redISub(yyu4);\n        nx = nx.redIAdd(nx);\n        nx = nx.redIAdd(nx);\n        var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n        ny = ny.redIAdd(ny);\n        ny = ny.redIAdd(ny);\n        ny = ny.redIAdd(ny);\n        var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n        return this.curve.jpoint(nx, ny, nz);\n      };\n      JPoint.prototype.mul = function mul2(k, kbase) {\n        k = new import_bn2.default(k, kbase);\n        return this.curve._wnafMul(this, k);\n      };\n      JPoint.prototype.eq = function eq3(p) {\n        if (p.type === \"affine\")\n          return this.eq(p.toJ());\n        if (this === p)\n          return true;\n        var z2 = this.z.redSqr();\n        var pz2 = p.z.redSqr();\n        if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)\n          return false;\n        var z3 = z2.redMul(this.z);\n        var pz3 = pz2.redMul(p.z);\n        return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n      };\n      JPoint.prototype.eqXToP = function eqXToP(x) {\n        var zs = this.z.redSqr();\n        var rx = x.toRed(this.curve.red).redMul(zs);\n        if (this.x.cmp(rx) === 0)\n          return true;\n        var xc = x.clone();\n        var t = this.curve.redN.redMul(zs);\n        for (; ; ) {\n          xc.iadd(this.curve.n);\n          if (xc.cmp(this.curve.p) >= 0)\n            return false;\n          rx.redIAdd(t);\n          if (this.x.cmp(rx) === 0)\n            return true;\n        }\n      };\n      JPoint.prototype.inspect = function inspect2() {\n        if (this.isInfinity())\n          return \"<EC JPoint Infinity>\";\n        return \"<EC JPoint x: \" + this.x.toString(16, 2) + \" y: \" + this.y.toString(16, 2) + \" z: \" + this.z.toString(16, 2) + \">\";\n      };\n      JPoint.prototype.isInfinity = function isInfinity2() {\n        return this.z.cmpn(0) === 0;\n      };\n      curve_1 = createCommonjsModule(function(module, exports3) {\n        \"use strict\";\n        var curve = exports3;\n        curve.base = base;\n        curve.short = short_1;\n        curve.mont = /*RicMoo:ethers:require(./mont)*/\n        null;\n        curve.edwards = /*RicMoo:ethers:require(./edwards)*/\n        null;\n      });\n      curves_1 = createCommonjsModule(function(module, exports3) {\n        \"use strict\";\n        var curves = exports3;\n        var assert4 = utils_1$1.assert;\n        function PresetCurve(options) {\n          if (options.type === \"short\")\n            this.curve = new curve_1.short(options);\n          else if (options.type === \"edwards\")\n            this.curve = new curve_1.edwards(options);\n          else\n            this.curve = new curve_1.mont(options);\n          this.g = this.curve.g;\n          this.n = this.curve.n;\n          this.hash = options.hash;\n          assert4(this.g.validate(), \"Invalid curve\");\n          assert4(this.g.mul(this.n).isInfinity(), \"Invalid curve, G*N != O\");\n        }\n        curves.PresetCurve = PresetCurve;\n        function defineCurve(name, options) {\n          Object.defineProperty(curves, name, {\n            configurable: true,\n            enumerable: true,\n            get: function() {\n              var curve = new PresetCurve(options);\n              Object.defineProperty(curves, name, {\n                configurable: true,\n                enumerable: true,\n                value: curve\n              });\n              return curve;\n            }\n          });\n        }\n        defineCurve(\"p192\", {\n          type: \"short\",\n          prime: \"p192\",\n          p: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\",\n          a: \"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc\",\n          b: \"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1\",\n          n: \"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831\",\n          hash: import_hash2.default.sha256,\n          gRed: false,\n          g: [\n            \"188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012\",\n            \"07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811\"\n          ]\n        });\n        defineCurve(\"p224\", {\n          type: \"short\",\n          prime: \"p224\",\n          p: \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\",\n          a: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe\",\n          b: \"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4\",\n          n: \"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d\",\n          hash: import_hash2.default.sha256,\n          gRed: false,\n          g: [\n            \"b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21\",\n            \"bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34\"\n          ]\n        });\n        defineCurve(\"p256\", {\n          type: \"short\",\n          prime: null,\n          p: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff\",\n          a: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc\",\n          b: \"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b\",\n          n: \"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551\",\n          hash: import_hash2.default.sha256,\n          gRed: false,\n          g: [\n            \"6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296\",\n            \"4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5\"\n          ]\n        });\n        defineCurve(\"p384\", {\n          type: \"short\",\n          prime: null,\n          p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff\",\n          a: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc\",\n          b: \"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef\",\n          n: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973\",\n          hash: import_hash2.default.sha384,\n          gRed: false,\n          g: [\n            \"aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7\",\n            \"3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f\"\n          ]\n        });\n        defineCurve(\"p521\", {\n          type: \"short\",\n          prime: null,\n          p: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff\",\n          a: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc\",\n          b: \"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00\",\n          n: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409\",\n          hash: import_hash2.default.sha512,\n          gRed: false,\n          g: [\n            \"000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66\",\n            \"00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650\"\n          ]\n        });\n        defineCurve(\"curve25519\", {\n          type: \"mont\",\n          prime: \"p25519\",\n          p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n          a: \"76d06\",\n          b: \"1\",\n          n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n          hash: import_hash2.default.sha256,\n          gRed: false,\n          g: [\n            \"9\"\n          ]\n        });\n        defineCurve(\"ed25519\", {\n          type: \"edwards\",\n          prime: \"p25519\",\n          p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n          a: \"-1\",\n          c: \"1\",\n          // -121665 * (121666^(-1)) (mod P)\n          d: \"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3\",\n          n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n          hash: import_hash2.default.sha256,\n          gRed: false,\n          g: [\n            \"216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a\",\n            // 4/5\n            \"6666666666666666666666666666666666666666666666666666666666666658\"\n          ]\n        });\n        var pre;\n        try {\n          pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/\n          null.crash();\n        } catch (e) {\n          pre = void 0;\n        }\n        defineCurve(\"secp256k1\", {\n          type: \"short\",\n          prime: \"k256\",\n          p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\",\n          a: \"0\",\n          b: \"7\",\n          n: \"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141\",\n          h: \"1\",\n          hash: import_hash2.default.sha256,\n          // Precomputed endomorphism\n          beta: \"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\",\n          lambda: \"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72\",\n          basis: [\n            {\n              a: \"3086d221a7d46bcde86c90e49284eb15\",\n              b: \"-e4437ed6010e88286f547fa90abfe4c3\"\n            },\n            {\n              a: \"114ca50f7a8e2f3f657c1108d9d44cfd8\",\n              b: \"3086d221a7d46bcde86c90e49284eb15\"\n            }\n          ],\n          gRed: false,\n          g: [\n            \"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n            \"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n            pre\n          ]\n        });\n      });\n      hmacDrbg = HmacDRBG;\n      HmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n        var seed = entropy.concat(nonce).concat(pers);\n        this.K = new Array(this.outLen / 8);\n        this.V = new Array(this.outLen / 8);\n        for (var i = 0; i < this.V.length; i++) {\n          this.K[i] = 0;\n          this.V[i] = 1;\n        }\n        this._update(seed);\n        this._reseed = 1;\n        this.reseedInterval = 281474976710656;\n      };\n      HmacDRBG.prototype._hmac = function hmac() {\n        return new import_hash2.default.hmac(this.hash, this.K);\n      };\n      HmacDRBG.prototype._update = function update(seed) {\n        var kmac = this._hmac().update(this.V).update([0]);\n        if (seed)\n          kmac = kmac.update(seed);\n        this.K = kmac.digest();\n        this.V = this._hmac().update(this.V).digest();\n        if (!seed)\n          return;\n        this.K = this._hmac().update(this.V).update([1]).update(seed).digest();\n        this.V = this._hmac().update(this.V).digest();\n      };\n      HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add4, addEnc) {\n        if (typeof entropyEnc !== \"string\") {\n          addEnc = add4;\n          add4 = entropyEnc;\n          entropyEnc = null;\n        }\n        entropy = utils_1.toArray(entropy, entropyEnc);\n        add4 = utils_1.toArray(add4, addEnc);\n        minimalisticAssert(\n          entropy.length >= this.minEntropy / 8,\n          \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\"\n        );\n        this._update(entropy.concat(add4 || []));\n        this._reseed = 1;\n      };\n      HmacDRBG.prototype.generate = function generate(len, enc, add4, addEnc) {\n        if (this._reseed > this.reseedInterval)\n          throw new Error(\"Reseed is required\");\n        if (typeof enc !== \"string\") {\n          addEnc = add4;\n          add4 = enc;\n          enc = null;\n        }\n        if (add4) {\n          add4 = utils_1.toArray(add4, addEnc || \"hex\");\n          this._update(add4);\n        }\n        var temp = [];\n        while (temp.length < len) {\n          this.V = this._hmac().update(this.V).digest();\n          temp = temp.concat(this.V);\n        }\n        var res = temp.slice(0, len);\n        this._update(add4);\n        this._reseed++;\n        return utils_1.encode(res, enc);\n      };\n      assert$3 = utils_1$1.assert;\n      key = KeyPair;\n      KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {\n        if (pub instanceof KeyPair)\n          return pub;\n        return new KeyPair(ec2, {\n          pub,\n          pubEnc: enc\n        });\n      };\n      KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {\n        if (priv instanceof KeyPair)\n          return priv;\n        return new KeyPair(ec2, {\n          priv,\n          privEnc: enc\n        });\n      };\n      KeyPair.prototype.validate = function validate4() {\n        var pub = this.getPublic();\n        if (pub.isInfinity())\n          return { result: false, reason: \"Invalid public key\" };\n        if (!pub.validate())\n          return { result: false, reason: \"Public key is not a point\" };\n        if (!pub.mul(this.ec.curve.n).isInfinity())\n          return { result: false, reason: \"Public key * N != O\" };\n        return { result: true, reason: null };\n      };\n      KeyPair.prototype.getPublic = function getPublic(compact, enc) {\n        if (typeof compact === \"string\") {\n          enc = compact;\n          compact = null;\n        }\n        if (!this.pub)\n          this.pub = this.ec.g.mul(this.priv);\n        if (!enc)\n          return this.pub;\n        return this.pub.encode(enc, compact);\n      };\n      KeyPair.prototype.getPrivate = function getPrivate(enc) {\n        if (enc === \"hex\")\n          return this.priv.toString(16, 2);\n        else\n          return this.priv;\n      };\n      KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {\n        this.priv = new import_bn2.default(key2, enc || 16);\n        this.priv = this.priv.umod(this.ec.curve.n);\n      };\n      KeyPair.prototype._importPublic = function _importPublic(key2, enc) {\n        if (key2.x || key2.y) {\n          if (this.ec.curve.type === \"mont\") {\n            assert$3(key2.x, \"Need x coordinate\");\n          } else if (this.ec.curve.type === \"short\" || this.ec.curve.type === \"edwards\") {\n            assert$3(key2.x && key2.y, \"Need both x and y coordinate\");\n          }\n          this.pub = this.ec.curve.point(key2.x, key2.y);\n          return;\n        }\n        this.pub = this.ec.curve.decodePoint(key2, enc);\n      };\n      KeyPair.prototype.derive = function derive(pub) {\n        if (!pub.validate()) {\n          assert$3(pub.validate(), \"public point not validated\");\n        }\n        return pub.mul(this.priv).getX();\n      };\n      KeyPair.prototype.sign = function sign(msg, enc, options) {\n        return this.ec.sign(msg, this, enc, options);\n      };\n      KeyPair.prototype.verify = function verify(msg, signature2, options) {\n        return this.ec.verify(msg, signature2, this, void 0, options);\n      };\n      KeyPair.prototype.inspect = function inspect3() {\n        return \"<Key priv: \" + (this.priv && this.priv.toString(16, 2)) + \" pub: \" + (this.pub && this.pub.inspect()) + \" >\";\n      };\n      assert$4 = utils_1$1.assert;\n      signature = Signature;\n      Signature.prototype._importDER = function _importDER(data, enc) {\n        data = utils_1$1.toArray(data, enc);\n        var p = new Position();\n        if (data[p.place++] !== 48) {\n          return false;\n        }\n        var len = getLength(data, p);\n        if (len === false) {\n          return false;\n        }\n        if (len + p.place !== data.length) {\n          return false;\n        }\n        if (data[p.place++] !== 2) {\n          return false;\n        }\n        var rlen = getLength(data, p);\n        if (rlen === false) {\n          return false;\n        }\n        if ((data[p.place] & 128) !== 0) {\n          return false;\n        }\n        var r2 = data.slice(p.place, rlen + p.place);\n        p.place += rlen;\n        if (data[p.place++] !== 2) {\n          return false;\n        }\n        var slen = getLength(data, p);\n        if (slen === false) {\n          return false;\n        }\n        if (data.length !== slen + p.place) {\n          return false;\n        }\n        if ((data[p.place] & 128) !== 0) {\n          return false;\n        }\n        var s = data.slice(p.place, slen + p.place);\n        if (r2[0] === 0) {\n          if (r2[1] & 128) {\n            r2 = r2.slice(1);\n          } else {\n            return false;\n          }\n        }\n        if (s[0] === 0) {\n          if (s[1] & 128) {\n            s = s.slice(1);\n          } else {\n            return false;\n          }\n        }\n        this.r = new import_bn2.default(r2);\n        this.s = new import_bn2.default(s);\n        this.recoveryParam = null;\n        return true;\n      };\n      Signature.prototype.toDER = function toDER(enc) {\n        var r2 = this.r.toArray();\n        var s = this.s.toArray();\n        if (r2[0] & 128)\n          r2 = [0].concat(r2);\n        if (s[0] & 128)\n          s = [0].concat(s);\n        r2 = rmPadding(r2);\n        s = rmPadding(s);\n        while (!s[0] && !(s[1] & 128)) {\n          s = s.slice(1);\n        }\n        var arr = [2];\n        constructLength(arr, r2.length);\n        arr = arr.concat(r2);\n        arr.push(2);\n        constructLength(arr, s.length);\n        var backHalf = arr.concat(s);\n        var res = [48];\n        constructLength(res, backHalf.length);\n        res = res.concat(backHalf);\n        return utils_1$1.encode(res, enc);\n      };\n      rand = /*RicMoo:ethers:require(brorand)*/\n      function() {\n        throw new Error(\"unsupported\");\n      };\n      assert$5 = utils_1$1.assert;\n      ec = EC;\n      EC.prototype.keyPair = function keyPair(options) {\n        return new key(this, options);\n      };\n      EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n        return key.fromPrivate(this, priv, enc);\n      };\n      EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n        return key.fromPublic(this, pub, enc);\n      };\n      EC.prototype.genKeyPair = function genKeyPair(options) {\n        if (!options)\n          options = {};\n        var drbg = new hmacDrbg({\n          hash: this.hash,\n          pers: options.pers,\n          persEnc: options.persEnc || \"utf8\",\n          entropy: options.entropy || rand(this.hash.hmacStrength),\n          entropyEnc: options.entropy && options.entropyEnc || \"utf8\",\n          nonce: this.n.toArray()\n        });\n        var bytes3 = this.n.byteLength();\n        var ns2 = this.n.sub(new import_bn2.default(2));\n        for (; ; ) {\n          var priv = new import_bn2.default(drbg.generate(bytes3));\n          if (priv.cmp(ns2) > 0)\n            continue;\n          priv.iaddn(1);\n          return this.keyFromPrivate(priv);\n        }\n      };\n      EC.prototype._truncateToN = function _truncateToN(msg, truncOnly, bitLength) {\n        var byteLength;\n        if (import_bn2.default.isBN(msg) || typeof msg === \"number\") {\n          msg = new import_bn2.default(msg, 16);\n          byteLength = msg.byteLength();\n        } else if (typeof msg === \"object\") {\n          byteLength = msg.length;\n          msg = new import_bn2.default(msg, 16);\n        } else {\n          var str = msg.toString();\n          byteLength = str.length + 1 >>> 1;\n          msg = new import_bn2.default(str, 16);\n        }\n        if (typeof bitLength !== \"number\") {\n          bitLength = byteLength * 8;\n        }\n        var delta = bitLength - this.n.bitLength();\n        if (delta > 0)\n          msg = msg.ushrn(delta);\n        if (!truncOnly && msg.cmp(this.n) >= 0)\n          return msg.sub(this.n);\n        else\n          return msg;\n      };\n      EC.prototype.sign = function sign2(msg, key2, enc, options) {\n        if (typeof enc === \"object\") {\n          options = enc;\n          enc = null;\n        }\n        if (!options)\n          options = {};\n        if (typeof msg !== \"string\" && typeof msg !== \"number\" && !import_bn2.default.isBN(msg)) {\n          assert$5(\n            typeof msg === \"object\" && msg && typeof msg.length === \"number\",\n            \"Expected message to be an array-like, a hex string, or a BN instance\"\n          );\n          assert$5(msg.length >>> 0 === msg.length);\n          for (var i = 0; i < msg.length; i++)\n            assert$5((msg[i] & 255) === msg[i]);\n        }\n        key2 = this.keyFromPrivate(key2, enc);\n        msg = this._truncateToN(msg, false, options.msgBitLength);\n        assert$5(!msg.isNeg(), \"Can not sign a negative message\");\n        var bytes3 = this.n.byteLength();\n        var bkey = key2.getPrivate().toArray(\"be\", bytes3);\n        var nonce = msg.toArray(\"be\", bytes3);\n        assert$5(new import_bn2.default(nonce).eq(msg), \"Can not sign message\");\n        var drbg = new hmacDrbg({\n          hash: this.hash,\n          entropy: bkey,\n          nonce,\n          pers: options.pers,\n          persEnc: options.persEnc || \"utf8\"\n        });\n        var ns1 = this.n.sub(new import_bn2.default(1));\n        for (var iter = 0; ; iter++) {\n          var k = options.k ? options.k(iter) : new import_bn2.default(drbg.generate(this.n.byteLength()));\n          k = this._truncateToN(k, true);\n          if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)\n            continue;\n          var kp = this.g.mul(k);\n          if (kp.isInfinity())\n            continue;\n          var kpX = kp.getX();\n          var r2 = kpX.umod(this.n);\n          if (r2.cmpn(0) === 0)\n            continue;\n          var s = k.invm(this.n).mul(r2.mul(key2.getPrivate()).iadd(msg));\n          s = s.umod(this.n);\n          if (s.cmpn(0) === 0)\n            continue;\n          var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r2) !== 0 ? 2 : 0);\n          if (options.canonical && s.cmp(this.nh) > 0) {\n            s = this.n.sub(s);\n            recoveryParam ^= 1;\n          }\n          return new signature({ r: r2, s, recoveryParam });\n        }\n      };\n      EC.prototype.verify = function verify2(msg, signature$1, key2, enc, options) {\n        if (!options)\n          options = {};\n        msg = this._truncateToN(msg, false, options.msgBitLength);\n        key2 = this.keyFromPublic(key2, enc);\n        signature$1 = new signature(signature$1, \"hex\");\n        var r2 = signature$1.r;\n        var s = signature$1.s;\n        if (r2.cmpn(1) < 0 || r2.cmp(this.n) >= 0)\n          return false;\n        if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)\n          return false;\n        var sinv = s.invm(this.n);\n        var u1 = sinv.mul(msg).umod(this.n);\n        var u2 = sinv.mul(r2).umod(this.n);\n        var p;\n        if (!this.curve._maxwellTrick) {\n          p = this.g.mulAdd(u1, key2.getPublic(), u2);\n          if (p.isInfinity())\n            return false;\n          return p.getX().umod(this.n).cmp(r2) === 0;\n        }\n        p = this.g.jmulAdd(u1, key2.getPublic(), u2);\n        if (p.isInfinity())\n          return false;\n        return p.eqXToP(r2);\n      };\n      EC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {\n        assert$5((3 & j) === j, \"The recovery param is more than two bits\");\n        signature$1 = new signature(signature$1, enc);\n        var n2 = this.n;\n        var e = new import_bn2.default(msg);\n        var r2 = signature$1.r;\n        var s = signature$1.s;\n        var isYOdd = j & 1;\n        var isSecondKey = j >> 1;\n        if (r2.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)\n          throw new Error(\"Unable to find sencond key candinate\");\n        if (isSecondKey)\n          r2 = this.curve.pointFromX(r2.add(this.curve.n), isYOdd);\n        else\n          r2 = this.curve.pointFromX(r2, isYOdd);\n        var rInv = signature$1.r.invm(n2);\n        var s1 = n2.sub(e).mul(rInv).umod(n2);\n        var s2 = s.mul(rInv).umod(n2);\n        return this.g.mulAdd(s1, r2, s2);\n      };\n      EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {\n        signature$1 = new signature(signature$1, enc);\n        if (signature$1.recoveryParam !== null)\n          return signature$1.recoveryParam;\n        for (var i = 0; i < 4; i++) {\n          var Qprime;\n          try {\n            Qprime = this.recoverPubKey(e, signature$1, i);\n          } catch (e2) {\n            continue;\n          }\n          if (Qprime.eq(Q))\n            return i;\n        }\n        throw new Error(\"Unable to find valid recovery factor\");\n      };\n      elliptic_1 = createCommonjsModule(function(module, exports3) {\n        \"use strict\";\n        var elliptic = exports3;\n        elliptic.version = /*RicMoo:ethers*/\n        { version: \"6.6.1\" }.version;\n        elliptic.utils = utils_1$1;\n        elliptic.rand = /*RicMoo:ethers:require(brorand)*/\n        function() {\n          throw new Error(\"unsupported\");\n        };\n        elliptic.curve = curve_1;\n        elliptic.curves = curves_1;\n        elliptic.ec = ec;\n        elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/\n        null;\n      });\n      EC$1 = elliptic_1.ec;\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+signing-key@5.8.0/node_modules/@ethersproject/signing-key/lib.esm/_version.js\n  var version13;\n  var init_version12 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+signing-key@5.8.0/node_modules/@ethersproject/signing-key/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version13 = \"signing-key/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+signing-key@5.8.0/node_modules/@ethersproject/signing-key/lib.esm/index.js\n  function getCurve() {\n    if (!_curve) {\n      _curve = new EC$1(\"secp256k1\");\n    }\n    return _curve;\n  }\n  function recoverPublicKey(digest, signature2) {\n    const sig = splitSignature(signature2);\n    const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };\n    return \"0x\" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n  }\n  function computePublicKey(key2, compressed) {\n    const bytes3 = arrayify(key2);\n    if (bytes3.length === 32) {\n      const signingKey = new SigningKey(bytes3);\n      if (compressed) {\n        return \"0x\" + getCurve().keyFromPrivate(bytes3).getPublic(true, \"hex\");\n      }\n      return signingKey.publicKey;\n    } else if (bytes3.length === 33) {\n      if (compressed) {\n        return hexlify(bytes3);\n      }\n      return \"0x\" + getCurve().keyFromPublic(bytes3).getPublic(false, \"hex\");\n    } else if (bytes3.length === 65) {\n      if (!compressed) {\n        return hexlify(bytes3);\n      }\n      return \"0x\" + getCurve().keyFromPublic(bytes3).getPublic(true, \"hex\");\n    }\n    return logger17.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n  }\n  var logger17, _curve, SigningKey;\n  var init_lib16 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+signing-key@5.8.0/node_modules/@ethersproject/signing-key/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_elliptic();\n      init_lib2();\n      init_lib4();\n      init_lib();\n      init_version12();\n      logger17 = new Logger(version13);\n      _curve = null;\n      SigningKey = class {\n        constructor(privateKey) {\n          defineReadOnly(this, \"curve\", \"secp256k1\");\n          defineReadOnly(this, \"privateKey\", hexlify(privateKey));\n          if (hexDataLength(this.privateKey) !== 32) {\n            logger17.throwArgumentError(\"invalid private key\", \"privateKey\", \"[[ REDACTED ]]\");\n          }\n          const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));\n          defineReadOnly(this, \"publicKey\", \"0x\" + keyPair2.getPublic(false, \"hex\"));\n          defineReadOnly(this, \"compressedPublicKey\", \"0x\" + keyPair2.getPublic(true, \"hex\"));\n          defineReadOnly(this, \"_isSigningKey\", true);\n        }\n        _addPoint(other) {\n          const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));\n          const p1 = getCurve().keyFromPublic(arrayify(other));\n          return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n        }\n        signDigest(digest) {\n          const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));\n          const digestBytes = arrayify(digest);\n          if (digestBytes.length !== 32) {\n            logger17.throwArgumentError(\"bad digest length\", \"digest\", digest);\n          }\n          const signature2 = keyPair2.sign(digestBytes, { canonical: true });\n          return splitSignature({\n            recoveryParam: signature2.recoveryParam,\n            r: hexZeroPad(\"0x\" + signature2.r.toString(16), 32),\n            s: hexZeroPad(\"0x\" + signature2.s.toString(16), 32)\n          });\n        }\n        computeSharedSecret(otherKey) {\n          const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));\n          const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));\n          return hexZeroPad(\"0x\" + keyPair2.derive(otherKeyPair.getPublic()).toString(16), 32);\n        }\n        static isSigningKey(value) {\n          return !!(value && value._isSigningKey);\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+transactions@5.8.0/node_modules/@ethersproject/transactions/lib.esm/_version.js\n  var version14;\n  var init_version13 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+transactions@5.8.0/node_modules/@ethersproject/transactions/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version14 = \"transactions/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+transactions@5.8.0/node_modules/@ethersproject/transactions/lib.esm/index.js\n  function handleAddress(value) {\n    if (value === \"0x\") {\n      return null;\n    }\n    return getAddress(value);\n  }\n  function handleNumber(value) {\n    if (value === \"0x\") {\n      return Zero2;\n    }\n    return BigNumber.from(value);\n  }\n  function computeAddress(key2) {\n    const publicKey = computePublicKey(key2);\n    return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));\n  }\n  function recoverAddress(digest, signature2) {\n    return computeAddress(recoverPublicKey(arrayify(digest), signature2));\n  }\n  function formatNumber(value, name) {\n    const result = stripZeros(BigNumber.from(value).toHexString());\n    if (result.length > 32) {\n      logger18.throwArgumentError(\"invalid length for \" + name, \"transaction:\" + name, value);\n    }\n    return result;\n  }\n  function accessSetify(addr, storageKeys) {\n    return {\n      address: getAddress(addr),\n      storageKeys: (storageKeys || []).map((storageKey, index) => {\n        if (hexDataLength(storageKey) !== 32) {\n          logger18.throwArgumentError(\"invalid access list storageKey\", `accessList[${addr}:${index}]`, storageKey);\n        }\n        return storageKey.toLowerCase();\n      })\n    };\n  }\n  function accessListify(value) {\n    if (Array.isArray(value)) {\n      return value.map((set, index) => {\n        if (Array.isArray(set)) {\n          if (set.length > 2) {\n            logger18.throwArgumentError(\"access list expected to be [ address, storageKeys[] ]\", `value[${index}]`, set);\n          }\n          return accessSetify(set[0], set[1]);\n        }\n        return accessSetify(set.address, set.storageKeys);\n      });\n    }\n    const result = Object.keys(value).map((addr) => {\n      const storageKeys = value[addr].reduce((accum, storageKey) => {\n        accum[storageKey] = true;\n        return accum;\n      }, {});\n      return accessSetify(addr, Object.keys(storageKeys).sort());\n    });\n    result.sort((a, b2) => a.address.localeCompare(b2.address));\n    return result;\n  }\n  function formatAccessList(value) {\n    return accessListify(value).map((set) => [set.address, set.storageKeys]);\n  }\n  function _serializeEip1559(transaction, signature2) {\n    if (transaction.gasPrice != null) {\n      const gasPrice = BigNumber.from(transaction.gasPrice);\n      const maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);\n      if (!gasPrice.eq(maxFeePerGas)) {\n        logger18.throwArgumentError(\"mismatch EIP-1559 gasPrice != maxFeePerGas\", \"tx\", {\n          gasPrice,\n          maxFeePerGas\n        });\n      }\n    }\n    const fields = [\n      formatNumber(transaction.chainId || 0, \"chainId\"),\n      formatNumber(transaction.nonce || 0, \"nonce\"),\n      formatNumber(transaction.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n      formatNumber(transaction.maxFeePerGas || 0, \"maxFeePerGas\"),\n      formatNumber(transaction.gasLimit || 0, \"gasLimit\"),\n      transaction.to != null ? getAddress(transaction.to) : \"0x\",\n      formatNumber(transaction.value || 0, \"value\"),\n      transaction.data || \"0x\",\n      formatAccessList(transaction.accessList || [])\n    ];\n    if (signature2) {\n      const sig = splitSignature(signature2);\n      fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n      fields.push(stripZeros(sig.r));\n      fields.push(stripZeros(sig.s));\n    }\n    return hexConcat([\"0x02\", encode(fields)]);\n  }\n  function _serializeEip2930(transaction, signature2) {\n    const fields = [\n      formatNumber(transaction.chainId || 0, \"chainId\"),\n      formatNumber(transaction.nonce || 0, \"nonce\"),\n      formatNumber(transaction.gasPrice || 0, \"gasPrice\"),\n      formatNumber(transaction.gasLimit || 0, \"gasLimit\"),\n      transaction.to != null ? getAddress(transaction.to) : \"0x\",\n      formatNumber(transaction.value || 0, \"value\"),\n      transaction.data || \"0x\",\n      formatAccessList(transaction.accessList || [])\n    ];\n    if (signature2) {\n      const sig = splitSignature(signature2);\n      fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n      fields.push(stripZeros(sig.r));\n      fields.push(stripZeros(sig.s));\n    }\n    return hexConcat([\"0x01\", encode(fields)]);\n  }\n  function _serialize(transaction, signature2) {\n    checkProperties(transaction, allowedTransactionKeys2);\n    const raw = [];\n    transactionFields.forEach(function(fieldInfo) {\n      let value = transaction[fieldInfo.name] || [];\n      const options = {};\n      if (fieldInfo.numeric) {\n        options.hexPad = \"left\";\n      }\n      value = arrayify(hexlify(value, options));\n      if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n        logger18.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\n      }\n      if (fieldInfo.maxLength) {\n        value = stripZeros(value);\n        if (value.length > fieldInfo.maxLength) {\n          logger18.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\n        }\n      }\n      raw.push(hexlify(value));\n    });\n    let chainId = 0;\n    if (transaction.chainId != null) {\n      chainId = transaction.chainId;\n      if (typeof chainId !== \"number\") {\n        logger18.throwArgumentError(\"invalid transaction.chainId\", \"transaction\", transaction);\n      }\n    } else if (signature2 && !isBytesLike(signature2) && signature2.v > 28) {\n      chainId = Math.floor((signature2.v - 35) / 2);\n    }\n    if (chainId !== 0) {\n      raw.push(hexlify(chainId));\n      raw.push(\"0x\");\n      raw.push(\"0x\");\n    }\n    if (!signature2) {\n      return encode(raw);\n    }\n    const sig = splitSignature(signature2);\n    let v = 27 + sig.recoveryParam;\n    if (chainId !== 0) {\n      raw.pop();\n      raw.pop();\n      raw.pop();\n      v += chainId * 2 + 8;\n      if (sig.v > 28 && sig.v !== v) {\n        logger18.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature2);\n      }\n    } else if (sig.v !== v) {\n      logger18.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature2);\n    }\n    raw.push(hexlify(v));\n    raw.push(stripZeros(arrayify(sig.r)));\n    raw.push(stripZeros(arrayify(sig.s)));\n    return encode(raw);\n  }\n  function serialize(transaction, signature2) {\n    if (transaction.type == null || transaction.type === 0) {\n      if (transaction.accessList != null) {\n        logger18.throwArgumentError(\"untyped transactions do not support accessList; include type: 1\", \"transaction\", transaction);\n      }\n      return _serialize(transaction, signature2);\n    }\n    switch (transaction.type) {\n      case 1:\n        return _serializeEip2930(transaction, signature2);\n      case 2:\n        return _serializeEip1559(transaction, signature2);\n      default:\n        break;\n    }\n    return logger18.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"serializeTransaction\",\n      transactionType: transaction.type\n    });\n  }\n  function _parseEipSignature(tx, fields, serialize3) {\n    try {\n      const recid = handleNumber(fields[0]).toNumber();\n      if (recid !== 0 && recid !== 1) {\n        throw new Error(\"bad recid\");\n      }\n      tx.v = recid;\n    } catch (error) {\n      logger18.throwArgumentError(\"invalid v for transaction type: 1\", \"v\", fields[0]);\n    }\n    tx.r = hexZeroPad(fields[1], 32);\n    tx.s = hexZeroPad(fields[2], 32);\n    try {\n      const digest = keccak256(serialize3(tx));\n      tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });\n    } catch (error) {\n    }\n  }\n  function _parseEip1559(payload) {\n    const transaction = decode(payload.slice(1));\n    if (transaction.length !== 9 && transaction.length !== 12) {\n      logger18.throwArgumentError(\"invalid component count for transaction type: 2\", \"payload\", hexlify(payload));\n    }\n    const maxPriorityFeePerGas = handleNumber(transaction[2]);\n    const maxFeePerGas = handleNumber(transaction[3]);\n    const tx = {\n      type: 2,\n      chainId: handleNumber(transaction[0]).toNumber(),\n      nonce: handleNumber(transaction[1]).toNumber(),\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      gasPrice: null,\n      gasLimit: handleNumber(transaction[4]),\n      to: handleAddress(transaction[5]),\n      value: handleNumber(transaction[6]),\n      data: transaction[7],\n      accessList: accessListify(transaction[8])\n    };\n    if (transaction.length === 9) {\n      return tx;\n    }\n    tx.hash = keccak256(payload);\n    _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);\n    return tx;\n  }\n  function _parseEip2930(payload) {\n    const transaction = decode(payload.slice(1));\n    if (transaction.length !== 8 && transaction.length !== 11) {\n      logger18.throwArgumentError(\"invalid component count for transaction type: 1\", \"payload\", hexlify(payload));\n    }\n    const tx = {\n      type: 1,\n      chainId: handleNumber(transaction[0]).toNumber(),\n      nonce: handleNumber(transaction[1]).toNumber(),\n      gasPrice: handleNumber(transaction[2]),\n      gasLimit: handleNumber(transaction[3]),\n      to: handleAddress(transaction[4]),\n      value: handleNumber(transaction[5]),\n      data: transaction[6],\n      accessList: accessListify(transaction[7])\n    };\n    if (transaction.length === 8) {\n      return tx;\n    }\n    tx.hash = keccak256(payload);\n    _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);\n    return tx;\n  }\n  function _parse(rawTransaction) {\n    const transaction = decode(rawTransaction);\n    if (transaction.length !== 9 && transaction.length !== 6) {\n      logger18.throwArgumentError(\"invalid raw transaction\", \"rawTransaction\", rawTransaction);\n    }\n    const tx = {\n      nonce: handleNumber(transaction[0]).toNumber(),\n      gasPrice: handleNumber(transaction[1]),\n      gasLimit: handleNumber(transaction[2]),\n      to: handleAddress(transaction[3]),\n      value: handleNumber(transaction[4]),\n      data: transaction[5],\n      chainId: 0\n    };\n    if (transaction.length === 6) {\n      return tx;\n    }\n    try {\n      tx.v = BigNumber.from(transaction[6]).toNumber();\n    } catch (error) {\n      return tx;\n    }\n    tx.r = hexZeroPad(transaction[7], 32);\n    tx.s = hexZeroPad(transaction[8], 32);\n    if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {\n      tx.chainId = tx.v;\n      tx.v = 0;\n    } else {\n      tx.chainId = Math.floor((tx.v - 35) / 2);\n      if (tx.chainId < 0) {\n        tx.chainId = 0;\n      }\n      let recoveryParam = tx.v - 27;\n      const raw = transaction.slice(0, 6);\n      if (tx.chainId !== 0) {\n        raw.push(hexlify(tx.chainId));\n        raw.push(\"0x\");\n        raw.push(\"0x\");\n        recoveryParam -= tx.chainId * 2 + 8;\n      }\n      const digest = keccak256(encode(raw));\n      try {\n        tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam });\n      } catch (error) {\n      }\n      tx.hash = keccak256(rawTransaction);\n    }\n    tx.type = null;\n    return tx;\n  }\n  function parse(rawTransaction) {\n    const payload = arrayify(rawTransaction);\n    if (payload[0] > 127) {\n      return _parse(payload);\n    }\n    switch (payload[0]) {\n      case 1:\n        return _parseEip2930(payload);\n      case 2:\n        return _parseEip1559(payload);\n      default:\n        break;\n    }\n    return logger18.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"parseTransaction\",\n      transactionType: payload[0]\n    });\n  }\n  var logger18, TransactionTypes, transactionFields, allowedTransactionKeys2;\n  var init_lib17 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+transactions@5.8.0/node_modules/@ethersproject/transactions/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib7();\n      init_lib3();\n      init_lib2();\n      init_lib8();\n      init_lib5();\n      init_lib4();\n      init_lib6();\n      init_lib16();\n      init_lib();\n      init_version13();\n      logger18 = new Logger(version14);\n      (function(TransactionTypes2) {\n        TransactionTypes2[TransactionTypes2[\"legacy\"] = 0] = \"legacy\";\n        TransactionTypes2[TransactionTypes2[\"eip2930\"] = 1] = \"eip2930\";\n        TransactionTypes2[TransactionTypes2[\"eip1559\"] = 2] = \"eip1559\";\n      })(TransactionTypes || (TransactionTypes = {}));\n      transactionFields = [\n        { name: \"nonce\", maxLength: 32, numeric: true },\n        { name: \"gasPrice\", maxLength: 32, numeric: true },\n        { name: \"gasLimit\", maxLength: 32, numeric: true },\n        { name: \"to\", length: 20 },\n        { name: \"value\", maxLength: 32, numeric: true },\n        { name: \"data\" }\n      ];\n      allowedTransactionKeys2 = {\n        chainId: true,\n        data: true,\n        gasLimit: true,\n        gasPrice: true,\n        nonce: true,\n        to: true,\n        type: true,\n        value: true\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+contracts@5.8.0/node_modules/@ethersproject/contracts/lib.esm/_version.js\n  var version15;\n  var init_version14 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+contracts@5.8.0/node_modules/@ethersproject/contracts/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version15 = \"contracts/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+contracts@5.8.0/node_modules/@ethersproject/contracts/lib.esm/index.js\n  function resolveName(resolver, nameOrPromise) {\n    return __awaiter5(this, void 0, void 0, function* () {\n      const name = yield nameOrPromise;\n      if (typeof name !== \"string\") {\n        logger19.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n      }\n      try {\n        return getAddress(name);\n      } catch (error) {\n      }\n      if (!resolver) {\n        logger19.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"resolveName\"\n        });\n      }\n      const address = yield resolver.resolveName(name);\n      if (address == null) {\n        logger19.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n      }\n      return address;\n    });\n  }\n  function resolveAddresses(resolver, value, paramType) {\n    return __awaiter5(this, void 0, void 0, function* () {\n      if (Array.isArray(paramType)) {\n        return yield Promise.all(paramType.map((paramType2, index) => {\n          return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType2.name], paramType2);\n        }));\n      }\n      if (paramType.type === \"address\") {\n        return yield resolveName(resolver, value);\n      }\n      if (paramType.type === \"tuple\") {\n        return yield resolveAddresses(resolver, value, paramType.components);\n      }\n      if (paramType.baseType === \"array\") {\n        if (!Array.isArray(value)) {\n          return Promise.reject(logger19.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"value\",\n            value\n          }));\n        }\n        return yield Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\n      }\n      return value;\n    });\n  }\n  function populateTransaction(contract, fragment, args) {\n    return __awaiter5(this, void 0, void 0, function* () {\n      let overrides = {};\n      if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n        overrides = shallowCopy(args.pop());\n      }\n      logger19.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n      if (contract.signer) {\n        if (overrides.from) {\n          overrides.from = resolveProperties({\n            override: resolveName(contract.signer, overrides.from),\n            signer: contract.signer.getAddress()\n          }).then((check) => __awaiter5(this, void 0, void 0, function* () {\n            if (getAddress(check.signer) !== check.override) {\n              logger19.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides.from\"\n              });\n            }\n            return check.override;\n          }));\n        } else {\n          overrides.from = contract.signer.getAddress();\n        }\n      } else if (overrides.from) {\n        overrides.from = resolveName(contract.provider, overrides.from);\n      }\n      const resolved = yield resolveProperties({\n        args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n        address: contract.resolvedAddress,\n        overrides: resolveProperties(overrides) || {}\n      });\n      const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n      const tx = {\n        data,\n        to: resolved.address\n      };\n      const ro = resolved.overrides;\n      if (ro.nonce != null) {\n        tx.nonce = BigNumber.from(ro.nonce).toNumber();\n      }\n      if (ro.gasLimit != null) {\n        tx.gasLimit = BigNumber.from(ro.gasLimit);\n      }\n      if (ro.gasPrice != null) {\n        tx.gasPrice = BigNumber.from(ro.gasPrice);\n      }\n      if (ro.maxFeePerGas != null) {\n        tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);\n      }\n      if (ro.maxPriorityFeePerGas != null) {\n        tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);\n      }\n      if (ro.from != null) {\n        tx.from = ro.from;\n      }\n      if (ro.type != null) {\n        tx.type = ro.type;\n      }\n      if (ro.accessList != null) {\n        tx.accessList = accessListify(ro.accessList);\n      }\n      if (tx.gasLimit == null && fragment.gas != null) {\n        let intrinsic = 21e3;\n        const bytes3 = arrayify(data);\n        for (let i = 0; i < bytes3.length; i++) {\n          intrinsic += 4;\n          if (bytes3[i]) {\n            intrinsic += 64;\n          }\n        }\n        tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n      }\n      if (ro.value) {\n        const roValue = BigNumber.from(ro.value);\n        if (!roValue.isZero() && !fragment.payable) {\n          logger19.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"overrides.value\",\n            value: overrides.value\n          });\n        }\n        tx.value = roValue;\n      }\n      if (ro.customData) {\n        tx.customData = shallowCopy(ro.customData);\n      }\n      if (ro.ccipReadEnabled) {\n        tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n      }\n      delete overrides.nonce;\n      delete overrides.gasLimit;\n      delete overrides.gasPrice;\n      delete overrides.from;\n      delete overrides.value;\n      delete overrides.type;\n      delete overrides.accessList;\n      delete overrides.maxFeePerGas;\n      delete overrides.maxPriorityFeePerGas;\n      delete overrides.customData;\n      delete overrides.ccipReadEnabled;\n      const leftovers = Object.keys(overrides).filter((key2) => overrides[key2] != null);\n      if (leftovers.length) {\n        logger19.throwError(`cannot override ${leftovers.map((l) => JSON.stringify(l)).join(\",\")}`, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"overrides\",\n          overrides: leftovers\n        });\n      }\n      return tx;\n    });\n  }\n  function buildPopulate(contract, fragment) {\n    return function(...args) {\n      return populateTransaction(contract, fragment, args);\n    };\n  }\n  function buildEstimate(contract, fragment) {\n    const signerOrProvider = contract.signer || contract.provider;\n    return function(...args) {\n      return __awaiter5(this, void 0, void 0, function* () {\n        if (!signerOrProvider) {\n          logger19.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"estimateGas\"\n          });\n        }\n        const tx = yield populateTransaction(contract, fragment, args);\n        return yield signerOrProvider.estimateGas(tx);\n      });\n    };\n  }\n  function addContractWait(contract, tx) {\n    const wait2 = tx.wait.bind(tx);\n    tx.wait = (confirmations) => {\n      return wait2(confirmations).then((receipt) => {\n        receipt.events = receipt.logs.map((log) => {\n          let event = deepCopy(log);\n          let parsed = null;\n          try {\n            parsed = contract.interface.parseLog(log);\n          } catch (e) {\n          }\n          if (parsed) {\n            event.args = parsed.args;\n            event.decode = (data, topics) => {\n              return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n          }\n          event.removeListener = () => {\n            return contract.provider;\n          };\n          event.getBlock = () => {\n            return contract.provider.getBlock(receipt.blockHash);\n          };\n          event.getTransaction = () => {\n            return contract.provider.getTransaction(receipt.transactionHash);\n          };\n          event.getTransactionReceipt = () => {\n            return Promise.resolve(receipt);\n          };\n          return event;\n        });\n        return receipt;\n      });\n    };\n  }\n  function buildCall(contract, fragment, collapseSimple) {\n    const signerOrProvider = contract.signer || contract.provider;\n    return function(...args) {\n      return __awaiter5(this, void 0, void 0, function* () {\n        let blockTag = void 0;\n        if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n          const overrides = shallowCopy(args.pop());\n          if (overrides.blockTag != null) {\n            blockTag = yield overrides.blockTag;\n          }\n          delete overrides.blockTag;\n          args.push(overrides);\n        }\n        if (contract.deployTransaction != null) {\n          yield contract._deployed(blockTag);\n        }\n        const tx = yield populateTransaction(contract, fragment, args);\n        const result = yield signerOrProvider.call(tx, blockTag);\n        try {\n          let value = contract.interface.decodeFunctionResult(fragment, result);\n          if (collapseSimple && fragment.outputs.length === 1) {\n            value = value[0];\n          }\n          return value;\n        } catch (error) {\n          if (error.code === Logger.errors.CALL_EXCEPTION) {\n            error.address = contract.address;\n            error.args = args;\n            error.transaction = tx;\n          }\n          throw error;\n        }\n      });\n    };\n  }\n  function buildSend(contract, fragment) {\n    return function(...args) {\n      return __awaiter5(this, void 0, void 0, function* () {\n        if (!contract.signer) {\n          logger19.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"sendTransaction\"\n          });\n        }\n        if (contract.deployTransaction != null) {\n          yield contract._deployed();\n        }\n        const txRequest = yield populateTransaction(contract, fragment, args);\n        const tx = yield contract.signer.sendTransaction(txRequest);\n        addContractWait(contract, tx);\n        return tx;\n      });\n    };\n  }\n  function buildDefault(contract, fragment, collapseSimple) {\n    if (fragment.constant) {\n      return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n  }\n  function getEventTag(filter) {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n      return \"*\";\n    }\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\n      if (Array.isArray(topic)) {\n        return topic.join(\"|\");\n      }\n      return topic;\n    }).join(\":\") : \"\");\n  }\n  var __awaiter5, logger19, allowedTransactionKeys3, RunningEvent, ErrorRunningEvent, FragmentRunningEvent, WildcardRunningEvent, BaseContract, Contract, ContractFactory;\n  var init_lib18 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+contracts@5.8.0/node_modules/@ethersproject/contracts/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib13();\n      init_lib14();\n      init_lib15();\n      init_lib7();\n      init_lib3();\n      init_lib2();\n      init_lib4();\n      init_lib17();\n      init_lib();\n      init_version14();\n      __awaiter5 = function(thisArg, _arguments, P, generator) {\n        function adopt(value) {\n          return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n          });\n        }\n        return new (P || (P = Promise))(function(resolve, reject) {\n          function fulfilled(value) {\n            try {\n              step(generator.next(value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function rejected(value) {\n            try {\n              step(generator[\"throw\"](value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n          }\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n      };\n      logger19 = new Logger(version15);\n      allowedTransactionKeys3 = {\n        chainId: true,\n        data: true,\n        from: true,\n        gasLimit: true,\n        gasPrice: true,\n        nonce: true,\n        to: true,\n        value: true,\n        type: true,\n        accessList: true,\n        maxFeePerGas: true,\n        maxPriorityFeePerGas: true,\n        customData: true,\n        ccipReadEnabled: true\n      };\n      RunningEvent = class {\n        constructor(tag, filter) {\n          defineReadOnly(this, \"tag\", tag);\n          defineReadOnly(this, \"filter\", filter);\n          this._listeners = [];\n        }\n        addListener(listener, once2) {\n          this._listeners.push({ listener, once: once2 });\n        }\n        removeListener(listener) {\n          let done = false;\n          this._listeners = this._listeners.filter((item) => {\n            if (done || item.listener !== listener) {\n              return true;\n            }\n            done = true;\n            return false;\n          });\n        }\n        removeAllListeners() {\n          this._listeners = [];\n        }\n        listeners() {\n          return this._listeners.map((i) => i.listener);\n        }\n        listenerCount() {\n          return this._listeners.length;\n        }\n        run(args) {\n          const listenerCount = this.listenerCount();\n          this._listeners = this._listeners.filter((item) => {\n            const argsCopy = args.slice();\n            setTimeout(() => {\n              item.listener.apply(this, argsCopy);\n            }, 0);\n            return !item.once;\n          });\n          return listenerCount;\n        }\n        prepareEvent(event) {\n        }\n        // Returns the array that will be applied to an emit\n        getEmit(event) {\n          return [event];\n        }\n      };\n      ErrorRunningEvent = class extends RunningEvent {\n        constructor() {\n          super(\"error\", null);\n        }\n      };\n      FragmentRunningEvent = class extends RunningEvent {\n        constructor(address, contractInterface, fragment, topics) {\n          const filter = {\n            address\n          };\n          let topic = contractInterface.getEventTopic(fragment);\n          if (topics) {\n            if (topic !== topics[0]) {\n              logger19.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n            }\n            filter.topics = topics.slice();\n          } else {\n            filter.topics = [topic];\n          }\n          super(getEventTag(filter), filter);\n          defineReadOnly(this, \"address\", address);\n          defineReadOnly(this, \"interface\", contractInterface);\n          defineReadOnly(this, \"fragment\", fragment);\n        }\n        prepareEvent(event) {\n          super.prepareEvent(event);\n          event.event = this.fragment.name;\n          event.eventSignature = this.fragment.format();\n          event.decode = (data, topics) => {\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n          };\n          try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n          } catch (error) {\n            event.args = null;\n            event.decodeError = error;\n          }\n        }\n        getEmit(event) {\n          const errors = checkResultErrors(event.args);\n          if (errors.length) {\n            throw errors[0].error;\n          }\n          const args = (event.args || []).slice();\n          args.push(event);\n          return args;\n        }\n      };\n      WildcardRunningEvent = class extends RunningEvent {\n        constructor(address, contractInterface) {\n          super(\"*\", { address });\n          defineReadOnly(this, \"address\", address);\n          defineReadOnly(this, \"interface\", contractInterface);\n        }\n        prepareEvent(event) {\n          super.prepareEvent(event);\n          try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n            event.decode = (data, topics) => {\n              return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n            event.args = parsed.args;\n          } catch (error) {\n          }\n        }\n      };\n      BaseContract = class {\n        constructor(addressOrName, contractInterface, signerOrProvider) {\n          defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n          if (signerOrProvider == null) {\n            defineReadOnly(this, \"provider\", null);\n            defineReadOnly(this, \"signer\", null);\n          } else if (Signer.isSigner(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n            defineReadOnly(this, \"signer\", signerOrProvider);\n          } else if (Provider.isProvider(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider);\n            defineReadOnly(this, \"signer\", null);\n          } else {\n            logger19.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n          }\n          defineReadOnly(this, \"callStatic\", {});\n          defineReadOnly(this, \"estimateGas\", {});\n          defineReadOnly(this, \"functions\", {});\n          defineReadOnly(this, \"populateTransaction\", {});\n          defineReadOnly(this, \"filters\", {});\n          {\n            const uniqueFilters = {};\n            Object.keys(this.interface.events).forEach((eventSignature) => {\n              const event = this.interface.events[eventSignature];\n              defineReadOnly(this.filters, eventSignature, (...args) => {\n                return {\n                  address: this.address,\n                  topics: this.interface.encodeFilterTopics(event, args)\n                };\n              });\n              if (!uniqueFilters[event.name]) {\n                uniqueFilters[event.name] = [];\n              }\n              uniqueFilters[event.name].push(eventSignature);\n            });\n            Object.keys(uniqueFilters).forEach((name) => {\n              const filters = uniqueFilters[name];\n              if (filters.length === 1) {\n                defineReadOnly(this.filters, name, this.filters[filters[0]]);\n              } else {\n                logger19.warn(`Duplicate definition of ${name} (${filters.join(\", \")})`);\n              }\n            });\n          }\n          defineReadOnly(this, \"_runningEvents\", {});\n          defineReadOnly(this, \"_wrappedEmits\", {});\n          if (addressOrName == null) {\n            logger19.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n          }\n          defineReadOnly(this, \"address\", addressOrName);\n          if (this.provider) {\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n          } else {\n            try {\n              defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n            } catch (error) {\n              logger19.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new Contract\"\n              });\n            }\n          }\n          this.resolvedAddress.catch((e) => {\n          });\n          const uniqueNames = {};\n          const uniqueSignatures = {};\n          Object.keys(this.interface.functions).forEach((signature2) => {\n            const fragment = this.interface.functions[signature2];\n            if (uniqueSignatures[signature2]) {\n              logger19.warn(`Duplicate ABI entry for ${JSON.stringify(signature2)}`);\n              return;\n            }\n            uniqueSignatures[signature2] = true;\n            {\n              const name = fragment.name;\n              if (!uniqueNames[`%${name}`]) {\n                uniqueNames[`%${name}`] = [];\n              }\n              uniqueNames[`%${name}`].push(signature2);\n            }\n            if (this[signature2] == null) {\n              defineReadOnly(this, signature2, buildDefault(this, fragment, true));\n            }\n            if (this.functions[signature2] == null) {\n              defineReadOnly(this.functions, signature2, buildDefault(this, fragment, false));\n            }\n            if (this.callStatic[signature2] == null) {\n              defineReadOnly(this.callStatic, signature2, buildCall(this, fragment, true));\n            }\n            if (this.populateTransaction[signature2] == null) {\n              defineReadOnly(this.populateTransaction, signature2, buildPopulate(this, fragment));\n            }\n            if (this.estimateGas[signature2] == null) {\n              defineReadOnly(this.estimateGas, signature2, buildEstimate(this, fragment));\n            }\n          });\n          Object.keys(uniqueNames).forEach((name) => {\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) {\n              return;\n            }\n            name = name.substring(1);\n            const signature2 = signatures[0];\n            try {\n              if (this[name] == null) {\n                defineReadOnly(this, name, this[signature2]);\n              }\n            } catch (e) {\n            }\n            if (this.functions[name] == null) {\n              defineReadOnly(this.functions, name, this.functions[signature2]);\n            }\n            if (this.callStatic[name] == null) {\n              defineReadOnly(this.callStatic, name, this.callStatic[signature2]);\n            }\n            if (this.populateTransaction[name] == null) {\n              defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature2]);\n            }\n            if (this.estimateGas[name] == null) {\n              defineReadOnly(this.estimateGas, name, this.estimateGas[signature2]);\n            }\n          });\n        }\n        static getContractAddress(transaction) {\n          return getContractAddress(transaction);\n        }\n        static getInterface(contractInterface) {\n          if (Interface.isInterface(contractInterface)) {\n            return contractInterface;\n          }\n          return new Interface(contractInterface);\n        }\n        // @TODO: Allow timeout?\n        deployed() {\n          return this._deployed();\n        }\n        _deployed(blockTag) {\n          if (!this._deployedPromise) {\n            if (this.deployTransaction) {\n              this._deployedPromise = this.deployTransaction.wait().then(() => {\n                return this;\n              });\n            } else {\n              this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\n                if (code === \"0x\") {\n                  logger19.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    contractAddress: this.address,\n                    operation: \"getDeployed\"\n                  });\n                }\n                return this;\n              });\n            }\n          }\n          return this._deployedPromise;\n        }\n        // @TODO:\n        // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n        // @TODO:\n        // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n        fallback(overrides) {\n          if (!this.signer) {\n            logger19.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" });\n          }\n          const tx = shallowCopy(overrides || {});\n          [\"from\", \"to\"].forEach(function(key2) {\n            if (tx[key2] == null) {\n              return;\n            }\n            logger19.throwError(\"cannot override \" + key2, Logger.errors.UNSUPPORTED_OPERATION, { operation: key2 });\n          });\n          tx.to = this.resolvedAddress;\n          return this.deployed().then(() => {\n            return this.signer.sendTransaction(tx);\n          });\n        }\n        // Reconnect to a different signer or provider\n        connect(signerOrProvider) {\n          if (typeof signerOrProvider === \"string\") {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n          }\n          const contract = new this.constructor(this.address, this.interface, signerOrProvider);\n          if (this.deployTransaction) {\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n          }\n          return contract;\n        }\n        // Re-attach to a different on-chain instance of this contract\n        attach(addressOrName) {\n          return new this.constructor(addressOrName, this.interface, this.signer || this.provider);\n        }\n        static isIndexed(value) {\n          return Indexed.isIndexed(value);\n        }\n        _normalizeRunningEvent(runningEvent) {\n          if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n          }\n          return runningEvent;\n        }\n        _getRunningEvent(eventName) {\n          if (typeof eventName === \"string\") {\n            if (eventName === \"error\") {\n              return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n            if (eventName === \"event\") {\n              return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n            if (eventName === \"*\") {\n              return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n            const fragment = this.interface.getEvent(eventName);\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n          }\n          if (eventName.topics && eventName.topics.length > 0) {\n            try {\n              const topic = eventName.topics[0];\n              if (typeof topic !== \"string\") {\n                throw new Error(\"invalid topic\");\n              }\n              const fragment = this.interface.getEvent(topic);\n              return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            } catch (error) {\n            }\n            const filter = {\n              address: this.address,\n              topics: eventName.topics\n            };\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n          }\n          return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n        }\n        _checkRunningEvents(runningEvent) {\n          if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n            const emit3 = this._wrappedEmits[runningEvent.tag];\n            if (emit3 && runningEvent.filter) {\n              this.provider.off(runningEvent.filter, emit3);\n              delete this._wrappedEmits[runningEvent.tag];\n            }\n          }\n        }\n        // Subclasses can override this to gracefully recover\n        // from parse errors if they wish\n        _wrapEvent(runningEvent, log, listener) {\n          const event = deepCopy(log);\n          event.removeListener = () => {\n            if (!listener) {\n              return;\n            }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n          };\n          event.getBlock = () => {\n            return this.provider.getBlock(log.blockHash);\n          };\n          event.getTransaction = () => {\n            return this.provider.getTransaction(log.transactionHash);\n          };\n          event.getTransactionReceipt = () => {\n            return this.provider.getTransactionReceipt(log.transactionHash);\n          };\n          runningEvent.prepareEvent(event);\n          return event;\n        }\n        _addEventListener(runningEvent, listener, once2) {\n          if (!this.provider) {\n            logger19.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" });\n          }\n          runningEvent.addListener(listener, once2);\n          this._runningEvents[runningEvent.tag] = runningEvent;\n          if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log) => {\n              let event = this._wrapEvent(runningEvent, log, listener);\n              if (event.decodeError == null) {\n                try {\n                  const args = runningEvent.getEmit(event);\n                  this.emit(runningEvent.filter, ...args);\n                } catch (error) {\n                  event.decodeError = error.error;\n                }\n              }\n              if (runningEvent.filter != null) {\n                this.emit(\"event\", event);\n              }\n              if (event.decodeError != null) {\n                this.emit(\"error\", event.decodeError, event);\n              }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n            if (runningEvent.filter != null) {\n              this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n          }\n        }\n        queryFilter(event, fromBlockOrBlockhash, toBlock) {\n          const runningEvent = this._getRunningEvent(event);\n          const filter = shallowCopy(runningEvent.filter);\n          if (typeof fromBlockOrBlockhash === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n              logger19.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            filter.blockHash = fromBlockOrBlockhash;\n          } else {\n            filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;\n            filter.toBlock = toBlock != null ? toBlock : \"latest\";\n          }\n          return this.provider.getLogs(filter).then((logs) => {\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n          });\n        }\n        on(event, listener) {\n          this._addEventListener(this._getRunningEvent(event), listener, false);\n          return this;\n        }\n        once(event, listener) {\n          this._addEventListener(this._getRunningEvent(event), listener, true);\n          return this;\n        }\n        emit(eventName, ...args) {\n          if (!this.provider) {\n            return false;\n          }\n          const runningEvent = this._getRunningEvent(eventName);\n          const result = runningEvent.run(args) > 0;\n          this._checkRunningEvents(runningEvent);\n          return result;\n        }\n        listenerCount(eventName) {\n          if (!this.provider) {\n            return 0;\n          }\n          if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key2) => {\n              return accum + this._runningEvents[key2].listenerCount();\n            }, 0);\n          }\n          return this._getRunningEvent(eventName).listenerCount();\n        }\n        listeners(eventName) {\n          if (!this.provider) {\n            return [];\n          }\n          if (eventName == null) {\n            const result = [];\n            for (let tag in this._runningEvents) {\n              this._runningEvents[tag].listeners().forEach((listener) => {\n                result.push(listener);\n              });\n            }\n            return result;\n          }\n          return this._getRunningEvent(eventName).listeners();\n        }\n        removeAllListeners(eventName) {\n          if (!this.provider) {\n            return this;\n          }\n          if (eventName == null) {\n            for (const tag in this._runningEvents) {\n              const runningEvent2 = this._runningEvents[tag];\n              runningEvent2.removeAllListeners();\n              this._checkRunningEvents(runningEvent2);\n            }\n            return this;\n          }\n          const runningEvent = this._getRunningEvent(eventName);\n          runningEvent.removeAllListeners();\n          this._checkRunningEvents(runningEvent);\n          return this;\n        }\n        off(eventName, listener) {\n          if (!this.provider) {\n            return this;\n          }\n          const runningEvent = this._getRunningEvent(eventName);\n          runningEvent.removeListener(listener);\n          this._checkRunningEvents(runningEvent);\n          return this;\n        }\n        removeListener(eventName, listener) {\n          return this.off(eventName, listener);\n        }\n      };\n      Contract = class extends BaseContract {\n      };\n      ContractFactory = class {\n        constructor(contractInterface, bytecode, signer) {\n          let bytecodeHex = null;\n          if (typeof bytecode === \"string\") {\n            bytecodeHex = bytecode;\n          } else if (isBytes(bytecode)) {\n            bytecodeHex = hexlify(bytecode);\n          } else if (bytecode && typeof bytecode.object === \"string\") {\n            bytecodeHex = bytecode.object;\n          } else {\n            bytecodeHex = \"!\";\n          }\n          if (bytecodeHex.substring(0, 2) !== \"0x\") {\n            bytecodeHex = \"0x\" + bytecodeHex;\n          }\n          if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {\n            logger19.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n          }\n          if (signer && !Signer.isSigner(signer)) {\n            logger19.throwArgumentError(\"invalid signer\", \"signer\", signer);\n          }\n          defineReadOnly(this, \"bytecode\", bytecodeHex);\n          defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n          defineReadOnly(this, \"signer\", signer || null);\n        }\n        // @TODO: Future; rename to populateTransaction?\n        getDeployTransaction(...args) {\n          let tx = {};\n          if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n            tx = shallowCopy(args.pop());\n            for (const key2 in tx) {\n              if (!allowedTransactionKeys3[key2]) {\n                throw new Error(\"unknown transaction override \" + key2);\n              }\n            }\n          }\n          [\"data\", \"from\", \"to\"].forEach((key2) => {\n            if (tx[key2] == null) {\n              return;\n            }\n            logger19.throwError(\"cannot override \" + key2, Logger.errors.UNSUPPORTED_OPERATION, { operation: key2 });\n          });\n          if (tx.value) {\n            const value = BigNumber.from(tx.value);\n            if (!value.isZero() && !this.interface.deploy.payable) {\n              logger19.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides.value\",\n                value: tx.value\n              });\n            }\n          }\n          logger19.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n          tx.data = hexlify(concat([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n          ]));\n          return tx;\n        }\n        deploy(...args) {\n          return __awaiter5(this, void 0, void 0, function* () {\n            let overrides = {};\n            if (args.length === this.interface.deploy.inputs.length + 1) {\n              overrides = args.pop();\n            }\n            logger19.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n            const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n            params.push(overrides);\n            const unsignedTx = this.getDeployTransaction(...params);\n            const tx = yield this.signer.sendTransaction(unsignedTx);\n            const address = getStatic(this.constructor, \"getContractAddress\")(tx);\n            const contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer);\n            addContractWait(contract, tx);\n            defineReadOnly(contract, \"deployTransaction\", tx);\n            return contract;\n          });\n        }\n        attach(address) {\n          return this.constructor.getContract(address, this.interface, this.signer);\n        }\n        connect(signer) {\n          return new this.constructor(this.interface, this.bytecode, signer);\n        }\n        static fromSolidity(compilerOutput, signer) {\n          if (compilerOutput == null) {\n            logger19.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n          }\n          if (typeof compilerOutput === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n          }\n          const abi = compilerOutput.abi;\n          let bytecode = null;\n          if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n          } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n          }\n          return new this(abi, bytecode, signer);\n        }\n        static getInterface(contractInterface) {\n          return Contract.getInterface(contractInterface);\n        }\n        static getContractAddress(tx) {\n          return getContractAddress(tx);\n        }\n        static getContract(address, contractInterface, signer) {\n          return new Contract(address, contractInterface, signer);\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+basex@5.8.0/node_modules/@ethersproject/basex/lib.esm/index.js\n  var BaseX, Base32, Base58;\n  var init_lib19 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+basex@5.8.0/node_modules/@ethersproject/basex/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib2();\n      init_lib4();\n      BaseX = class {\n        constructor(alphabet) {\n          defineReadOnly(this, \"alphabet\", alphabet);\n          defineReadOnly(this, \"base\", alphabet.length);\n          defineReadOnly(this, \"_alphabetMap\", {});\n          defineReadOnly(this, \"_leader\", alphabet.charAt(0));\n          for (let i = 0; i < alphabet.length; i++) {\n            this._alphabetMap[alphabet.charAt(i)] = i;\n          }\n        }\n        encode(value) {\n          let source = arrayify(value);\n          if (source.length === 0) {\n            return \"\";\n          }\n          let digits = [0];\n          for (let i = 0; i < source.length; ++i) {\n            let carry = source[i];\n            for (let j = 0; j < digits.length; ++j) {\n              carry += digits[j] << 8;\n              digits[j] = carry % this.base;\n              carry = carry / this.base | 0;\n            }\n            while (carry > 0) {\n              digits.push(carry % this.base);\n              carry = carry / this.base | 0;\n            }\n          }\n          let string = \"\";\n          for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {\n            string += this._leader;\n          }\n          for (let q = digits.length - 1; q >= 0; --q) {\n            string += this.alphabet[digits[q]];\n          }\n          return string;\n        }\n        decode(value) {\n          if (typeof value !== \"string\") {\n            throw new TypeError(\"Expected String\");\n          }\n          let bytes3 = [];\n          if (value.length === 0) {\n            return new Uint8Array(bytes3);\n          }\n          bytes3.push(0);\n          for (let i = 0; i < value.length; i++) {\n            let byte = this._alphabetMap[value[i]];\n            if (byte === void 0) {\n              throw new Error(\"Non-base\" + this.base + \" character\");\n            }\n            let carry = byte;\n            for (let j = 0; j < bytes3.length; ++j) {\n              carry += bytes3[j] * this.base;\n              bytes3[j] = carry & 255;\n              carry >>= 8;\n            }\n            while (carry > 0) {\n              bytes3.push(carry & 255);\n              carry >>= 8;\n            }\n          }\n          for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {\n            bytes3.push(0);\n          }\n          return arrayify(new Uint8Array(bytes3.reverse()));\n        }\n      };\n      Base32 = new BaseX(\"abcdefghijklmnopqrstuvwxyz234567\");\n      Base58 = new BaseX(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+sha2@5.8.0/node_modules/@ethersproject/sha2/lib.esm/types.js\n  var SupportedAlgorithm;\n  var init_types3 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+sha2@5.8.0/node_modules/@ethersproject/sha2/lib.esm/types.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      (function(SupportedAlgorithm2) {\n        SupportedAlgorithm2[\"sha256\"] = \"sha256\";\n        SupportedAlgorithm2[\"sha512\"] = \"sha512\";\n      })(SupportedAlgorithm || (SupportedAlgorithm = {}));\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+sha2@5.8.0/node_modules/@ethersproject/sha2/lib.esm/_version.js\n  var version16;\n  var init_version15 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+sha2@5.8.0/node_modules/@ethersproject/sha2/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version16 = \"sha2/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+sha2@5.8.0/node_modules/@ethersproject/sha2/lib.esm/sha2.js\n  function ripemd160(data) {\n    return \"0x\" + import_hash3.default.ripemd160().update(arrayify(data)).digest(\"hex\");\n  }\n  function sha256(data) {\n    return \"0x\" + import_hash3.default.sha256().update(arrayify(data)).digest(\"hex\");\n  }\n  function sha512(data) {\n    return \"0x\" + import_hash3.default.sha512().update(arrayify(data)).digest(\"hex\");\n  }\n  function computeHmac(algorithm, key2, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n      logger20.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"hmac\",\n        algorithm\n      });\n    }\n    return \"0x\" + import_hash3.default.hmac(import_hash3.default[algorithm], arrayify(key2)).update(arrayify(data)).digest(\"hex\");\n  }\n  var import_hash3, logger20;\n  var init_sha2 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+sha2@5.8.0/node_modules/@ethersproject/sha2/lib.esm/sha2.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      import_hash3 = __toESM(require_hash());\n      init_lib2();\n      init_types3();\n      init_lib();\n      init_version15();\n      logger20 = new Logger(version16);\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+sha2@5.8.0/node_modules/@ethersproject/sha2/lib.esm/index.js\n  var init_lib20 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+sha2@5.8.0/node_modules/@ethersproject/sha2/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_sha2();\n      init_types3();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+pbkdf2@5.8.0/node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js\n  function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {\n    password = arrayify(password);\n    salt = arrayify(salt);\n    let hLen;\n    let l = 1;\n    const DK = new Uint8Array(keylen);\n    const block1 = new Uint8Array(salt.length + 4);\n    block1.set(salt);\n    let r2;\n    let T;\n    for (let i = 1; i <= l; i++) {\n      block1[salt.length] = i >> 24 & 255;\n      block1[salt.length + 1] = i >> 16 & 255;\n      block1[salt.length + 2] = i >> 8 & 255;\n      block1[salt.length + 3] = i & 255;\n      let U = arrayify(computeHmac(hashAlgorithm, password, block1));\n      if (!hLen) {\n        hLen = U.length;\n        T = new Uint8Array(hLen);\n        l = Math.ceil(keylen / hLen);\n        r2 = keylen - (l - 1) * hLen;\n      }\n      T.set(U);\n      for (let j = 1; j < iterations; j++) {\n        U = arrayify(computeHmac(hashAlgorithm, password, U));\n        for (let k = 0; k < hLen; k++)\n          T[k] ^= U[k];\n      }\n      const destPos = (i - 1) * hLen;\n      const len = i === l ? r2 : hLen;\n      DK.set(arrayify(T).slice(0, len), destPos);\n    }\n    return hexlify(DK);\n  }\n  var init_pbkdf2 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+pbkdf2@5.8.0/node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib2();\n      init_lib20();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+pbkdf2@5.8.0/node_modules/@ethersproject/pbkdf2/lib.esm/index.js\n  var init_lib21 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+pbkdf2@5.8.0/node_modules/@ethersproject/pbkdf2/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_pbkdf2();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+wordlists@5.8.0/node_modules/@ethersproject/wordlists/lib.esm/_version.js\n  var version17;\n  var init_version16 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+wordlists@5.8.0/node_modules/@ethersproject/wordlists/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version17 = \"wordlists/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+wordlists@5.8.0/node_modules/@ethersproject/wordlists/lib.esm/wordlist.js\n  var exportWordlist, logger21, Wordlist;\n  var init_wordlist = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+wordlists@5.8.0/node_modules/@ethersproject/wordlists/lib.esm/wordlist.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib12();\n      init_lib4();\n      init_lib();\n      init_version16();\n      exportWordlist = false;\n      logger21 = new Logger(version17);\n      Wordlist = class _Wordlist {\n        constructor(locale) {\n          logger21.checkAbstract(new.target, _Wordlist);\n          defineReadOnly(this, \"locale\", locale);\n        }\n        // Subclasses may override this\n        split(mnemonic) {\n          return mnemonic.toLowerCase().split(/ +/g);\n        }\n        // Subclasses may override this\n        join(words2) {\n          return words2.join(\" \");\n        }\n        static check(wordlist2) {\n          const words2 = [];\n          for (let i = 0; i < 2048; i++) {\n            const word = wordlist2.getWord(i);\n            if (i !== wordlist2.getWordIndex(word)) {\n              return \"0x\";\n            }\n            words2.push(word);\n          }\n          return id(words2.join(\"\\n\") + \"\\n\");\n        }\n        static register(lang, name) {\n          if (!name) {\n            name = lang.locale;\n          }\n          if (exportWordlist) {\n            try {\n              const anyGlobal3 = window;\n              if (anyGlobal3._ethers && anyGlobal3._ethers.wordlists) {\n                if (!anyGlobal3._ethers.wordlists[name]) {\n                  defineReadOnly(anyGlobal3._ethers.wordlists, name, lang);\n                }\n              }\n            } catch (error) {\n            }\n          }\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+wordlists@5.8.0/node_modules/@ethersproject/wordlists/lib.esm/lang-en.js\n  function loadWords(lang) {\n    if (wordlist != null) {\n      return;\n    }\n    wordlist = words.replace(/([A-Z])/g, \" $1\").toLowerCase().substring(1).split(\" \");\n    if (Wordlist.check(lang) !== \"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60\") {\n      wordlist = null;\n      throw new Error(\"BIP39 Wordlist for en (English) FAILED\");\n    }\n  }\n  var words, wordlist, LangEn, langEn;\n  var init_lang_en = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+wordlists@5.8.0/node_modules/@ethersproject/wordlists/lib.esm/lang-en.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_wordlist();\n      words = \"AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo\";\n      wordlist = null;\n      LangEn = class extends Wordlist {\n        constructor() {\n          super(\"en\");\n        }\n        getWord(index) {\n          loadWords(this);\n          return wordlist[index];\n        }\n        getWordIndex(word) {\n          loadWords(this);\n          return wordlist.indexOf(word);\n        }\n      };\n      langEn = new LangEn();\n      Wordlist.register(langEn);\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+wordlists@5.8.0/node_modules/@ethersproject/wordlists/lib.esm/wordlists.js\n  var wordlists;\n  var init_wordlists = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+wordlists@5.8.0/node_modules/@ethersproject/wordlists/lib.esm/wordlists.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lang_en();\n      wordlists = {\n        en: langEn\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+wordlists@5.8.0/node_modules/@ethersproject/wordlists/lib.esm/index.js\n  var init_lib22 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+wordlists@5.8.0/node_modules/@ethersproject/wordlists/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_wordlist();\n      init_wordlists();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+hdnode@5.8.0/node_modules/@ethersproject/hdnode/lib.esm/_version.js\n  var version18;\n  var init_version17 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+hdnode@5.8.0/node_modules/@ethersproject/hdnode/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version18 = \"hdnode/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+hdnode@5.8.0/node_modules/@ethersproject/hdnode/lib.esm/index.js\n  function getUpperMask(bits) {\n    return (1 << bits) - 1 << 8 - bits;\n  }\n  function getLowerMask(bits) {\n    return (1 << bits) - 1;\n  }\n  function bytes32(value) {\n    return hexZeroPad(hexlify(value), 32);\n  }\n  function base58check(data) {\n    return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n  }\n  function getWordlist(wordlist2) {\n    if (wordlist2 == null) {\n      return wordlists[\"en\"];\n    }\n    if (typeof wordlist2 === \"string\") {\n      const words2 = wordlists[wordlist2];\n      if (words2 == null) {\n        logger22.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist2);\n      }\n      return words2;\n    }\n    return wordlist2;\n  }\n  function mnemonicToSeed(mnemonic, password) {\n    if (!password) {\n      password = \"\";\n    }\n    const salt = toUtf8Bytes(\"mnemonic\" + password, UnicodeNormalizationForm.NFKD);\n    return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, \"sha512\");\n  }\n  function mnemonicToEntropy(mnemonic, wordlist2) {\n    wordlist2 = getWordlist(wordlist2);\n    logger22.checkNormalize();\n    const words2 = wordlist2.split(mnemonic);\n    if (words2.length % 3 !== 0) {\n      throw new Error(\"invalid mnemonic\");\n    }\n    const entropy = arrayify(new Uint8Array(Math.ceil(11 * words2.length / 8)));\n    let offset = 0;\n    for (let i = 0; i < words2.length; i++) {\n      let index = wordlist2.getWordIndex(words2[i].normalize(\"NFKD\"));\n      if (index === -1) {\n        throw new Error(\"invalid mnemonic\");\n      }\n      for (let bit = 0; bit < 11; bit++) {\n        if (index & 1 << 10 - bit) {\n          entropy[offset >> 3] |= 1 << 7 - offset % 8;\n        }\n        offset++;\n      }\n    }\n    const entropyBits = 32 * words2.length / 3;\n    const checksumBits = words2.length / 3;\n    const checksumMask = getUpperMask(checksumBits);\n    const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n      throw new Error(\"invalid checksum\");\n    }\n    return hexlify(entropy.slice(0, entropyBits / 8));\n  }\n  function entropyToMnemonic(entropy, wordlist2) {\n    wordlist2 = getWordlist(wordlist2);\n    entropy = arrayify(entropy);\n    if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {\n      throw new Error(\"invalid entropy\");\n    }\n    const indices = [0];\n    let remainingBits = 11;\n    for (let i = 0; i < entropy.length; i++) {\n      if (remainingBits > 8) {\n        indices[indices.length - 1] <<= 8;\n        indices[indices.length - 1] |= entropy[i];\n        remainingBits -= 8;\n      } else {\n        indices[indices.length - 1] <<= remainingBits;\n        indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;\n        indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n        remainingBits += 3;\n      }\n    }\n    const checksumBits = entropy.length / 4;\n    const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);\n    indices[indices.length - 1] <<= checksumBits;\n    indices[indices.length - 1] |= checksum >> 8 - checksumBits;\n    return wordlist2.join(indices.map((index) => wordlist2.getWord(index)));\n  }\n  function isValidMnemonic(mnemonic, wordlist2) {\n    try {\n      mnemonicToEntropy(mnemonic, wordlist2);\n      return true;\n    } catch (error) {\n    }\n    return false;\n  }\n  function getAccountPath(index) {\n    if (typeof index !== \"number\" || index < 0 || index >= HardenedBit || index % 1) {\n      logger22.throwArgumentError(\"invalid account index\", \"index\", index);\n    }\n    return `m/44'/60'/${index}'/0/0`;\n  }\n  var logger22, N, MasterSecret, HardenedBit, _constructorGuard4, defaultPath, HDNode;\n  var init_lib23 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+hdnode@5.8.0/node_modules/@ethersproject/hdnode/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib19();\n      init_lib2();\n      init_lib3();\n      init_lib9();\n      init_lib21();\n      init_lib4();\n      init_lib16();\n      init_lib20();\n      init_lib17();\n      init_lib22();\n      init_lib();\n      init_version17();\n      logger22 = new Logger(version18);\n      N = BigNumber.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n      MasterSecret = toUtf8Bytes(\"Bitcoin seed\");\n      HardenedBit = 2147483648;\n      _constructorGuard4 = {};\n      defaultPath = \"m/44'/60'/0'/0/0\";\n      HDNode = class _HDNode {\n        /**\n         *  This constructor should not be called directly.\n         *\n         *  Please use:\n         *   - fromMnemonic\n         *   - fromSeed\n         */\n        constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {\n          if (constructorGuard !== _constructorGuard4) {\n            throw new Error(\"HDNode constructor cannot be called directly\");\n          }\n          if (privateKey) {\n            const signingKey = new SigningKey(privateKey);\n            defineReadOnly(this, \"privateKey\", signingKey.privateKey);\n            defineReadOnly(this, \"publicKey\", signingKey.compressedPublicKey);\n          } else {\n            defineReadOnly(this, \"privateKey\", null);\n            defineReadOnly(this, \"publicKey\", hexlify(publicKey));\n          }\n          defineReadOnly(this, \"parentFingerprint\", parentFingerprint);\n          defineReadOnly(this, \"fingerprint\", hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4));\n          defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n          defineReadOnly(this, \"chainCode\", chainCode);\n          defineReadOnly(this, \"index\", index);\n          defineReadOnly(this, \"depth\", depth);\n          if (mnemonicOrPath == null) {\n            defineReadOnly(this, \"mnemonic\", null);\n            defineReadOnly(this, \"path\", null);\n          } else if (typeof mnemonicOrPath === \"string\") {\n            defineReadOnly(this, \"mnemonic\", null);\n            defineReadOnly(this, \"path\", mnemonicOrPath);\n          } else {\n            defineReadOnly(this, \"mnemonic\", mnemonicOrPath);\n            defineReadOnly(this, \"path\", mnemonicOrPath.path);\n          }\n        }\n        get extendedKey() {\n          if (this.depth >= 256) {\n            throw new Error(\"Depth too large!\");\n          }\n          return base58check(concat([\n            this.privateKey != null ? \"0x0488ADE4\" : \"0x0488B21E\",\n            hexlify(this.depth),\n            this.parentFingerprint,\n            hexZeroPad(hexlify(this.index), 4),\n            this.chainCode,\n            this.privateKey != null ? concat([\"0x00\", this.privateKey]) : this.publicKey\n          ]));\n        }\n        neuter() {\n          return new _HDNode(_constructorGuard4, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n        }\n        _derive(index) {\n          if (index > 4294967295) {\n            throw new Error(\"invalid index - \" + String(index));\n          }\n          let path = this.path;\n          if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n          }\n          const data = new Uint8Array(37);\n          if (index & HardenedBit) {\n            if (!this.privateKey) {\n              throw new Error(\"cannot derive child of neutered node\");\n            }\n            data.set(arrayify(this.privateKey), 1);\n            if (path) {\n              path += \"'\";\n            }\n          } else {\n            data.set(arrayify(this.publicKey));\n          }\n          for (let i = 24; i >= 0; i -= 8) {\n            data[33 + (i >> 3)] = index >> 24 - i & 255;\n          }\n          const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));\n          const IL = I.slice(0, 32);\n          const IR = I.slice(32);\n          let ki = null;\n          let Ki = null;\n          if (this.privateKey) {\n            ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));\n          } else {\n            const ek = new SigningKey(hexlify(IL));\n            Ki = ek._addPoint(this.publicKey);\n          }\n          let mnemonicOrPath = path;\n          const srcMnemonic = this.mnemonic;\n          if (srcMnemonic) {\n            mnemonicOrPath = Object.freeze({\n              phrase: srcMnemonic.phrase,\n              path,\n              locale: srcMnemonic.locale || \"en\"\n            });\n          }\n          return new _HDNode(_constructorGuard4, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n        }\n        derivePath(path) {\n          const components = path.split(\"/\");\n          if (components.length === 0 || components[0] === \"m\" && this.depth !== 0) {\n            throw new Error(\"invalid path - \" + path);\n          }\n          if (components[0] === \"m\") {\n            components.shift();\n          }\n          let result = this;\n          for (let i = 0; i < components.length; i++) {\n            const component = components[i];\n            if (component.match(/^[0-9]+'$/)) {\n              const index = parseInt(component.substring(0, component.length - 1));\n              if (index >= HardenedBit) {\n                throw new Error(\"invalid path index - \" + component);\n              }\n              result = result._derive(HardenedBit + index);\n            } else if (component.match(/^[0-9]+$/)) {\n              const index = parseInt(component);\n              if (index >= HardenedBit) {\n                throw new Error(\"invalid path index - \" + component);\n              }\n              result = result._derive(index);\n            } else {\n              throw new Error(\"invalid path component - \" + component);\n            }\n          }\n          return result;\n        }\n        static _fromSeed(seed, mnemonic) {\n          const seedArray = arrayify(seed);\n          if (seedArray.length < 16 || seedArray.length > 64) {\n            throw new Error(\"invalid seed\");\n          }\n          const I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));\n          return new _HDNode(_constructorGuard4, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n        }\n        static fromMnemonic(mnemonic, password, wordlist2) {\n          wordlist2 = getWordlist(wordlist2);\n          mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist2), wordlist2);\n          return _HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n            phrase: mnemonic,\n            path: \"m\",\n            locale: wordlist2.locale\n          });\n        }\n        static fromSeed(seed) {\n          return _HDNode._fromSeed(seed, null);\n        }\n        static fromExtendedKey(extendedKey) {\n          const bytes3 = Base58.decode(extendedKey);\n          if (bytes3.length !== 82 || base58check(bytes3.slice(0, 78)) !== extendedKey) {\n            logger22.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n          }\n          const depth = bytes3[4];\n          const parentFingerprint = hexlify(bytes3.slice(5, 9));\n          const index = parseInt(hexlify(bytes3.slice(9, 13)).substring(2), 16);\n          const chainCode = hexlify(bytes3.slice(13, 45));\n          const key2 = bytes3.slice(45, 78);\n          switch (hexlify(bytes3.slice(0, 4))) {\n            case \"0x0488b21e\":\n            case \"0x043587cf\":\n              return new _HDNode(_constructorGuard4, null, hexlify(key2), parentFingerprint, chainCode, index, depth, null);\n            case \"0x0488ade4\":\n            case \"0x04358394 \":\n              if (key2[0] !== 0) {\n                break;\n              }\n              return new _HDNode(_constructorGuard4, hexlify(key2.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n          }\n          return logger22.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+random@5.8.0/node_modules/@ethersproject/random/lib.esm/_version.js\n  var version19;\n  var init_version18 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+random@5.8.0/node_modules/@ethersproject/random/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version19 = \"random/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+random@5.8.0/node_modules/@ethersproject/random/lib.esm/random.js\n  function getGlobal() {\n    if (typeof self !== \"undefined\") {\n      return self;\n    }\n    if (typeof window !== \"undefined\") {\n      return window;\n    }\n    if (typeof global !== \"undefined\") {\n      return global;\n    }\n    throw new Error(\"unable to locate global object\");\n  }\n  function randomBytes(length) {\n    if (length <= 0 || length > 1024 || length % 1 || length != length) {\n      logger23.throwArgumentError(\"invalid length\", \"length\", length);\n    }\n    const result = new Uint8Array(length);\n    crypto.getRandomValues(result);\n    return arrayify(result);\n  }\n  var logger23, anyGlobal, crypto;\n  var init_random = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+random@5.8.0/node_modules/@ethersproject/random/lib.esm/random.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib2();\n      init_lib();\n      init_version18();\n      logger23 = new Logger(version19);\n      anyGlobal = getGlobal();\n      crypto = anyGlobal.crypto || anyGlobal.msCrypto;\n      if (!crypto || !crypto.getRandomValues) {\n        logger23.warn(\"WARNING: Missing strong random number source\");\n        crypto = {\n          getRandomValues: function(buffer) {\n            return logger23.throwError(\"no secure random source avaialble\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"crypto.getRandomValues\"\n            });\n          }\n        };\n      }\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+random@5.8.0/node_modules/@ethersproject/random/lib.esm/shuffle.js\n  function shuffled(array) {\n    array = array.slice();\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const tmp = array[i];\n      array[i] = array[j];\n      array[j] = tmp;\n    }\n    return array;\n  }\n  var init_shuffle = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+random@5.8.0/node_modules/@ethersproject/random/lib.esm/shuffle.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+random@5.8.0/node_modules/@ethersproject/random/lib.esm/index.js\n  var init_lib24 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+random@5.8.0/node_modules/@ethersproject/random/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_random();\n      init_shuffle();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/aes-js@3.0.0/node_modules/aes-js/index.js\n  var require_aes_js = __commonJS({\n    \"../../../node_modules/.pnpm/aes-js@3.0.0/node_modules/aes-js/index.js\"(exports3, module) {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      (function(root) {\n        function checkInt(value) {\n          return parseInt(value) === value;\n        }\n        function checkInts(arrayish) {\n          if (!checkInt(arrayish.length)) {\n            return false;\n          }\n          for (var i = 0; i < arrayish.length; i++) {\n            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {\n              return false;\n            }\n          }\n          return true;\n        }\n        function coerceArray(arg, copy4) {\n          if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === \"Uint8Array\") {\n            if (copy4) {\n              if (arg.slice) {\n                arg = arg.slice();\n              } else {\n                arg = Array.prototype.slice.call(arg);\n              }\n            }\n            return arg;\n          }\n          if (Array.isArray(arg)) {\n            if (!checkInts(arg)) {\n              throw new Error(\"Array contains invalid value: \" + arg);\n            }\n            return new Uint8Array(arg);\n          }\n          if (checkInt(arg.length) && checkInts(arg)) {\n            return new Uint8Array(arg);\n          }\n          throw new Error(\"unsupported array-like object\");\n        }\n        function createArray(length) {\n          return new Uint8Array(length);\n        }\n        function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {\n          if (sourceStart != null || sourceEnd != null) {\n            if (sourceArray.slice) {\n              sourceArray = sourceArray.slice(sourceStart, sourceEnd);\n            } else {\n              sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);\n            }\n          }\n          targetArray.set(sourceArray, targetStart);\n        }\n        var convertUtf8 = /* @__PURE__ */ function() {\n          function toBytes2(text) {\n            var result = [], i = 0;\n            text = encodeURI(text);\n            while (i < text.length) {\n              var c = text.charCodeAt(i++);\n              if (c === 37) {\n                result.push(parseInt(text.substr(i, 2), 16));\n                i += 2;\n              } else {\n                result.push(c);\n              }\n            }\n            return coerceArray(result);\n          }\n          function fromBytes(bytes3) {\n            var result = [], i = 0;\n            while (i < bytes3.length) {\n              var c = bytes3[i];\n              if (c < 128) {\n                result.push(String.fromCharCode(c));\n                i++;\n              } else if (c > 191 && c < 224) {\n                result.push(String.fromCharCode((c & 31) << 6 | bytes3[i + 1] & 63));\n                i += 2;\n              } else {\n                result.push(String.fromCharCode((c & 15) << 12 | (bytes3[i + 1] & 63) << 6 | bytes3[i + 2] & 63));\n                i += 3;\n              }\n            }\n            return result.join(\"\");\n          }\n          return {\n            toBytes: toBytes2,\n            fromBytes\n          };\n        }();\n        var convertHex = /* @__PURE__ */ function() {\n          function toBytes2(text) {\n            var result = [];\n            for (var i = 0; i < text.length; i += 2) {\n              result.push(parseInt(text.substr(i, 2), 16));\n            }\n            return result;\n          }\n          var Hex = \"0123456789abcdef\";\n          function fromBytes(bytes3) {\n            var result = [];\n            for (var i = 0; i < bytes3.length; i++) {\n              var v = bytes3[i];\n              result.push(Hex[(v & 240) >> 4] + Hex[v & 15]);\n            }\n            return result.join(\"\");\n          }\n          return {\n            toBytes: toBytes2,\n            fromBytes\n          };\n        }();\n        var numberOfRounds = { 16: 10, 24: 12, 32: 14 };\n        var rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];\n        var S = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];\n        var Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];\n        var T12 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];\n        var T2 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];\n        var T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];\n        var T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];\n        var T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];\n        var T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];\n        var T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];\n        var T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];\n        var U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];\n        var U2 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];\n        var U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];\n        var U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];\n        function convertToInt32(bytes3) {\n          var result = [];\n          for (var i = 0; i < bytes3.length; i += 4) {\n            result.push(\n              bytes3[i] << 24 | bytes3[i + 1] << 16 | bytes3[i + 2] << 8 | bytes3[i + 3]\n            );\n          }\n          return result;\n        }\n        var AES = function(key2) {\n          if (!(this instanceof AES)) {\n            throw Error(\"AES must be instanitated with `new`\");\n          }\n          Object.defineProperty(this, \"key\", {\n            value: coerceArray(key2, true)\n          });\n          this._prepare();\n        };\n        AES.prototype._prepare = function() {\n          var rounds = numberOfRounds[this.key.length];\n          if (rounds == null) {\n            throw new Error(\"invalid key size (must be 16, 24 or 32 bytes)\");\n          }\n          this._Ke = [];\n          this._Kd = [];\n          for (var i = 0; i <= rounds; i++) {\n            this._Ke.push([0, 0, 0, 0]);\n            this._Kd.push([0, 0, 0, 0]);\n          }\n          var roundKeyCount = (rounds + 1) * 4;\n          var KC = this.key.length / 4;\n          var tk = convertToInt32(this.key);\n          var index;\n          for (var i = 0; i < KC; i++) {\n            index = i >> 2;\n            this._Ke[index][i % 4] = tk[i];\n            this._Kd[rounds - index][i % 4] = tk[i];\n          }\n          var rconpointer = 0;\n          var t = KC, tt;\n          while (t < roundKeyCount) {\n            tt = tk[KC - 1];\n            tk[0] ^= S[tt >> 16 & 255] << 24 ^ S[tt >> 8 & 255] << 16 ^ S[tt & 255] << 8 ^ S[tt >> 24 & 255] ^ rcon[rconpointer] << 24;\n            rconpointer += 1;\n            if (KC != 8) {\n              for (var i = 1; i < KC; i++) {\n                tk[i] ^= tk[i - 1];\n              }\n            } else {\n              for (var i = 1; i < KC / 2; i++) {\n                tk[i] ^= tk[i - 1];\n              }\n              tt = tk[KC / 2 - 1];\n              tk[KC / 2] ^= S[tt & 255] ^ S[tt >> 8 & 255] << 8 ^ S[tt >> 16 & 255] << 16 ^ S[tt >> 24 & 255] << 24;\n              for (var i = KC / 2 + 1; i < KC; i++) {\n                tk[i] ^= tk[i - 1];\n              }\n            }\n            var i = 0, r2, c;\n            while (i < KC && t < roundKeyCount) {\n              r2 = t >> 2;\n              c = t % 4;\n              this._Ke[r2][c] = tk[i];\n              this._Kd[rounds - r2][c] = tk[i++];\n              t++;\n            }\n          }\n          for (var r2 = 1; r2 < rounds; r2++) {\n            for (var c = 0; c < 4; c++) {\n              tt = this._Kd[r2][c];\n              this._Kd[r2][c] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];\n            }\n          }\n        };\n        AES.prototype.encrypt = function(plaintext) {\n          if (plaintext.length != 16) {\n            throw new Error(\"invalid plaintext size (must be 16 bytes)\");\n          }\n          var rounds = this._Ke.length - 1;\n          var a = [0, 0, 0, 0];\n          var t = convertToInt32(plaintext);\n          for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Ke[0][i];\n          }\n          for (var r2 = 1; r2 < rounds; r2++) {\n            for (var i = 0; i < 4; i++) {\n              a[i] = T12[t[i] >> 24 & 255] ^ T2[t[(i + 1) % 4] >> 16 & 255] ^ T3[t[(i + 2) % 4] >> 8 & 255] ^ T4[t[(i + 3) % 4] & 255] ^ this._Ke[r2][i];\n            }\n            t = a.slice();\n          }\n          var result = createArray(16), tt;\n          for (var i = 0; i < 4; i++) {\n            tt = this._Ke[rounds][i];\n            result[4 * i] = (S[t[i] >> 24 & 255] ^ tt >> 24) & 255;\n            result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;\n            result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;\n            result[4 * i + 3] = (S[t[(i + 3) % 4] & 255] ^ tt) & 255;\n          }\n          return result;\n        };\n        AES.prototype.decrypt = function(ciphertext) {\n          if (ciphertext.length != 16) {\n            throw new Error(\"invalid ciphertext size (must be 16 bytes)\");\n          }\n          var rounds = this._Kd.length - 1;\n          var a = [0, 0, 0, 0];\n          var t = convertToInt32(ciphertext);\n          for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Kd[0][i];\n          }\n          for (var r2 = 1; r2 < rounds; r2++) {\n            for (var i = 0; i < 4; i++) {\n              a[i] = T5[t[i] >> 24 & 255] ^ T6[t[(i + 3) % 4] >> 16 & 255] ^ T7[t[(i + 2) % 4] >> 8 & 255] ^ T8[t[(i + 1) % 4] & 255] ^ this._Kd[r2][i];\n            }\n            t = a.slice();\n          }\n          var result = createArray(16), tt;\n          for (var i = 0; i < 4; i++) {\n            tt = this._Kd[rounds][i];\n            result[4 * i] = (Si[t[i] >> 24 & 255] ^ tt >> 24) & 255;\n            result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;\n            result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;\n            result[4 * i + 3] = (Si[t[(i + 1) % 4] & 255] ^ tt) & 255;\n          }\n          return result;\n        };\n        var ModeOfOperationECB = function(key2) {\n          if (!(this instanceof ModeOfOperationECB)) {\n            throw Error(\"AES must be instanitated with `new`\");\n          }\n          this.description = \"Electronic Code Block\";\n          this.name = \"ecb\";\n          this._aes = new AES(key2);\n        };\n        ModeOfOperationECB.prototype.encrypt = function(plaintext) {\n          plaintext = coerceArray(plaintext);\n          if (plaintext.length % 16 !== 0) {\n            throw new Error(\"invalid plaintext size (must be multiple of 16 bytes)\");\n          }\n          var ciphertext = createArray(plaintext.length);\n          var block = createArray(16);\n          for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n            block = this._aes.encrypt(block);\n            copyArray(block, ciphertext, i);\n          }\n          return ciphertext;\n        };\n        ModeOfOperationECB.prototype.decrypt = function(ciphertext) {\n          ciphertext = coerceArray(ciphertext);\n          if (ciphertext.length % 16 !== 0) {\n            throw new Error(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n          }\n          var plaintext = createArray(ciphertext.length);\n          var block = createArray(16);\n          for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n            copyArray(block, plaintext, i);\n          }\n          return plaintext;\n        };\n        var ModeOfOperationCBC = function(key2, iv) {\n          if (!(this instanceof ModeOfOperationCBC)) {\n            throw Error(\"AES must be instanitated with `new`\");\n          }\n          this.description = \"Cipher Block Chaining\";\n          this.name = \"cbc\";\n          if (!iv) {\n            iv = createArray(16);\n          } else if (iv.length != 16) {\n            throw new Error(\"invalid initialation vector size (must be 16 bytes)\");\n          }\n          this._lastCipherblock = coerceArray(iv, true);\n          this._aes = new AES(key2);\n        };\n        ModeOfOperationCBC.prototype.encrypt = function(plaintext) {\n          plaintext = coerceArray(plaintext);\n          if (plaintext.length % 16 !== 0) {\n            throw new Error(\"invalid plaintext size (must be multiple of 16 bytes)\");\n          }\n          var ciphertext = createArray(plaintext.length);\n          var block = createArray(16);\n          for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n            for (var j = 0; j < 16; j++) {\n              block[j] ^= this._lastCipherblock[j];\n            }\n            this._lastCipherblock = this._aes.encrypt(block);\n            copyArray(this._lastCipherblock, ciphertext, i);\n          }\n          return ciphertext;\n        };\n        ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {\n          ciphertext = coerceArray(ciphertext);\n          if (ciphertext.length % 16 !== 0) {\n            throw new Error(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n          }\n          var plaintext = createArray(ciphertext.length);\n          var block = createArray(16);\n          for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n            for (var j = 0; j < 16; j++) {\n              plaintext[i + j] = block[j] ^ this._lastCipherblock[j];\n            }\n            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);\n          }\n          return plaintext;\n        };\n        var ModeOfOperationCFB = function(key2, iv, segmentSize) {\n          if (!(this instanceof ModeOfOperationCFB)) {\n            throw Error(\"AES must be instanitated with `new`\");\n          }\n          this.description = \"Cipher Feedback\";\n          this.name = \"cfb\";\n          if (!iv) {\n            iv = createArray(16);\n          } else if (iv.length != 16) {\n            throw new Error(\"invalid initialation vector size (must be 16 size)\");\n          }\n          if (!segmentSize) {\n            segmentSize = 1;\n          }\n          this.segmentSize = segmentSize;\n          this._shiftRegister = coerceArray(iv, true);\n          this._aes = new AES(key2);\n        };\n        ModeOfOperationCFB.prototype.encrypt = function(plaintext) {\n          if (plaintext.length % this.segmentSize != 0) {\n            throw new Error(\"invalid plaintext size (must be segmentSize bytes)\");\n          }\n          var encrypted = coerceArray(plaintext, true);\n          var xorSegment;\n          for (var i = 0; i < encrypted.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n            for (var j = 0; j < this.segmentSize; j++) {\n              encrypted[i + j] ^= xorSegment[j];\n            }\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n          }\n          return encrypted;\n        };\n        ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {\n          if (ciphertext.length % this.segmentSize != 0) {\n            throw new Error(\"invalid ciphertext size (must be segmentSize bytes)\");\n          }\n          var plaintext = coerceArray(ciphertext, true);\n          var xorSegment;\n          for (var i = 0; i < plaintext.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n            for (var j = 0; j < this.segmentSize; j++) {\n              plaintext[i + j] ^= xorSegment[j];\n            }\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n          }\n          return plaintext;\n        };\n        var ModeOfOperationOFB = function(key2, iv) {\n          if (!(this instanceof ModeOfOperationOFB)) {\n            throw Error(\"AES must be instanitated with `new`\");\n          }\n          this.description = \"Output Feedback\";\n          this.name = \"ofb\";\n          if (!iv) {\n            iv = createArray(16);\n          } else if (iv.length != 16) {\n            throw new Error(\"invalid initialation vector size (must be 16 bytes)\");\n          }\n          this._lastPrecipher = coerceArray(iv, true);\n          this._lastPrecipherIndex = 16;\n          this._aes = new AES(key2);\n        };\n        ModeOfOperationOFB.prototype.encrypt = function(plaintext) {\n          var encrypted = coerceArray(plaintext, true);\n          for (var i = 0; i < encrypted.length; i++) {\n            if (this._lastPrecipherIndex === 16) {\n              this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);\n              this._lastPrecipherIndex = 0;\n            }\n            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];\n          }\n          return encrypted;\n        };\n        ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;\n        var Counter = function(initialValue) {\n          if (!(this instanceof Counter)) {\n            throw Error(\"Counter must be instanitated with `new`\");\n          }\n          if (initialValue !== 0 && !initialValue) {\n            initialValue = 1;\n          }\n          if (typeof initialValue === \"number\") {\n            this._counter = createArray(16);\n            this.setValue(initialValue);\n          } else {\n            this.setBytes(initialValue);\n          }\n        };\n        Counter.prototype.setValue = function(value) {\n          if (typeof value !== \"number\" || parseInt(value) != value) {\n            throw new Error(\"invalid counter value (must be an integer)\");\n          }\n          for (var index = 15; index >= 0; --index) {\n            this._counter[index] = value % 256;\n            value = value >> 8;\n          }\n        };\n        Counter.prototype.setBytes = function(bytes3) {\n          bytes3 = coerceArray(bytes3, true);\n          if (bytes3.length != 16) {\n            throw new Error(\"invalid counter bytes size (must be 16 bytes)\");\n          }\n          this._counter = bytes3;\n        };\n        Counter.prototype.increment = function() {\n          for (var i = 15; i >= 0; i--) {\n            if (this._counter[i] === 255) {\n              this._counter[i] = 0;\n            } else {\n              this._counter[i]++;\n              break;\n            }\n          }\n        };\n        var ModeOfOperationCTR = function(key2, counter) {\n          if (!(this instanceof ModeOfOperationCTR)) {\n            throw Error(\"AES must be instanitated with `new`\");\n          }\n          this.description = \"Counter\";\n          this.name = \"ctr\";\n          if (!(counter instanceof Counter)) {\n            counter = new Counter(counter);\n          }\n          this._counter = counter;\n          this._remainingCounter = null;\n          this._remainingCounterIndex = 16;\n          this._aes = new AES(key2);\n        };\n        ModeOfOperationCTR.prototype.encrypt = function(plaintext) {\n          var encrypted = coerceArray(plaintext, true);\n          for (var i = 0; i < encrypted.length; i++) {\n            if (this._remainingCounterIndex === 16) {\n              this._remainingCounter = this._aes.encrypt(this._counter._counter);\n              this._remainingCounterIndex = 0;\n              this._counter.increment();\n            }\n            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];\n          }\n          return encrypted;\n        };\n        ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;\n        function pkcs7pad(data) {\n          data = coerceArray(data, true);\n          var padder = 16 - data.length % 16;\n          var result = createArray(data.length + padder);\n          copyArray(data, result);\n          for (var i = data.length; i < result.length; i++) {\n            result[i] = padder;\n          }\n          return result;\n        }\n        function pkcs7strip(data) {\n          data = coerceArray(data, true);\n          if (data.length < 16) {\n            throw new Error(\"PKCS#7 invalid length\");\n          }\n          var padder = data[data.length - 1];\n          if (padder > 16) {\n            throw new Error(\"PKCS#7 padding byte out of range\");\n          }\n          var length = data.length - padder;\n          for (var i = 0; i < padder; i++) {\n            if (data[length + i] !== padder) {\n              throw new Error(\"PKCS#7 invalid padding byte\");\n            }\n          }\n          var result = createArray(length);\n          copyArray(data, result, 0, 0, length);\n          return result;\n        }\n        var aesjs = {\n          AES,\n          Counter,\n          ModeOfOperation: {\n            ecb: ModeOfOperationECB,\n            cbc: ModeOfOperationCBC,\n            cfb: ModeOfOperationCFB,\n            ofb: ModeOfOperationOFB,\n            ctr: ModeOfOperationCTR\n          },\n          utils: {\n            hex: convertHex,\n            utf8: convertUtf8\n          },\n          padding: {\n            pkcs7: {\n              pad: pkcs7pad,\n              strip: pkcs7strip\n            }\n          },\n          _arrayTest: {\n            coerceArray,\n            createArray,\n            copyArray\n          }\n        };\n        if (typeof exports3 !== \"undefined\") {\n          module.exports = aesjs;\n        } else if (typeof define === \"function\" && define.amd) {\n          define(aesjs);\n        } else {\n          if (root.aesjs) {\n            aesjs._aesjs = root.aesjs;\n          }\n          root.aesjs = aesjs;\n        }\n      })(exports3);\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+json-wallets@5.8.0/node_modules/@ethersproject/json-wallets/lib.esm/_version.js\n  var version20;\n  var init_version19 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+json-wallets@5.8.0/node_modules/@ethersproject/json-wallets/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version20 = \"json-wallets/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+json-wallets@5.8.0/node_modules/@ethersproject/json-wallets/lib.esm/utils.js\n  function looseArrayify(hexString) {\n    if (typeof hexString === \"string\" && hexString.substring(0, 2) !== \"0x\") {\n      hexString = \"0x\" + hexString;\n    }\n    return arrayify(hexString);\n  }\n  function zpad(value, length) {\n    value = String(value);\n    while (value.length < length) {\n      value = \"0\" + value;\n    }\n    return value;\n  }\n  function getPassword(password) {\n    if (typeof password === \"string\") {\n      return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);\n    }\n    return arrayify(password);\n  }\n  function searchPath(object2, path) {\n    let currentChild = object2;\n    const comps = path.toLowerCase().split(\"/\");\n    for (let i = 0; i < comps.length; i++) {\n      let matchingChild = null;\n      for (const key2 in currentChild) {\n        if (key2.toLowerCase() === comps[i]) {\n          matchingChild = currentChild[key2];\n          break;\n        }\n      }\n      if (matchingChild === null) {\n        return null;\n      }\n      currentChild = matchingChild;\n    }\n    return currentChild;\n  }\n  function uuidV4(randomBytes3) {\n    const bytes3 = arrayify(randomBytes3);\n    bytes3[6] = bytes3[6] & 15 | 64;\n    bytes3[8] = bytes3[8] & 63 | 128;\n    const value = hexlify(bytes3);\n    return [\n      value.substring(2, 10),\n      value.substring(10, 14),\n      value.substring(14, 18),\n      value.substring(18, 22),\n      value.substring(22, 34)\n    ].join(\"-\");\n  }\n  var init_utils = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+json-wallets@5.8.0/node_modules/@ethersproject/json-wallets/lib.esm/utils.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib2();\n      init_lib9();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+json-wallets@5.8.0/node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js\n  function decrypt(json, password) {\n    const data = JSON.parse(json);\n    password = getPassword(password);\n    const ethaddr = getAddress(searchPath(data, \"ethaddr\"));\n    const encseed = looseArrayify(searchPath(data, \"encseed\"));\n    if (!encseed || encseed.length % 16 !== 0) {\n      logger24.throwArgumentError(\"invalid encseed\", \"json\", json);\n    }\n    const key2 = arrayify(pbkdf2(password, password, 2e3, 32, \"sha256\")).slice(0, 16);\n    const iv = encseed.slice(0, 16);\n    const encryptedSeed = encseed.slice(16);\n    const aesCbc = new import_aes_js.default.ModeOfOperation.cbc(key2, iv);\n    const seed = import_aes_js.default.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));\n    let seedHex = \"\";\n    for (let i = 0; i < seed.length; i++) {\n      seedHex += String.fromCharCode(seed[i]);\n    }\n    const seedHexBytes = toUtf8Bytes(seedHex);\n    const privateKey = keccak256(seedHexBytes);\n    return new CrowdsaleAccount({\n      _isCrowdsaleAccount: true,\n      address: ethaddr,\n      privateKey\n    });\n  }\n  var import_aes_js, logger24, CrowdsaleAccount;\n  var init_crowdsale = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+json-wallets@5.8.0/node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      import_aes_js = __toESM(require_aes_js());\n      init_lib7();\n      init_lib2();\n      init_lib5();\n      init_lib21();\n      init_lib9();\n      init_lib4();\n      init_lib();\n      init_version19();\n      init_utils();\n      logger24 = new Logger(version20);\n      CrowdsaleAccount = class extends Description {\n        isCrowdsaleAccount(value) {\n          return !!(value && value._isCrowdsaleAccount);\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+json-wallets@5.8.0/node_modules/@ethersproject/json-wallets/lib.esm/inspect.js\n  function isCrowdsaleWallet(json) {\n    let data = null;\n    try {\n      data = JSON.parse(json);\n    } catch (error) {\n      return false;\n    }\n    return data.encseed && data.ethaddr;\n  }\n  function isKeystoreWallet(json) {\n    let data = null;\n    try {\n      data = JSON.parse(json);\n    } catch (error) {\n      return false;\n    }\n    if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {\n      return false;\n    }\n    return true;\n  }\n  function getJsonWalletAddress(json) {\n    if (isCrowdsaleWallet(json)) {\n      try {\n        return getAddress(JSON.parse(json).ethaddr);\n      } catch (error) {\n        return null;\n      }\n    }\n    if (isKeystoreWallet(json)) {\n      try {\n        return getAddress(JSON.parse(json).address);\n      } catch (error) {\n        return null;\n      }\n    }\n    return null;\n  }\n  var init_inspect = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+json-wallets@5.8.0/node_modules/@ethersproject/json-wallets/lib.esm/inspect.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib7();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/scrypt-js@3.0.1/node_modules/scrypt-js/scrypt.js\n  var require_scrypt = __commonJS({\n    \"../../../node_modules/.pnpm/scrypt-js@3.0.1/node_modules/scrypt-js/scrypt.js\"(exports3, module) {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      (function(root) {\n        const MAX_VALUE = 2147483647;\n        function SHA2562(m) {\n          const K = new Uint32Array([\n            1116352408,\n            1899447441,\n            3049323471,\n            3921009573,\n            961987163,\n            1508970993,\n            2453635748,\n            2870763221,\n            3624381080,\n            310598401,\n            607225278,\n            1426881987,\n            1925078388,\n            2162078206,\n            2614888103,\n            3248222580,\n            3835390401,\n            4022224774,\n            264347078,\n            604807628,\n            770255983,\n            1249150122,\n            1555081692,\n            1996064986,\n            2554220882,\n            2821834349,\n            2952996808,\n            3210313671,\n            3336571891,\n            3584528711,\n            113926993,\n            338241895,\n            666307205,\n            773529912,\n            1294757372,\n            1396182291,\n            1695183700,\n            1986661051,\n            2177026350,\n            2456956037,\n            2730485921,\n            2820302411,\n            3259730800,\n            3345764771,\n            3516065817,\n            3600352804,\n            4094571909,\n            275423344,\n            430227734,\n            506948616,\n            659060556,\n            883997877,\n            958139571,\n            1322822218,\n            1537002063,\n            1747873779,\n            1955562222,\n            2024104815,\n            2227730452,\n            2361852424,\n            2428436474,\n            2756734187,\n            3204031479,\n            3329325298\n          ]);\n          let h0 = 1779033703, h1 = 3144134277, h2 = 1013904242, h3 = 2773480762;\n          let h4 = 1359893119, h5 = 2600822924, h6 = 528734635, h7 = 1541459225;\n          const w = new Uint32Array(64);\n          function blocks(p2) {\n            let off2 = 0, len = p2.length;\n            while (len >= 64) {\n              let a = h0, b2 = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i2, j, t1, t2;\n              for (i2 = 0; i2 < 16; i2++) {\n                j = off2 + i2 * 4;\n                w[i2] = (p2[j] & 255) << 24 | (p2[j + 1] & 255) << 16 | (p2[j + 2] & 255) << 8 | p2[j + 3] & 255;\n              }\n              for (i2 = 16; i2 < 64; i2++) {\n                u = w[i2 - 2];\n                t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;\n                u = w[i2 - 15];\n                t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;\n                w[i2] = (t1 + w[i2 - 7] | 0) + (t2 + w[i2 - 16] | 0) | 0;\n              }\n              for (i2 = 0; i2 < 64; i2++) {\n                t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f ^ ~e & g) | 0) + (h + (K[i2] + w[i2] | 0) | 0) | 0;\n                t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b2 ^ a & c ^ b2 & c) | 0;\n                h = g;\n                g = f;\n                f = e;\n                e = d + t1 | 0;\n                d = c;\n                c = b2;\n                b2 = a;\n                a = t1 + t2 | 0;\n              }\n              h0 = h0 + a | 0;\n              h1 = h1 + b2 | 0;\n              h2 = h2 + c | 0;\n              h3 = h3 + d | 0;\n              h4 = h4 + e | 0;\n              h5 = h5 + f | 0;\n              h6 = h6 + g | 0;\n              h7 = h7 + h | 0;\n              off2 += 64;\n              len -= 64;\n            }\n          }\n          blocks(m);\n          let i, bytesLeft = m.length % 64, bitLenHi = m.length / 536870912 | 0, bitLenLo = m.length << 3, numZeros = bytesLeft < 56 ? 56 : 120, p = m.slice(m.length - bytesLeft, m.length);\n          p.push(128);\n          for (i = bytesLeft + 1; i < numZeros; i++) {\n            p.push(0);\n          }\n          p.push(bitLenHi >>> 24 & 255);\n          p.push(bitLenHi >>> 16 & 255);\n          p.push(bitLenHi >>> 8 & 255);\n          p.push(bitLenHi >>> 0 & 255);\n          p.push(bitLenLo >>> 24 & 255);\n          p.push(bitLenLo >>> 16 & 255);\n          p.push(bitLenLo >>> 8 & 255);\n          p.push(bitLenLo >>> 0 & 255);\n          blocks(p);\n          return [\n            h0 >>> 24 & 255,\n            h0 >>> 16 & 255,\n            h0 >>> 8 & 255,\n            h0 >>> 0 & 255,\n            h1 >>> 24 & 255,\n            h1 >>> 16 & 255,\n            h1 >>> 8 & 255,\n            h1 >>> 0 & 255,\n            h2 >>> 24 & 255,\n            h2 >>> 16 & 255,\n            h2 >>> 8 & 255,\n            h2 >>> 0 & 255,\n            h3 >>> 24 & 255,\n            h3 >>> 16 & 255,\n            h3 >>> 8 & 255,\n            h3 >>> 0 & 255,\n            h4 >>> 24 & 255,\n            h4 >>> 16 & 255,\n            h4 >>> 8 & 255,\n            h4 >>> 0 & 255,\n            h5 >>> 24 & 255,\n            h5 >>> 16 & 255,\n            h5 >>> 8 & 255,\n            h5 >>> 0 & 255,\n            h6 >>> 24 & 255,\n            h6 >>> 16 & 255,\n            h6 >>> 8 & 255,\n            h6 >>> 0 & 255,\n            h7 >>> 24 & 255,\n            h7 >>> 16 & 255,\n            h7 >>> 8 & 255,\n            h7 >>> 0 & 255\n          ];\n        }\n        function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {\n          password = password.length <= 64 ? password : SHA2562(password);\n          const innerLen = 64 + salt.length + 4;\n          const inner = new Array(innerLen);\n          const outerKey = new Array(64);\n          let i;\n          let dk = [];\n          for (i = 0; i < 64; i++) {\n            inner[i] = 54;\n          }\n          for (i = 0; i < password.length; i++) {\n            inner[i] ^= password[i];\n          }\n          for (i = 0; i < salt.length; i++) {\n            inner[64 + i] = salt[i];\n          }\n          for (i = innerLen - 4; i < innerLen; i++) {\n            inner[i] = 0;\n          }\n          for (i = 0; i < 64; i++)\n            outerKey[i] = 92;\n          for (i = 0; i < password.length; i++)\n            outerKey[i] ^= password[i];\n          function incrementCounter() {\n            for (let i2 = innerLen - 1; i2 >= innerLen - 4; i2--) {\n              inner[i2]++;\n              if (inner[i2] <= 255)\n                return;\n              inner[i2] = 0;\n            }\n          }\n          while (dkLen >= 32) {\n            incrementCounter();\n            dk = dk.concat(SHA2562(outerKey.concat(SHA2562(inner))));\n            dkLen -= 32;\n          }\n          if (dkLen > 0) {\n            incrementCounter();\n            dk = dk.concat(SHA2562(outerKey.concat(SHA2562(inner))).slice(0, dkLen));\n          }\n          return dk;\n        }\n        function blockmix_salsa8(BY, Yi, r2, x, _X) {\n          let i;\n          arraycopy(BY, (2 * r2 - 1) * 16, _X, 0, 16);\n          for (i = 0; i < 2 * r2; i++) {\n            blockxor(BY, i * 16, _X, 16);\n            salsa20_8(_X, x);\n            arraycopy(_X, 0, BY, Yi + i * 16, 16);\n          }\n          for (i = 0; i < r2; i++) {\n            arraycopy(BY, Yi + i * 2 * 16, BY, i * 16, 16);\n          }\n          for (i = 0; i < r2; i++) {\n            arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r2) * 16, 16);\n          }\n        }\n        function R(a, b2) {\n          return a << b2 | a >>> 32 - b2;\n        }\n        function salsa20_8(B, x) {\n          arraycopy(B, 0, x, 0, 16);\n          for (let i = 8; i > 0; i -= 2) {\n            x[4] ^= R(x[0] + x[12], 7);\n            x[8] ^= R(x[4] + x[0], 9);\n            x[12] ^= R(x[8] + x[4], 13);\n            x[0] ^= R(x[12] + x[8], 18);\n            x[9] ^= R(x[5] + x[1], 7);\n            x[13] ^= R(x[9] + x[5], 9);\n            x[1] ^= R(x[13] + x[9], 13);\n            x[5] ^= R(x[1] + x[13], 18);\n            x[14] ^= R(x[10] + x[6], 7);\n            x[2] ^= R(x[14] + x[10], 9);\n            x[6] ^= R(x[2] + x[14], 13);\n            x[10] ^= R(x[6] + x[2], 18);\n            x[3] ^= R(x[15] + x[11], 7);\n            x[7] ^= R(x[3] + x[15], 9);\n            x[11] ^= R(x[7] + x[3], 13);\n            x[15] ^= R(x[11] + x[7], 18);\n            x[1] ^= R(x[0] + x[3], 7);\n            x[2] ^= R(x[1] + x[0], 9);\n            x[3] ^= R(x[2] + x[1], 13);\n            x[0] ^= R(x[3] + x[2], 18);\n            x[6] ^= R(x[5] + x[4], 7);\n            x[7] ^= R(x[6] + x[5], 9);\n            x[4] ^= R(x[7] + x[6], 13);\n            x[5] ^= R(x[4] + x[7], 18);\n            x[11] ^= R(x[10] + x[9], 7);\n            x[8] ^= R(x[11] + x[10], 9);\n            x[9] ^= R(x[8] + x[11], 13);\n            x[10] ^= R(x[9] + x[8], 18);\n            x[12] ^= R(x[15] + x[14], 7);\n            x[13] ^= R(x[12] + x[15], 9);\n            x[14] ^= R(x[13] + x[12], 13);\n            x[15] ^= R(x[14] + x[13], 18);\n          }\n          for (let i = 0; i < 16; ++i) {\n            B[i] += x[i];\n          }\n        }\n        function blockxor(S, Si, D, len) {\n          for (let i = 0; i < len; i++) {\n            D[i] ^= S[Si + i];\n          }\n        }\n        function arraycopy(src, srcPos, dest, destPos, length) {\n          while (length--) {\n            dest[destPos++] = src[srcPos++];\n          }\n        }\n        function checkBufferish(o) {\n          if (!o || typeof o.length !== \"number\") {\n            return false;\n          }\n          for (let i = 0; i < o.length; i++) {\n            const v = o[i];\n            if (typeof v !== \"number\" || v % 1 || v < 0 || v >= 256) {\n              return false;\n            }\n          }\n          return true;\n        }\n        function ensureInteger(value, name) {\n          if (typeof value !== \"number\" || value % 1) {\n            throw new Error(\"invalid \" + name);\n          }\n          return value;\n        }\n        function _scrypt(password, salt, N2, r2, p, dkLen, callback) {\n          N2 = ensureInteger(N2, \"N\");\n          r2 = ensureInteger(r2, \"r\");\n          p = ensureInteger(p, \"p\");\n          dkLen = ensureInteger(dkLen, \"dkLen\");\n          if (N2 === 0 || (N2 & N2 - 1) !== 0) {\n            throw new Error(\"N must be power of 2\");\n          }\n          if (N2 > MAX_VALUE / 128 / r2) {\n            throw new Error(\"N too large\");\n          }\n          if (r2 > MAX_VALUE / 128 / p) {\n            throw new Error(\"r too large\");\n          }\n          if (!checkBufferish(password)) {\n            throw new Error(\"password must be an array or buffer\");\n          }\n          password = Array.prototype.slice.call(password);\n          if (!checkBufferish(salt)) {\n            throw new Error(\"salt must be an array or buffer\");\n          }\n          salt = Array.prototype.slice.call(salt);\n          let b2 = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r2);\n          const B = new Uint32Array(p * 32 * r2);\n          for (let i = 0; i < B.length; i++) {\n            const j = i * 4;\n            B[i] = (b2[j + 3] & 255) << 24 | (b2[j + 2] & 255) << 16 | (b2[j + 1] & 255) << 8 | (b2[j + 0] & 255) << 0;\n          }\n          const XY = new Uint32Array(64 * r2);\n          const V = new Uint32Array(32 * r2 * N2);\n          const Yi = 32 * r2;\n          const x = new Uint32Array(16);\n          const _X = new Uint32Array(16);\n          const totalOps = p * N2 * 2;\n          let currentOp = 0;\n          let lastPercent10 = null;\n          let stop = false;\n          let state = 0;\n          let i0 = 0, i1;\n          let Bi;\n          const limit = callback ? parseInt(1e3 / r2) : 4294967295;\n          const nextTick2 = typeof setImmediate !== \"undefined\" ? setImmediate : setTimeout;\n          const incrementalSMix = function() {\n            if (stop) {\n              return callback(new Error(\"cancelled\"), currentOp / totalOps);\n            }\n            let steps;\n            switch (state) {\n              case 0:\n                Bi = i0 * 32 * r2;\n                arraycopy(B, Bi, XY, 0, Yi);\n                state = 1;\n                i1 = 0;\n              case 1:\n                steps = N2 - i1;\n                if (steps > limit) {\n                  steps = limit;\n                }\n                for (let i = 0; i < steps; i++) {\n                  arraycopy(XY, 0, V, (i1 + i) * Yi, Yi);\n                  blockmix_salsa8(XY, Yi, r2, x, _X);\n                }\n                i1 += steps;\n                currentOp += steps;\n                if (callback) {\n                  const percent10 = parseInt(1e3 * currentOp / totalOps);\n                  if (percent10 !== lastPercent10) {\n                    stop = callback(null, currentOp / totalOps);\n                    if (stop) {\n                      break;\n                    }\n                    lastPercent10 = percent10;\n                  }\n                }\n                if (i1 < N2) {\n                  break;\n                }\n                i1 = 0;\n                state = 2;\n              case 2:\n                steps = N2 - i1;\n                if (steps > limit) {\n                  steps = limit;\n                }\n                for (let i = 0; i < steps; i++) {\n                  const offset = (2 * r2 - 1) * 16;\n                  const j = XY[offset] & N2 - 1;\n                  blockxor(V, j * Yi, XY, Yi);\n                  blockmix_salsa8(XY, Yi, r2, x, _X);\n                }\n                i1 += steps;\n                currentOp += steps;\n                if (callback) {\n                  const percent10 = parseInt(1e3 * currentOp / totalOps);\n                  if (percent10 !== lastPercent10) {\n                    stop = callback(null, currentOp / totalOps);\n                    if (stop) {\n                      break;\n                    }\n                    lastPercent10 = percent10;\n                  }\n                }\n                if (i1 < N2) {\n                  break;\n                }\n                arraycopy(XY, 0, B, Bi, Yi);\n                i0++;\n                if (i0 < p) {\n                  state = 0;\n                  break;\n                }\n                b2 = [];\n                for (let i = 0; i < B.length; i++) {\n                  b2.push(B[i] >> 0 & 255);\n                  b2.push(B[i] >> 8 & 255);\n                  b2.push(B[i] >> 16 & 255);\n                  b2.push(B[i] >> 24 & 255);\n                }\n                const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b2, dkLen);\n                if (callback) {\n                  callback(null, 1, derivedKey);\n                }\n                return derivedKey;\n            }\n            if (callback) {\n              nextTick2(incrementalSMix);\n            }\n          };\n          if (!callback) {\n            while (true) {\n              const derivedKey = incrementalSMix();\n              if (derivedKey != void 0) {\n                return derivedKey;\n              }\n            }\n          }\n          incrementalSMix();\n        }\n        const lib = {\n          scrypt: function(password, salt, N2, r2, p, dkLen, progressCallback) {\n            return new Promise(function(resolve, reject) {\n              let lastProgress = 0;\n              if (progressCallback) {\n                progressCallback(0);\n              }\n              _scrypt(password, salt, N2, r2, p, dkLen, function(error, progress, key2) {\n                if (error) {\n                  reject(error);\n                } else if (key2) {\n                  if (progressCallback && lastProgress !== 1) {\n                    progressCallback(1);\n                  }\n                  resolve(new Uint8Array(key2));\n                } else if (progressCallback && progress !== lastProgress) {\n                  lastProgress = progress;\n                  return progressCallback(progress);\n                }\n              });\n            });\n          },\n          syncScrypt: function(password, salt, N2, r2, p, dkLen) {\n            return new Uint8Array(_scrypt(password, salt, N2, r2, p, dkLen));\n          }\n        };\n        if (typeof exports3 !== \"undefined\") {\n          module.exports = lib;\n        } else if (typeof define === \"function\" && define.amd) {\n          define(lib);\n        } else if (root) {\n          if (root.scrypt) {\n            root._scrypt = root.scrypt;\n          }\n          root.scrypt = lib;\n        }\n      })(exports3);\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+json-wallets@5.8.0/node_modules/@ethersproject/json-wallets/lib.esm/keystore.js\n  function hasMnemonic(value) {\n    return value != null && value.mnemonic && value.mnemonic.phrase;\n  }\n  function _decrypt(data, key2, ciphertext) {\n    const cipher = searchPath(data, \"crypto/cipher\");\n    if (cipher === \"aes-128-ctr\") {\n      const iv = looseArrayify(searchPath(data, \"crypto/cipherparams/iv\"));\n      const counter = new import_aes_js2.default.Counter(iv);\n      const aesCtr = new import_aes_js2.default.ModeOfOperation.ctr(key2, counter);\n      return arrayify(aesCtr.decrypt(ciphertext));\n    }\n    return null;\n  }\n  function _getAccount(data, key2) {\n    const ciphertext = looseArrayify(searchPath(data, \"crypto/ciphertext\"));\n    const computedMAC = hexlify(keccak256(concat([key2.slice(16, 32), ciphertext]))).substring(2);\n    if (computedMAC !== searchPath(data, \"crypto/mac\").toLowerCase()) {\n      throw new Error(\"invalid password\");\n    }\n    const privateKey = _decrypt(data, key2.slice(0, 16), ciphertext);\n    if (!privateKey) {\n      logger25.throwError(\"unsupported cipher\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"decrypt\"\n      });\n    }\n    const mnemonicKey = key2.slice(32, 64);\n    const address = computeAddress(privateKey);\n    if (data.address) {\n      let check = data.address.toLowerCase();\n      if (check.substring(0, 2) !== \"0x\") {\n        check = \"0x\" + check;\n      }\n      if (getAddress(check) !== address) {\n        throw new Error(\"address mismatch\");\n      }\n    }\n    const account = {\n      _isKeystoreAccount: true,\n      address,\n      privateKey: hexlify(privateKey)\n    };\n    if (searchPath(data, \"x-ethers/version\") === \"0.1\") {\n      const mnemonicCiphertext = looseArrayify(searchPath(data, \"x-ethers/mnemonicCiphertext\"));\n      const mnemonicIv = looseArrayify(searchPath(data, \"x-ethers/mnemonicCounter\"));\n      const mnemonicCounter = new import_aes_js2.default.Counter(mnemonicIv);\n      const mnemonicAesCtr = new import_aes_js2.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n      const path = searchPath(data, \"x-ethers/path\") || defaultPath;\n      const locale = searchPath(data, \"x-ethers/locale\") || \"en\";\n      const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));\n      try {\n        const mnemonic = entropyToMnemonic(entropy, locale);\n        const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);\n        if (node.privateKey != account.privateKey) {\n          throw new Error(\"mnemonic mismatch\");\n        }\n        account.mnemonic = node.mnemonic;\n      } catch (error) {\n        if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== \"wordlist\") {\n          throw error;\n        }\n      }\n    }\n    return new KeystoreAccount(account);\n  }\n  function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {\n    return arrayify(pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));\n  }\n  function pbkdf22(passwordBytes, salt, count, dkLen, prfFunc) {\n    return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));\n  }\n  function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {\n    const passwordBytes = getPassword(password);\n    const kdf = searchPath(data, \"crypto/kdf\");\n    if (kdf && typeof kdf === \"string\") {\n      const throwError2 = function(name, value) {\n        return logger25.throwArgumentError(\"invalid key-derivation function parameters\", name, value);\n      };\n      if (kdf.toLowerCase() === \"scrypt\") {\n        const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\n        const N2 = parseInt(searchPath(data, \"crypto/kdfparams/n\"));\n        const r2 = parseInt(searchPath(data, \"crypto/kdfparams/r\"));\n        const p = parseInt(searchPath(data, \"crypto/kdfparams/p\"));\n        if (!N2 || !r2 || !p) {\n          throwError2(\"kdf\", kdf);\n        }\n        if ((N2 & N2 - 1) !== 0) {\n          throwError2(\"N\", N2);\n        }\n        const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\n        if (dkLen !== 32) {\n          throwError2(\"dklen\", dkLen);\n        }\n        return scryptFunc(passwordBytes, salt, N2, r2, p, 64, progressCallback);\n      } else if (kdf.toLowerCase() === \"pbkdf2\") {\n        const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\n        let prfFunc = null;\n        const prf = searchPath(data, \"crypto/kdfparams/prf\");\n        if (prf === \"hmac-sha256\") {\n          prfFunc = \"sha256\";\n        } else if (prf === \"hmac-sha512\") {\n          prfFunc = \"sha512\";\n        } else {\n          throwError2(\"prf\", prf);\n        }\n        const count = parseInt(searchPath(data, \"crypto/kdfparams/c\"));\n        const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\n        if (dkLen !== 32) {\n          throwError2(\"dklen\", dkLen);\n        }\n        return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);\n      }\n    }\n    return logger25.throwArgumentError(\"unsupported key-derivation function\", \"kdf\", kdf);\n  }\n  function decryptSync(json, password) {\n    const data = JSON.parse(json);\n    const key2 = _computeKdfKey(data, password, pbkdf2Sync, import_scrypt_js.default.syncScrypt);\n    return _getAccount(data, key2);\n  }\n  function decrypt2(json, password, progressCallback) {\n    return __awaiter6(this, void 0, void 0, function* () {\n      const data = JSON.parse(json);\n      const key2 = yield _computeKdfKey(data, password, pbkdf22, import_scrypt_js.default.scrypt, progressCallback);\n      return _getAccount(data, key2);\n    });\n  }\n  function encrypt(account, password, options, progressCallback) {\n    try {\n      if (getAddress(account.address) !== computeAddress(account.privateKey)) {\n        throw new Error(\"address/privateKey mismatch\");\n      }\n      if (hasMnemonic(account)) {\n        const mnemonic = account.mnemonic;\n        const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);\n        if (node.privateKey != account.privateKey) {\n          throw new Error(\"mnemonic mismatch\");\n        }\n      }\n    } catch (e) {\n      return Promise.reject(e);\n    }\n    if (typeof options === \"function\" && !progressCallback) {\n      progressCallback = options;\n      options = {};\n    }\n    if (!options) {\n      options = {};\n    }\n    const privateKey = arrayify(account.privateKey);\n    const passwordBytes = getPassword(password);\n    let entropy = null;\n    let path = null;\n    let locale = null;\n    if (hasMnemonic(account)) {\n      const srcMnemonic = account.mnemonic;\n      entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || \"en\"));\n      path = srcMnemonic.path || defaultPath;\n      locale = srcMnemonic.locale || \"en\";\n    }\n    let client = options.client;\n    if (!client) {\n      client = \"ethers.js\";\n    }\n    let salt = null;\n    if (options.salt) {\n      salt = arrayify(options.salt);\n    } else {\n      salt = randomBytes(32);\n      ;\n    }\n    let iv = null;\n    if (options.iv) {\n      iv = arrayify(options.iv);\n      if (iv.length !== 16) {\n        throw new Error(\"invalid iv\");\n      }\n    } else {\n      iv = randomBytes(16);\n    }\n    let uuidRandom = null;\n    if (options.uuid) {\n      uuidRandom = arrayify(options.uuid);\n      if (uuidRandom.length !== 16) {\n        throw new Error(\"invalid uuid\");\n      }\n    } else {\n      uuidRandom = randomBytes(16);\n    }\n    let N2 = 1 << 17, r2 = 8, p = 1;\n    if (options.scrypt) {\n      if (options.scrypt.N) {\n        N2 = options.scrypt.N;\n      }\n      if (options.scrypt.r) {\n        r2 = options.scrypt.r;\n      }\n      if (options.scrypt.p) {\n        p = options.scrypt.p;\n      }\n    }\n    return import_scrypt_js.default.scrypt(passwordBytes, salt, N2, r2, p, 64, progressCallback).then((key2) => {\n      key2 = arrayify(key2);\n      const derivedKey = key2.slice(0, 16);\n      const macPrefix = key2.slice(16, 32);\n      const mnemonicKey = key2.slice(32, 64);\n      const counter = new import_aes_js2.default.Counter(iv);\n      const aesCtr = new import_aes_js2.default.ModeOfOperation.ctr(derivedKey, counter);\n      const ciphertext = arrayify(aesCtr.encrypt(privateKey));\n      const mac = keccak256(concat([macPrefix, ciphertext]));\n      const data = {\n        address: account.address.substring(2).toLowerCase(),\n        id: uuidV4(uuidRandom),\n        version: 3,\n        crypto: {\n          cipher: \"aes-128-ctr\",\n          cipherparams: {\n            iv: hexlify(iv).substring(2)\n          },\n          ciphertext: hexlify(ciphertext).substring(2),\n          kdf: \"scrypt\",\n          kdfparams: {\n            salt: hexlify(salt).substring(2),\n            n: N2,\n            dklen: 32,\n            p,\n            r: r2\n          },\n          mac: mac.substring(2)\n        }\n      };\n      if (entropy) {\n        const mnemonicIv = randomBytes(16);\n        const mnemonicCounter = new import_aes_js2.default.Counter(mnemonicIv);\n        const mnemonicAesCtr = new import_aes_js2.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n        const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));\n        const now2 = /* @__PURE__ */ new Date();\n        const timestamp = now2.getUTCFullYear() + \"-\" + zpad(now2.getUTCMonth() + 1, 2) + \"-\" + zpad(now2.getUTCDate(), 2) + \"T\" + zpad(now2.getUTCHours(), 2) + \"-\" + zpad(now2.getUTCMinutes(), 2) + \"-\" + zpad(now2.getUTCSeconds(), 2) + \".0Z\";\n        data[\"x-ethers\"] = {\n          client,\n          gethFilename: \"UTC--\" + timestamp + \"--\" + data.address,\n          mnemonicCounter: hexlify(mnemonicIv).substring(2),\n          mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),\n          path,\n          locale,\n          version: \"0.1\"\n        };\n      }\n      return JSON.stringify(data);\n    });\n  }\n  var import_aes_js2, import_scrypt_js, __awaiter6, logger25, KeystoreAccount;\n  var init_keystore = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+json-wallets@5.8.0/node_modules/@ethersproject/json-wallets/lib.esm/keystore.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      import_aes_js2 = __toESM(require_aes_js());\n      import_scrypt_js = __toESM(require_scrypt());\n      init_lib7();\n      init_lib2();\n      init_lib23();\n      init_lib5();\n      init_lib21();\n      init_lib24();\n      init_lib4();\n      init_lib17();\n      init_utils();\n      init_lib();\n      init_version19();\n      __awaiter6 = function(thisArg, _arguments, P, generator) {\n        function adopt(value) {\n          return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n          });\n        }\n        return new (P || (P = Promise))(function(resolve, reject) {\n          function fulfilled(value) {\n            try {\n              step(generator.next(value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function rejected(value) {\n            try {\n              step(generator[\"throw\"](value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n          }\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n      };\n      logger25 = new Logger(version20);\n      KeystoreAccount = class extends Description {\n        isKeystoreAccount(value) {\n          return !!(value && value._isKeystoreAccount);\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+json-wallets@5.8.0/node_modules/@ethersproject/json-wallets/lib.esm/index.js\n  function decryptJsonWallet(json, password, progressCallback) {\n    if (isCrowdsaleWallet(json)) {\n      if (progressCallback) {\n        progressCallback(0);\n      }\n      const account = decrypt(json, password);\n      if (progressCallback) {\n        progressCallback(1);\n      }\n      return Promise.resolve(account);\n    }\n    if (isKeystoreWallet(json)) {\n      return decrypt2(json, password, progressCallback);\n    }\n    return Promise.reject(new Error(\"invalid JSON wallet\"));\n  }\n  function decryptJsonWalletSync(json, password) {\n    if (isCrowdsaleWallet(json)) {\n      return decrypt(json, password);\n    }\n    if (isKeystoreWallet(json)) {\n      return decryptSync(json, password);\n    }\n    throw new Error(\"invalid JSON wallet\");\n  }\n  var init_lib25 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+json-wallets@5.8.0/node_modules/@ethersproject/json-wallets/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_crowdsale();\n      init_inspect();\n      init_keystore();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+wallet@5.8.0/node_modules/@ethersproject/wallet/lib.esm/_version.js\n  var version21;\n  var init_version20 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+wallet@5.8.0/node_modules/@ethersproject/wallet/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version21 = \"wallet/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+wallet@5.8.0/node_modules/@ethersproject/wallet/lib.esm/index.js\n  function isAccount(value) {\n    return value != null && isHexString(value.privateKey, 32) && value.address != null;\n  }\n  function hasMnemonic2(value) {\n    const mnemonic = value.mnemonic;\n    return mnemonic && mnemonic.phrase;\n  }\n  function verifyMessage(message, signature2) {\n    return recoverAddress(hashMessage(message), signature2);\n  }\n  function verifyTypedData(domain2, types, value, signature2) {\n    return recoverAddress(TypedDataEncoder.hash(domain2, types, value), signature2);\n  }\n  var __awaiter7, logger26, Wallet;\n  var init_lib26 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+wallet@5.8.0/node_modules/@ethersproject/wallet/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib7();\n      init_lib14();\n      init_lib15();\n      init_lib2();\n      init_lib12();\n      init_lib23();\n      init_lib5();\n      init_lib4();\n      init_lib24();\n      init_lib16();\n      init_lib25();\n      init_lib17();\n      init_lib();\n      init_version20();\n      __awaiter7 = function(thisArg, _arguments, P, generator) {\n        function adopt(value) {\n          return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n          });\n        }\n        return new (P || (P = Promise))(function(resolve, reject) {\n          function fulfilled(value) {\n            try {\n              step(generator.next(value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function rejected(value) {\n            try {\n              step(generator[\"throw\"](value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n          }\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n      };\n      logger26 = new Logger(version21);\n      Wallet = class _Wallet extends Signer {\n        constructor(privateKey, provider) {\n          super();\n          if (isAccount(privateKey)) {\n            const signingKey = new SigningKey(privateKey.privateKey);\n            defineReadOnly(this, \"_signingKey\", () => signingKey);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n            if (this.address !== getAddress(privateKey.address)) {\n              logger26.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n            }\n            if (hasMnemonic2(privateKey)) {\n              const srcMnemonic = privateKey.mnemonic;\n              defineReadOnly(this, \"_mnemonic\", () => ({\n                phrase: srcMnemonic.phrase,\n                path: srcMnemonic.path || defaultPath,\n                locale: srcMnemonic.locale || \"en\"\n              }));\n              const mnemonic = this.mnemonic;\n              const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n              if (computeAddress(node.privateKey) !== this.address) {\n                logger26.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n              }\n            } else {\n              defineReadOnly(this, \"_mnemonic\", () => null);\n            }\n          } else {\n            if (SigningKey.isSigningKey(privateKey)) {\n              if (privateKey.curve !== \"secp256k1\") {\n                logger26.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n              }\n              defineReadOnly(this, \"_signingKey\", () => privateKey);\n            } else {\n              if (typeof privateKey === \"string\") {\n                if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n                  privateKey = \"0x\" + privateKey;\n                }\n              }\n              const signingKey = new SigningKey(privateKey);\n              defineReadOnly(this, \"_signingKey\", () => signingKey);\n            }\n            defineReadOnly(this, \"_mnemonic\", () => null);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n          }\n          if (provider && !Provider.isProvider(provider)) {\n            logger26.throwArgumentError(\"invalid provider\", \"provider\", provider);\n          }\n          defineReadOnly(this, \"provider\", provider || null);\n        }\n        get mnemonic() {\n          return this._mnemonic();\n        }\n        get privateKey() {\n          return this._signingKey().privateKey;\n        }\n        get publicKey() {\n          return this._signingKey().publicKey;\n        }\n        getAddress() {\n          return Promise.resolve(this.address);\n        }\n        connect(provider) {\n          return new _Wallet(this, provider);\n        }\n        signTransaction(transaction) {\n          return resolveProperties(transaction).then((tx) => {\n            if (tx.from != null) {\n              if (getAddress(tx.from) !== this.address) {\n                logger26.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n              }\n              delete tx.from;\n            }\n            const signature2 = this._signingKey().signDigest(keccak256(serialize(tx)));\n            return serialize(tx, signature2);\n          });\n        }\n        signMessage(message) {\n          return __awaiter7(this, void 0, void 0, function* () {\n            return joinSignature(this._signingKey().signDigest(hashMessage(message)));\n          });\n        }\n        _signTypedData(domain2, types, value) {\n          return __awaiter7(this, void 0, void 0, function* () {\n            const populated = yield TypedDataEncoder.resolveNames(domain2, types, value, (name) => {\n              if (this.provider == null) {\n                logger26.throwError(\"cannot resolve ENS names without a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"resolveName\",\n                  value: name\n                });\n              }\n              return this.provider.resolveName(name);\n            });\n            return joinSignature(this._signingKey().signDigest(TypedDataEncoder.hash(populated.domain, types, populated.value)));\n          });\n        }\n        encrypt(password, options, progressCallback) {\n          if (typeof options === \"function\" && !progressCallback) {\n            progressCallback = options;\n            options = {};\n          }\n          if (progressCallback && typeof progressCallback !== \"function\") {\n            throw new Error(\"invalid callback\");\n          }\n          if (!options) {\n            options = {};\n          }\n          return encrypt(this, password, options, progressCallback);\n        }\n        /**\n         *  Static methods to create Wallet instances.\n         */\n        static createRandom(options) {\n          let entropy = randomBytes(16);\n          if (!options) {\n            options = {};\n          }\n          if (options.extraEntropy) {\n            entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));\n          }\n          const mnemonic = entropyToMnemonic(entropy, options.locale);\n          return _Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n        }\n        static fromEncryptedJson(json, password, progressCallback) {\n          return decryptJsonWallet(json, password, progressCallback).then((account) => {\n            return new _Wallet(account);\n          });\n        }\n        static fromEncryptedJsonSync(json, password) {\n          return new _Wallet(decryptJsonWalletSync(json, password));\n        }\n        static fromMnemonic(mnemonic, path, wordlist2) {\n          if (!path) {\n            path = defaultPath;\n          }\n          return new _Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist2).derivePath(path));\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+networks@5.8.0/node_modules/@ethersproject/networks/lib.esm/_version.js\n  var version22;\n  var init_version21 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+networks@5.8.0/node_modules/@ethersproject/networks/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version22 = \"networks/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+networks@5.8.0/node_modules/@ethersproject/networks/lib.esm/index.js\n  function isRenetworkable(value) {\n    return value && typeof value.renetwork === \"function\";\n  }\n  function ethDefaultProvider(network) {\n    const func = function(providers, options) {\n      if (options == null) {\n        options = {};\n      }\n      const providerList = [];\n      if (providers.InfuraProvider && options.infura !== \"-\") {\n        try {\n          providerList.push(new providers.InfuraProvider(network, options.infura));\n        } catch (error) {\n        }\n      }\n      if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n        try {\n          providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n        } catch (error) {\n        }\n      }\n      if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n        try {\n          providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n        } catch (error) {\n        }\n      }\n      if (providers.PocketProvider && options.pocket !== \"-\") {\n        const skip = [\"goerli\", \"ropsten\", \"rinkeby\", \"sepolia\"];\n        try {\n          const provider = new providers.PocketProvider(network, options.pocket);\n          if (provider.network && skip.indexOf(provider.network.name) === -1) {\n            providerList.push(provider);\n          }\n        } catch (error) {\n        }\n      }\n      if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n        try {\n          providerList.push(new providers.CloudflareProvider(network));\n        } catch (error) {\n        }\n      }\n      if (providers.AnkrProvider && options.ankr !== \"-\") {\n        try {\n          const skip = [\"ropsten\"];\n          const provider = new providers.AnkrProvider(network, options.ankr);\n          if (provider.network && skip.indexOf(provider.network.name) === -1) {\n            providerList.push(provider);\n          }\n        } catch (error) {\n        }\n      }\n      if (providers.QuickNodeProvider && options.quicknode !== \"-\") {\n        try {\n          providerList.push(new providers.QuickNodeProvider(network, options.quicknode));\n        } catch (error) {\n        }\n      }\n      if (providerList.length === 0) {\n        return null;\n      }\n      if (providers.FallbackProvider) {\n        let quorum = 1;\n        if (options.quorum != null) {\n          quorum = options.quorum;\n        } else if (network === \"homestead\") {\n          quorum = 2;\n        }\n        return new providers.FallbackProvider(providerList, quorum);\n      }\n      return providerList[0];\n    };\n    func.renetwork = function(network2) {\n      return ethDefaultProvider(network2);\n    };\n    return func;\n  }\n  function etcDefaultProvider(url, network) {\n    const func = function(providers, options) {\n      if (providers.JsonRpcProvider) {\n        return new providers.JsonRpcProvider(url, network);\n      }\n      return null;\n    };\n    func.renetwork = function(network2) {\n      return etcDefaultProvider(url, network2);\n    };\n    return func;\n  }\n  function getNetwork(network) {\n    if (network == null) {\n      return null;\n    }\n    if (typeof network === \"number\") {\n      for (const name in networks) {\n        const standard2 = networks[name];\n        if (standard2.chainId === network) {\n          return {\n            name: standard2.name,\n            chainId: standard2.chainId,\n            ensAddress: standard2.ensAddress || null,\n            _defaultProvider: standard2._defaultProvider || null\n          };\n        }\n      }\n      return {\n        chainId: network,\n        name: \"unknown\"\n      };\n    }\n    if (typeof network === \"string\") {\n      const standard2 = networks[network];\n      if (standard2 == null) {\n        return null;\n      }\n      return {\n        name: standard2.name,\n        chainId: standard2.chainId,\n        ensAddress: standard2.ensAddress,\n        _defaultProvider: standard2._defaultProvider || null\n      };\n    }\n    const standard = networks[network.name];\n    if (!standard) {\n      if (typeof network.chainId !== \"number\") {\n        logger27.throwArgumentError(\"invalid network chainId\", \"network\", network);\n      }\n      return network;\n    }\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n      logger27.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n    let defaultProvider = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n      if (isRenetworkable(standard._defaultProvider)) {\n        defaultProvider = standard._defaultProvider.renetwork(network);\n      } else {\n        defaultProvider = standard._defaultProvider;\n      }\n    }\n    return {\n      name: network.name,\n      chainId: standard.chainId,\n      ensAddress: network.ensAddress || standard.ensAddress || null,\n      _defaultProvider: defaultProvider\n    };\n  }\n  var logger27, homestead, ropsten, classicMordor, networks;\n  var init_lib27 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+networks@5.8.0/node_modules/@ethersproject/networks/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib();\n      init_version21();\n      logger27 = new Logger(version22);\n      homestead = {\n        chainId: 1,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"homestead\",\n        _defaultProvider: ethDefaultProvider(\"homestead\")\n      };\n      ropsten = {\n        chainId: 3,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"ropsten\",\n        _defaultProvider: ethDefaultProvider(\"ropsten\")\n      };\n      classicMordor = {\n        chainId: 63,\n        name: \"classicMordor\",\n        _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n      };\n      networks = {\n        unspecified: { chainId: 0, name: \"unspecified\" },\n        homestead,\n        mainnet: homestead,\n        morden: { chainId: 2, name: \"morden\" },\n        ropsten,\n        testnet: ropsten,\n        rinkeby: {\n          chainId: 4,\n          ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n          name: \"rinkeby\",\n          _defaultProvider: ethDefaultProvider(\"rinkeby\")\n        },\n        kovan: {\n          chainId: 42,\n          name: \"kovan\",\n          _defaultProvider: ethDefaultProvider(\"kovan\")\n        },\n        goerli: {\n          chainId: 5,\n          ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n          name: \"goerli\",\n          _defaultProvider: ethDefaultProvider(\"goerli\")\n        },\n        kintsugi: { chainId: 1337702, name: \"kintsugi\" },\n        sepolia: {\n          chainId: 11155111,\n          ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n          name: \"sepolia\",\n          _defaultProvider: ethDefaultProvider(\"sepolia\")\n        },\n        holesky: {\n          chainId: 17e3,\n          name: \"holesky\",\n          _defaultProvider: ethDefaultProvider(\"holesky\")\n        },\n        // ETC (See: #351)\n        classic: {\n          chainId: 61,\n          name: \"classic\",\n          _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/etc\", \"classic\")\n        },\n        classicMorden: { chainId: 62, name: \"classicMorden\" },\n        classicMordor,\n        classicTestnet: classicMordor,\n        classicKotti: {\n          chainId: 6,\n          name: \"classicKotti\",\n          _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/kotti\", \"classicKotti\")\n        },\n        xdai: { chainId: 100, name: \"xdai\" },\n        matic: {\n          chainId: 137,\n          name: \"matic\",\n          _defaultProvider: ethDefaultProvider(\"matic\")\n        },\n        maticmum: {\n          chainId: 80001,\n          name: \"maticmum\",\n          _defaultProvider: ethDefaultProvider(\"maticmum\")\n        },\n        optimism: {\n          chainId: 10,\n          name: \"optimism\",\n          _defaultProvider: ethDefaultProvider(\"optimism\")\n        },\n        \"optimism-kovan\": { chainId: 69, name: \"optimism-kovan\" },\n        \"optimism-goerli\": { chainId: 420, name: \"optimism-goerli\" },\n        \"optimism-sepolia\": { chainId: 11155420, name: \"optimism-sepolia\" },\n        arbitrum: { chainId: 42161, name: \"arbitrum\" },\n        \"arbitrum-rinkeby\": { chainId: 421611, name: \"arbitrum-rinkeby\" },\n        \"arbitrum-goerli\": { chainId: 421613, name: \"arbitrum-goerli\" },\n        \"arbitrum-sepolia\": { chainId: 421614, name: \"arbitrum-sepolia\" },\n        bnb: { chainId: 56, name: \"bnb\" },\n        bnbt: { chainId: 97, name: \"bnbt\" }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+web@5.8.0/node_modules/@ethersproject/web/lib.esm/_version.js\n  var version23;\n  var init_version22 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+web@5.8.0/node_modules/@ethersproject/web/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version23 = \"web/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+web@5.8.0/node_modules/@ethersproject/web/lib.esm/geturl.js\n  function getUrl(href, options) {\n    return __awaiter8(this, void 0, void 0, function* () {\n      if (options == null) {\n        options = {};\n      }\n      const request = {\n        method: options.method || \"GET\",\n        headers: options.headers || {},\n        body: options.body || void 0\n      };\n      if (options.skipFetchSetup !== true) {\n        request.mode = \"cors\";\n        request.cache = \"no-cache\";\n        request.credentials = \"same-origin\";\n        request.redirect = \"follow\";\n        request.referrer = \"client\";\n      }\n      ;\n      if (options.fetchOptions != null) {\n        const opts = options.fetchOptions;\n        if (opts.mode) {\n          request.mode = opts.mode;\n        }\n        if (opts.cache) {\n          request.cache = opts.cache;\n        }\n        if (opts.credentials) {\n          request.credentials = opts.credentials;\n        }\n        if (opts.redirect) {\n          request.redirect = opts.redirect;\n        }\n        if (opts.referrer) {\n          request.referrer = opts.referrer;\n        }\n      }\n      const response = yield fetch(href, request);\n      const body = yield response.arrayBuffer();\n      const headers = {};\n      if (response.headers.forEach) {\n        response.headers.forEach((value, key2) => {\n          headers[key2.toLowerCase()] = value;\n        });\n      } else {\n        response.headers.keys().forEach((key2) => {\n          headers[key2.toLowerCase()] = response.headers.get(key2);\n        });\n      }\n      return {\n        headers,\n        statusCode: response.status,\n        statusMessage: response.statusText,\n        body: arrayify(new Uint8Array(body))\n      };\n    });\n  }\n  var __awaiter8;\n  var init_geturl = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+web@5.8.0/node_modules/@ethersproject/web/lib.esm/geturl.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib2();\n      __awaiter8 = function(thisArg, _arguments, P, generator) {\n        function adopt(value) {\n          return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n          });\n        }\n        return new (P || (P = Promise))(function(resolve, reject) {\n          function fulfilled(value) {\n            try {\n              step(generator.next(value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function rejected(value) {\n            try {\n              step(generator[\"throw\"](value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n          }\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+web@5.8.0/node_modules/@ethersproject/web/lib.esm/index.js\n  function staller(duration) {\n    return new Promise((resolve) => {\n      setTimeout(resolve, duration);\n    });\n  }\n  function bodyify(value, type) {\n    if (value == null) {\n      return null;\n    }\n    if (typeof value === \"string\") {\n      return value;\n    }\n    if (isBytesLike(value)) {\n      if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n        try {\n          return toUtf8String(value);\n        } catch (error) {\n        }\n        ;\n      }\n      return hexlify(value);\n    }\n    return value;\n  }\n  function unpercent(value) {\n    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n      return String.fromCharCode(parseInt(code, 16));\n    }));\n  }\n  function _fetchData(connection, body, processFunc) {\n    const attemptLimit = typeof connection === \"object\" && connection.throttleLimit != null ? connection.throttleLimit : 12;\n    logger28.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n    const throttleCallback = typeof connection === \"object\" ? connection.throttleCallback : null;\n    const throttleSlotInterval = typeof connection === \"object\" && typeof connection.throttleSlotInterval === \"number\" ? connection.throttleSlotInterval : 100;\n    logger28.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n    const errorPassThrough = typeof connection === \"object\" ? !!connection.errorPassThrough : false;\n    const headers = {};\n    let url = null;\n    const options = {\n      method: \"GET\"\n    };\n    let allow304 = false;\n    let timeout = 2 * 60 * 1e3;\n    if (typeof connection === \"string\") {\n      url = connection;\n    } else if (typeof connection === \"object\") {\n      if (connection == null || connection.url == null) {\n        logger28.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n      }\n      url = connection.url;\n      if (typeof connection.timeout === \"number\" && connection.timeout > 0) {\n        timeout = connection.timeout;\n      }\n      if (connection.headers) {\n        for (const key2 in connection.headers) {\n          headers[key2.toLowerCase()] = { key: key2, value: String(connection.headers[key2]) };\n          if ([\"if-none-match\", \"if-modified-since\"].indexOf(key2.toLowerCase()) >= 0) {\n            allow304 = true;\n          }\n        }\n      }\n      options.allowGzip = !!connection.allowGzip;\n      if (connection.user != null && connection.password != null) {\n        if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n          logger28.throwError(\"basic authentication requires a secure https url\", Logger.errors.INVALID_ARGUMENT, { argument: \"url\", url, user: connection.user, password: \"[REDACTED]\" });\n        }\n        const authorization = connection.user + \":\" + connection.password;\n        headers[\"authorization\"] = {\n          key: \"Authorization\",\n          value: \"Basic \" + encode2(toUtf8Bytes(authorization))\n        };\n      }\n      if (connection.skipFetchSetup != null) {\n        options.skipFetchSetup = !!connection.skipFetchSetup;\n      }\n      if (connection.fetchOptions != null) {\n        options.fetchOptions = shallowCopy(connection.fetchOptions);\n      }\n    }\n    const reData2 = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n    const dataMatch = url ? url.match(reData2) : null;\n    if (dataMatch) {\n      try {\n        const response = {\n          statusCode: 200,\n          statusMessage: \"OK\",\n          headers: { \"content-type\": dataMatch[1] || \"text/plain\" },\n          body: dataMatch[2] ? decode2(dataMatch[3]) : unpercent(dataMatch[3])\n        };\n        let result = response.body;\n        if (processFunc) {\n          result = processFunc(response.body, response);\n        }\n        return Promise.resolve(result);\n      } catch (error) {\n        logger28.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n          body: bodyify(dataMatch[1], dataMatch[2]),\n          error,\n          requestBody: null,\n          requestMethod: \"GET\",\n          url\n        });\n      }\n    }\n    if (body) {\n      options.method = \"POST\";\n      options.body = body;\n      if (headers[\"content-type\"] == null) {\n        headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\n      }\n      if (headers[\"content-length\"] == null) {\n        headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\n      }\n    }\n    const flatHeaders = {};\n    Object.keys(headers).forEach((key2) => {\n      const header = headers[key2];\n      flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n    const runningTimeout = function() {\n      let timer2 = null;\n      const promise = new Promise(function(resolve, reject) {\n        if (timeout) {\n          timer2 = setTimeout(() => {\n            if (timer2 == null) {\n              return;\n            }\n            timer2 = null;\n            reject(logger28.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n              requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n              requestMethod: options.method,\n              timeout,\n              url\n            }));\n          }, timeout);\n        }\n      });\n      const cancel = function() {\n        if (timer2 == null) {\n          return;\n        }\n        clearTimeout(timer2);\n        timer2 = null;\n      };\n      return { promise, cancel };\n    }();\n    const runningFetch = function() {\n      return __awaiter9(this, void 0, void 0, function* () {\n        for (let attempt = 0; attempt < attemptLimit; attempt++) {\n          let response = null;\n          try {\n            response = yield getUrl(url, options);\n            if (attempt < attemptLimit) {\n              if (response.statusCode === 301 || response.statusCode === 302) {\n                const location = response.headers.location || \"\";\n                if (options.method === \"GET\" && location.match(/^https:/)) {\n                  url = response.headers.location;\n                  continue;\n                }\n              } else if (response.statusCode === 429) {\n                let tryAgain = true;\n                if (throttleCallback) {\n                  tryAgain = yield throttleCallback(attempt, url);\n                }\n                if (tryAgain) {\n                  let stall4 = 0;\n                  const retryAfter = response.headers[\"retry-after\"];\n                  if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                    stall4 = parseInt(retryAfter) * 1e3;\n                  } else {\n                    stall4 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                  }\n                  yield staller(stall4);\n                  continue;\n                }\n              }\n            }\n          } catch (error) {\n            response = error.response;\n            if (response == null) {\n              runningTimeout.cancel();\n              logger28.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                requestMethod: options.method,\n                serverError: error,\n                url\n              });\n            }\n          }\n          let body2 = response.body;\n          if (allow304 && response.statusCode === 304) {\n            body2 = null;\n          } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n            runningTimeout.cancel();\n            logger28.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n              status: response.statusCode,\n              headers: response.headers,\n              body: bodyify(body2, response.headers ? response.headers[\"content-type\"] : null),\n              requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n              requestMethod: options.method,\n              url\n            });\n          }\n          if (processFunc) {\n            try {\n              const result = yield processFunc(body2, response);\n              runningTimeout.cancel();\n              return result;\n            } catch (error) {\n              if (error.throttleRetry && attempt < attemptLimit) {\n                let tryAgain = true;\n                if (throttleCallback) {\n                  tryAgain = yield throttleCallback(attempt, url);\n                }\n                if (tryAgain) {\n                  const timeout2 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                  yield staller(timeout2);\n                  continue;\n                }\n              }\n              runningTimeout.cancel();\n              logger28.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(body2, response.headers ? response.headers[\"content-type\"] : null),\n                error,\n                requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                requestMethod: options.method,\n                url\n              });\n            }\n          }\n          runningTimeout.cancel();\n          return body2;\n        }\n        return logger28.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n          requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n          requestMethod: options.method,\n          url\n        });\n      });\n    }();\n    return Promise.race([runningTimeout.promise, runningFetch]);\n  }\n  function fetchJson(connection, json, processFunc) {\n    let processJsonFunc = (value, response) => {\n      let result = null;\n      if (value != null) {\n        try {\n          result = JSON.parse(toUtf8String(value));\n        } catch (error) {\n          logger28.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n            body: value,\n            error\n          });\n        }\n      }\n      if (processFunc) {\n        result = processFunc(result, response);\n      }\n      return result;\n    };\n    let body = null;\n    if (json != null) {\n      body = toUtf8Bytes(json);\n      const updated = typeof connection === \"string\" ? { url: connection } : shallowCopy(connection);\n      if (updated.headers) {\n        const hasContentType = Object.keys(updated.headers).filter((k) => k.toLowerCase() === \"content-type\").length !== 0;\n        if (!hasContentType) {\n          updated.headers = shallowCopy(updated.headers);\n          updated.headers[\"content-type\"] = \"application/json\";\n        }\n      } else {\n        updated.headers = { \"content-type\": \"application/json\" };\n      }\n      connection = updated;\n    }\n    return _fetchData(connection, body, processJsonFunc);\n  }\n  function poll(func, options) {\n    if (!options) {\n      options = {};\n    }\n    options = shallowCopy(options);\n    if (options.floor == null) {\n      options.floor = 0;\n    }\n    if (options.ceiling == null) {\n      options.ceiling = 1e4;\n    }\n    if (options.interval == null) {\n      options.interval = 250;\n    }\n    return new Promise(function(resolve, reject) {\n      let timer2 = null;\n      let done = false;\n      const cancel = () => {\n        if (done) {\n          return false;\n        }\n        done = true;\n        if (timer2) {\n          clearTimeout(timer2);\n        }\n        return true;\n      };\n      if (options.timeout) {\n        timer2 = setTimeout(() => {\n          if (cancel()) {\n            reject(new Error(\"timeout\"));\n          }\n        }, options.timeout);\n      }\n      const retryLimit = options.retryLimit;\n      let attempt = 0;\n      function check() {\n        return func().then(function(result) {\n          if (result !== void 0) {\n            if (cancel()) {\n              resolve(result);\n            }\n          } else if (options.oncePoll) {\n            options.oncePoll.once(\"poll\", check);\n          } else if (options.onceBlock) {\n            options.onceBlock.once(\"block\", check);\n          } else if (!done) {\n            attempt++;\n            if (attempt > retryLimit) {\n              if (cancel()) {\n                reject(new Error(\"retry limit reached\"));\n              }\n              return;\n            }\n            let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n            if (timeout < options.floor) {\n              timeout = options.floor;\n            }\n            if (timeout > options.ceiling) {\n              timeout = options.ceiling;\n            }\n            setTimeout(check, timeout);\n          }\n          return null;\n        }, function(error) {\n          if (cancel()) {\n            reject(error);\n          }\n        });\n      }\n      check();\n    });\n  }\n  var __awaiter9, logger28;\n  var init_lib28 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+web@5.8.0/node_modules/@ethersproject/web/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib10();\n      init_lib2();\n      init_lib4();\n      init_lib9();\n      init_lib();\n      init_version22();\n      init_geturl();\n      __awaiter9 = function(thisArg, _arguments, P, generator) {\n        function adopt(value) {\n          return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n          });\n        }\n        return new (P || (P = Promise))(function(resolve, reject) {\n          function fulfilled(value) {\n            try {\n              step(generator.next(value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function rejected(value) {\n            try {\n              step(generator[\"throw\"](value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n          }\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n      };\n      logger28 = new Logger(version23);\n    }\n  });\n\n  // ../../../node_modules/.pnpm/bech32@1.1.4/node_modules/bech32/index.js\n  var require_bech32 = __commonJS({\n    \"../../../node_modules/.pnpm/bech32@1.1.4/node_modules/bech32/index.js\"(exports3, module) {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      var ALPHABET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n      var ALPHABET_MAP = {};\n      for (z = 0; z < ALPHABET.length; z++) {\n        x = ALPHABET.charAt(z);\n        if (ALPHABET_MAP[x] !== void 0)\n          throw new TypeError(x + \" is ambiguous\");\n        ALPHABET_MAP[x] = z;\n      }\n      var x;\n      var z;\n      function polymodStep(pre) {\n        var b2 = pre >> 25;\n        return (pre & 33554431) << 5 ^ -(b2 >> 0 & 1) & 996825010 ^ -(b2 >> 1 & 1) & 642813549 ^ -(b2 >> 2 & 1) & 513874426 ^ -(b2 >> 3 & 1) & 1027748829 ^ -(b2 >> 4 & 1) & 705979059;\n      }\n      function prefixChk(prefix) {\n        var chk = 1;\n        for (var i = 0; i < prefix.length; ++i) {\n          var c = prefix.charCodeAt(i);\n          if (c < 33 || c > 126)\n            return \"Invalid prefix (\" + prefix + \")\";\n          chk = polymodStep(chk) ^ c >> 5;\n        }\n        chk = polymodStep(chk);\n        for (i = 0; i < prefix.length; ++i) {\n          var v = prefix.charCodeAt(i);\n          chk = polymodStep(chk) ^ v & 31;\n        }\n        return chk;\n      }\n      function encode4(prefix, words2, LIMIT) {\n        LIMIT = LIMIT || 90;\n        if (prefix.length + 7 + words2.length > LIMIT)\n          throw new TypeError(\"Exceeds length limit\");\n        prefix = prefix.toLowerCase();\n        var chk = prefixChk(prefix);\n        if (typeof chk === \"string\")\n          throw new Error(chk);\n        var result = prefix + \"1\";\n        for (var i = 0; i < words2.length; ++i) {\n          var x2 = words2[i];\n          if (x2 >> 5 !== 0)\n            throw new Error(\"Non 5-bit word\");\n          chk = polymodStep(chk) ^ x2;\n          result += ALPHABET.charAt(x2);\n        }\n        for (i = 0; i < 6; ++i) {\n          chk = polymodStep(chk);\n        }\n        chk ^= 1;\n        for (i = 0; i < 6; ++i) {\n          var v = chk >> (5 - i) * 5 & 31;\n          result += ALPHABET.charAt(v);\n        }\n        return result;\n      }\n      function __decode(str, LIMIT) {\n        LIMIT = LIMIT || 90;\n        if (str.length < 8)\n          return str + \" too short\";\n        if (str.length > LIMIT)\n          return \"Exceeds length limit\";\n        var lowered = str.toLowerCase();\n        var uppered = str.toUpperCase();\n        if (str !== lowered && str !== uppered)\n          return \"Mixed-case string \" + str;\n        str = lowered;\n        var split3 = str.lastIndexOf(\"1\");\n        if (split3 === -1)\n          return \"No separator character for \" + str;\n        if (split3 === 0)\n          return \"Missing prefix for \" + str;\n        var prefix = str.slice(0, split3);\n        var wordChars = str.slice(split3 + 1);\n        if (wordChars.length < 6)\n          return \"Data too short\";\n        var chk = prefixChk(prefix);\n        if (typeof chk === \"string\")\n          return chk;\n        var words2 = [];\n        for (var i = 0; i < wordChars.length; ++i) {\n          var c = wordChars.charAt(i);\n          var v = ALPHABET_MAP[c];\n          if (v === void 0)\n            return \"Unknown character \" + c;\n          chk = polymodStep(chk) ^ v;\n          if (i + 6 >= wordChars.length)\n            continue;\n          words2.push(v);\n        }\n        if (chk !== 1)\n          return \"Invalid checksum for \" + str;\n        return { prefix, words: words2 };\n      }\n      function decodeUnsafe() {\n        var res = __decode.apply(null, arguments);\n        if (typeof res === \"object\")\n          return res;\n      }\n      function decode3(str) {\n        var res = __decode.apply(null, arguments);\n        if (typeof res === \"object\")\n          return res;\n        throw new Error(res);\n      }\n      function convert(data, inBits, outBits, pad) {\n        var value = 0;\n        var bits = 0;\n        var maxV = (1 << outBits) - 1;\n        var result = [];\n        for (var i = 0; i < data.length; ++i) {\n          value = value << inBits | data[i];\n          bits += inBits;\n          while (bits >= outBits) {\n            bits -= outBits;\n            result.push(value >> bits & maxV);\n          }\n        }\n        if (pad) {\n          if (bits > 0) {\n            result.push(value << outBits - bits & maxV);\n          }\n        } else {\n          if (bits >= inBits)\n            return \"Excess padding\";\n          if (value << outBits - bits & maxV)\n            return \"Non-zero padding\";\n        }\n        return result;\n      }\n      function toWordsUnsafe(bytes3) {\n        var res = convert(bytes3, 8, 5, true);\n        if (Array.isArray(res))\n          return res;\n      }\n      function toWords(bytes3) {\n        var res = convert(bytes3, 8, 5, true);\n        if (Array.isArray(res))\n          return res;\n        throw new Error(res);\n      }\n      function fromWordsUnsafe(words2) {\n        var res = convert(words2, 5, 8, false);\n        if (Array.isArray(res))\n          return res;\n      }\n      function fromWords(words2) {\n        var res = convert(words2, 5, 8, false);\n        if (Array.isArray(res))\n          return res;\n        throw new Error(res);\n      }\n      module.exports = {\n        decodeUnsafe,\n        decode: decode3,\n        encode: encode4,\n        toWordsUnsafe,\n        toWords,\n        fromWordsUnsafe,\n        fromWords\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/_version.js\n  var version24;\n  var init_version23 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version24 = \"providers/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/formatter.js\n  function isCommunityResourcable(value) {\n    return value && typeof value.isCommunityResource === \"function\";\n  }\n  function isCommunityResource(value) {\n    return isCommunityResourcable(value) && value.isCommunityResource();\n  }\n  function showThrottleMessage() {\n    if (throttleMessage) {\n      return;\n    }\n    throttleMessage = true;\n    console.log(\"========= NOTICE =========\");\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https://docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n  }\n  var logger29, Formatter, throttleMessage;\n  var init_formatter = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/formatter.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib7();\n      init_lib3();\n      init_lib2();\n      init_lib8();\n      init_lib4();\n      init_lib17();\n      init_lib();\n      init_version23();\n      logger29 = new Logger(version24);\n      Formatter = class _Formatter {\n        constructor() {\n          this.formats = this.getDefaultFormats();\n        }\n        getDefaultFormats() {\n          const formats = {};\n          const address = this.address.bind(this);\n          const bigNumber = this.bigNumber.bind(this);\n          const blockTag = this.blockTag.bind(this);\n          const data = this.data.bind(this);\n          const hash4 = this.hash.bind(this);\n          const hex = this.hex.bind(this);\n          const number2 = this.number.bind(this);\n          const type = this.type.bind(this);\n          const strictData = (v) => {\n            return this.data(v, true);\n          };\n          formats.transaction = {\n            hash: hash4,\n            type,\n            accessList: _Formatter.allowNull(this.accessList.bind(this), null),\n            blockHash: _Formatter.allowNull(hash4, null),\n            blockNumber: _Formatter.allowNull(number2, null),\n            transactionIndex: _Formatter.allowNull(number2, null),\n            confirmations: _Formatter.allowNull(number2, null),\n            from: address,\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: _Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: _Formatter.allowNull(bigNumber),\n            maxFeePerGas: _Formatter.allowNull(bigNumber),\n            gasLimit: bigNumber,\n            to: _Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number2,\n            data,\n            r: _Formatter.allowNull(this.uint256),\n            s: _Formatter.allowNull(this.uint256),\n            v: _Formatter.allowNull(number2),\n            creates: _Formatter.allowNull(address, null),\n            raw: _Formatter.allowNull(data)\n          };\n          formats.transactionRequest = {\n            from: _Formatter.allowNull(address),\n            nonce: _Formatter.allowNull(number2),\n            gasLimit: _Formatter.allowNull(bigNumber),\n            gasPrice: _Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: _Formatter.allowNull(bigNumber),\n            maxFeePerGas: _Formatter.allowNull(bigNumber),\n            to: _Formatter.allowNull(address),\n            value: _Formatter.allowNull(bigNumber),\n            data: _Formatter.allowNull(strictData),\n            type: _Formatter.allowNull(number2),\n            accessList: _Formatter.allowNull(this.accessList.bind(this), null)\n          };\n          formats.receiptLog = {\n            transactionIndex: number2,\n            blockNumber: number2,\n            transactionHash: hash4,\n            address,\n            topics: _Formatter.arrayOf(hash4),\n            data,\n            logIndex: number2,\n            blockHash: hash4\n          };\n          formats.receipt = {\n            to: _Formatter.allowNull(this.address, null),\n            from: _Formatter.allowNull(this.address, null),\n            contractAddress: _Formatter.allowNull(address, null),\n            transactionIndex: number2,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: _Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: _Formatter.allowNull(data),\n            blockHash: hash4,\n            transactionHash: hash4,\n            logs: _Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number2,\n            confirmations: _Formatter.allowNull(number2, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: _Formatter.allowNull(bigNumber),\n            status: _Formatter.allowNull(number2),\n            type\n          };\n          formats.block = {\n            hash: _Formatter.allowNull(hash4),\n            parentHash: hash4,\n            number: number2,\n            timestamp: number2,\n            nonce: _Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n            miner: _Formatter.allowNull(address),\n            extraData: data,\n            transactions: _Formatter.allowNull(_Formatter.arrayOf(hash4)),\n            baseFeePerGas: _Formatter.allowNull(bigNumber)\n          };\n          formats.blockWithTransactions = shallowCopy(formats.block);\n          formats.blockWithTransactions.transactions = _Formatter.allowNull(_Formatter.arrayOf(this.transactionResponse.bind(this)));\n          formats.filter = {\n            fromBlock: _Formatter.allowNull(blockTag, void 0),\n            toBlock: _Formatter.allowNull(blockTag, void 0),\n            blockHash: _Formatter.allowNull(hash4, void 0),\n            address: _Formatter.allowNull(address, void 0),\n            topics: _Formatter.allowNull(this.topics.bind(this), void 0)\n          };\n          formats.filterLog = {\n            blockNumber: _Formatter.allowNull(number2),\n            blockHash: _Formatter.allowNull(hash4),\n            transactionIndex: number2,\n            removed: _Formatter.allowNull(this.boolean.bind(this)),\n            address,\n            data: _Formatter.allowFalsish(data, \"0x\"),\n            topics: _Formatter.arrayOf(hash4),\n            transactionHash: hash4,\n            logIndex: number2\n          };\n          return formats;\n        }\n        accessList(accessList) {\n          return accessListify(accessList || []);\n        }\n        // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n        // Strict! Used on input.\n        number(number2) {\n          if (number2 === \"0x\") {\n            return 0;\n          }\n          return BigNumber.from(number2).toNumber();\n        }\n        type(number2) {\n          if (number2 === \"0x\" || number2 == null) {\n            return 0;\n          }\n          return BigNumber.from(number2).toNumber();\n        }\n        // Strict! Used on input.\n        bigNumber(value) {\n          return BigNumber.from(value);\n        }\n        // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n        boolean(value) {\n          if (typeof value === \"boolean\") {\n            return value;\n          }\n          if (typeof value === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") {\n              return true;\n            }\n            if (value === \"false\") {\n              return false;\n            }\n          }\n          throw new Error(\"invalid boolean - \" + value);\n        }\n        hex(value, strict) {\n          if (typeof value === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") {\n              value = \"0x\" + value;\n            }\n            if (isHexString(value)) {\n              return value.toLowerCase();\n            }\n          }\n          return logger29.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        data(value, strict) {\n          const result = this.hex(value, strict);\n          if (result.length % 2 !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n          }\n          return result;\n        }\n        // Requires an address\n        // Strict! Used on input.\n        address(value) {\n          return getAddress(value);\n        }\n        callAddress(value) {\n          if (!isHexString(value, 32)) {\n            return null;\n          }\n          const address = getAddress(hexDataSlice(value, 12));\n          return address === AddressZero ? null : address;\n        }\n        contractAddress(value) {\n          return getContractAddress(value);\n        }\n        // Strict! Used on input.\n        blockTag(blockTag) {\n          if (blockTag == null) {\n            return \"latest\";\n          }\n          if (blockTag === \"earliest\") {\n            return \"0x0\";\n          }\n          switch (blockTag) {\n            case \"earliest\":\n              return \"0x0\";\n            case \"latest\":\n            case \"pending\":\n            case \"safe\":\n            case \"finalized\":\n              return blockTag;\n          }\n          if (typeof blockTag === \"number\" || isHexString(blockTag)) {\n            return hexValue(blockTag);\n          }\n          throw new Error(\"invalid blockTag\");\n        }\n        // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n        hash(value, strict) {\n          const result = this.hex(value, strict);\n          if (hexDataLength(result) !== 32) {\n            return logger29.throwArgumentError(\"invalid hash\", \"value\", value);\n          }\n          return result;\n        }\n        // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n        difficulty(value) {\n          if (value == null) {\n            return null;\n          }\n          const v = BigNumber.from(value);\n          try {\n            return v.toNumber();\n          } catch (error) {\n          }\n          return null;\n        }\n        uint256(value) {\n          if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n          }\n          return hexZeroPad(value, 32);\n        }\n        _block(value, format) {\n          if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n          }\n          const difficulty = value._difficulty != null ? value._difficulty : value.difficulty;\n          const result = _Formatter.check(format, value);\n          result._difficulty = difficulty == null ? null : BigNumber.from(difficulty);\n          return result;\n        }\n        block(value) {\n          return this._block(value, this.formats.block);\n        }\n        blockWithTransactions(value) {\n          return this._block(value, this.formats.blockWithTransactions);\n        }\n        // Strict! Used on input.\n        transactionRequest(value) {\n          return _Formatter.check(this.formats.transactionRequest, value);\n        }\n        transactionResponse(transaction) {\n          if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n          }\n          if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n          }\n          if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n          }\n          if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n          }\n          if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n            transaction.accessList = [];\n          }\n          const result = _Formatter.check(this.formats.transaction, transaction);\n          if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n            if (isHexString(chainId)) {\n              chainId = BigNumber.from(chainId).toNumber();\n            }\n            result.chainId = chainId;\n          } else {\n            let chainId = transaction.networkId;\n            if (chainId == null && result.v == null) {\n              chainId = transaction.chainId;\n            }\n            if (isHexString(chainId)) {\n              chainId = BigNumber.from(chainId).toNumber();\n            }\n            if (typeof chainId !== \"number\" && result.v != null) {\n              chainId = (result.v - 35) / 2;\n              if (chainId < 0) {\n                chainId = 0;\n              }\n              chainId = parseInt(chainId);\n            }\n            if (typeof chainId !== \"number\") {\n              chainId = 0;\n            }\n            result.chainId = chainId;\n          }\n          if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n          }\n          return result;\n        }\n        transaction(value) {\n          return parse(value);\n        }\n        receiptLog(value) {\n          return _Formatter.check(this.formats.receiptLog, value);\n        }\n        receipt(value) {\n          const result = _Formatter.check(this.formats.receipt, value);\n          if (result.root != null) {\n            if (result.root.length <= 4) {\n              const value2 = BigNumber.from(result.root).toNumber();\n              if (value2 === 0 || value2 === 1) {\n                if (result.status != null && result.status !== value2) {\n                  logger29.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                }\n                result.status = value2;\n                delete result.root;\n              } else {\n                logger29.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n              }\n            } else if (result.root.length !== 66) {\n              logger29.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n          }\n          if (result.status != null) {\n            result.byzantium = true;\n          }\n          return result;\n        }\n        topics(value) {\n          if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n          } else if (value != null) {\n            return this.hash(value, true);\n          }\n          return null;\n        }\n        filter(value) {\n          return _Formatter.check(this.formats.filter, value);\n        }\n        filterLog(value) {\n          return _Formatter.check(this.formats.filterLog, value);\n        }\n        static check(format, object2) {\n          const result = {};\n          for (const key2 in format) {\n            try {\n              const value = format[key2](object2[key2]);\n              if (value !== void 0) {\n                result[key2] = value;\n              }\n            } catch (error) {\n              error.checkKey = key2;\n              error.checkValue = object2[key2];\n              throw error;\n            }\n          }\n          return result;\n        }\n        // if value is null-ish, nullValue is returned\n        static allowNull(format, nullValue) {\n          return function(value) {\n            if (value == null) {\n              return nullValue;\n            }\n            return format(value);\n          };\n        }\n        // If value is false-ish, replaceValue is returned\n        static allowFalsish(format, replaceValue) {\n          return function(value) {\n            if (!value) {\n              return replaceValue;\n            }\n            return format(value);\n          };\n        }\n        // Requires an Array satisfying check\n        static arrayOf(format) {\n          return function(array) {\n            if (!Array.isArray(array)) {\n              throw new Error(\"not an array\");\n            }\n            const result = [];\n            array.forEach(function(value) {\n              result.push(format(value));\n            });\n            return result;\n          };\n        }\n      };\n      throttleMessage = false;\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/base-provider.js\n  function checkTopic(topic) {\n    if (topic == null) {\n      return \"null\";\n    }\n    if (hexDataLength(topic) !== 32) {\n      logger30.throwArgumentError(\"invalid topic\", \"topic\", topic);\n    }\n    return topic.toLowerCase();\n  }\n  function serializeTopics(topics) {\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) {\n      topics.pop();\n    }\n    return topics.map((topic) => {\n      if (Array.isArray(topic)) {\n        const unique = {};\n        topic.forEach((topic2) => {\n          unique[checkTopic(topic2)] = true;\n        });\n        const sorted = Object.keys(unique);\n        sorted.sort();\n        return sorted.join(\"|\");\n      } else {\n        return checkTopic(topic);\n      }\n    }).join(\"&\");\n  }\n  function deserializeTopics(data) {\n    if (data === \"\") {\n      return [];\n    }\n    return data.split(/&/g).map((topic) => {\n      if (topic === \"\") {\n        return [];\n      }\n      const comps = topic.split(\"|\").map((topic2) => {\n        return topic2 === \"null\" ? null : topic2;\n      });\n      return comps.length === 1 ? comps[0] : comps;\n    });\n  }\n  function getEventTag2(eventName) {\n    if (typeof eventName === \"string\") {\n      eventName = eventName.toLowerCase();\n      if (hexDataLength(eventName) === 32) {\n        return \"tx:\" + eventName;\n      }\n      if (eventName.indexOf(\":\") === -1) {\n        return eventName;\n      }\n    } else if (Array.isArray(eventName)) {\n      return \"filter:*:\" + serializeTopics(eventName);\n    } else if (ForkEvent.isForkEvent(eventName)) {\n      logger30.warn(\"not implemented\");\n      throw new Error(\"not implemented\");\n    } else if (eventName && typeof eventName === \"object\") {\n      return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n    throw new Error(\"invalid event - \" + eventName);\n  }\n  function getTime() {\n    return (/* @__PURE__ */ new Date()).getTime();\n  }\n  function stall(duration) {\n    return new Promise((resolve) => {\n      setTimeout(resolve, duration);\n    });\n  }\n  function bytes32ify(value) {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n  }\n  function base58Encode(data) {\n    return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n  }\n  function _parseString(result, start) {\n    try {\n      return toUtf8String(_parseBytes(result, start));\n    } catch (error) {\n    }\n    return null;\n  }\n  function _parseBytes(result, start) {\n    if (result === \"0x\") {\n      return null;\n    }\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n  }\n  function getIpfsLink(link) {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n      link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n      link = link.substring(7);\n    } else {\n      logger30.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n    return `https://gateway.ipfs.io/ipfs/${link}`;\n  }\n  function numPad(value) {\n    const result = arrayify(value);\n    if (result.length > 32) {\n      throw new Error(\"internal; should not happen\");\n    }\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n  }\n  function bytesPad(value) {\n    if (value.length % 32 === 0) {\n      return value;\n    }\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n  }\n  function encodeBytes(datas) {\n    const result = [];\n    let byteCount = 0;\n    for (let i = 0; i < datas.length; i++) {\n      result.push(null);\n      byteCount += 32;\n    }\n    for (let i = 0; i < datas.length; i++) {\n      const data = arrayify(datas[i]);\n      result[i] = numPad(byteCount);\n      result.push(numPad(data.length));\n      result.push(bytesPad(data));\n      byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n    return hexConcat(result);\n  }\n  var import_bech32, __awaiter10, logger30, MAX_CCIP_REDIRECTS, PollableEvents, Event, coinInfos, matcherIpfs, matchers, Resolver, defaultFormatter, nextPollId, BaseProvider;\n  var init_base_provider = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/base-provider.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib14();\n      init_lib10();\n      init_lib19();\n      init_lib3();\n      init_lib2();\n      init_lib8();\n      init_lib12();\n      init_lib27();\n      init_lib4();\n      init_lib20();\n      init_lib9();\n      init_lib28();\n      import_bech32 = __toESM(require_bech32());\n      init_lib();\n      init_version23();\n      init_formatter();\n      __awaiter10 = function(thisArg, _arguments, P, generator) {\n        function adopt(value) {\n          return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n          });\n        }\n        return new (P || (P = Promise))(function(resolve, reject) {\n          function fulfilled(value) {\n            try {\n              step(generator.next(value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function rejected(value) {\n            try {\n              step(generator[\"throw\"](value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n          }\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n      };\n      logger30 = new Logger(version24);\n      MAX_CCIP_REDIRECTS = 10;\n      PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\n      Event = class {\n        constructor(tag, listener, once2) {\n          defineReadOnly(this, \"tag\", tag);\n          defineReadOnly(this, \"listener\", listener);\n          defineReadOnly(this, \"once\", once2);\n          this._lastBlockNumber = -2;\n          this._inflight = false;\n        }\n        get event() {\n          switch (this.type) {\n            case \"tx\":\n              return this.hash;\n            case \"filter\":\n              return this.filter;\n          }\n          return this.tag;\n        }\n        get type() {\n          return this.tag.split(\":\")[0];\n        }\n        get hash() {\n          const comps = this.tag.split(\":\");\n          if (comps[0] !== \"tx\") {\n            return null;\n          }\n          return comps[1];\n        }\n        get filter() {\n          const comps = this.tag.split(\":\");\n          if (comps[0] !== \"filter\") {\n            return null;\n          }\n          const address = comps[1];\n          const topics = deserializeTopics(comps[2]);\n          const filter = {};\n          if (topics.length > 0) {\n            filter.topics = topics;\n          }\n          if (address && address !== \"*\") {\n            filter.address = address;\n          }\n          return filter;\n        }\n        pollable() {\n          return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n        }\n      };\n      coinInfos = {\n        \"0\": { symbol: \"btc\", p2pkh: 0, p2sh: 5, prefix: \"bc\" },\n        \"2\": { symbol: \"ltc\", p2pkh: 48, p2sh: 50, prefix: \"ltc\" },\n        \"3\": { symbol: \"doge\", p2pkh: 30, p2sh: 22 },\n        \"60\": { symbol: \"eth\", ilk: \"eth\" },\n        \"61\": { symbol: \"etc\", ilk: \"eth\" },\n        \"700\": { symbol: \"xdai\", ilk: \"eth\" }\n      };\n      matcherIpfs = new RegExp(\"^(ipfs)://(.*)$\", \"i\");\n      matchers = [\n        new RegExp(\"^(https)://(.*)$\", \"i\"),\n        new RegExp(\"^(data):(.*)$\", \"i\"),\n        matcherIpfs,\n        new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")\n      ];\n      Resolver = class {\n        // The resolvedAddress is only for creating a ReverseLookup resolver\n        constructor(provider, address, name, resolvedAddress) {\n          defineReadOnly(this, \"provider\", provider);\n          defineReadOnly(this, \"name\", name);\n          defineReadOnly(this, \"address\", provider.formatter.address(address));\n          defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n        }\n        supportsWildcard() {\n          if (!this._supportsEip2544) {\n            this._supportsEip2544 = this.provider.call({\n              to: this.address,\n              data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n              return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n              if (error.code === Logger.errors.CALL_EXCEPTION) {\n                return false;\n              }\n              this._supportsEip2544 = null;\n              throw error;\n            });\n          }\n          return this._supportsEip2544;\n        }\n        _fetch(selector, parameters) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            const tx = {\n              to: this.address,\n              ccipReadEnabled: true,\n              data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n            };\n            let parseBytes = false;\n            if (yield this.supportsWildcard()) {\n              parseBytes = true;\n              tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n            }\n            try {\n              let result = yield this.provider.call(tx);\n              if (arrayify(result).length % 32 === 4) {\n                logger30.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                  transaction: tx,\n                  data: result\n                });\n              }\n              if (parseBytes) {\n                result = _parseBytes(result, 0);\n              }\n              return result;\n            } catch (error) {\n              if (error.code === Logger.errors.CALL_EXCEPTION) {\n                return null;\n              }\n              throw error;\n            }\n          });\n        }\n        _fetchBytes(selector, parameters) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            const result = yield this._fetch(selector, parameters);\n            if (result != null) {\n              return _parseBytes(result, 0);\n            }\n            return null;\n          });\n        }\n        _getAddress(coinType, hexBytes) {\n          const coinInfo = coinInfos[String(coinType)];\n          if (coinInfo == null) {\n            logger30.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: `getAddress(${coinType})`\n            });\n          }\n          if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n          }\n          const bytes3 = arrayify(hexBytes);\n          if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n              const length = parseInt(p2pkh[1], 16);\n              if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n              }\n            }\n          }\n          if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n              const length = parseInt(p2sh[1], 16);\n              if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n              }\n            }\n          }\n          if (coinInfo.prefix != null) {\n            const length = bytes3[1];\n            let version29 = bytes3[0];\n            if (version29 === 0) {\n              if (length !== 20 && length !== 32) {\n                version29 = -1;\n              }\n            } else {\n              version29 = -1;\n            }\n            if (version29 >= 0 && bytes3.length === 2 + length && length >= 1 && length <= 75) {\n              const words2 = import_bech32.default.toWords(bytes3.slice(2));\n              words2.unshift(version29);\n              return import_bech32.default.encode(coinInfo.prefix, words2);\n            }\n          }\n          return null;\n        }\n        getAddress(coinType) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            if (coinType == null) {\n              coinType = 60;\n            }\n            if (coinType === 60) {\n              try {\n                const result = yield this._fetch(\"0x3b3b57de\");\n                if (result === \"0x\" || result === HashZero) {\n                  return null;\n                }\n                return this.provider.formatter.callAddress(result);\n              } catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                  return null;\n                }\n                throw error;\n              }\n            }\n            const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n            if (hexBytes == null || hexBytes === \"0x\") {\n              return null;\n            }\n            const address = this._getAddress(coinType, hexBytes);\n            if (address == null) {\n              logger30.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${coinType})`,\n                coinType,\n                data: hexBytes\n              });\n            }\n            return address;\n          });\n        }\n        getAvatar() {\n          return __awaiter10(this, void 0, void 0, function* () {\n            const linkage = [{ type: \"name\", content: this.name }];\n            try {\n              const avatar = yield this.getText(\"avatar\");\n              if (avatar == null) {\n                return null;\n              }\n              for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n                if (match == null) {\n                  continue;\n                }\n                const scheme = match[1].toLowerCase();\n                switch (scheme) {\n                  case \"https\":\n                    linkage.push({ type: \"url\", content: avatar });\n                    return { linkage, url: avatar };\n                  case \"data\":\n                    linkage.push({ type: \"data\", content: avatar });\n                    return { linkage, url: avatar };\n                  case \"ipfs\":\n                    linkage.push({ type: \"ipfs\", content: avatar });\n                    return { linkage, url: getIpfsLink(avatar) };\n                  case \"erc721\":\n                  case \"erc1155\": {\n                    const selector = scheme === \"erc721\" ? \"0xc87b56dd\" : \"0x0e89341c\";\n                    linkage.push({ type: scheme, content: avatar });\n                    const owner = this._resolvedAddress || (yield this.getAddress());\n                    const comps = (match[2] || \"\").split(\"/\");\n                    if (comps.length !== 2) {\n                      return null;\n                    }\n                    const addr = yield this.provider.formatter.address(comps[0]);\n                    const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n                    if (scheme === \"erc721\") {\n                      const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({\n                        to: addr,\n                        data: hexConcat([\"0x6352211e\", tokenId])\n                      }));\n                      if (owner !== tokenOwner) {\n                        return null;\n                      }\n                      linkage.push({ type: \"owner\", content: tokenOwner });\n                    } else if (scheme === \"erc1155\") {\n                      const balance = BigNumber.from(yield this.provider.call({\n                        to: addr,\n                        data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                      }));\n                      if (balance.isZero()) {\n                        return null;\n                      }\n                      linkage.push({ type: \"balance\", content: balance.toString() });\n                    }\n                    const tx = {\n                      to: this.provider.formatter.address(comps[0]),\n                      data: hexConcat([selector, tokenId])\n                    };\n                    let metadataUrl = _parseString(yield this.provider.call(tx), 0);\n                    if (metadataUrl == null) {\n                      return null;\n                    }\n                    linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n                    if (scheme === \"erc1155\") {\n                      metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                      linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                    }\n                    if (metadataUrl.match(/^ipfs:/i)) {\n                      metadataUrl = getIpfsLink(metadataUrl);\n                    }\n                    linkage.push({ type: \"metadata-url\", content: metadataUrl });\n                    const metadata = yield fetchJson(metadataUrl);\n                    if (!metadata) {\n                      return null;\n                    }\n                    linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n                    let imageUrl = metadata.image;\n                    if (typeof imageUrl !== \"string\") {\n                      return null;\n                    }\n                    if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                    } else {\n                      const ipfs = imageUrl.match(matcherIpfs);\n                      if (ipfs == null) {\n                        return null;\n                      }\n                      linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                      imageUrl = getIpfsLink(imageUrl);\n                    }\n                    linkage.push({ type: \"url\", content: imageUrl });\n                    return { linkage, url: imageUrl };\n                  }\n                }\n              }\n            } catch (error) {\n            }\n            return null;\n          });\n        }\n        getContentHash() {\n          return __awaiter10(this, void 0, void 0, function* () {\n            const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\");\n            if (hexBytes == null || hexBytes === \"0x\") {\n              return null;\n            }\n            const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipfs) {\n              const length = parseInt(ipfs[3], 16);\n              if (ipfs[4].length === length * 2) {\n                return \"ipfs://\" + Base58.encode(\"0x\" + ipfs[1]);\n              }\n            }\n            const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipns) {\n              const length = parseInt(ipns[3], 16);\n              if (ipns[4].length === length * 2) {\n                return \"ipns://\" + Base58.encode(\"0x\" + ipns[1]);\n              }\n            }\n            const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n            if (swarm) {\n              if (swarm[1].length === 32 * 2) {\n                return \"bzz://\" + swarm[1];\n              }\n            }\n            const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n            if (skynet) {\n              if (skynet[1].length === 34 * 2) {\n                const urlSafe = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n                const hash4 = encode2(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a) => urlSafe[a]);\n                return \"sia://\" + hash4;\n              }\n            }\n            return logger30.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"getContentHash()\",\n              data: hexBytes\n            });\n          });\n        }\n        getText(key2) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            let keyBytes = toUtf8Bytes(key2);\n            keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n            if (keyBytes.length % 32 !== 0) {\n              keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key2.length % 32)]);\n            }\n            const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n            if (hexBytes == null || hexBytes === \"0x\") {\n              return null;\n            }\n            return toUtf8String(hexBytes);\n          });\n        }\n      };\n      defaultFormatter = null;\n      nextPollId = 1;\n      BaseProvider = class extends Provider {\n        /**\n         *  ready\n         *\n         *  A Promise<Network> that resolves only once the provider is ready.\n         *\n         *  Sub-classes that call the super with a network without a chainId\n         *  MUST set this. Standard named networks have a known chainId.\n         *\n         */\n        constructor(network) {\n          super();\n          this._events = [];\n          this._emitted = { block: -2 };\n          this.disableCcipRead = false;\n          this.formatter = new.target.getFormatter();\n          defineReadOnly(this, \"anyNetwork\", network === \"any\");\n          if (this.anyNetwork) {\n            network = this.detectNetwork();\n          }\n          if (network instanceof Promise) {\n            this._networkPromise = network;\n            network.catch((error) => {\n            });\n            this._ready().catch((error) => {\n            });\n          } else {\n            const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n              defineReadOnly(this, \"_network\", knownNetwork);\n              this.emit(\"network\", knownNetwork, null);\n            } else {\n              logger30.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n          }\n          this._maxInternalBlockNumber = -1024;\n          this._lastBlockNumber = -2;\n          this._maxFilterBlockRange = 10;\n          this._pollingInterval = 4e3;\n          this._fastQueryDate = 0;\n        }\n        _ready() {\n          return __awaiter10(this, void 0, void 0, function* () {\n            if (this._network == null) {\n              let network = null;\n              if (this._networkPromise) {\n                try {\n                  network = yield this._networkPromise;\n                } catch (error) {\n                }\n              }\n              if (network == null) {\n                network = yield this.detectNetwork();\n              }\n              if (!network) {\n                logger30.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n              }\n              if (this._network == null) {\n                if (this.anyNetwork) {\n                  this._network = network;\n                } else {\n                  defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n              }\n            }\n            return this._network;\n          });\n        }\n        // This will always return the most recently established network.\n        // For \"any\", this can change (a \"network\" event is emitted before\n        // any change is reflected); otherwise this cannot change\n        get ready() {\n          return poll(() => {\n            return this._ready().then((network) => {\n              return network;\n            }, (error) => {\n              if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                return void 0;\n              }\n              throw error;\n            });\n          });\n        }\n        // @TODO: Remove this and just create a singleton formatter\n        static getFormatter() {\n          if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n          }\n          return defaultFormatter;\n        }\n        // @TODO: Remove this and just use getNetwork\n        static getNetwork(network) {\n          return getNetwork(network == null ? \"homestead\" : network);\n        }\n        ccipReadFetch(tx, calldata, urls) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            if (this.disableCcipRead || urls.length === 0) {\n              return null;\n            }\n            const sender = tx.to.toLowerCase();\n            const data = calldata.toLowerCase();\n            const errorMessages = [];\n            for (let i = 0; i < urls.length; i++) {\n              const url = urls[i];\n              const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n              const json = url.indexOf(\"{data}\") >= 0 ? null : JSON.stringify({ data, sender });\n              const result = yield fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                value.status = response.statusCode;\n                return value;\n              });\n              if (result.data) {\n                return result.data;\n              }\n              const errorMessage = result.message || \"unknown error\";\n              if (result.status >= 400 && result.status < 500) {\n                return logger30.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n              }\n              errorMessages.push(errorMessage);\n            }\n            return logger30.throwError(`error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(\", \")}`, Logger.errors.SERVER_ERROR, {\n              urls,\n              errorMessages\n            });\n          });\n        }\n        // Fetches the blockNumber, but will reuse any result that is less\n        // than maxAge old or has been requested since the last request\n        _getInternalBlockNumber(maxAge) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            yield this._ready();\n            if (maxAge > 0) {\n              while (this._internalBlockNumber) {\n                const internalBlockNumber = this._internalBlockNumber;\n                try {\n                  const result = yield internalBlockNumber;\n                  if (getTime() - result.respTime <= maxAge) {\n                    return result.blockNumber;\n                  }\n                  break;\n                } catch (error) {\n                  if (this._internalBlockNumber === internalBlockNumber) {\n                    break;\n                  }\n                }\n              }\n            }\n            const reqTime = getTime();\n            const checkInternalBlockNumber = resolveProperties({\n              blockNumber: this.perform(\"getBlockNumber\", {}),\n              networkError: this.getNetwork().then((network) => null, (error) => error)\n            }).then(({ blockNumber, networkError }) => {\n              if (networkError) {\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                  this._internalBlockNumber = null;\n                }\n                throw networkError;\n              }\n              const respTime = getTime();\n              blockNumber = BigNumber.from(blockNumber).toNumber();\n              if (blockNumber < this._maxInternalBlockNumber) {\n                blockNumber = this._maxInternalBlockNumber;\n              }\n              this._maxInternalBlockNumber = blockNumber;\n              this._setFastBlockNumber(blockNumber);\n              return { blockNumber, reqTime, respTime };\n            });\n            this._internalBlockNumber = checkInternalBlockNumber;\n            checkInternalBlockNumber.catch((error) => {\n              if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n              }\n            });\n            return (yield checkInternalBlockNumber).blockNumber;\n          });\n        }\n        poll() {\n          return __awaiter10(this, void 0, void 0, function* () {\n            const pollId = nextPollId++;\n            const runners = [];\n            let blockNumber = null;\n            try {\n              blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n            } catch (error) {\n              this.emit(\"error\", error);\n              return;\n            }\n            this._setFastBlockNumber(blockNumber);\n            this.emit(\"poll\", pollId, blockNumber);\n            if (blockNumber === this._lastBlockNumber) {\n              this.emit(\"didPoll\", pollId);\n              return;\n            }\n            if (this._emitted.block === -2) {\n              this._emitted.block = blockNumber - 1;\n            }\n            if (Math.abs(this._emitted.block - blockNumber) > 1e3) {\n              logger30.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n              this.emit(\"error\", logger30.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n              }));\n              this.emit(\"block\", blockNumber);\n            } else {\n              for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n              }\n            }\n            if (this._emitted.block !== blockNumber) {\n              this._emitted.block = blockNumber;\n              Object.keys(this._emitted).forEach((key2) => {\n                if (key2 === \"block\") {\n                  return;\n                }\n                const eventBlockNumber = this._emitted[key2];\n                if (eventBlockNumber === \"pending\") {\n                  return;\n                }\n                if (blockNumber - eventBlockNumber > 12) {\n                  delete this._emitted[key2];\n                }\n              });\n            }\n            if (this._lastBlockNumber === -2) {\n              this._lastBlockNumber = blockNumber - 1;\n            }\n            this._events.forEach((event) => {\n              switch (event.type) {\n                case \"tx\": {\n                  const hash4 = event.hash;\n                  let runner = this.getTransactionReceipt(hash4).then((receipt) => {\n                    if (!receipt || receipt.blockNumber == null) {\n                      return null;\n                    }\n                    this._emitted[\"t:\" + hash4] = receipt.blockNumber;\n                    this.emit(hash4, receipt);\n                    return null;\n                  }).catch((error) => {\n                    this.emit(\"error\", error);\n                  });\n                  runners.push(runner);\n                  break;\n                }\n                case \"filter\": {\n                  if (!event._inflight) {\n                    event._inflight = true;\n                    if (event._lastBlockNumber === -2) {\n                      event._lastBlockNumber = blockNumber - 1;\n                    }\n                    const filter = event.filter;\n                    filter.fromBlock = event._lastBlockNumber + 1;\n                    filter.toBlock = blockNumber;\n                    const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                    if (minFromBlock > filter.fromBlock) {\n                      filter.fromBlock = minFromBlock;\n                    }\n                    if (filter.fromBlock < 0) {\n                      filter.fromBlock = 0;\n                    }\n                    const runner = this.getLogs(filter).then((logs) => {\n                      event._inflight = false;\n                      if (logs.length === 0) {\n                        return;\n                      }\n                      logs.forEach((log) => {\n                        if (log.blockNumber > event._lastBlockNumber) {\n                          event._lastBlockNumber = log.blockNumber;\n                        }\n                        this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                        this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                        this.emit(filter, log);\n                      });\n                    }).catch((error) => {\n                      this.emit(\"error\", error);\n                      event._inflight = false;\n                    });\n                    runners.push(runner);\n                  }\n                  break;\n                }\n              }\n            });\n            this._lastBlockNumber = blockNumber;\n            Promise.all(runners).then(() => {\n              this.emit(\"didPoll\", pollId);\n            }).catch((error) => {\n              this.emit(\"error\", error);\n            });\n            return;\n          });\n        }\n        // Deprecated; do not use this\n        resetEventsBlock(blockNumber) {\n          this._lastBlockNumber = blockNumber - 1;\n          if (this.polling) {\n            this.poll();\n          }\n        }\n        get network() {\n          return this._network;\n        }\n        // This method should query the network if the underlying network\n        // can change, such as when connected to a JSON-RPC backend\n        detectNetwork() {\n          return __awaiter10(this, void 0, void 0, function* () {\n            return logger30.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"provider.detectNetwork\"\n            });\n          });\n        }\n        getNetwork() {\n          return __awaiter10(this, void 0, void 0, function* () {\n            const network = yield this._ready();\n            const currentNetwork = yield this.detectNetwork();\n            if (network.chainId !== currentNetwork.chainId) {\n              if (this.anyNetwork) {\n                this._network = currentNetwork;\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n                this.emit(\"network\", currentNetwork, network);\n                yield stall(0);\n                return this._network;\n              }\n              const error = logger30.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network,\n                detectedNetwork: currentNetwork\n              });\n              this.emit(\"error\", error);\n              throw error;\n            }\n            return network;\n          });\n        }\n        get blockNumber() {\n          this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n          }, (error) => {\n          });\n          return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n        }\n        get polling() {\n          return this._poller != null;\n        }\n        set polling(value) {\n          if (value && !this._poller) {\n            this._poller = setInterval(() => {\n              this.poll();\n            }, this.pollingInterval);\n            if (!this._bootstrapPoll) {\n              this._bootstrapPoll = setTimeout(() => {\n                this.poll();\n                this._bootstrapPoll = setTimeout(() => {\n                  if (!this._poller) {\n                    this.poll();\n                  }\n                  this._bootstrapPoll = null;\n                }, this.pollingInterval);\n              }, 0);\n            }\n          } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n          }\n        }\n        get pollingInterval() {\n          return this._pollingInterval;\n        }\n        set pollingInterval(value) {\n          if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n          }\n          this._pollingInterval = value;\n          if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => {\n              this.poll();\n            }, this._pollingInterval);\n          }\n        }\n        _getFastBlockNumber() {\n          const now2 = getTime();\n          if (now2 - this._fastQueryDate > 2 * this._pollingInterval) {\n            this._fastQueryDate = now2;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n              if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                this._fastBlockNumber = blockNumber;\n              }\n              return this._fastBlockNumber;\n            });\n          }\n          return this._fastBlockNumberPromise;\n        }\n        _setFastBlockNumber(blockNumber) {\n          if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n            return;\n          }\n          this._fastQueryDate = getTime();\n          if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n          }\n        }\n        waitForTransaction(transactionHash, confirmations, timeout) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);\n          });\n        }\n        _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            const receipt = yield this.getTransactionReceipt(transactionHash);\n            if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n              return receipt;\n            }\n            return new Promise((resolve, reject) => {\n              const cancelFuncs = [];\n              let done = false;\n              const alreadyDone = function() {\n                if (done) {\n                  return true;\n                }\n                done = true;\n                cancelFuncs.forEach((func) => {\n                  func();\n                });\n                return false;\n              };\n              const minedHandler = (receipt2) => {\n                if (receipt2.confirmations < confirmations) {\n                  return;\n                }\n                if (alreadyDone()) {\n                  return;\n                }\n                resolve(receipt2);\n              };\n              this.on(transactionHash, minedHandler);\n              cancelFuncs.push(() => {\n                this.removeListener(transactionHash, minedHandler);\n              });\n              if (replaceable) {\n                let lastBlockNumber = replaceable.startBlock;\n                let scannedBlock = null;\n                const replaceHandler = (blockNumber) => __awaiter10(this, void 0, void 0, function* () {\n                  if (done) {\n                    return;\n                  }\n                  yield stall(1e3);\n                  this.getTransactionCount(replaceable.from).then((nonce) => __awaiter10(this, void 0, void 0, function* () {\n                    if (done) {\n                      return;\n                    }\n                    if (nonce <= replaceable.nonce) {\n                      lastBlockNumber = blockNumber;\n                    } else {\n                      {\n                        const mined = yield this.getTransaction(transactionHash);\n                        if (mined && mined.blockNumber != null) {\n                          return;\n                        }\n                      }\n                      if (scannedBlock == null) {\n                        scannedBlock = lastBlockNumber - 3;\n                        if (scannedBlock < replaceable.startBlock) {\n                          scannedBlock = replaceable.startBlock;\n                        }\n                      }\n                      while (scannedBlock <= blockNumber) {\n                        if (done) {\n                          return;\n                        }\n                        const block = yield this.getBlockWithTransactions(scannedBlock);\n                        for (let ti = 0; ti < block.transactions.length; ti++) {\n                          const tx = block.transactions[ti];\n                          if (tx.hash === transactionHash) {\n                            return;\n                          }\n                          if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                            if (done) {\n                              return;\n                            }\n                            const receipt2 = yield this.waitForTransaction(tx.hash, confirmations);\n                            if (alreadyDone()) {\n                              return;\n                            }\n                            let reason = \"replaced\";\n                            if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                              reason = \"repriced\";\n                            } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                              reason = \"cancelled\";\n                            }\n                            reject(logger30.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                              cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                              reason,\n                              replacement: this._wrapTransaction(tx),\n                              hash: transactionHash,\n                              receipt: receipt2\n                            }));\n                            return;\n                          }\n                        }\n                        scannedBlock++;\n                      }\n                    }\n                    if (done) {\n                      return;\n                    }\n                    this.once(\"block\", replaceHandler);\n                  }), (error) => {\n                    if (done) {\n                      return;\n                    }\n                    this.once(\"block\", replaceHandler);\n                  });\n                });\n                if (done) {\n                  return;\n                }\n                this.once(\"block\", replaceHandler);\n                cancelFuncs.push(() => {\n                  this.removeListener(\"block\", replaceHandler);\n                });\n              }\n              if (typeof timeout === \"number\" && timeout > 0) {\n                const timer2 = setTimeout(() => {\n                  if (alreadyDone()) {\n                    return;\n                  }\n                  reject(logger30.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout }));\n                }, timeout);\n                if (timer2.unref) {\n                  timer2.unref();\n                }\n                cancelFuncs.push(() => {\n                  clearTimeout(timer2);\n                });\n              }\n            });\n          });\n        }\n        getBlockNumber() {\n          return __awaiter10(this, void 0, void 0, function* () {\n            return this._getInternalBlockNumber(0);\n          });\n        }\n        getGasPrice() {\n          return __awaiter10(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const result = yield this.perform(\"getGasPrice\", {});\n            try {\n              return BigNumber.from(result);\n            } catch (error) {\n              return logger30.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result,\n                error\n              });\n            }\n          });\n        }\n        getBalance(addressOrName, blockTag) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n              address: this._getAddress(addressOrName),\n              blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getBalance\", params);\n            try {\n              return BigNumber.from(result);\n            } catch (error) {\n              return logger30.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params,\n                result,\n                error\n              });\n            }\n          });\n        }\n        getTransactionCount(addressOrName, blockTag) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n              address: this._getAddress(addressOrName),\n              blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getTransactionCount\", params);\n            try {\n              return BigNumber.from(result).toNumber();\n            } catch (error) {\n              return logger30.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params,\n                result,\n                error\n              });\n            }\n          });\n        }\n        getCode(addressOrName, blockTag) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n              address: this._getAddress(addressOrName),\n              blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getCode\", params);\n            try {\n              return hexlify(result);\n            } catch (error) {\n              return logger30.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params,\n                result,\n                error\n              });\n            }\n          });\n        }\n        getStorageAt(addressOrName, position, blockTag) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n              address: this._getAddress(addressOrName),\n              blockTag: this._getBlockTag(blockTag),\n              position: Promise.resolve(position).then((p) => hexValue(p))\n            });\n            const result = yield this.perform(\"getStorageAt\", params);\n            try {\n              return hexlify(result);\n            } catch (error) {\n              return logger30.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params,\n                result,\n                error\n              });\n            }\n          });\n        }\n        // This should be called by any subclass wrapping a TransactionResponse\n        _wrapTransaction(tx, hash4, startBlock) {\n          if (hash4 != null && hexDataLength(hash4) !== 32) {\n            throw new Error(\"invalid response - sendTransaction\");\n          }\n          const result = tx;\n          if (hash4 != null && tx.hash !== hash4) {\n            logger30.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash4 });\n          }\n          result.wait = (confirms, timeout) => __awaiter10(this, void 0, void 0, function* () {\n            if (confirms == null) {\n              confirms = 1;\n            }\n            if (timeout == null) {\n              timeout = 0;\n            }\n            let replacement = void 0;\n            if (confirms !== 0 && startBlock != null) {\n              replacement = {\n                data: tx.data,\n                from: tx.from,\n                nonce: tx.nonce,\n                to: tx.to,\n                value: tx.value,\n                startBlock\n              };\n            }\n            const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) {\n              return null;\n            }\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n            if (receipt.status === 0) {\n              logger30.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                transactionHash: tx.hash,\n                transaction: tx,\n                receipt\n              });\n            }\n            return receipt;\n          });\n          return result;\n        }\n        sendTransaction(signedTransaction) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const hexTx = yield Promise.resolve(signedTransaction).then((t) => hexlify(t));\n            const tx = this.formatter.transaction(signedTransaction);\n            if (tx.confirmations == null) {\n              tx.confirmations = 0;\n            }\n            const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            try {\n              const hash4 = yield this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n              return this._wrapTransaction(tx, hash4, blockNumber);\n            } catch (error) {\n              error.transaction = tx;\n              error.transactionHash = tx.hash;\n              throw error;\n            }\n          });\n        }\n        _getTransactionRequest(transaction) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            const values = yield transaction;\n            const tx = {};\n            [\"from\", \"to\"].forEach((key2) => {\n              if (values[key2] == null) {\n                return;\n              }\n              tx[key2] = Promise.resolve(values[key2]).then((v) => v ? this._getAddress(v) : null);\n            });\n            [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key2) => {\n              if (values[key2] == null) {\n                return;\n              }\n              tx[key2] = Promise.resolve(values[key2]).then((v) => v ? BigNumber.from(v) : null);\n            });\n            [\"type\"].forEach((key2) => {\n              if (values[key2] == null) {\n                return;\n              }\n              tx[key2] = Promise.resolve(values[key2]).then((v) => v != null ? v : null);\n            });\n            if (values.accessList) {\n              tx.accessList = this.formatter.accessList(values.accessList);\n            }\n            [\"data\"].forEach((key2) => {\n              if (values[key2] == null) {\n                return;\n              }\n              tx[key2] = Promise.resolve(values[key2]).then((v) => v ? hexlify(v) : null);\n            });\n            return this.formatter.transactionRequest(yield resolveProperties(tx));\n          });\n        }\n        _getFilter(filter) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            filter = yield filter;\n            const result = {};\n            if (filter.address != null) {\n              result.address = this._getAddress(filter.address);\n            }\n            [\"blockHash\", \"topics\"].forEach((key2) => {\n              if (filter[key2] == null) {\n                return;\n              }\n              result[key2] = filter[key2];\n            });\n            [\"fromBlock\", \"toBlock\"].forEach((key2) => {\n              if (filter[key2] == null) {\n                return;\n              }\n              result[key2] = this._getBlockTag(filter[key2]);\n            });\n            return this.formatter.filter(yield resolveProperties(result));\n          });\n        }\n        _call(transaction, blockTag, attempt) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            if (attempt >= MAX_CCIP_REDIRECTS) {\n              logger30.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                redirects: attempt,\n                transaction\n              });\n            }\n            const txSender = transaction.to;\n            const result = yield this.perform(\"call\", { transaction, blockTag });\n            if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && hexDataLength(result) % 32 === 4) {\n              try {\n                const data = hexDataSlice(result, 4);\n                const sender = hexDataSlice(data, 0, 32);\n                if (!BigNumber.from(sender).eq(txSender)) {\n                  logger30.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                    name: \"OffchainLookup\",\n                    signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                    transaction,\n                    data: result\n                  });\n                }\n                const urls = [];\n                const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                const urlsData = hexDataSlice(data, urlsOffset + 32);\n                for (let u = 0; u < urlsLength; u++) {\n                  const url = _parseString(urlsData, u * 32);\n                  if (url == null) {\n                    logger30.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                      name: \"OffchainLookup\",\n                      signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                      transaction,\n                      data: result\n                    });\n                  }\n                  urls.push(url);\n                }\n                const calldata = _parseBytes(data, 64);\n                if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                  logger30.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                    name: \"OffchainLookup\",\n                    signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                    transaction,\n                    data: result\n                  });\n                }\n                const callbackSelector = hexDataSlice(data, 96, 100);\n                const extraData = _parseBytes(data, 128);\n                const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);\n                if (ccipResult == null) {\n                  logger30.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                    name: \"OffchainLookup\",\n                    signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                    transaction,\n                    data: result\n                  });\n                }\n                const tx = {\n                  to: txSender,\n                  data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n                };\n                return this._call(tx, blockTag, attempt + 1);\n              } catch (error) {\n                if (error.code === Logger.errors.SERVER_ERROR) {\n                  throw error;\n                }\n              }\n            }\n            try {\n              return hexlify(result);\n            } catch (error) {\n              return logger30.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params: { transaction, blockTag },\n                result,\n                error\n              });\n            }\n          });\n        }\n        call(transaction, blockTag) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const resolved = yield resolveProperties({\n              transaction: this._getTransactionRequest(transaction),\n              blockTag: this._getBlockTag(blockTag),\n              ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n            });\n            return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);\n          });\n        }\n        estimateGas(transaction) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n              transaction: this._getTransactionRequest(transaction)\n            });\n            const result = yield this.perform(\"estimateGas\", params);\n            try {\n              return BigNumber.from(result);\n            } catch (error) {\n              return logger30.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params,\n                result,\n                error\n              });\n            }\n          });\n        }\n        _getAddress(addressOrName) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            addressOrName = yield addressOrName;\n            if (typeof addressOrName !== \"string\") {\n              logger30.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n            }\n            const address = yield this.resolveName(addressOrName);\n            if (address == null) {\n              logger30.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${JSON.stringify(addressOrName)})`\n              });\n            }\n            return address;\n          });\n        }\n        _getBlock(blockHashOrBlockTag, includeTransactions) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            blockHashOrBlockTag = yield blockHashOrBlockTag;\n            let blockNumber = -128;\n            const params = {\n              includeTransactions: !!includeTransactions\n            };\n            if (isHexString(blockHashOrBlockTag, 32)) {\n              params.blockHash = blockHashOrBlockTag;\n            } else {\n              try {\n                params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n                if (isHexString(params.blockTag)) {\n                  blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n              } catch (error) {\n                logger30.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n              }\n            }\n            return poll(() => __awaiter10(this, void 0, void 0, function* () {\n              const block = yield this.perform(\"getBlock\", params);\n              if (block == null) {\n                if (params.blockHash != null) {\n                  if (this._emitted[\"b:\" + params.blockHash] == null) {\n                    return null;\n                  }\n                }\n                if (params.blockTag != null) {\n                  if (blockNumber > this._emitted.block) {\n                    return null;\n                  }\n                }\n                return void 0;\n              }\n              if (includeTransactions) {\n                let blockNumber2 = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                  const tx = block.transactions[i];\n                  if (tx.blockNumber == null) {\n                    tx.confirmations = 0;\n                  } else if (tx.confirmations == null) {\n                    if (blockNumber2 == null) {\n                      blockNumber2 = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    }\n                    let confirmations = blockNumber2 - tx.blockNumber + 1;\n                    if (confirmations <= 0) {\n                      confirmations = 1;\n                    }\n                    tx.confirmations = confirmations;\n                  }\n                }\n                const blockWithTxs = this.formatter.blockWithTransactions(block);\n                blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));\n                return blockWithTxs;\n              }\n              return this.formatter.block(block);\n            }), { oncePoll: this });\n          });\n        }\n        getBlock(blockHashOrBlockTag) {\n          return this._getBlock(blockHashOrBlockTag, false);\n        }\n        getBlockWithTransactions(blockHashOrBlockTag) {\n          return this._getBlock(blockHashOrBlockTag, true);\n        }\n        getTransaction(transactionHash) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter10(this, void 0, void 0, function* () {\n              const result = yield this.perform(\"getTransaction\", params);\n              if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                  return null;\n                }\n                return void 0;\n              }\n              const tx = this.formatter.transactionResponse(result);\n              if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n              } else if (tx.confirmations == null) {\n                const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                let confirmations = blockNumber - tx.blockNumber + 1;\n                if (confirmations <= 0) {\n                  confirmations = 1;\n                }\n                tx.confirmations = confirmations;\n              }\n              return this._wrapTransaction(tx);\n            }), { oncePoll: this });\n          });\n        }\n        getTransactionReceipt(transactionHash) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter10(this, void 0, void 0, function* () {\n              const result = yield this.perform(\"getTransactionReceipt\", params);\n              if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                  return null;\n                }\n                return void 0;\n              }\n              if (result.blockHash == null) {\n                return void 0;\n              }\n              const receipt = this.formatter.receipt(result);\n              if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n              } else if (receipt.confirmations == null) {\n                const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                let confirmations = blockNumber - receipt.blockNumber + 1;\n                if (confirmations <= 0) {\n                  confirmations = 1;\n                }\n                receipt.confirmations = confirmations;\n              }\n              return receipt;\n            }), { oncePoll: this });\n          });\n        }\n        getLogs(filter) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({ filter: this._getFilter(filter) });\n            const logs = yield this.perform(\"getLogs\", params);\n            logs.forEach((log) => {\n              if (log.removed == null) {\n                log.removed = false;\n              }\n            });\n            return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n          });\n        }\n        getEtherPrice() {\n          return __awaiter10(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            return this.perform(\"getEtherPrice\", {});\n          });\n        }\n        _getBlockTag(blockTag) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            blockTag = yield blockTag;\n            if (typeof blockTag === \"number\" && blockTag < 0) {\n              if (blockTag % 1) {\n                logger30.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n              }\n              let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n              blockNumber += blockTag;\n              if (blockNumber < 0) {\n                blockNumber = 0;\n              }\n              return this.formatter.blockTag(blockNumber);\n            }\n            return this.formatter.blockTag(blockTag);\n          });\n        }\n        getResolver(name) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            let currentName = name;\n            while (true) {\n              if (currentName === \"\" || currentName === \".\") {\n                return null;\n              }\n              if (name !== \"eth\" && currentName === \"eth\") {\n                return null;\n              }\n              const addr = yield this._getResolver(currentName, \"getResolver\");\n              if (addr != null) {\n                const resolver = new Resolver(this, addr, name);\n                if (currentName !== name && !(yield resolver.supportsWildcard())) {\n                  return null;\n                }\n                return resolver;\n              }\n              currentName = currentName.split(\".\").slice(1).join(\".\");\n            }\n          });\n        }\n        _getResolver(name, operation) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            if (operation == null) {\n              operation = \"ENS\";\n            }\n            const network = yield this.getNetwork();\n            if (!network.ensAddress) {\n              logger30.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, { operation, network: network.name });\n            }\n            try {\n              const addrData = yield this.call({\n                to: network.ensAddress,\n                data: \"0x0178b8bf\" + namehash(name).substring(2)\n              });\n              return this.formatter.callAddress(addrData);\n            } catch (error) {\n            }\n            return null;\n          });\n        }\n        resolveName(name) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            name = yield name;\n            try {\n              return Promise.resolve(this.formatter.address(name));\n            } catch (error) {\n              if (isHexString(name)) {\n                throw error;\n              }\n            }\n            if (typeof name !== \"string\") {\n              logger30.throwArgumentError(\"invalid ENS name\", \"name\", name);\n            }\n            const resolver = yield this.getResolver(name);\n            if (!resolver) {\n              return null;\n            }\n            return yield resolver.getAddress();\n          });\n        }\n        lookupAddress(address) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            address = yield address;\n            address = this.formatter.address(address);\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n            const resolverAddr = yield this._getResolver(node, \"lookupAddress\");\n            if (resolverAddr == null) {\n              return null;\n            }\n            const name = _parseString(yield this.call({\n              to: resolverAddr,\n              data: \"0x691f3431\" + namehash(node).substring(2)\n            }), 0);\n            const addr = yield this.resolveName(name);\n            if (addr != address) {\n              return null;\n            }\n            return name;\n          });\n        }\n        getAvatar(nameOrAddress) {\n          return __awaiter10(this, void 0, void 0, function* () {\n            let resolver = null;\n            if (isHexString(nameOrAddress)) {\n              const address = this.formatter.address(nameOrAddress);\n              const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n              const resolverAddress = yield this._getResolver(node, \"getAvatar\");\n              if (!resolverAddress) {\n                return null;\n              }\n              resolver = new Resolver(this, resolverAddress, node);\n              try {\n                const avatar2 = yield resolver.getAvatar();\n                if (avatar2) {\n                  return avatar2.url;\n                }\n              } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) {\n                  throw error;\n                }\n              }\n              try {\n                const name = _parseString(yield this.call({\n                  to: resolverAddress,\n                  data: \"0x691f3431\" + namehash(node).substring(2)\n                }), 0);\n                resolver = yield this.getResolver(name);\n              } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) {\n                  throw error;\n                }\n                return null;\n              }\n            } else {\n              resolver = yield this.getResolver(nameOrAddress);\n              if (!resolver) {\n                return null;\n              }\n            }\n            const avatar = yield resolver.getAvatar();\n            if (avatar == null) {\n              return null;\n            }\n            return avatar.url;\n          });\n        }\n        perform(method, params) {\n          return logger30.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        _startEvent(event) {\n          this.polling = this._events.filter((e) => e.pollable()).length > 0;\n        }\n        _stopEvent(event) {\n          this.polling = this._events.filter((e) => e.pollable()).length > 0;\n        }\n        _addEventListener(eventName, listener, once2) {\n          const event = new Event(getEventTag2(eventName), listener, once2);\n          this._events.push(event);\n          this._startEvent(event);\n          return this;\n        }\n        on(eventName, listener) {\n          return this._addEventListener(eventName, listener, false);\n        }\n        once(eventName, listener) {\n          return this._addEventListener(eventName, listener, true);\n        }\n        emit(eventName, ...args) {\n          let result = false;\n          let stopped = [];\n          let eventTag = getEventTag2(eventName);\n          this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) {\n              return true;\n            }\n            setTimeout(() => {\n              event.listener.apply(this, args);\n            }, 0);\n            result = true;\n            if (event.once) {\n              stopped.push(event);\n              return false;\n            }\n            return true;\n          });\n          stopped.forEach((event) => {\n            this._stopEvent(event);\n          });\n          return result;\n        }\n        listenerCount(eventName) {\n          if (!eventName) {\n            return this._events.length;\n          }\n          let eventTag = getEventTag2(eventName);\n          return this._events.filter((event) => {\n            return event.tag === eventTag;\n          }).length;\n        }\n        listeners(eventName) {\n          if (eventName == null) {\n            return this._events.map((event) => event.listener);\n          }\n          let eventTag = getEventTag2(eventName);\n          return this._events.filter((event) => event.tag === eventTag).map((event) => event.listener);\n        }\n        off(eventName, listener) {\n          if (listener == null) {\n            return this.removeAllListeners(eventName);\n          }\n          const stopped = [];\n          let found = false;\n          let eventTag = getEventTag2(eventName);\n          this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) {\n              return true;\n            }\n            if (found) {\n              return true;\n            }\n            found = true;\n            stopped.push(event);\n            return false;\n          });\n          stopped.forEach((event) => {\n            this._stopEvent(event);\n          });\n          return this;\n        }\n        removeAllListeners(eventName) {\n          let stopped = [];\n          if (eventName == null) {\n            stopped = this._events;\n            this._events = [];\n          } else {\n            const eventTag = getEventTag2(eventName);\n            this._events = this._events.filter((event) => {\n              if (event.tag !== eventTag) {\n                return true;\n              }\n              stopped.push(event);\n              return false;\n            });\n          }\n          stopped.forEach((event) => {\n            this._stopEvent(event);\n          });\n          return this;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js\n  function spelunk(value, requireData) {\n    if (value == null) {\n      return null;\n    }\n    if (typeof value.message === \"string\" && value.message.match(\"reverted\")) {\n      const data = isHexString(value.data) ? value.data : null;\n      if (!requireData || data) {\n        return { message: value.message, data };\n      }\n    }\n    if (typeof value === \"object\") {\n      for (const key2 in value) {\n        const result = spelunk(value[key2], requireData);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    }\n    if (typeof value === \"string\") {\n      try {\n        return spelunk(JSON.parse(value), requireData);\n      } catch (error) {\n      }\n    }\n    return null;\n  }\n  function checkError(method, error, params) {\n    const transaction = params.transaction || params.signedTransaction;\n    if (method === \"call\") {\n      const result = spelunk(error, true);\n      if (result) {\n        return result.data;\n      }\n      logger31.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n        data: \"0x\",\n        transaction,\n        error\n      });\n    }\n    if (method === \"estimateGas\") {\n      let result = spelunk(error.body, false);\n      if (result == null) {\n        result = spelunk(error, false);\n      }\n      if (result) {\n        logger31.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n          reason: result.message,\n          method,\n          transaction,\n          error\n        });\n      }\n    }\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === \"string\") {\n      message = error.error.message;\n    } else if (typeof error.body === \"string\") {\n      message = error.body;\n    } else if (typeof error.responseText === \"string\") {\n      message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n      logger31.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n        error,\n        method,\n        transaction\n      });\n    }\n    if (message.match(/nonce (is )?too low/i)) {\n      logger31.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n        error,\n        method,\n        transaction\n      });\n    }\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n      logger31.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n        error,\n        method,\n        transaction\n      });\n    }\n    if (message.match(/only replay-protected/i)) {\n      logger31.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n        error,\n        method,\n        transaction\n      });\n    }\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n      logger31.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n        error,\n        method,\n        transaction\n      });\n    }\n    throw error;\n  }\n  function timer(timeout) {\n    return new Promise(function(resolve) {\n      setTimeout(resolve, timeout);\n    });\n  }\n  function getResult(payload) {\n    if (payload.error) {\n      const error = new Error(payload.error.message);\n      error.code = payload.error.code;\n      error.data = payload.error.data;\n      throw error;\n    }\n    return payload.result;\n  }\n  function getLowerCase(value) {\n    if (value) {\n      return value.toLowerCase();\n    }\n    return value;\n  }\n  var __awaiter11, logger31, errorGas, _constructorGuard5, JsonRpcSigner, UncheckedJsonRpcSigner, allowedTransactionKeys4, JsonRpcProvider;\n  var init_json_rpc_provider = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib15();\n      init_lib3();\n      init_lib2();\n      init_lib12();\n      init_lib4();\n      init_lib9();\n      init_lib17();\n      init_lib28();\n      init_lib();\n      init_version23();\n      init_base_provider();\n      __awaiter11 = function(thisArg, _arguments, P, generator) {\n        function adopt(value) {\n          return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n          });\n        }\n        return new (P || (P = Promise))(function(resolve, reject) {\n          function fulfilled(value) {\n            try {\n              step(generator.next(value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function rejected(value) {\n            try {\n              step(generator[\"throw\"](value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n          }\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n      };\n      logger31 = new Logger(version24);\n      errorGas = [\"call\", \"estimateGas\"];\n      _constructorGuard5 = {};\n      JsonRpcSigner = class extends Signer {\n        constructor(constructorGuard, provider, addressOrIndex) {\n          super();\n          if (constructorGuard !== _constructorGuard5) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n          }\n          defineReadOnly(this, \"provider\", provider);\n          if (addressOrIndex == null) {\n            addressOrIndex = 0;\n          }\n          if (typeof addressOrIndex === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n          } else if (typeof addressOrIndex === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n          } else {\n            logger31.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n          }\n        }\n        connect(provider) {\n          return logger31.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n          });\n        }\n        connectUnchecked() {\n          return new UncheckedJsonRpcSigner(_constructorGuard5, this.provider, this._address || this._index);\n        }\n        getAddress() {\n          if (this._address) {\n            return Promise.resolve(this._address);\n          }\n          return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n              logger31.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getAddress\"\n              });\n            }\n            return this.provider.formatter.address(accounts[this._index]);\n          });\n        }\n        sendUncheckedTransaction(transaction) {\n          transaction = shallowCopy(transaction);\n          const fromAddress = this.getAddress().then((address) => {\n            if (address) {\n              address = address.toLowerCase();\n            }\n            return address;\n          });\n          if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n          }\n          if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then((to) => __awaiter11(this, void 0, void 0, function* () {\n              if (to == null) {\n                return null;\n              }\n              const address = yield this.provider.resolveName(to);\n              if (address == null) {\n                logger31.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n              }\n              return address;\n            }));\n          }\n          return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n          }).then(({ tx, sender }) => {\n            if (tx.from != null) {\n              if (tx.from.toLowerCase() !== sender) {\n                logger31.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n              }\n            } else {\n              tx.from = sender;\n            }\n            const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });\n            return this.provider.send(\"eth_sendTransaction\", [hexTx]).then((hash4) => {\n              return hash4;\n            }, (error) => {\n              if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n                logger31.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n                  action: \"sendTransaction\",\n                  transaction: tx\n                });\n              }\n              return checkError(\"sendTransaction\", error, hexTx);\n            });\n          });\n        }\n        signTransaction(transaction) {\n          return logger31.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n          });\n        }\n        sendTransaction(transaction) {\n          return __awaiter11(this, void 0, void 0, function* () {\n            const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n            const hash4 = yield this.sendUncheckedTransaction(transaction);\n            try {\n              return yield poll(() => __awaiter11(this, void 0, void 0, function* () {\n                const tx = yield this.provider.getTransaction(hash4);\n                if (tx === null) {\n                  return void 0;\n                }\n                return this.provider._wrapTransaction(tx, hash4, blockNumber);\n              }), { oncePoll: this.provider });\n            } catch (error) {\n              error.transactionHash = hash4;\n              throw error;\n            }\n          });\n        }\n        signMessage(message) {\n          return __awaiter11(this, void 0, void 0, function* () {\n            const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n            const address = yield this.getAddress();\n            try {\n              return yield this.provider.send(\"personal_sign\", [hexlify(data), address.toLowerCase()]);\n            } catch (error) {\n              if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n                logger31.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                  action: \"signMessage\",\n                  from: address,\n                  messageData: message\n                });\n              }\n              throw error;\n            }\n          });\n        }\n        _legacySignMessage(message) {\n          return __awaiter11(this, void 0, void 0, function* () {\n            const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n            const address = yield this.getAddress();\n            try {\n              return yield this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n            } catch (error) {\n              if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n                logger31.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                  action: \"_legacySignMessage\",\n                  from: address,\n                  messageData: message\n                });\n              }\n              throw error;\n            }\n          });\n        }\n        _signTypedData(domain2, types, value) {\n          return __awaiter11(this, void 0, void 0, function* () {\n            const populated = yield TypedDataEncoder.resolveNames(domain2, types, value, (name) => {\n              return this.provider.resolveName(name);\n            });\n            const address = yield this.getAddress();\n            try {\n              return yield this.provider.send(\"eth_signTypedData_v4\", [\n                address.toLowerCase(),\n                JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n              ]);\n            } catch (error) {\n              if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n                logger31.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                  action: \"_signTypedData\",\n                  from: address,\n                  messageData: { domain: populated.domain, types, value: populated.value }\n                });\n              }\n              throw error;\n            }\n          });\n        }\n        unlock(password) {\n          return __awaiter11(this, void 0, void 0, function* () {\n            const provider = this.provider;\n            const address = yield this.getAddress();\n            return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n          });\n        }\n      };\n      UncheckedJsonRpcSigner = class extends JsonRpcSigner {\n        sendTransaction(transaction) {\n          return this.sendUncheckedTransaction(transaction).then((hash4) => {\n            return {\n              hash: hash4,\n              nonce: null,\n              gasLimit: null,\n              gasPrice: null,\n              data: null,\n              value: null,\n              chainId: null,\n              confirmations: 0,\n              from: null,\n              wait: (confirmations) => {\n                return this.provider.waitForTransaction(hash4, confirmations);\n              }\n            };\n          });\n        }\n      };\n      allowedTransactionKeys4 = {\n        chainId: true,\n        data: true,\n        gasLimit: true,\n        gasPrice: true,\n        nonce: true,\n        to: true,\n        value: true,\n        type: true,\n        accessList: true,\n        maxFeePerGas: true,\n        maxPriorityFeePerGas: true\n      };\n      JsonRpcProvider = class extends BaseProvider {\n        constructor(url, network) {\n          let networkOrReady = network;\n          if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n              setTimeout(() => {\n                this.detectNetwork().then((network2) => {\n                  resolve(network2);\n                }, (error) => {\n                  reject(error);\n                });\n              }, 0);\n            });\n          }\n          super(networkOrReady);\n          if (!url) {\n            url = getStatic(this.constructor, \"defaultUrl\")();\n          }\n          if (typeof url === \"string\") {\n            defineReadOnly(this, \"connection\", Object.freeze({\n              url\n            }));\n          } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n          }\n          this._nextId = 42;\n        }\n        get _cache() {\n          if (this._eventLoopCache == null) {\n            this._eventLoopCache = {};\n          }\n          return this._eventLoopCache;\n        }\n        static defaultUrl() {\n          return \"http://localhost:8545\";\n        }\n        detectNetwork() {\n          if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n            setTimeout(() => {\n              this._cache[\"detectNetwork\"] = null;\n            }, 0);\n          }\n          return this._cache[\"detectNetwork\"];\n        }\n        _uncachedDetectNetwork() {\n          return __awaiter11(this, void 0, void 0, function* () {\n            yield timer(0);\n            let chainId = null;\n            try {\n              chainId = yield this.send(\"eth_chainId\", []);\n            } catch (error) {\n              try {\n                chainId = yield this.send(\"net_version\", []);\n              } catch (error2) {\n              }\n            }\n            if (chainId != null) {\n              const getNetwork2 = getStatic(this.constructor, \"getNetwork\");\n              try {\n                return getNetwork2(BigNumber.from(chainId).toNumber());\n              } catch (error) {\n                return logger31.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                  chainId,\n                  event: \"invalidNetwork\",\n                  serverError: error\n                });\n              }\n            }\n            return logger31.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n              event: \"noNetwork\"\n            });\n          });\n        }\n        getSigner(addressOrIndex) {\n          return new JsonRpcSigner(_constructorGuard5, this, addressOrIndex);\n        }\n        getUncheckedSigner(addressOrIndex) {\n          return this.getSigner(addressOrIndex).connectUnchecked();\n        }\n        listAccounts() {\n          return this.send(\"eth_accounts\", []).then((accounts) => {\n            return accounts.map((a) => this.formatter.address(a));\n          });\n        }\n        send(method, params) {\n          const request = {\n            method,\n            params,\n            id: this._nextId++,\n            jsonrpc: \"2.0\"\n          };\n          this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n          });\n          const cache = [\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0;\n          if (cache && this._cache[method]) {\n            return this._cache[method];\n          }\n          const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result2) => {\n            this.emit(\"debug\", {\n              action: \"response\",\n              request,\n              response: result2,\n              provider: this\n            });\n            return result2;\n          }, (error) => {\n            this.emit(\"debug\", {\n              action: \"response\",\n              error,\n              request,\n              provider: this\n            });\n            throw error;\n          });\n          if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n              this._cache[method] = null;\n            }, 0);\n          }\n          return result;\n        }\n        prepareRequest(method, params) {\n          switch (method) {\n            case \"getBlockNumber\":\n              return [\"eth_blockNumber\", []];\n            case \"getGasPrice\":\n              return [\"eth_gasPrice\", []];\n            case \"getBalance\":\n              return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n            case \"getTransactionCount\":\n              return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n            case \"getCode\":\n              return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n            case \"getStorageAt\":\n              return [\"eth_getStorageAt\", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];\n            case \"sendTransaction\":\n              return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n            case \"getBlock\":\n              if (params.blockTag) {\n                return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n              } else if (params.blockHash) {\n                return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n              }\n              return null;\n            case \"getTransaction\":\n              return [\"eth_getTransactionByHash\", [params.transactionHash]];\n            case \"getTransactionReceipt\":\n              return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n            case \"call\": {\n              const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n              return [\"eth_call\", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];\n            }\n            case \"estimateGas\": {\n              const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n              return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, { from: true })]];\n            }\n            case \"getLogs\":\n              if (params.filter && params.filter.address != null) {\n                params.filter.address = getLowerCase(params.filter.address);\n              }\n              return [\"eth_getLogs\", [params.filter]];\n            default:\n              break;\n          }\n          return null;\n        }\n        perform(method, params) {\n          return __awaiter11(this, void 0, void 0, function* () {\n            if (method === \"call\" || method === \"estimateGas\") {\n              const tx = params.transaction;\n              if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                  const feeData = yield this.getFeeData();\n                  if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                    params = shallowCopy(params);\n                    params.transaction = shallowCopy(tx);\n                    delete params.transaction.type;\n                  }\n                }\n              }\n            }\n            const args = this.prepareRequest(method, params);\n            if (args == null) {\n              logger31.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n            }\n            try {\n              return yield this.send(args[0], args[1]);\n            } catch (error) {\n              return checkError(method, error, params);\n            }\n          });\n        }\n        _startEvent(event) {\n          if (event.tag === \"pending\") {\n            this._startPending();\n          }\n          super._startEvent(event);\n        }\n        _startPending() {\n          if (this._pendingFilter != null) {\n            return;\n          }\n          const self2 = this;\n          const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n          this._pendingFilter = pendingFilter;\n          pendingFilter.then(function(filterId) {\n            function poll2() {\n              self2.send(\"eth_getFilterChanges\", [filterId]).then(function(hashes) {\n                if (self2._pendingFilter != pendingFilter) {\n                  return null;\n                }\n                let seq = Promise.resolve();\n                hashes.forEach(function(hash4) {\n                  self2._emitted[\"t:\" + hash4.toLowerCase()] = \"pending\";\n                  seq = seq.then(function() {\n                    return self2.getTransaction(hash4).then(function(tx) {\n                      self2.emit(\"pending\", tx);\n                      return null;\n                    });\n                  });\n                });\n                return seq.then(function() {\n                  return timer(1e3);\n                });\n              }).then(function() {\n                if (self2._pendingFilter != pendingFilter) {\n                  self2.send(\"eth_uninstallFilter\", [filterId]);\n                  return;\n                }\n                setTimeout(function() {\n                  poll2();\n                }, 0);\n                return null;\n              }).catch((error) => {\n              });\n            }\n            poll2();\n            return filterId;\n          }).catch((error) => {\n          });\n        }\n        _stopEvent(event) {\n          if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n          }\n          super._stopEvent(event);\n        }\n        // Convert an ethers.js transaction into a JSON-RPC transaction\n        //  - gasLimit => gas\n        //  - All values hexlified\n        //  - All numeric values zero-striped\n        //  - All addresses are lowercased\n        // NOTE: This allows a TransactionRequest, but all values should be resolved\n        //       before this is called\n        // @TODO: This will likely be removed in future versions and prepareRequest\n        //        will be the preferred method for this.\n        static hexlifyTransaction(transaction, allowExtra) {\n          const allowed = shallowCopy(allowedTransactionKeys4);\n          if (allowExtra) {\n            for (const key2 in allowExtra) {\n              if (allowExtra[key2]) {\n                allowed[key2] = true;\n              }\n            }\n          }\n          checkProperties(transaction, allowed);\n          const result = {};\n          [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key2) {\n            if (transaction[key2] == null) {\n              return;\n            }\n            const value = hexValue(BigNumber.from(transaction[key2]));\n            if (key2 === \"gasLimit\") {\n              key2 = \"gas\";\n            }\n            result[key2] = value;\n          });\n          [\"from\", \"to\", \"data\"].forEach(function(key2) {\n            if (transaction[key2] == null) {\n              return;\n            }\n            result[key2] = hexlify(transaction[key2]);\n          });\n          if (transaction.accessList) {\n            result[\"accessList\"] = accessListify(transaction.accessList);\n          }\n          return result;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/ws.js\n  var WS;\n  var init_ws = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/ws.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib();\n      init_version23();\n      WS = null;\n      try {\n        WS = WebSocket;\n        if (WS == null) {\n          throw new Error(\"inject please\");\n        }\n      } catch (error) {\n        const logger48 = new Logger(version24);\n        WS = function() {\n          logger48.throwError(\"WebSockets not supported in this environment\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new WebSocket()\"\n          });\n        };\n      }\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/websocket-provider.js\n  var __awaiter12, logger32, NextId, WebSocketProvider;\n  var init_websocket_provider = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/websocket-provider.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib3();\n      init_lib4();\n      init_json_rpc_provider();\n      init_ws();\n      init_lib();\n      init_version23();\n      __awaiter12 = function(thisArg, _arguments, P, generator) {\n        function adopt(value) {\n          return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n          });\n        }\n        return new (P || (P = Promise))(function(resolve, reject) {\n          function fulfilled(value) {\n            try {\n              step(generator.next(value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function rejected(value) {\n            try {\n              step(generator[\"throw\"](value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n          }\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n      };\n      logger32 = new Logger(version24);\n      NextId = 1;\n      WebSocketProvider = class extends JsonRpcProvider {\n        constructor(url, network) {\n          if (network === \"any\") {\n            logger32.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"network:any\"\n            });\n          }\n          if (typeof url === \"string\") {\n            super(url, network);\n          } else {\n            super(\"_websocket\", network);\n          }\n          this._pollingInterval = -1;\n          this._wsReady = false;\n          if (typeof url === \"string\") {\n            defineReadOnly(this, \"_websocket\", new WS(this.connection.url));\n          } else {\n            defineReadOnly(this, \"_websocket\", url);\n          }\n          defineReadOnly(this, \"_requests\", {});\n          defineReadOnly(this, \"_subs\", {});\n          defineReadOnly(this, \"_subIds\", {});\n          defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n          this.websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id3) => {\n              this.websocket.send(this._requests[id3].payload);\n            });\n          };\n          this.websocket.onmessage = (messageEvent) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n              const id3 = String(result.id);\n              const request = this._requests[id3];\n              delete this._requests[id3];\n              if (result.result !== void 0) {\n                request.callback(null, result.result);\n                this.emit(\"debug\", {\n                  action: \"response\",\n                  request: JSON.parse(request.payload),\n                  response: result.result,\n                  provider: this\n                });\n              } else {\n                let error = null;\n                if (result.error) {\n                  error = new Error(result.error.message || \"unknown error\");\n                  defineReadOnly(error, \"code\", result.error.code || null);\n                  defineReadOnly(error, \"response\", data);\n                } else {\n                  error = new Error(\"unknown error\");\n                }\n                request.callback(error, void 0);\n                this.emit(\"debug\", {\n                  action: \"response\",\n                  error,\n                  request: JSON.parse(request.payload),\n                  provider: this\n                });\n              }\n            } else if (result.method === \"eth_subscription\") {\n              const sub = this._subs[result.params.subscription];\n              if (sub) {\n                sub.processFunc(result.params.result);\n              }\n            } else {\n              console.warn(\"this should not happen\");\n            }\n          };\n          const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n          }, 1e3);\n          if (fauxPoll.unref) {\n            fauxPoll.unref();\n          }\n        }\n        // Cannot narrow the type of _websocket, as that is not backwards compatible\n        // so we add a getter and let the WebSocket be a public API.\n        get websocket() {\n          return this._websocket;\n        }\n        detectNetwork() {\n          return this._detectNetwork;\n        }\n        get pollingInterval() {\n          return 0;\n        }\n        resetEventsBlock(blockNumber) {\n          logger32.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n          });\n        }\n        set pollingInterval(value) {\n          logger32.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n          });\n        }\n        poll() {\n          return __awaiter12(this, void 0, void 0, function* () {\n            return null;\n          });\n        }\n        set polling(value) {\n          if (!value) {\n            return;\n          }\n          logger32.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n          });\n        }\n        send(method, params) {\n          const rid = NextId++;\n          return new Promise((resolve, reject) => {\n            function callback(error, result) {\n              if (error) {\n                return reject(error);\n              }\n              return resolve(result);\n            }\n            const payload = JSON.stringify({\n              method,\n              params,\n              id: rid,\n              jsonrpc: \"2.0\"\n            });\n            this.emit(\"debug\", {\n              action: \"request\",\n              request: JSON.parse(payload),\n              provider: this\n            });\n            this._requests[String(rid)] = { callback, payload };\n            if (this._wsReady) {\n              this.websocket.send(payload);\n            }\n          });\n        }\n        static defaultUrl() {\n          return \"ws://localhost:8546\";\n        }\n        _subscribe(tag, param, processFunc) {\n          return __awaiter12(this, void 0, void 0, function* () {\n            let subIdPromise = this._subIds[tag];\n            if (subIdPromise == null) {\n              subIdPromise = Promise.all(param).then((param2) => {\n                return this.send(\"eth_subscribe\", param2);\n              });\n              this._subIds[tag] = subIdPromise;\n            }\n            const subId = yield subIdPromise;\n            this._subs[subId] = { tag, processFunc };\n          });\n        }\n        _startEvent(event) {\n          switch (event.type) {\n            case \"block\":\n              this._subscribe(\"block\", [\"newHeads\"], (result) => {\n                const blockNumber = BigNumber.from(result.number).toNumber();\n                this._emitted.block = blockNumber;\n                this.emit(\"block\", blockNumber);\n              });\n              break;\n            case \"pending\":\n              this._subscribe(\"pending\", [\"newPendingTransactions\"], (result) => {\n                this.emit(\"pending\", result);\n              });\n              break;\n            case \"filter\":\n              this._subscribe(event.tag, [\"logs\", this._getFilter(event.filter)], (result) => {\n                if (result.removed == null) {\n                  result.removed = false;\n                }\n                this.emit(event.filter, this.formatter.filterLog(result));\n              });\n              break;\n            case \"tx\": {\n              const emitReceipt = (event2) => {\n                const hash4 = event2.hash;\n                this.getTransactionReceipt(hash4).then((receipt) => {\n                  if (!receipt) {\n                    return;\n                  }\n                  this.emit(hash4, receipt);\n                });\n              };\n              emitReceipt(event);\n              this._subscribe(\"tx\", [\"newHeads\"], (result) => {\n                this._events.filter((e) => e.type === \"tx\").forEach(emitReceipt);\n              });\n              break;\n            }\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n              break;\n            default:\n              console.log(\"unhandled:\", event);\n              break;\n          }\n        }\n        _stopEvent(event) {\n          let tag = event.tag;\n          if (event.type === \"tx\") {\n            if (this._events.filter((e) => e.type === \"tx\").length) {\n              return;\n            }\n            tag = \"tx\";\n          } else if (this.listenerCount(event.event)) {\n            return;\n          }\n          const subId = this._subIds[tag];\n          if (!subId) {\n            return;\n          }\n          delete this._subIds[tag];\n          subId.then((subId2) => {\n            if (!this._subs[subId2]) {\n              return;\n            }\n            delete this._subs[subId2];\n            this.send(\"eth_unsubscribe\", [subId2]);\n          });\n        }\n        destroy() {\n          return __awaiter12(this, void 0, void 0, function* () {\n            if (this.websocket.readyState === WS.CONNECTING) {\n              yield new Promise((resolve) => {\n                this.websocket.onopen = function() {\n                  resolve(true);\n                };\n                this.websocket.onerror = function() {\n                  resolve(false);\n                };\n              });\n            }\n            this.websocket.close(1e3);\n          });\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js\n  var __awaiter13, logger33, StaticJsonRpcProvider, UrlJsonRpcProvider;\n  var init_url_json_rpc_provider = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib4();\n      init_lib();\n      init_version23();\n      init_json_rpc_provider();\n      __awaiter13 = function(thisArg, _arguments, P, generator) {\n        function adopt(value) {\n          return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n          });\n        }\n        return new (P || (P = Promise))(function(resolve, reject) {\n          function fulfilled(value) {\n            try {\n              step(generator.next(value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function rejected(value) {\n            try {\n              step(generator[\"throw\"](value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n          }\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n      };\n      logger33 = new Logger(version24);\n      StaticJsonRpcProvider = class extends JsonRpcProvider {\n        detectNetwork() {\n          const _super = Object.create(null, {\n            detectNetwork: { get: () => super.detectNetwork }\n          });\n          return __awaiter13(this, void 0, void 0, function* () {\n            let network = this.network;\n            if (network == null) {\n              network = yield _super.detectNetwork.call(this);\n              if (!network) {\n                logger33.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n              }\n              if (this._network == null) {\n                defineReadOnly(this, \"_network\", network);\n                this.emit(\"network\", network, null);\n              }\n            }\n            return network;\n          });\n        }\n      };\n      UrlJsonRpcProvider = class _UrlJsonRpcProvider extends StaticJsonRpcProvider {\n        constructor(network, apiKey) {\n          logger33.checkAbstract(new.target, _UrlJsonRpcProvider);\n          network = getStatic(new.target, \"getNetwork\")(network);\n          apiKey = getStatic(new.target, \"getApiKey\")(apiKey);\n          const connection = getStatic(new.target, \"getUrl\")(network, apiKey);\n          super(connection, network);\n          if (typeof apiKey === \"string\") {\n            defineReadOnly(this, \"apiKey\", apiKey);\n          } else if (apiKey != null) {\n            Object.keys(apiKey).forEach((key2) => {\n              defineReadOnly(this, key2, apiKey[key2]);\n            });\n          }\n        }\n        _startPending() {\n          logger33.warn(\"WARNING: API provider does not support pending filters\");\n        }\n        isCommunityResource() {\n          return false;\n        }\n        getSigner(address) {\n          return logger33.throwError(\"API provider does not support signing\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"getSigner\" });\n        }\n        listAccounts() {\n          return Promise.resolve([]);\n        }\n        // Return a defaultApiKey if null, otherwise validate the API key\n        static getApiKey(apiKey) {\n          return apiKey;\n        }\n        // Returns the url or connection for the given network and API key. The\n        // API key will have been sanitized by the getApiKey first, so any validation\n        // or transformations can be done there.\n        static getUrl(network, apiKey) {\n          return logger33.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n            operation: \"getUrl\"\n          });\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js\n  var logger34, defaultApiKey, AlchemyWebSocketProvider, AlchemyProvider;\n  var init_alchemy_provider = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib4();\n      init_formatter();\n      init_websocket_provider();\n      init_lib();\n      init_version23();\n      init_url_json_rpc_provider();\n      logger34 = new Logger(version24);\n      defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\n      AlchemyWebSocketProvider = class extends WebSocketProvider {\n        constructor(network, apiKey) {\n          const provider = new AlchemyProvider(network, apiKey);\n          const url = provider.connection.url.replace(/^http/i, \"ws\").replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n          super(url, provider.network);\n          defineReadOnly(this, \"apiKey\", provider.apiKey);\n        }\n        isCommunityResource() {\n          return this.apiKey === defaultApiKey;\n        }\n      };\n      AlchemyProvider = class extends UrlJsonRpcProvider {\n        static getWebSocketProvider(network, apiKey) {\n          return new AlchemyWebSocketProvider(network, apiKey);\n        }\n        static getApiKey(apiKey) {\n          if (apiKey == null) {\n            return defaultApiKey;\n          }\n          if (apiKey && typeof apiKey !== \"string\") {\n            logger34.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n          }\n          return apiKey;\n        }\n        static getUrl(network, apiKey) {\n          let host = null;\n          switch (network.name) {\n            case \"homestead\":\n              host = \"eth-mainnet.alchemyapi.io/v2/\";\n              break;\n            case \"goerli\":\n              host = \"eth-goerli.g.alchemy.com/v2/\";\n              break;\n            case \"sepolia\":\n              host = \"eth-sepolia.g.alchemy.com/v2/\";\n              break;\n            case \"matic\":\n              host = \"polygon-mainnet.g.alchemy.com/v2/\";\n              break;\n            case \"maticmum\":\n              host = \"polygon-mumbai.g.alchemy.com/v2/\";\n              break;\n            case \"arbitrum\":\n              host = \"arb-mainnet.g.alchemy.com/v2/\";\n              break;\n            case \"arbitrum-goerli\":\n              host = \"arb-goerli.g.alchemy.com/v2/\";\n              break;\n            case \"arbitrum-sepolia\":\n              host = \"arb-sepolia.g.alchemy.com/v2/\";\n              break;\n            case \"optimism\":\n              host = \"opt-mainnet.g.alchemy.com/v2/\";\n              break;\n            case \"optimism-goerli\":\n              host = \"opt-goerli.g.alchemy.com/v2/\";\n              break;\n            case \"optimism-sepolia\":\n              host = \"opt-sepolia.g.alchemy.com/v2/\";\n              break;\n            default:\n              logger34.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n          }\n          return {\n            allowGzip: true,\n            url: \"https://\" + host + apiKey,\n            throttleCallback: (attempt, url) => {\n              if (apiKey === defaultApiKey) {\n                showThrottleMessage();\n              }\n              return Promise.resolve(true);\n            }\n          };\n        }\n        isCommunityResource() {\n          return this.apiKey === defaultApiKey;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/ankr-provider.js\n  function getHost(name) {\n    switch (name) {\n      case \"homestead\":\n        return \"rpc.ankr.com/eth/\";\n      case \"ropsten\":\n        return \"rpc.ankr.com/eth_ropsten/\";\n      case \"rinkeby\":\n        return \"rpc.ankr.com/eth_rinkeby/\";\n      case \"goerli\":\n        return \"rpc.ankr.com/eth_goerli/\";\n      case \"sepolia\":\n        return \"rpc.ankr.com/eth_sepolia/\";\n      case \"matic\":\n        return \"rpc.ankr.com/polygon/\";\n      case \"maticmum\":\n        return \"rpc.ankr.com/polygon_mumbai/\";\n      case \"optimism\":\n        return \"rpc.ankr.com/optimism/\";\n      case \"optimism-goerli\":\n        return \"rpc.ankr.com/optimism_testnet/\";\n      case \"optimism-sepolia\":\n        return \"rpc.ankr.com/optimism_sepolia/\";\n      case \"arbitrum\":\n        return \"rpc.ankr.com/arbitrum/\";\n    }\n    return logger35.throwArgumentError(\"unsupported network\", \"name\", name);\n  }\n  var logger35, defaultApiKey2, AnkrProvider;\n  var init_ankr_provider = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/ankr-provider.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_formatter();\n      init_url_json_rpc_provider();\n      init_lib();\n      init_version23();\n      logger35 = new Logger(version24);\n      defaultApiKey2 = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\n      AnkrProvider = class extends UrlJsonRpcProvider {\n        isCommunityResource() {\n          return this.apiKey === defaultApiKey2;\n        }\n        static getApiKey(apiKey) {\n          if (apiKey == null) {\n            return defaultApiKey2;\n          }\n          return apiKey;\n        }\n        static getUrl(network, apiKey) {\n          if (apiKey == null) {\n            apiKey = defaultApiKey2;\n          }\n          const connection = {\n            allowGzip: true,\n            url: \"https://\" + getHost(network.name) + apiKey,\n            throttleCallback: (attempt, url) => {\n              if (apiKey.apiKey === defaultApiKey2) {\n                showThrottleMessage();\n              }\n              return Promise.resolve(true);\n            }\n          };\n          if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret;\n          }\n          return connection;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js\n  var __awaiter14, logger36, CloudflareProvider;\n  var init_cloudflare_provider = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_url_json_rpc_provider();\n      init_lib();\n      init_version23();\n      __awaiter14 = function(thisArg, _arguments, P, generator) {\n        function adopt(value) {\n          return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n          });\n        }\n        return new (P || (P = Promise))(function(resolve, reject) {\n          function fulfilled(value) {\n            try {\n              step(generator.next(value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function rejected(value) {\n            try {\n              step(generator[\"throw\"](value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n          }\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n      };\n      logger36 = new Logger(version24);\n      CloudflareProvider = class extends UrlJsonRpcProvider {\n        static getApiKey(apiKey) {\n          if (apiKey != null) {\n            logger36.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n          }\n          return null;\n        }\n        static getUrl(network, apiKey) {\n          let host = null;\n          switch (network.name) {\n            case \"homestead\":\n              host = \"https://cloudflare-eth.com/\";\n              break;\n            default:\n              logger36.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n          }\n          return host;\n        }\n        perform(method, params) {\n          const _super = Object.create(null, {\n            perform: { get: () => super.perform }\n          });\n          return __awaiter14(this, void 0, void 0, function* () {\n            if (method === \"getBlockNumber\") {\n              const block = yield _super.perform.call(this, \"getBlock\", { blockTag: \"latest\" });\n              return block.number;\n            }\n            return _super.perform.call(this, method, params);\n          });\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js\n  function getTransactionPostData(transaction) {\n    const result = {};\n    for (let key2 in transaction) {\n      if (transaction[key2] == null) {\n        continue;\n      }\n      let value = transaction[key2];\n      if (key2 === \"type\" && value === 0) {\n        continue;\n      }\n      if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key2]) {\n        value = hexValue(hexlify(value));\n      } else if (key2 === \"accessList\") {\n        value = \"[\" + accessListify(value).map((set) => {\n          return `{address:\"${set.address}\",storageKeys:[\"${set.storageKeys.join('\",\"')}\"]}`;\n        }).join(\",\") + \"]\";\n      } else {\n        value = hexlify(value);\n      }\n      result[key2] = value;\n    }\n    return result;\n  }\n  function getResult2(result) {\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n      return result.result;\n    }\n    if (result.status != 1 || typeof result.message !== \"string\" || !result.message.match(/^OK/)) {\n      const error = new Error(\"invalid response\");\n      error.result = JSON.stringify(result);\n      if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        error.throttleRetry = true;\n      }\n      throw error;\n    }\n    return result.result;\n  }\n  function getJsonResult(result) {\n    if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n      const error = new Error(\"throttled response\");\n      error.result = JSON.stringify(result);\n      error.throttleRetry = true;\n      throw error;\n    }\n    if (result.jsonrpc != \"2.0\") {\n      const error = new Error(\"invalid response\");\n      error.result = JSON.stringify(result);\n      throw error;\n    }\n    if (result.error) {\n      const error = new Error(result.error.message || \"unknown error\");\n      if (result.error.code) {\n        error.code = result.error.code;\n      }\n      if (result.error.data) {\n        error.data = result.error.data;\n      }\n      throw error;\n    }\n    return result.result;\n  }\n  function checkLogTag(blockTag) {\n    if (blockTag === \"pending\") {\n      throw new Error(\"pending not supported\");\n    }\n    if (blockTag === \"latest\") {\n      return blockTag;\n    }\n    return parseInt(blockTag.substring(2), 16);\n  }\n  function checkError2(method, error, transaction) {\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n      const e = error.error;\n      if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n        let data = e.data;\n        if (data) {\n          data = \"0x\" + data.replace(/^.*0x/i, \"\");\n        }\n        if (isHexString(data)) {\n          return data;\n        }\n        logger37.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n          error,\n          data: \"0x\"\n        });\n      }\n    }\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR) {\n      if (error.error && typeof error.error.message === \"string\") {\n        message = error.error.message;\n      } else if (typeof error.body === \"string\") {\n        message = error.body;\n      } else if (typeof error.responseText === \"string\") {\n        message = error.responseText;\n      }\n    }\n    message = (message || \"\").toLowerCase();\n    if (message.match(/insufficient funds/)) {\n      logger37.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n        error,\n        method,\n        transaction\n      });\n    }\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n      logger37.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n        error,\n        method,\n        transaction\n      });\n    }\n    if (message.match(/another transaction with same nonce/)) {\n      logger37.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n        error,\n        method,\n        transaction\n      });\n    }\n    if (message.match(/execution failed due to an exception|execution reverted/)) {\n      logger37.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n        error,\n        method,\n        transaction\n      });\n    }\n    throw error;\n  }\n  var __awaiter15, logger37, EtherscanProvider;\n  var init_etherscan_provider = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib2();\n      init_lib4();\n      init_lib17();\n      init_lib28();\n      init_formatter();\n      init_lib();\n      init_version23();\n      init_base_provider();\n      __awaiter15 = function(thisArg, _arguments, P, generator) {\n        function adopt(value) {\n          return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n          });\n        }\n        return new (P || (P = Promise))(function(resolve, reject) {\n          function fulfilled(value) {\n            try {\n              step(generator.next(value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function rejected(value) {\n            try {\n              step(generator[\"throw\"](value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n          }\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n      };\n      logger37 = new Logger(version24);\n      EtherscanProvider = class extends BaseProvider {\n        constructor(network, apiKey) {\n          super(network);\n          defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n          defineReadOnly(this, \"apiKey\", apiKey || null);\n        }\n        getBaseUrl() {\n          switch (this.network ? this.network.name : \"invalid\") {\n            case \"homestead\":\n              return \"https://api.etherscan.io\";\n            case \"goerli\":\n              return \"https://api-goerli.etherscan.io\";\n            case \"sepolia\":\n              return \"https://api-sepolia.etherscan.io\";\n            case \"matic\":\n              return \"https://api.polygonscan.com\";\n            case \"maticmum\":\n              return \"https://api-testnet.polygonscan.com\";\n            case \"arbitrum\":\n              return \"https://api.arbiscan.io\";\n            case \"arbitrum-goerli\":\n              return \"https://api-goerli.arbiscan.io\";\n            case \"optimism\":\n              return \"https://api-optimistic.etherscan.io\";\n            case \"optimism-goerli\":\n              return \"https://api-goerli-optimistic.etherscan.io\";\n            default:\n          }\n          return logger37.throwArgumentError(\"unsupported network\", \"network\", this.network.name);\n        }\n        getUrl(module, params) {\n          const query = Object.keys(params).reduce((accum, key2) => {\n            const value = params[key2];\n            if (value != null) {\n              accum += `&${key2}=${value}`;\n            }\n            return accum;\n          }, \"\");\n          const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : \"\";\n          return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;\n        }\n        getPostUrl() {\n          return `${this.baseUrl}/api`;\n        }\n        getPostData(module, params) {\n          params.module = module;\n          params.apikey = this.apiKey;\n          return params;\n        }\n        fetch(module, params, post) {\n          return __awaiter15(this, void 0, void 0, function* () {\n            const url = post ? this.getPostUrl() : this.getUrl(module, params);\n            const payload = post ? this.getPostData(module, params) : null;\n            const procFunc = module === \"proxy\" ? getJsonResult : getResult2;\n            this.emit(\"debug\", {\n              action: \"request\",\n              request: url,\n              provider: this\n            });\n            const connection = {\n              url,\n              throttleSlotInterval: 1e3,\n              throttleCallback: (attempt, url2) => {\n                if (this.isCommunityResource()) {\n                  showThrottleMessage();\n                }\n                return Promise.resolve(true);\n              }\n            };\n            let payloadStr = null;\n            if (payload) {\n              connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n              payloadStr = Object.keys(payload).map((key2) => {\n                return `${key2}=${payload[key2]}`;\n              }).join(\"&\");\n            }\n            const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);\n            this.emit(\"debug\", {\n              action: \"response\",\n              request: url,\n              response: deepCopy(result),\n              provider: this\n            });\n            return result;\n          });\n        }\n        detectNetwork() {\n          return __awaiter15(this, void 0, void 0, function* () {\n            return this.network;\n          });\n        }\n        perform(method, params) {\n          const _super = Object.create(null, {\n            perform: { get: () => super.perform }\n          });\n          return __awaiter15(this, void 0, void 0, function* () {\n            switch (method) {\n              case \"getBlockNumber\":\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n              case \"getGasPrice\":\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n              case \"getBalance\":\n                return this.fetch(\"account\", {\n                  action: \"balance\",\n                  address: params.address,\n                  tag: params.blockTag\n                });\n              case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                  action: \"eth_getTransactionCount\",\n                  address: params.address,\n                  tag: params.blockTag\n                });\n              case \"getCode\":\n                return this.fetch(\"proxy\", {\n                  action: \"eth_getCode\",\n                  address: params.address,\n                  tag: params.blockTag\n                });\n              case \"getStorageAt\":\n                return this.fetch(\"proxy\", {\n                  action: \"eth_getStorageAt\",\n                  address: params.address,\n                  position: params.position,\n                  tag: params.blockTag\n                });\n              case \"sendTransaction\":\n                return this.fetch(\"proxy\", {\n                  action: \"eth_sendRawTransaction\",\n                  hex: params.signedTransaction\n                }, true).catch((error) => {\n                  return checkError2(\"sendTransaction\", error, params.signedTransaction);\n                });\n              case \"getBlock\":\n                if (params.blockTag) {\n                  return this.fetch(\"proxy\", {\n                    action: \"eth_getBlockByNumber\",\n                    tag: params.blockTag,\n                    boolean: params.includeTransactions ? \"true\" : \"false\"\n                  });\n                }\n                throw new Error(\"getBlock by blockHash not implemented\");\n              case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                  action: \"eth_getTransactionByHash\",\n                  txhash: params.transactionHash\n                });\n              case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                  action: \"eth_getTransactionReceipt\",\n                  txhash: params.transactionHash\n                });\n              case \"call\": {\n                if (params.blockTag !== \"latest\") {\n                  throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n                try {\n                  return yield this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                  return checkError2(\"call\", error, params.transaction);\n                }\n              }\n              case \"estimateGas\": {\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n                try {\n                  return yield this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                  return checkError2(\"estimateGas\", error, params.transaction);\n                }\n              }\n              case \"getLogs\": {\n                const args = { action: \"getLogs\" };\n                if (params.filter.fromBlock) {\n                  args.fromBlock = checkLogTag(params.filter.fromBlock);\n                }\n                if (params.filter.toBlock) {\n                  args.toBlock = checkLogTag(params.filter.toBlock);\n                }\n                if (params.filter.address) {\n                  args.address = params.filter.address;\n                }\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                  if (params.filter.topics.length > 1) {\n                    logger37.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                  }\n                  if (params.filter.topics.length === 1) {\n                    const topic0 = params.filter.topics[0];\n                    if (typeof topic0 !== \"string\" || topic0.length !== 66) {\n                      logger37.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, { topic0 });\n                    }\n                    args.topic0 = topic0;\n                  }\n                }\n                const logs = yield this.fetch(\"logs\", args);\n                let blocks = {};\n                for (let i = 0; i < logs.length; i++) {\n                  const log = logs[i];\n                  if (log.blockHash != null) {\n                    continue;\n                  }\n                  if (blocks[log.blockNumber] == null) {\n                    const block = yield this.getBlock(log.blockNumber);\n                    if (block) {\n                      blocks[log.blockNumber] = block.hash;\n                    }\n                  }\n                  log.blockHash = blocks[log.blockNumber];\n                }\n                return logs;\n              }\n              case \"getEtherPrice\":\n                if (this.network.name !== \"homestead\") {\n                  return 0;\n                }\n                return parseFloat((yield this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n              default:\n                break;\n            }\n            return _super.perform.call(this, method, params);\n          });\n        }\n        // Note: The `page` page parameter only allows pagination within the\n        //       10,000 window available without a page and offset parameter\n        //       Error: Result window is too large, PageNo x Offset size must\n        //              be less than or equal to 10000\n        getHistory(addressOrName, startBlock, endBlock) {\n          return __awaiter15(this, void 0, void 0, function* () {\n            const params = {\n              action: \"txlist\",\n              address: yield this.resolveName(addressOrName),\n              startblock: startBlock == null ? 0 : startBlock,\n              endblock: endBlock == null ? 99999999 : endBlock,\n              sort: \"asc\"\n            };\n            const result = yield this.fetch(\"account\", params);\n            return result.map((tx) => {\n              [\"contractAddress\", \"to\"].forEach(function(key2) {\n                if (tx[key2] == \"\") {\n                  delete tx[key2];\n                }\n              });\n              if (tx.creates == null && tx.contractAddress != null) {\n                tx.creates = tx.contractAddress;\n              }\n              const item = this.formatter.transactionResponse(tx);\n              if (tx.timeStamp) {\n                item.timestamp = parseInt(tx.timeStamp);\n              }\n              return item;\n            });\n          });\n        }\n        isCommunityResource() {\n          return this.apiKey == null;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/fallback-provider.js\n  function now() {\n    return (/* @__PURE__ */ new Date()).getTime();\n  }\n  function checkNetworks(networks2) {\n    let result = null;\n    for (let i = 0; i < networks2.length; i++) {\n      const network = networks2[i];\n      if (network == null) {\n        return null;\n      }\n      if (result) {\n        if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {\n          logger38.throwArgumentError(\"provider mismatch\", \"networks\", networks2);\n        }\n      } else {\n        result = network;\n      }\n    }\n    return result;\n  }\n  function median(values, maxDelta) {\n    values = values.slice().sort();\n    const middle = Math.floor(values.length / 2);\n    if (values.length % 2) {\n      return values[middle];\n    }\n    const a = values[middle - 1], b2 = values[middle];\n    if (maxDelta != null && Math.abs(a - b2) > maxDelta) {\n      return null;\n    }\n    return (a + b2) / 2;\n  }\n  function serialize2(value) {\n    if (value === null) {\n      return \"null\";\n    } else if (typeof value === \"number\" || typeof value === \"boolean\") {\n      return JSON.stringify(value);\n    } else if (typeof value === \"string\") {\n      return value;\n    } else if (BigNumber.isBigNumber(value)) {\n      return value.toString();\n    } else if (Array.isArray(value)) {\n      return JSON.stringify(value.map((i) => serialize2(i)));\n    } else if (typeof value === \"object\") {\n      const keys = Object.keys(value);\n      keys.sort();\n      return \"{\" + keys.map((key2) => {\n        let v = value[key2];\n        if (typeof v === \"function\") {\n          v = \"[function]\";\n        } else {\n          v = serialize2(v);\n        }\n        return JSON.stringify(key2) + \":\" + v;\n      }).join(\",\") + \"}\";\n    }\n    throw new Error(\"unknown value type: \" + typeof value);\n  }\n  function stall2(duration) {\n    let cancel = null;\n    let timer2 = null;\n    let promise = new Promise((resolve) => {\n      cancel = function() {\n        if (timer2) {\n          clearTimeout(timer2);\n          timer2 = null;\n        }\n        resolve();\n      };\n      timer2 = setTimeout(cancel, duration);\n    });\n    const wait2 = (func) => {\n      promise = promise.then(func);\n      return promise;\n    };\n    function getPromise() {\n      return promise;\n    }\n    return { cancel, getPromise, wait: wait2 };\n  }\n  function exposeDebugConfig(config2, now2) {\n    const result = {\n      weight: config2.weight\n    };\n    Object.defineProperty(result, \"provider\", { get: () => config2.provider });\n    if (config2.start) {\n      result.start = config2.start;\n    }\n    if (now2) {\n      result.duration = now2 - config2.start;\n    }\n    if (config2.done) {\n      if (config2.error) {\n        result.error = config2.error;\n      } else {\n        result.result = config2.result || null;\n      }\n    }\n    return result;\n  }\n  function normalizedTally(normalize2, quorum) {\n    return function(configs) {\n      const tally = {};\n      configs.forEach((c) => {\n        const value = normalize2(c.result);\n        if (!tally[value]) {\n          tally[value] = { count: 0, result: c.result };\n        }\n        tally[value].count++;\n      });\n      const keys = Object.keys(tally);\n      for (let i = 0; i < keys.length; i++) {\n        const check = tally[keys[i]];\n        if (check.count >= quorum) {\n          return check.result;\n        }\n      }\n      return void 0;\n    };\n  }\n  function getProcessFunc(provider, method, params) {\n    let normalize2 = serialize2;\n    switch (method) {\n      case \"getBlockNumber\":\n        return function(configs) {\n          const values = configs.map((c) => c.result);\n          let blockNumber = median(configs.map((c) => c.result), 2);\n          if (blockNumber == null) {\n            return void 0;\n          }\n          blockNumber = Math.ceil(blockNumber);\n          if (values.indexOf(blockNumber + 1) >= 0) {\n            blockNumber++;\n          }\n          if (blockNumber >= provider._highestBlockNumber) {\n            provider._highestBlockNumber = blockNumber;\n          }\n          return provider._highestBlockNumber;\n        };\n      case \"getGasPrice\":\n        return function(configs) {\n          const values = configs.map((c) => c.result);\n          values.sort();\n          return values[Math.floor(values.length / 2)];\n        };\n      case \"getEtherPrice\":\n        return function(configs) {\n          return median(configs.map((c) => c.result));\n        };\n      case \"getBalance\":\n      case \"getTransactionCount\":\n      case \"getCode\":\n      case \"getStorageAt\":\n      case \"call\":\n      case \"estimateGas\":\n      case \"getLogs\":\n        break;\n      case \"getTransaction\":\n      case \"getTransactionReceipt\":\n        normalize2 = function(tx) {\n          if (tx == null) {\n            return null;\n          }\n          tx = shallowCopy(tx);\n          tx.confirmations = -1;\n          return serialize2(tx);\n        };\n        break;\n      case \"getBlock\":\n        if (params.includeTransactions) {\n          normalize2 = function(block) {\n            if (block == null) {\n              return null;\n            }\n            block = shallowCopy(block);\n            block.transactions = block.transactions.map((tx) => {\n              tx = shallowCopy(tx);\n              tx.confirmations = -1;\n              return tx;\n            });\n            return serialize2(block);\n          };\n        } else {\n          normalize2 = function(block) {\n            if (block == null) {\n              return null;\n            }\n            return serialize2(block);\n          };\n        }\n        break;\n      default:\n        throw new Error(\"unknown method: \" + method);\n    }\n    return normalizedTally(normalize2, provider.quorum);\n  }\n  function waitForSync(config2, blockNumber) {\n    return __awaiter16(this, void 0, void 0, function* () {\n      const provider = config2.provider;\n      if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) {\n        return provider;\n      }\n      return poll(() => {\n        return new Promise((resolve, reject) => {\n          setTimeout(function() {\n            if (provider.blockNumber >= blockNumber) {\n              return resolve(provider);\n            }\n            if (config2.cancelled) {\n              return resolve(null);\n            }\n            return resolve(void 0);\n          }, 0);\n        });\n      }, { oncePoll: provider });\n    });\n  }\n  function getRunner(config2, currentBlockNumber, method, params) {\n    return __awaiter16(this, void 0, void 0, function* () {\n      let provider = config2.provider;\n      switch (method) {\n        case \"getBlockNumber\":\n        case \"getGasPrice\":\n          return provider[method]();\n        case \"getEtherPrice\":\n          if (provider.getEtherPrice) {\n            return provider.getEtherPrice();\n          }\n          break;\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n          if (params.blockTag && isHexString(params.blockTag)) {\n            provider = yield waitForSync(config2, currentBlockNumber);\n          }\n          return provider[method](params.address, params.blockTag || \"latest\");\n        case \"getStorageAt\":\n          if (params.blockTag && isHexString(params.blockTag)) {\n            provider = yield waitForSync(config2, currentBlockNumber);\n          }\n          return provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\");\n        case \"getBlock\":\n          if (params.blockTag && isHexString(params.blockTag)) {\n            provider = yield waitForSync(config2, currentBlockNumber);\n          }\n          return provider[params.includeTransactions ? \"getBlockWithTransactions\" : \"getBlock\"](params.blockTag || params.blockHash);\n        case \"call\":\n        case \"estimateGas\":\n          if (params.blockTag && isHexString(params.blockTag)) {\n            provider = yield waitForSync(config2, currentBlockNumber);\n          }\n          if (method === \"call\" && params.blockTag) {\n            return provider[method](params.transaction, params.blockTag);\n          }\n          return provider[method](params.transaction);\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n          return provider[method](params.transactionHash);\n        case \"getLogs\": {\n          let filter = params.filter;\n          if (filter.fromBlock && isHexString(filter.fromBlock) || filter.toBlock && isHexString(filter.toBlock)) {\n            provider = yield waitForSync(config2, currentBlockNumber);\n          }\n          return provider.getLogs(filter);\n        }\n      }\n      return logger38.throwError(\"unknown method error\", Logger.errors.UNKNOWN_ERROR, {\n        method,\n        params\n      });\n    });\n  }\n  var __awaiter16, logger38, nextRid, ForwardErrors, ForwardProperties, FallbackProvider;\n  var init_fallback_provider = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/fallback-provider.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib14();\n      init_lib3();\n      init_lib2();\n      init_lib4();\n      init_lib24();\n      init_lib28();\n      init_base_provider();\n      init_formatter();\n      init_lib();\n      init_version23();\n      __awaiter16 = function(thisArg, _arguments, P, generator) {\n        function adopt(value) {\n          return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n          });\n        }\n        return new (P || (P = Promise))(function(resolve, reject) {\n          function fulfilled(value) {\n            try {\n              step(generator.next(value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function rejected(value) {\n            try {\n              step(generator[\"throw\"](value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n          }\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n      };\n      logger38 = new Logger(version24);\n      nextRid = 1;\n      ForwardErrors = [\n        Logger.errors.CALL_EXCEPTION,\n        Logger.errors.INSUFFICIENT_FUNDS,\n        Logger.errors.NONCE_EXPIRED,\n        Logger.errors.REPLACEMENT_UNDERPRICED,\n        Logger.errors.UNPREDICTABLE_GAS_LIMIT\n      ];\n      ForwardProperties = [\n        \"address\",\n        \"args\",\n        \"errorArgs\",\n        \"errorSignature\",\n        \"method\",\n        \"transaction\"\n      ];\n      FallbackProvider = class extends BaseProvider {\n        constructor(providers, quorum) {\n          if (providers.length === 0) {\n            logger38.throwArgumentError(\"missing providers\", \"providers\", providers);\n          }\n          const providerConfigs = providers.map((configOrProvider, index) => {\n            if (Provider.isProvider(configOrProvider)) {\n              const stallTimeout = isCommunityResource(configOrProvider) ? 2e3 : 750;\n              const priority = 1;\n              return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });\n            }\n            const config2 = shallowCopy(configOrProvider);\n            if (config2.priority == null) {\n              config2.priority = 1;\n            }\n            if (config2.stallTimeout == null) {\n              config2.stallTimeout = isCommunityResource(configOrProvider) ? 2e3 : 750;\n            }\n            if (config2.weight == null) {\n              config2.weight = 1;\n            }\n            const weight = config2.weight;\n            if (weight % 1 || weight > 512 || weight < 1) {\n              logger38.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", `providers[${index}].weight`, weight);\n            }\n            return Object.freeze(config2);\n          });\n          const total = providerConfigs.reduce((accum, c) => accum + c.weight, 0);\n          if (quorum == null) {\n            quorum = total / 2;\n          } else if (quorum > total) {\n            logger38.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n          }\n          let networkOrReady = checkNetworks(providerConfigs.map((c) => c.provider.network));\n          if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n              setTimeout(() => {\n                this.detectNetwork().then(resolve, reject);\n              }, 0);\n            });\n          }\n          super(networkOrReady);\n          defineReadOnly(this, \"providerConfigs\", Object.freeze(providerConfigs));\n          defineReadOnly(this, \"quorum\", quorum);\n          this._highestBlockNumber = -1;\n        }\n        detectNetwork() {\n          return __awaiter16(this, void 0, void 0, function* () {\n            const networks2 = yield Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));\n            return checkNetworks(networks2);\n          });\n        }\n        perform(method, params) {\n          return __awaiter16(this, void 0, void 0, function* () {\n            if (method === \"sendTransaction\") {\n              const results = yield Promise.all(this.providerConfigs.map((c) => {\n                return c.provider.sendTransaction(params.signedTransaction).then((result) => {\n                  return result.hash;\n                }, (error) => {\n                  return error;\n                });\n              }));\n              for (let i2 = 0; i2 < results.length; i2++) {\n                const result = results[i2];\n                if (typeof result === \"string\") {\n                  return result;\n                }\n              }\n              throw results[0];\n            }\n            if (this._highestBlockNumber === -1 && method !== \"getBlockNumber\") {\n              yield this.getBlockNumber();\n            }\n            const processFunc = getProcessFunc(this, method, params);\n            const configs = shuffled(this.providerConfigs.map(shallowCopy));\n            configs.sort((a, b2) => a.priority - b2.priority);\n            const currentBlockNumber = this._highestBlockNumber;\n            let i = 0;\n            let first = true;\n            while (true) {\n              const t0 = now();\n              let inflightWeight = configs.filter((c) => c.runner && t0 - c.start < c.stallTimeout).reduce((accum, c) => accum + c.weight, 0);\n              while (inflightWeight < this.quorum && i < configs.length) {\n                const config2 = configs[i++];\n                const rid = nextRid++;\n                config2.start = now();\n                config2.staller = stall2(config2.stallTimeout);\n                config2.staller.wait(() => {\n                  config2.staller = null;\n                });\n                config2.runner = getRunner(config2, currentBlockNumber, method, params).then((result) => {\n                  config2.done = true;\n                  config2.result = result;\n                  if (this.listenerCount(\"debug\")) {\n                    this.emit(\"debug\", {\n                      action: \"request\",\n                      rid,\n                      backend: exposeDebugConfig(config2, now()),\n                      request: { method, params: deepCopy(params) },\n                      provider: this\n                    });\n                  }\n                }, (error) => {\n                  config2.done = true;\n                  config2.error = error;\n                  if (this.listenerCount(\"debug\")) {\n                    this.emit(\"debug\", {\n                      action: \"request\",\n                      rid,\n                      backend: exposeDebugConfig(config2, now()),\n                      request: { method, params: deepCopy(params) },\n                      provider: this\n                    });\n                  }\n                });\n                if (this.listenerCount(\"debug\")) {\n                  this.emit(\"debug\", {\n                    action: \"request\",\n                    rid,\n                    backend: exposeDebugConfig(config2, null),\n                    request: { method, params: deepCopy(params) },\n                    provider: this\n                  });\n                }\n                inflightWeight += config2.weight;\n              }\n              const waiting = [];\n              configs.forEach((c) => {\n                if (c.done || !c.runner) {\n                  return;\n                }\n                waiting.push(c.runner);\n                if (c.staller) {\n                  waiting.push(c.staller.getPromise());\n                }\n              });\n              if (waiting.length) {\n                yield Promise.race(waiting);\n              }\n              const results = configs.filter((c) => c.done && c.error == null);\n              if (results.length >= this.quorum) {\n                const result = processFunc(results);\n                if (result !== void 0) {\n                  configs.forEach((c) => {\n                    if (c.staller) {\n                      c.staller.cancel();\n                    }\n                    c.cancelled = true;\n                  });\n                  return result;\n                }\n                if (!first) {\n                  yield stall2(100).getPromise();\n                }\n                first = false;\n              }\n              const errors = configs.reduce((accum, c) => {\n                if (!c.done || c.error == null) {\n                  return accum;\n                }\n                const code = c.error.code;\n                if (ForwardErrors.indexOf(code) >= 0) {\n                  if (!accum[code]) {\n                    accum[code] = { error: c.error, weight: 0 };\n                  }\n                  accum[code].weight += c.weight;\n                }\n                return accum;\n              }, {});\n              Object.keys(errors).forEach((errorCode) => {\n                const tally = errors[errorCode];\n                if (tally.weight < this.quorum) {\n                  return;\n                }\n                configs.forEach((c) => {\n                  if (c.staller) {\n                    c.staller.cancel();\n                  }\n                  c.cancelled = true;\n                });\n                const e = tally.error;\n                const props = {};\n                ForwardProperties.forEach((name) => {\n                  if (e[name] == null) {\n                    return;\n                  }\n                  props[name] = e[name];\n                });\n                logger38.throwError(e.reason || e.message, errorCode, props);\n              });\n              if (configs.filter((c) => !c.done).length === 0) {\n                break;\n              }\n            }\n            configs.forEach((c) => {\n              if (c.staller) {\n                c.staller.cancel();\n              }\n              c.cancelled = true;\n            });\n            return logger38.throwError(\"failed to meet quorum\", Logger.errors.SERVER_ERROR, {\n              method,\n              params,\n              //results: configs.map((c) => c.result),\n              //errors: configs.map((c) => c.error),\n              results: configs.map((c) => exposeDebugConfig(c)),\n              provider: this\n            });\n          });\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/ipc-provider.js\n  var IpcProvider;\n  var init_ipc_provider = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/ipc-provider.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      IpcProvider = null;\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/infura-provider.js\n  var logger39, defaultProjectId, InfuraWebSocketProvider, InfuraProvider;\n  var init_infura_provider = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/infura-provider.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib4();\n      init_websocket_provider();\n      init_formatter();\n      init_lib();\n      init_version23();\n      init_url_json_rpc_provider();\n      logger39 = new Logger(version24);\n      defaultProjectId = \"84842078b09946638c03157f83405213\";\n      InfuraWebSocketProvider = class extends WebSocketProvider {\n        constructor(network, apiKey) {\n          const provider = new InfuraProvider(network, apiKey);\n          const connection = provider.connection;\n          if (connection.password) {\n            logger39.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n          }\n          const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n          super(url, network);\n          defineReadOnly(this, \"apiKey\", provider.projectId);\n          defineReadOnly(this, \"projectId\", provider.projectId);\n          defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n        }\n        isCommunityResource() {\n          return this.projectId === defaultProjectId;\n        }\n      };\n      InfuraProvider = class extends UrlJsonRpcProvider {\n        static getWebSocketProvider(network, apiKey) {\n          return new InfuraWebSocketProvider(network, apiKey);\n        }\n        static getApiKey(apiKey) {\n          const apiKeyObj = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n          };\n          if (apiKey == null) {\n            return apiKeyObj;\n          }\n          if (typeof apiKey === \"string\") {\n            apiKeyObj.projectId = apiKey;\n          } else if (apiKey.projectSecret != null) {\n            logger39.assertArgument(typeof apiKey.projectId === \"string\", \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            logger39.assertArgument(typeof apiKey.projectSecret === \"string\", \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n          } else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n          }\n          apiKeyObj.apiKey = apiKeyObj.projectId;\n          return apiKeyObj;\n        }\n        static getUrl(network, apiKey) {\n          let host = null;\n          switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n              host = \"mainnet.infura.io\";\n              break;\n            case \"goerli\":\n              host = \"goerli.infura.io\";\n              break;\n            case \"sepolia\":\n              host = \"sepolia.infura.io\";\n              break;\n            case \"matic\":\n              host = \"polygon-mainnet.infura.io\";\n              break;\n            case \"maticmum\":\n              host = \"polygon-mumbai.infura.io\";\n              break;\n            case \"optimism\":\n              host = \"optimism-mainnet.infura.io\";\n              break;\n            case \"optimism-goerli\":\n              host = \"optimism-goerli.infura.io\";\n              break;\n            case \"optimism-sepolia\":\n              host = \"optimism-sepolia.infura.io\";\n              break;\n            case \"arbitrum\":\n              host = \"arbitrum-mainnet.infura.io\";\n              break;\n            case \"arbitrum-goerli\":\n              host = \"arbitrum-goerli.infura.io\";\n              break;\n            case \"arbitrum-sepolia\":\n              host = \"arbitrum-sepolia.infura.io\";\n              break;\n            default:\n              logger39.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                argument: \"network\",\n                value: network\n              });\n          }\n          const connection = {\n            allowGzip: true,\n            url: \"https://\" + host + \"/v3/\" + apiKey.projectId,\n            throttleCallback: (attempt, url) => {\n              if (apiKey.projectId === defaultProjectId) {\n                showThrottleMessage();\n              }\n              return Promise.resolve(true);\n            }\n          };\n          if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret;\n          }\n          return connection;\n        }\n        isCommunityResource() {\n          return this.projectId === defaultProjectId;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js\n  var JsonRpcBatchProvider;\n  var init_json_rpc_batch_provider = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib4();\n      init_lib28();\n      init_json_rpc_provider();\n      JsonRpcBatchProvider = class extends JsonRpcProvider {\n        send(method, params) {\n          const request = {\n            method,\n            params,\n            id: this._nextId++,\n            jsonrpc: \"2.0\"\n          };\n          if (this._pendingBatch == null) {\n            this._pendingBatch = [];\n          }\n          const inflightRequest = { request, resolve: null, reject: null };\n          const promise = new Promise((resolve, reject) => {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n          });\n          this._pendingBatch.push(inflightRequest);\n          if (!this._pendingBatchAggregator) {\n            this._pendingBatchAggregator = setTimeout(() => {\n              const batch = this._pendingBatch;\n              this._pendingBatch = null;\n              this._pendingBatchAggregator = null;\n              const request2 = batch.map((inflight) => inflight.request);\n              this.emit(\"debug\", {\n                action: \"requestBatch\",\n                request: deepCopy(request2),\n                provider: this\n              });\n              return fetchJson(this.connection, JSON.stringify(request2)).then((result) => {\n                this.emit(\"debug\", {\n                  action: \"response\",\n                  request: request2,\n                  response: result,\n                  provider: this\n                });\n                batch.forEach((inflightRequest2, index) => {\n                  const payload = result[index];\n                  if (payload.error) {\n                    const error = new Error(payload.error.message);\n                    error.code = payload.error.code;\n                    error.data = payload.error.data;\n                    inflightRequest2.reject(error);\n                  } else {\n                    inflightRequest2.resolve(payload.result);\n                  }\n                });\n              }, (error) => {\n                this.emit(\"debug\", {\n                  action: \"response\",\n                  error,\n                  request: request2,\n                  provider: this\n                });\n                batch.forEach((inflightRequest2) => {\n                  inflightRequest2.reject(error);\n                });\n              });\n            }, 10);\n          }\n          return promise;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js\n  var logger40, defaultApiKey3, NodesmithProvider;\n  var init_nodesmith_provider = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_url_json_rpc_provider();\n      init_lib();\n      init_version23();\n      logger40 = new Logger(version24);\n      defaultApiKey3 = \"ETHERS_JS_SHARED\";\n      NodesmithProvider = class extends UrlJsonRpcProvider {\n        static getApiKey(apiKey) {\n          if (apiKey && typeof apiKey !== \"string\") {\n            logger40.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n          }\n          return apiKey || defaultApiKey3;\n        }\n        static getUrl(network, apiKey) {\n          logger40.warn(\"NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.\");\n          let host = null;\n          switch (network.name) {\n            case \"homestead\":\n              host = \"https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc\";\n              break;\n            case \"ropsten\":\n              host = \"https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc\";\n              break;\n            case \"rinkeby\":\n              host = \"https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc\";\n              break;\n            case \"goerli\":\n              host = \"https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc\";\n              break;\n            case \"kovan\":\n              host = \"https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc\";\n              break;\n            default:\n              logger40.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n          }\n          return host + \"?apiKey=\" + apiKey;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/pocket-provider.js\n  var logger41, defaultApplicationId, PocketProvider;\n  var init_pocket_provider = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/pocket-provider.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib();\n      init_version23();\n      init_url_json_rpc_provider();\n      logger41 = new Logger(version24);\n      defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\n      PocketProvider = class extends UrlJsonRpcProvider {\n        static getApiKey(apiKey) {\n          const apiKeyObj = {\n            applicationId: null,\n            loadBalancer: true,\n            applicationSecretKey: null\n          };\n          if (apiKey == null) {\n            apiKeyObj.applicationId = defaultApplicationId;\n          } else if (typeof apiKey === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n          } else if (apiKey.applicationSecretKey != null) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n          } else if (apiKey.applicationId) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n          } else {\n            logger41.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n          }\n          return apiKeyObj;\n        }\n        static getUrl(network, apiKey) {\n          let host = null;\n          switch (network ? network.name : \"unknown\") {\n            case \"goerli\":\n              host = \"eth-goerli.gateway.pokt.network\";\n              break;\n            case \"homestead\":\n              host = \"eth-mainnet.gateway.pokt.network\";\n              break;\n            case \"kovan\":\n              host = \"poa-kovan.gateway.pokt.network\";\n              break;\n            case \"matic\":\n              host = \"poly-mainnet.gateway.pokt.network\";\n              break;\n            case \"maticmum\":\n              host = \"polygon-mumbai-rpc.gateway.pokt.network\";\n              break;\n            case \"rinkeby\":\n              host = \"eth-rinkeby.gateway.pokt.network\";\n              break;\n            case \"ropsten\":\n              host = \"eth-ropsten.gateway.pokt.network\";\n              break;\n            default:\n              logger41.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                argument: \"network\",\n                value: network\n              });\n          }\n          const url = `https://${host}/v1/lb/${apiKey.applicationId}`;\n          const connection = { headers: {}, url };\n          if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey;\n          }\n          return connection;\n        }\n        isCommunityResource() {\n          return this.applicationId === defaultApplicationId;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/quicknode-provider.js\n  var logger42, defaultApiKey4, QuickNodeProvider;\n  var init_quicknode_provider = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/quicknode-provider.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_url_json_rpc_provider();\n      init_lib();\n      init_version23();\n      logger42 = new Logger(version24);\n      defaultApiKey4 = \"919b412a057b5e9c9b6dce193c5a60242d6efadb\";\n      QuickNodeProvider = class extends UrlJsonRpcProvider {\n        static getApiKey(apiKey) {\n          if (apiKey && typeof apiKey !== \"string\") {\n            logger42.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n          }\n          return apiKey || defaultApiKey4;\n        }\n        static getUrl(network, apiKey) {\n          let host = null;\n          switch (network.name) {\n            case \"homestead\":\n              host = \"ethers.quiknode.pro\";\n              break;\n            case \"goerli\":\n              host = \"ethers.ethereum-goerli.quiknode.pro\";\n              break;\n            case \"sepolia\":\n              host = \"ethers.ethereum-sepolia.quiknode.pro\";\n              break;\n            case \"holesky\":\n              host = \"ethers.ethereum-holesky.quiknode.pro\";\n              break;\n            case \"arbitrum\":\n              host = \"ethers.arbitrum-mainnet.quiknode.pro\";\n              break;\n            case \"arbitrum-goerli\":\n              host = \"ethers.arbitrum-goerli.quiknode.pro\";\n              break;\n            case \"arbitrum-sepolia\":\n              host = \"ethers.arbitrum-sepolia.quiknode.pro\";\n              break;\n            case \"base\":\n              host = \"ethers.base-mainnet.quiknode.pro\";\n              break;\n            case \"base-goerli\":\n              host = \"ethers.base-goerli.quiknode.pro\";\n              break;\n            case \"base-spolia\":\n              host = \"ethers.base-sepolia.quiknode.pro\";\n              break;\n            case \"bnb\":\n              host = \"ethers.bsc.quiknode.pro\";\n              break;\n            case \"bnbt\":\n              host = \"ethers.bsc-testnet.quiknode.pro\";\n              break;\n            case \"matic\":\n              host = \"ethers.matic.quiknode.pro\";\n              break;\n            case \"maticmum\":\n              host = \"ethers.matic-testnet.quiknode.pro\";\n              break;\n            case \"optimism\":\n              host = \"ethers.optimism.quiknode.pro\";\n              break;\n            case \"optimism-goerli\":\n              host = \"ethers.optimism-goerli.quiknode.pro\";\n              break;\n            case \"optimism-sepolia\":\n              host = \"ethers.optimism-sepolia.quiknode.pro\";\n              break;\n            case \"xdai\":\n              host = \"ethers.xdai.quiknode.pro\";\n              break;\n            default:\n              logger42.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n          }\n          return \"https://\" + host + \"/\" + apiKey;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/web3-provider.js\n  function buildWeb3LegacyFetcher(provider, sendFunc) {\n    const fetcher = \"Web3LegacyFetcher\";\n    return function(method, params) {\n      const request = {\n        method,\n        params,\n        id: _nextId++,\n        jsonrpc: \"2.0\"\n      };\n      return new Promise((resolve, reject) => {\n        this.emit(\"debug\", {\n          action: \"request\",\n          fetcher,\n          request: deepCopy(request),\n          provider: this\n        });\n        sendFunc(request, (error, response) => {\n          if (error) {\n            this.emit(\"debug\", {\n              action: \"response\",\n              fetcher,\n              error,\n              request,\n              provider: this\n            });\n            return reject(error);\n          }\n          this.emit(\"debug\", {\n            action: \"response\",\n            fetcher,\n            request,\n            response,\n            provider: this\n          });\n          if (response.error) {\n            const error2 = new Error(response.error.message);\n            error2.code = response.error.code;\n            error2.data = response.error.data;\n            return reject(error2);\n          }\n          resolve(response.result);\n        });\n      });\n    };\n  }\n  function buildEip1193Fetcher(provider) {\n    return function(method, params) {\n      if (params == null) {\n        params = [];\n      }\n      const request = { method, params };\n      this.emit(\"debug\", {\n        action: \"request\",\n        fetcher: \"Eip1193Fetcher\",\n        request: deepCopy(request),\n        provider: this\n      });\n      return provider.request(request).then((response) => {\n        this.emit(\"debug\", {\n          action: \"response\",\n          fetcher: \"Eip1193Fetcher\",\n          request,\n          response,\n          provider: this\n        });\n        return response;\n      }, (error) => {\n        this.emit(\"debug\", {\n          action: \"response\",\n          fetcher: \"Eip1193Fetcher\",\n          request,\n          error,\n          provider: this\n        });\n        throw error;\n      });\n    };\n  }\n  var logger43, _nextId, Web3Provider;\n  var init_web3_provider = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/web3-provider.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib4();\n      init_lib();\n      init_version23();\n      init_json_rpc_provider();\n      logger43 = new Logger(version24);\n      _nextId = 1;\n      Web3Provider = class extends JsonRpcProvider {\n        constructor(provider, network) {\n          if (provider == null) {\n            logger43.throwArgumentError(\"missing provider\", \"provider\", provider);\n          }\n          let path = null;\n          let jsonRpcFetchFunc = null;\n          let subprovider = null;\n          if (typeof provider === \"function\") {\n            path = \"unknown:\";\n            jsonRpcFetchFunc = provider;\n          } else {\n            path = provider.host || provider.path || \"\";\n            if (!path && provider.isMetaMask) {\n              path = \"metamask\";\n            }\n            subprovider = provider;\n            if (provider.request) {\n              if (path === \"\") {\n                path = \"eip-1193:\";\n              }\n              jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n            } else if (provider.sendAsync) {\n              jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n            } else if (provider.send) {\n              jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n            } else {\n              logger43.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n            }\n            if (!path) {\n              path = \"unknown:\";\n            }\n          }\n          super(path, network);\n          defineReadOnly(this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n          defineReadOnly(this, \"provider\", subprovider);\n        }\n        send(method, params) {\n          return this.jsonRpcFetchFunc(method, params);\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/index.js\n  var lib_exports4 = {};\n  __export(lib_exports4, {\n    AlchemyProvider: () => AlchemyProvider,\n    AlchemyWebSocketProvider: () => AlchemyWebSocketProvider,\n    AnkrProvider: () => AnkrProvider,\n    BaseProvider: () => BaseProvider,\n    CloudflareProvider: () => CloudflareProvider,\n    EtherscanProvider: () => EtherscanProvider,\n    FallbackProvider: () => FallbackProvider,\n    Formatter: () => Formatter,\n    InfuraProvider: () => InfuraProvider,\n    InfuraWebSocketProvider: () => InfuraWebSocketProvider,\n    IpcProvider: () => IpcProvider,\n    JsonRpcBatchProvider: () => JsonRpcBatchProvider,\n    JsonRpcProvider: () => JsonRpcProvider,\n    JsonRpcSigner: () => JsonRpcSigner,\n    NodesmithProvider: () => NodesmithProvider,\n    PocketProvider: () => PocketProvider,\n    Provider: () => Provider,\n    QuickNodeProvider: () => QuickNodeProvider,\n    Resolver: () => Resolver,\n    StaticJsonRpcProvider: () => StaticJsonRpcProvider,\n    UrlJsonRpcProvider: () => UrlJsonRpcProvider,\n    Web3Provider: () => Web3Provider,\n    WebSocketProvider: () => WebSocketProvider,\n    getDefaultProvider: () => getDefaultProvider,\n    getNetwork: () => getNetwork,\n    isCommunityResourcable: () => isCommunityResourcable,\n    isCommunityResource: () => isCommunityResource,\n    showThrottleMessage: () => showThrottleMessage\n  });\n  function getDefaultProvider(network, options) {\n    if (network == null) {\n      network = \"homestead\";\n    }\n    if (typeof network === \"string\") {\n      const match = network.match(/^(ws|http)s?:/i);\n      if (match) {\n        switch (match[1].toLowerCase()) {\n          case \"http\":\n          case \"https\":\n            return new JsonRpcProvider(network);\n          case \"ws\":\n          case \"wss\":\n            return new WebSocketProvider(network);\n          default:\n            logger44.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n        }\n      }\n    }\n    const n2 = getNetwork(network);\n    if (!n2 || !n2._defaultProvider) {\n      logger44.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n        operation: \"getDefaultProvider\",\n        network\n      });\n    }\n    return n2._defaultProvider({\n      FallbackProvider,\n      AlchemyProvider,\n      AnkrProvider,\n      CloudflareProvider,\n      EtherscanProvider,\n      InfuraProvider,\n      JsonRpcProvider,\n      NodesmithProvider,\n      PocketProvider,\n      QuickNodeProvider,\n      Web3Provider,\n      IpcProvider\n    }, options);\n  }\n  var logger44;\n  var init_lib29 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib14();\n      init_lib27();\n      init_base_provider();\n      init_alchemy_provider();\n      init_ankr_provider();\n      init_cloudflare_provider();\n      init_etherscan_provider();\n      init_fallback_provider();\n      init_ipc_provider();\n      init_infura_provider();\n      init_json_rpc_provider();\n      init_json_rpc_batch_provider();\n      init_nodesmith_provider();\n      init_pocket_provider();\n      init_quicknode_provider();\n      init_url_json_rpc_provider();\n      init_web3_provider();\n      init_websocket_provider();\n      init_formatter();\n      init_lib();\n      init_version23();\n      logger44 = new Logger(version24);\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+solidity@5.8.0/node_modules/@ethersproject/solidity/lib.esm/_version.js\n  var version25;\n  var init_version24 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+solidity@5.8.0/node_modules/@ethersproject/solidity/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version25 = \"solidity/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+solidity@5.8.0/node_modules/@ethersproject/solidity/lib.esm/index.js\n  function _pack(type, value, isArray) {\n    switch (type) {\n      case \"address\":\n        if (isArray) {\n          return zeroPad(value, 32);\n        }\n        return arrayify(value);\n      case \"string\":\n        return toUtf8Bytes(value);\n      case \"bytes\":\n        return arrayify(value);\n      case \"bool\":\n        value = value ? \"0x01\" : \"0x00\";\n        if (isArray) {\n          return zeroPad(value, 32);\n        }\n        return arrayify(value);\n    }\n    let match = type.match(regexNumber);\n    if (match) {\n      let size = parseInt(match[2] || \"256\");\n      if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {\n        logger45.throwArgumentError(\"invalid number type\", \"type\", type);\n      }\n      if (isArray) {\n        size = 256;\n      }\n      value = BigNumber.from(value).toTwos(size);\n      return zeroPad(value, size / 8);\n    }\n    match = type.match(regexBytes);\n    if (match) {\n      const size = parseInt(match[1]);\n      if (String(size) !== match[1] || size === 0 || size > 32) {\n        logger45.throwArgumentError(\"invalid bytes type\", \"type\", type);\n      }\n      if (arrayify(value).byteLength !== size) {\n        logger45.throwArgumentError(`invalid value for ${type}`, \"value\", value);\n      }\n      if (isArray) {\n        return arrayify((value + Zeros2).substring(0, 66));\n      }\n      return value;\n    }\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n      const baseType = match[1];\n      const count = parseInt(match[2] || String(value.length));\n      if (count != value.length) {\n        logger45.throwArgumentError(`invalid array length for ${type}`, \"value\", value);\n      }\n      const result = [];\n      value.forEach(function(value2) {\n        result.push(_pack(baseType, value2, true));\n      });\n      return concat(result);\n    }\n    return logger45.throwArgumentError(\"invalid type\", \"type\", type);\n  }\n  function pack2(types, values) {\n    if (types.length != values.length) {\n      logger45.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values);\n    }\n    const tight = [];\n    types.forEach(function(type, index) {\n      tight.push(_pack(type, values[index]));\n    });\n    return hexlify(concat(tight));\n  }\n  function keccak2562(types, values) {\n    return keccak256(pack2(types, values));\n  }\n  function sha2562(types, values) {\n    return sha256(pack2(types, values));\n  }\n  var regexBytes, regexNumber, regexArray, Zeros2, logger45;\n  var init_lib30 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+solidity@5.8.0/node_modules/@ethersproject/solidity/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib3();\n      init_lib2();\n      init_lib5();\n      init_lib20();\n      init_lib9();\n      init_lib();\n      init_version24();\n      regexBytes = new RegExp(\"^bytes([0-9]+)$\");\n      regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\n      regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\n      Zeros2 = \"0000000000000000000000000000000000000000000000000000000000000000\";\n      logger45 = new Logger(version25);\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+units@5.8.0/node_modules/@ethersproject/units/lib.esm/_version.js\n  var version26;\n  var init_version25 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+units@5.8.0/node_modules/@ethersproject/units/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version26 = \"units/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@ethersproject+units@5.8.0/node_modules/@ethersproject/units/lib.esm/index.js\n  function commify(value) {\n    const comps = String(value).split(\".\");\n    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value === \".\" || value === \"-.\") {\n      logger46.throwArgumentError(\"invalid value\", \"value\", value);\n    }\n    let whole = comps[0];\n    let negative = \"\";\n    if (whole.substring(0, 1) === \"-\") {\n      negative = \"-\";\n      whole = whole.substring(1);\n    }\n    while (whole.substring(0, 1) === \"0\") {\n      whole = whole.substring(1);\n    }\n    if (whole === \"\") {\n      whole = \"0\";\n    }\n    let suffix = \"\";\n    if (comps.length === 2) {\n      suffix = \".\" + (comps[1] || \"0\");\n    }\n    while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\n      suffix = suffix.substring(0, suffix.length - 1);\n    }\n    const formatted = [];\n    while (whole.length) {\n      if (whole.length <= 3) {\n        formatted.unshift(whole);\n        break;\n      } else {\n        const index = whole.length - 3;\n        formatted.unshift(whole.substring(index));\n        whole = whole.substring(0, index);\n      }\n    }\n    return negative + formatted.join(\",\") + suffix;\n  }\n  function formatUnits(value, unitName) {\n    if (typeof unitName === \"string\") {\n      const index = names.indexOf(unitName);\n      if (index !== -1) {\n        unitName = 3 * index;\n      }\n    }\n    return formatFixed(value, unitName != null ? unitName : 18);\n  }\n  function parseUnits(value, unitName) {\n    if (typeof value !== \"string\") {\n      logger46.throwArgumentError(\"value must be a string\", \"value\", value);\n    }\n    if (typeof unitName === \"string\") {\n      const index = names.indexOf(unitName);\n      if (index !== -1) {\n        unitName = 3 * index;\n      }\n    }\n    return parseFixed(value, unitName != null ? unitName : 18);\n  }\n  function formatEther(wei) {\n    return formatUnits(wei, 18);\n  }\n  function parseEther(ether) {\n    return parseUnits(ether, 18);\n  }\n  var logger46, names;\n  var init_lib31 = __esm({\n    \"../../../node_modules/.pnpm/@ethersproject+units@5.8.0/node_modules/@ethersproject/units/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib3();\n      init_lib();\n      init_version25();\n      logger46 = new Logger(version26);\n      names = [\n        \"wei\",\n        \"kwei\",\n        \"mwei\",\n        \"gwei\",\n        \"szabo\",\n        \"finney\",\n        \"ether\"\n      ];\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils.js\n  var utils_exports = {};\n  __export(utils_exports, {\n    AbiCoder: () => AbiCoder,\n    ConstructorFragment: () => ConstructorFragment,\n    ErrorFragment: () => ErrorFragment,\n    EventFragment: () => EventFragment,\n    FormatTypes: () => FormatTypes,\n    Fragment: () => Fragment,\n    FunctionFragment: () => FunctionFragment,\n    HDNode: () => HDNode,\n    Indexed: () => Indexed,\n    Interface: () => Interface,\n    LogDescription: () => LogDescription,\n    Logger: () => Logger,\n    ParamType: () => ParamType,\n    RLP: () => lib_exports,\n    SigningKey: () => SigningKey,\n    SupportedAlgorithm: () => SupportedAlgorithm,\n    TransactionDescription: () => TransactionDescription,\n    TransactionTypes: () => TransactionTypes,\n    UnicodeNormalizationForm: () => UnicodeNormalizationForm,\n    Utf8ErrorFuncs: () => Utf8ErrorFuncs,\n    Utf8ErrorReason: () => Utf8ErrorReason,\n    _TypedDataEncoder: () => TypedDataEncoder,\n    _fetchData: () => _fetchData,\n    _toEscapedUtf8String: () => _toEscapedUtf8String,\n    accessListify: () => accessListify,\n    arrayify: () => arrayify,\n    base58: () => Base58,\n    base64: () => lib_exports3,\n    checkProperties: () => checkProperties,\n    checkResultErrors: () => checkResultErrors,\n    commify: () => commify,\n    computeAddress: () => computeAddress,\n    computeHmac: () => computeHmac,\n    computePublicKey: () => computePublicKey,\n    concat: () => concat,\n    deepCopy: () => deepCopy,\n    defaultAbiCoder: () => defaultAbiCoder,\n    defaultPath: () => defaultPath,\n    defineReadOnly: () => defineReadOnly,\n    dnsEncode: () => dnsEncode,\n    entropyToMnemonic: () => entropyToMnemonic,\n    fetchJson: () => fetchJson,\n    formatBytes32String: () => formatBytes32String,\n    formatEther: () => formatEther,\n    formatUnits: () => formatUnits,\n    getAccountPath: () => getAccountPath,\n    getAddress: () => getAddress,\n    getContractAddress: () => getContractAddress,\n    getCreate2Address: () => getCreate2Address,\n    getIcapAddress: () => getIcapAddress,\n    getJsonWalletAddress: () => getJsonWalletAddress,\n    getStatic: () => getStatic,\n    hashMessage: () => hashMessage,\n    hexConcat: () => hexConcat,\n    hexDataLength: () => hexDataLength,\n    hexDataSlice: () => hexDataSlice,\n    hexStripZeros: () => hexStripZeros,\n    hexValue: () => hexValue,\n    hexZeroPad: () => hexZeroPad,\n    hexlify: () => hexlify,\n    id: () => id,\n    isAddress: () => isAddress,\n    isBytes: () => isBytes,\n    isBytesLike: () => isBytesLike,\n    isHexString: () => isHexString,\n    isValidMnemonic: () => isValidMnemonic,\n    isValidName: () => isValidName,\n    joinSignature: () => joinSignature,\n    keccak256: () => keccak256,\n    mnemonicToEntropy: () => mnemonicToEntropy,\n    mnemonicToSeed: () => mnemonicToSeed,\n    namehash: () => namehash,\n    nameprep: () => nameprep,\n    parseBytes32String: () => parseBytes32String,\n    parseEther: () => parseEther,\n    parseTransaction: () => parse,\n    parseUnits: () => parseUnits,\n    poll: () => poll,\n    randomBytes: () => randomBytes,\n    recoverAddress: () => recoverAddress,\n    recoverPublicKey: () => recoverPublicKey,\n    resolveProperties: () => resolveProperties,\n    ripemd160: () => ripemd160,\n    serializeTransaction: () => serialize,\n    sha256: () => sha256,\n    sha512: () => sha512,\n    shallowCopy: () => shallowCopy,\n    shuffled: () => shuffled,\n    solidityKeccak256: () => keccak2562,\n    solidityPack: () => pack2,\n    soliditySha256: () => sha2562,\n    splitSignature: () => splitSignature,\n    stripZeros: () => stripZeros,\n    toUtf8Bytes: () => toUtf8Bytes,\n    toUtf8CodePoints: () => toUtf8CodePoints,\n    toUtf8String: () => toUtf8String,\n    verifyMessage: () => verifyMessage,\n    verifyTypedData: () => verifyTypedData,\n    zeroPad: () => zeroPad\n  });\n  var init_utils2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib13();\n      init_lib7();\n      init_lib10();\n      init_lib19();\n      init_lib2();\n      init_lib12();\n      init_lib23();\n      init_lib25();\n      init_lib5();\n      init_lib();\n      init_lib20();\n      init_lib30();\n      init_lib24();\n      init_lib4();\n      init_lib6();\n      init_lib16();\n      init_lib9();\n      init_lib17();\n      init_lib31();\n      init_lib26();\n      init_lib28();\n      init_lib20();\n      init_lib9();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/_version.js\n  var version27;\n  var init_version26 = __esm({\n    \"../../../node_modules/.pnpm/ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version27 = \"ethers/5.8.0\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/ethers.js\n  var ethers_exports = {};\n  __export(ethers_exports, {\n    BaseContract: () => BaseContract,\n    BigNumber: () => BigNumber,\n    Contract: () => Contract,\n    ContractFactory: () => ContractFactory,\n    FixedNumber: () => FixedNumber,\n    Signer: () => Signer,\n    VoidSigner: () => VoidSigner,\n    Wallet: () => Wallet,\n    Wordlist: () => Wordlist,\n    constants: () => lib_exports2,\n    errors: () => ErrorCode,\n    getDefaultProvider: () => getDefaultProvider,\n    logger: () => logger47,\n    providers: () => lib_exports4,\n    utils: () => utils_exports,\n    version: () => version27,\n    wordlists: () => wordlists\n  });\n  var logger47;\n  var init_ethers = __esm({\n    \"../../../node_modules/.pnpm/ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/ethers.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib18();\n      init_lib3();\n      init_lib15();\n      init_lib26();\n      init_lib8();\n      init_lib29();\n      init_lib29();\n      init_lib22();\n      init_utils2();\n      init_lib();\n      init_version26();\n      logger47 = new Logger(version27);\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/index.js\n  var init_lib32 = __esm({\n    \"../../../node_modules/.pnpm/ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_ethers();\n      try {\n        const anyGlobal3 = window;\n        if (anyGlobal3._ethers == null) {\n          anyGlobal3._ethers = ethers_exports;\n        }\n      } catch (error) {\n      }\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/policyCore/policyParameters/decodePolicyParams.ts\n  var init_decodePolicyParams = __esm({\n    \"../vincent-tool-sdk/src/lib/policyCore/policyParameters/decodePolicyParams.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/policyCore/policyParameters/getOnchainPolicyParams.ts\n  async function _fetchAllOnChainParams({\n    vincentContractAddress,\n    delegationRpcUrl,\n    appDelegateeAddress,\n    agentWalletPkpTokenId,\n    toolIpfsCid\n  }) {\n    console.log(\"_fetchAllOnChainParams\", {\n      vincentContractAddress,\n      delegationRpcUrl,\n      appDelegateeAddress,\n      agentWalletPkpTokenId,\n      toolIpfsCid\n    });\n    try {\n      const VINCENT_CONTRACT_ABI = [\n        `function validateToolExecutionAndGetPolicies(address delegatee, uint256 pkpTokenId, string calldata toolIpfsCid) external view returns (tuple(bool isPermitted, uint256 appId, uint256 appVersion, tuple(string policyIpfsCid, tuple(string name, uint8 paramType, bytes value)[] parameters)[] policies) validation)`\n      ];\n      const vincentContract = new ethers_exports.Contract(\n        vincentContractAddress,\n        VINCENT_CONTRACT_ABI,\n        new ethers_exports.providers.StaticJsonRpcProvider(delegationRpcUrl)\n      );\n      return vincentContract.validateToolExecutionAndGetPolicies(\n        appDelegateeAddress,\n        agentWalletPkpTokenId,\n        toolIpfsCid\n      );\n    } catch (error) {\n      throw new Error(\n        `Error getting on-chain policy parameters from Vincent contract: ${vincentContractAddress} using App Delegatee: ${appDelegateeAddress} and Agent Wallet PKP Token ID: ${agentWalletPkpTokenId} and Vincent Tool: ${toolIpfsCid}: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n  var getPoliciesAndAppVersion, _getAllOnChainPolicyParams;\n  var init_getOnchainPolicyParams = __esm({\n    \"../vincent-tool-sdk/src/lib/policyCore/policyParameters/getOnchainPolicyParams.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib32();\n      init_decodePolicyParams();\n      getPoliciesAndAppVersion = async ({\n        delegationRpcUrl,\n        vincentContractAddress,\n        appDelegateeAddress,\n        agentWalletPkpTokenId,\n        toolIpfsCid\n      }) => {\n        const allOnChainPolicyParams = await _getAllOnChainPolicyParams({\n          delegationRpcUrl,\n          vincentContractAddress,\n          appDelegateeAddress,\n          agentWalletPkpTokenId,\n          toolIpfsCid\n        });\n        return {\n          policies: allOnChainPolicyParams.policies,\n          appId: allOnChainPolicyParams.appId,\n          appVersion: allOnChainPolicyParams.appVersion\n        };\n      };\n      _getAllOnChainPolicyParams = async ({\n        delegationRpcUrl,\n        vincentContractAddress,\n        appDelegateeAddress,\n        agentWalletPkpTokenId,\n        toolIpfsCid\n      }) => {\n        const allOnChainPolicyParams = await _fetchAllOnChainParams({\n          vincentContractAddress,\n          delegationRpcUrl,\n          appDelegateeAddress,\n          agentWalletPkpTokenId,\n          toolIpfsCid\n        });\n        if (!allOnChainPolicyParams.isPermitted) {\n          throw new Error(\n            `App Delegatee: ${appDelegateeAddress} is not permitted to execute Vincent Tool: ${toolIpfsCid} for App ID: ${allOnChainPolicyParams.appId.toString()} App Version: ${allOnChainPolicyParams.appVersion.toString()} using Agent Wallet PKP Token ID: ${agentWalletPkpTokenId}`\n          );\n        }\n        return allOnChainPolicyParams;\n      };\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/handlers/constants.ts\n  var LIT_DATIL_VINCENT_ADDRESS, LIT_DATIL_PUBKEY_ROUTER_ADDRESS;\n  var init_constants = __esm({\n    \"../vincent-tool-sdk/src/lib/handlers/constants.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      LIT_DATIL_VINCENT_ADDRESS = \"0x78Cd1d270Ff12BA55e98BDff1f3646426E25D932\";\n      LIT_DATIL_PUBKEY_ROUTER_ADDRESS = \"0xF182d6bEf16Ba77e69372dD096D8B70Bc3d5B475\";\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/toolCore/helpers/getMappedToolPolicyParams.ts\n  function getMappedToolPolicyParams({\n    toolParameterMappings,\n    parsedToolParams\n  }) {\n    const mappedToolParams = {};\n    for (const [toolParamKey, policyParamKey] of Object.entries(toolParameterMappings)) {\n      if (!policyParamKey) {\n        throw new Error(\n          `Missing policy param key for tool param \"${toolParamKey}\" (evaluateSupportedPolicies)`\n        );\n      }\n      if (!(toolParamKey in parsedToolParams)) {\n        throw new Error(`Tool param \"${toolParamKey}\" expected in toolParams but was not provided`);\n      }\n      mappedToolParams[policyParamKey] = parsedToolParams[toolParamKey];\n    }\n    return mappedToolParams;\n  }\n  var init_getMappedToolPolicyParams = __esm({\n    \"../vincent-tool-sdk/src/lib/toolCore/helpers/getMappedToolPolicyParams.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/toolCore/helpers/getPkpInfo.ts\n  var getPkpInfo;\n  var init_getPkpInfo = __esm({\n    \"../vincent-tool-sdk/src/lib/toolCore/helpers/getPkpInfo.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib32();\n      getPkpInfo = async ({\n        litPubkeyRouterAddress,\n        yellowstoneRpcUrl,\n        pkpEthAddress\n      }) => {\n        try {\n          const PUBKEY_ROUTER_ABI = [\n            \"function ethAddressToPkpId(address ethAddress) public view returns (uint256)\",\n            \"function getPubkey(uint256 tokenId) public view returns (bytes memory)\"\n          ];\n          const pubkeyRouter = new ethers_exports.Contract(\n            litPubkeyRouterAddress,\n            PUBKEY_ROUTER_ABI,\n            new ethers_exports.providers.StaticJsonRpcProvider(yellowstoneRpcUrl)\n          );\n          const pkpTokenId = await pubkeyRouter.ethAddressToPkpId(pkpEthAddress);\n          const publicKey = await pubkeyRouter.getPubkey(pkpTokenId);\n          return {\n            tokenId: pkpTokenId.toString(),\n            ethAddress: pkpEthAddress,\n            publicKey: publicKey.toString(\"hex\")\n          };\n        } catch (error) {\n          throw new Error(\n            `Error getting PKP info for PKP Eth Address: ${pkpEthAddress} using Lit Pubkey Router: ${litPubkeyRouterAddress} and Yellowstone RPC URL: ${yellowstoneRpcUrl}: ${error instanceof Error ? error.message : String(error)}`\n          );\n        }\n      };\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/toolCore/helpers/supportedPoliciesForTool.ts\n  function supportedPoliciesForTool(policies) {\n    const policyByPackageName = {};\n    const policyByIpfsCid = {};\n    const cidToPackageName = /* @__PURE__ */ new Map();\n    const packageNameToCid = /* @__PURE__ */ new Map();\n    for (const policy of policies) {\n      const pkg = policy.vincentPolicy.packageName;\n      const cid = policy.ipfsCid;\n      if (!pkg)\n        throw new Error(\"Missing policy packageName\");\n      if (pkg in policyByPackageName) {\n        throw new Error(`Duplicate policy packageName: ${pkg}`);\n      }\n      policyByPackageName[pkg] = policy;\n      policyByIpfsCid[cid] = policy;\n      cidToPackageName.set(cid, pkg);\n      packageNameToCid.set(pkg, cid);\n    }\n    return {\n      policyByPackageName,\n      policyByIpfsCid,\n      cidToPackageName,\n      packageNameToCid\n    };\n  }\n  var init_supportedPoliciesForTool = __esm({\n    \"../vincent-tool-sdk/src/lib/toolCore/helpers/supportedPoliciesForTool.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/toolCore/helpers/index.ts\n  var init_helpers2 = __esm({\n    \"../vincent-tool-sdk/src/lib/toolCore/helpers/index.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_getMappedToolPolicyParams();\n      init_getPkpInfo();\n      init_supportedPoliciesForTool();\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/handlers/vincentPolicyHandler.ts\n  var init_vincentPolicyHandler = __esm({\n    \"../vincent-tool-sdk/src/lib/handlers/vincentPolicyHandler.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_getOnchainPolicyParams();\n      init_constants();\n      init_helpers();\n      init_helpers2();\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/handlers/evaluatePolicies.ts\n  async function evaluatePolicies({\n    vincentTool: vincentTool2,\n    context: context2,\n    validatedPolicies\n  }) {\n    const evaluatedPolicies = [];\n    let policyDeniedResult = void 0;\n    const rawAllowedPolicies = {};\n    for (const { policyPackageName, toolPolicyParams } of validatedPolicies) {\n      evaluatedPolicies.push(policyPackageName);\n      const policy = vincentTool2.supportedPolicies.policyByPackageName[policyPackageName];\n      try {\n        const litActionResponse = await Lit.Actions.call({\n          ipfsId: policy.ipfsCid,\n          params: {\n            toolParams: toolPolicyParams,\n            context: {\n              toolIpfsCid: context2.toolIpfsCid,\n              delegatorPkpEthAddress: context2.delegation.delegatorPkpInfo.ethAddress\n            }\n          }\n        });\n        console.log(\n          `evaluated ${String(policyPackageName)} policy, result is:`,\n          JSON.stringify(litActionResponse)\n        );\n        const result = parseAndValidateEvaluateResult({\n          litActionResponse,\n          vincentPolicy: policy.vincentPolicy\n        });\n        if (isPolicyDenyResponse(result)) {\n          policyDeniedResult = {\n            ...result,\n            packageName: policyPackageName\n          };\n        } else {\n          rawAllowedPolicies[policyPackageName] = {\n            result\n          };\n        }\n      } catch (err) {\n        const denyResult = createDenyResult({\n          message: err instanceof Error ? err.message : \"Unknown error\"\n        });\n        policyDeniedResult = { ...denyResult, packageName: policyPackageName };\n      }\n    }\n    if (policyDeniedResult) {\n      return createDenyEvaluationResult({\n        allowedPolicies: rawAllowedPolicies,\n        evaluatedPolicies,\n        deniedPolicy: policyDeniedResult\n      });\n    }\n    return createAllowEvaluationResult({\n      evaluatedPolicies,\n      allowedPolicies: rawAllowedPolicies\n    });\n  }\n  function parseAndValidateEvaluateResult({\n    litActionResponse,\n    vincentPolicy\n  }) {\n    let parsedLitActionResponse;\n    try {\n      parsedLitActionResponse = JSON.parse(litActionResponse);\n    } catch (error) {\n      console.log(\"rawLitActionResponse (parsePolicyExecutionResult)\", litActionResponse);\n      throw new Error(\n        `Failed to JSON parse Lit Action Response: ${error instanceof Error ? error.message : String(error)}. rawLitActionResponse in request logs (parsePolicyExecutionResult)`\n      );\n    }\n    try {\n      console.log(\"parseAndValidateEvaluateResult\", JSON.stringify(parsedLitActionResponse));\n      if (isPolicyDenyResponse(parsedLitActionResponse)) {\n        console.log(\"parsedLitActionResponse is a deny response; returning it as-is.\");\n        return parsedLitActionResponse;\n      }\n      const { schemaToUse, parsedType } = getSchemaForPolicyResponseResult({\n        value: parsedLitActionResponse,\n        denyResultSchema: vincentPolicy.evalDenyResultSchema || external_exports.undefined(),\n        allowResultSchema: vincentPolicy.evalAllowResultSchema || external_exports.undefined()\n      });\n      console.log(\"schemaToUse\", parsedType);\n      return validateOrDeny(\n        parsedLitActionResponse.result,\n        schemaToUse,\n        \"evaluate\",\n        \"output\"\n      );\n    } catch (err) {\n      console.log(\n        \"parseAndValidateEvaluateResult error; returning noResultDeny\",\n        err.message,\n        err.stack\n      );\n      return returnNoResultDeny(\n        err instanceof Error ? err.message : \"Unknown error\"\n      );\n    }\n  }\n  var init_evaluatePolicies = __esm({\n    \"../vincent-tool-sdk/src/lib/handlers/evaluatePolicies.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_esm();\n      init_helpers();\n      init_resultCreators();\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/toolCore/helpers/validatePolicies.ts\n  async function validatePolicies({\n    policies,\n    vincentTool: vincentTool2,\n    toolIpfsCid,\n    parsedToolParams\n  }) {\n    const validatedPolicies = [];\n    for (const policy of policies) {\n      const { policyIpfsCid, parameters } = policy;\n      const toolPolicy = vincentTool2.supportedPolicies.policyByIpfsCid[policyIpfsCid];\n      console.log(\n        \"vincentTool.supportedPolicies\",\n        Object.keys(vincentTool2.supportedPolicies.policyByIpfsCid)\n      );\n      if (!toolPolicy) {\n        throw new Error(\n          `Policy with IPFS CID ${policyIpfsCid} is registered on-chain but not supported by this tool. Vincent Tool: ${toolIpfsCid}`\n        );\n      }\n      const policyPackageName = toolPolicy.vincentPolicy.packageName;\n      if (!toolPolicy.toolParameterMappings) {\n        throw new Error(\"toolParameterMappings missing on policy\");\n      }\n      console.log(\n        \"toolPolicy.toolParameterMappings\",\n        JSON.stringify(toolPolicy.toolParameterMappings)\n      );\n      const toolPolicyParams = getMappedToolPolicyParams({\n        toolParameterMappings: toolPolicy.toolParameterMappings,\n        parsedToolParams\n      });\n      validatedPolicies.push({ parameters, policyPackageName, toolPolicyParams });\n    }\n    return validatedPolicies;\n  }\n  var init_validatePolicies = __esm({\n    \"../vincent-tool-sdk/src/lib/toolCore/helpers/validatePolicies.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_getMappedToolPolicyParams();\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/handlers/vincentToolHandler.ts\n  function createToolExecutionContext({\n    vincentTool: vincentTool2,\n    policyEvaluationResults,\n    baseContext\n  }) {\n    if (!policyEvaluationResults.allow) {\n      throw new Error(\"Received denied policies to createToolExecutionContext()\");\n    }\n    const newContext = {\n      allow: true,\n      evaluatedPolicies: policyEvaluationResults.evaluatedPolicies,\n      allowedPolicies: {}\n    };\n    const policyByPackageName = vincentTool2.supportedPolicies.policyByPackageName;\n    const allowedKeys = Object.keys(policyEvaluationResults.allowedPolicies);\n    for (const packageName of allowedKeys) {\n      const entry = policyEvaluationResults.allowedPolicies[packageName];\n      const policy = policyByPackageName[packageName];\n      const vincentPolicy = policy.vincentPolicy;\n      if (!entry) {\n        throw new Error(`Missing entry on allowedPolicies for policy: ${packageName}`);\n      }\n      const resultWrapper = {\n        result: entry.result\n      };\n      if (vincentPolicy.commit) {\n        const commitFn = vincentPolicy.commit;\n        resultWrapper.commit = (commitParams) => {\n          return commitFn(commitParams, baseContext);\n        };\n      }\n      newContext.allowedPolicies[packageName] = resultWrapper;\n    }\n    return newContext;\n  }\n  var vincentToolHandler;\n  var init_vincentToolHandler = __esm({\n    \"../vincent-tool-sdk/src/lib/handlers/vincentToolHandler.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib32();\n      init_helpers2();\n      init_evaluatePolicies();\n      init_zod2();\n      init_typeGuards2();\n      init_constants();\n      init_validatePolicies();\n      init_getOnchainPolicyParams();\n      vincentToolHandler = ({\n        vincentTool: vincentTool2,\n        toolParams: toolParams2,\n        context: context2\n      }) => {\n        return async () => {\n          let policyEvalResults = void 0;\n          const toolIpfsCid = LitAuth.actionIpfsIds[0];\n          try {\n            const delegationRpcUrl = await Lit.Actions.getRpcUrl({ chain: \"yellowstone\" });\n            const appDelegateeAddress = ethers_exports.utils.getAddress(LitAuth.authSigAddress);\n            const parsedOrFail = validateOrFail(\n              toolParams2,\n              vincentTool2.toolParamsSchema,\n              \"execute\",\n              \"input\"\n            );\n            if (isToolFailureResult(parsedOrFail)) {\n              Lit.Actions.setResponse({\n                response: JSON.stringify({\n                  toolExecutionResult: parsedOrFail\n                })\n              });\n              return;\n            }\n            const userPkpInfo = await getPkpInfo({\n              litPubkeyRouterAddress: LIT_DATIL_PUBKEY_ROUTER_ADDRESS,\n              yellowstoneRpcUrl: \"https://yellowstone-rpc.litprotocol.com/\",\n              pkpEthAddress: context2.delegatorPkpEthAddress\n            });\n            const { policies, appId, appVersion } = await getPoliciesAndAppVersion({\n              delegationRpcUrl,\n              vincentContractAddress: LIT_DATIL_VINCENT_ADDRESS,\n              appDelegateeAddress,\n              agentWalletPkpTokenId: userPkpInfo.tokenId,\n              toolIpfsCid\n            });\n            const baseContext = {\n              delegation: {\n                delegateeAddress: appDelegateeAddress,\n                delegatorPkpInfo: userPkpInfo\n              },\n              toolIpfsCid,\n              appId: appId.toNumber(),\n              appVersion: appVersion.toNumber()\n            };\n            const validatedPolicies = await validatePolicies({\n              policies,\n              vincentTool: vincentTool2,\n              parsedToolParams: parsedOrFail,\n              toolIpfsCid\n            });\n            console.log(\"validatedPolicies\", JSON.stringify(validatedPolicies));\n            const policyEvaluationResults = await evaluatePolicies({\n              validatedPolicies,\n              vincentTool: vincentTool2,\n              context: baseContext\n            });\n            console.log(\"policyEvaluationResults\", JSON.stringify(policyEvaluationResults));\n            policyEvalResults = policyEvaluationResults;\n            if (!policyEvalResults.allow) {\n              Lit.Actions.setResponse({\n                response: JSON.stringify({\n                  policyEvaluationResults: policyEvalResults,\n                  toolExecutionResult: {\n                    success: false\n                  }\n                })\n              });\n              return;\n            }\n            const executeContext = createToolExecutionContext({\n              vincentTool: vincentTool2,\n              policyEvaluationResults,\n              baseContext\n            });\n            const toolExecutionResult = await vincentTool2.execute(\n              {\n                toolParams: parsedOrFail\n              },\n              {\n                ...baseContext,\n                policiesContext: executeContext\n              }\n            );\n            console.log(\"toolExecutionResult\", toolExecutionResult);\n            Lit.Actions.setResponse({\n              response: JSON.stringify({\n                policyEvaluationResults,\n                toolExecutionResult\n              })\n            });\n          } catch (err) {\n            Lit.Actions.setResponse({\n              response: JSON.stringify({\n                policyEvaluationResults: policyEvalResults,\n                toolExecutionResult: {\n                  success: false,\n                  error: err instanceof Error ? err.message : String(err)\n                }\n              })\n            });\n          }\n        };\n      };\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/policyCore/bundledPolicy/types.ts\n  var __bundledPolicyBrand;\n  var init_types4 = __esm({\n    \"../vincent-tool-sdk/src/lib/policyCore/bundledPolicy/types.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      __bundledPolicyBrand = Symbol(\"__bundledPolicyBrand\");\n    }\n  });\n\n  // ../vincent-tool-sdk/src/lib/policyCore/bundledPolicy/bundledPolicy.ts\n  var init_bundledPolicy = __esm({\n    \"../vincent-tool-sdk/src/lib/policyCore/bundledPolicy/bundledPolicy.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_types4();\n    }\n  });\n\n  // ../vincent-tool-sdk/src/index.ts\n  var init_src = __esm({\n    \"../vincent-tool-sdk/src/index.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_vincentPolicy();\n      init_vincentTool();\n      init_vincentPolicyHandler();\n      init_vincentToolHandler();\n      init_bundledPolicy();\n      init_supportedPoliciesForTool();\n    }\n  });\n\n  // src/lib/tool-helpers/getErc20Contract.ts\n  function getErc20Contract(tokenAddress, provider) {\n    return new ethers_exports.Contract(tokenAddress, ERC20_ABI, provider);\n  }\n  var ERC20_ABI;\n  var init_getErc20Contract = __esm({\n    \"src/lib/tool-helpers/getErc20Contract.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib32();\n      ERC20_ABI = [\n        \"function balanceOf(address owner) external view returns (uint256)\",\n        \"function approve(address spender, uint256 amount) external returns (bool)\",\n        \"function allowance(address owner, address spender) external view returns (uint256)\",\n        \"function decimals() view returns (uint8)\",\n        \"function totalSupply() external view returns (uint256)\",\n        \"function transfer(address to, uint256 amount) external returns (bool)\",\n        \"function transferFrom(address from, address to, uint256 amount) external returns (bool)\",\n        \"function name() external view returns (string)\",\n        \"function symbol() external view returns (string)\"\n      ];\n    }\n  });\n\n  // src/lib/tool-helpers/get-current-allowance.ts\n  var getCurrentAllowance;\n  var init_get_current_allowance = __esm({\n    \"src/lib/tool-helpers/get-current-allowance.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_getErc20Contract();\n      getCurrentAllowance = async ({\n        provider,\n        tokenAddress,\n        owner,\n        spender\n      }) => {\n        const contract = getErc20Contract(tokenAddress, provider);\n        const allowance = await contract.allowance(owner, spender);\n        return allowance.toBigInt();\n      };\n    }\n  });\n\n  // src/lib/tool-helpers/sign-tx.ts\n  var signTx;\n  var init_sign_tx = __esm({\n    \"src/lib/tool-helpers/sign-tx.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib32();\n      signTx = async (pkpPublicKey, tx, sigName) => {\n        const publicKeyForLit = pkpPublicKey.replace(/^0x/, \"\");\n        console.log(`Signing using PKP Public Key: ${publicKeyForLit} (signTx)`);\n        const unsignedSerializedTx = ethers_exports.utils.serializeTransaction(tx);\n        const txHash = ethers_exports.utils.keccak256(unsignedSerializedTx);\n        console.log(\"Tx hash (signTx)\", txHash);\n        const signatureResponse = await Lit.Actions.signAndCombineEcdsa({\n          toSign: ethers_exports.utils.arrayify(txHash),\n          publicKey: publicKeyForLit,\n          sigName\n        });\n        const { r: r2, s, v } = JSON.parse(signatureResponse);\n        const ethersJoinedSignature = ethers_exports.utils.joinSignature({\n          r: \"0x\" + r2.substring(2),\n          s: \"0x\" + s,\n          v\n        });\n        const signedSerializedTx = ethers_exports.utils.serializeTransaction(tx, ethersJoinedSignature);\n        console.log(\"Signed serialized tx (signTx)\", signedSerializedTx);\n        return signedSerializedTx;\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/_version.js\n  var version28;\n  var init_version27 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/_version.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      version28 = \"6.14.4\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/properties.js\n  function checkType(value, type, name) {\n    const types = type.split(\"|\").map((t) => t.trim());\n    for (let i = 0; i < types.length; i++) {\n      switch (type) {\n        case \"any\":\n          return;\n        case \"bigint\":\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          if (typeof value === type) {\n            return;\n          }\n      }\n    }\n    const error = new Error(`invalid value for type ${type}`);\n    error.code = \"INVALID_ARGUMENT\";\n    error.argument = `value.${name}`;\n    error.value = value;\n    throw error;\n  }\n  async function resolveProperties2(value) {\n    const keys = Object.keys(value);\n    const results = await Promise.all(keys.map((k) => Promise.resolve(value[k])));\n    return results.reduce((accum, v, index) => {\n      accum[keys[index]] = v;\n      return accum;\n    }, {});\n  }\n  function defineProperties(target, values, types) {\n    for (let key2 in values) {\n      let value = values[key2];\n      const type = types ? types[key2] : null;\n      if (type) {\n        checkType(value, type, key2);\n      }\n      Object.defineProperty(target, key2, { enumerable: true, value, writable: false });\n    }\n  }\n  var init_properties = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/properties.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/errors.js\n  function stringify(value, seen) {\n    if (value == null) {\n      return \"null\";\n    }\n    if (seen == null) {\n      seen = /* @__PURE__ */ new Set();\n    }\n    if (typeof value === \"object\") {\n      if (seen.has(value)) {\n        return \"[Circular]\";\n      }\n      seen.add(value);\n    }\n    if (Array.isArray(value)) {\n      return \"[ \" + value.map((v) => stringify(v, seen)).join(\", \") + \" ]\";\n    }\n    if (value instanceof Uint8Array) {\n      const HEX2 = \"0123456789abcdef\";\n      let result = \"0x\";\n      for (let i = 0; i < value.length; i++) {\n        result += HEX2[value[i] >> 4];\n        result += HEX2[value[i] & 15];\n      }\n      return result;\n    }\n    if (typeof value === \"object\" && typeof value.toJSON === \"function\") {\n      return stringify(value.toJSON(), seen);\n    }\n    switch (typeof value) {\n      case \"boolean\":\n      case \"number\":\n      case \"symbol\":\n        return value.toString();\n      case \"bigint\":\n        return BigInt(value).toString();\n      case \"string\":\n        return JSON.stringify(value);\n      case \"object\": {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{ \" + keys.map((k) => `${stringify(k, seen)}: ${stringify(value[k], seen)}`).join(\", \") + \" }\";\n      }\n    }\n    return `[ COULD NOT SERIALIZE ]`;\n  }\n  function isError(error, code) {\n    return error && error.code === code;\n  }\n  function isCallException(error) {\n    return isError(error, \"CALL_EXCEPTION\");\n  }\n  function makeError(message, code, info) {\n    let shortMessage = message;\n    {\n      const details = [];\n      if (info) {\n        if (\"message\" in info || \"code\" in info || \"name\" in info) {\n          throw new Error(`value will overwrite populated values: ${stringify(info)}`);\n        }\n        for (const key2 in info) {\n          if (key2 === \"shortMessage\") {\n            continue;\n          }\n          const value = info[key2];\n          details.push(key2 + \"=\" + stringify(value));\n        }\n      }\n      details.push(`code=${code}`);\n      details.push(`version=${version28}`);\n      if (details.length) {\n        message += \" (\" + details.join(\", \") + \")\";\n      }\n    }\n    let error;\n    switch (code) {\n      case \"INVALID_ARGUMENT\":\n        error = new TypeError(message);\n        break;\n      case \"NUMERIC_FAULT\":\n      case \"BUFFER_OVERRUN\":\n        error = new RangeError(message);\n        break;\n      default:\n        error = new Error(message);\n    }\n    defineProperties(error, { code });\n    if (info) {\n      Object.assign(error, info);\n    }\n    if (error.shortMessage == null) {\n      defineProperties(error, { shortMessage });\n    }\n    return error;\n  }\n  function assert3(check, message, code, info) {\n    if (!check) {\n      throw makeError(message, code, info);\n    }\n  }\n  function assertArgument(check, message, name, value) {\n    assert3(check, message, \"INVALID_ARGUMENT\", { argument: name, value });\n  }\n  function assertArgumentCount(count, expectedCount, message) {\n    if (message == null) {\n      message = \"\";\n    }\n    if (message) {\n      message = \": \" + message;\n    }\n    assert3(count >= expectedCount, \"missing argument\" + message, \"MISSING_ARGUMENT\", {\n      count,\n      expectedCount\n    });\n    assert3(count <= expectedCount, \"too many arguments\" + message, \"UNEXPECTED_ARGUMENT\", {\n      count,\n      expectedCount\n    });\n  }\n  function assertNormalize(form) {\n    assert3(_normalizeForms.indexOf(form) >= 0, \"platform missing String.prototype.normalize\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"String.prototype.normalize\",\n      info: { form }\n    });\n  }\n  function assertPrivate(givenGuard, guard, className) {\n    if (className == null) {\n      className = \"\";\n    }\n    if (givenGuard !== guard) {\n      let method = className, operation = \"new\";\n      if (className) {\n        method += \".\";\n        operation += \" \" + className;\n      }\n      assert3(false, `private constructor; use ${method}from* methods`, \"UNSUPPORTED_OPERATION\", {\n        operation\n      });\n    }\n  }\n  var _normalizeForms;\n  var init_errors2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/errors.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_version27();\n      init_properties();\n      _normalizeForms = [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].reduce((accum, form) => {\n        try {\n          if (\"test\".normalize(form) !== \"test\") {\n            throw new Error(\"bad\");\n          }\n          ;\n          if (form === \"NFD\") {\n            const check = String.fromCharCode(233).normalize(\"NFD\");\n            const expected = String.fromCharCode(101, 769);\n            if (check !== expected) {\n              throw new Error(\"broken\");\n            }\n          }\n          accum.push(form);\n        } catch (error) {\n        }\n        return accum;\n      }, []);\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/data.js\n  function _getBytes(value, name, copy4) {\n    if (value instanceof Uint8Array) {\n      if (copy4) {\n        return new Uint8Array(value);\n      }\n      return value;\n    }\n    if (typeof value === \"string\" && value.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {\n      const result = new Uint8Array((value.length - 2) / 2);\n      let offset = 2;\n      for (let i = 0; i < result.length; i++) {\n        result[i] = parseInt(value.substring(offset, offset + 2), 16);\n        offset += 2;\n      }\n      return result;\n    }\n    assertArgument(false, \"invalid BytesLike value\", name || \"value\", value);\n  }\n  function getBytes(value, name) {\n    return _getBytes(value, name, false);\n  }\n  function getBytesCopy(value, name) {\n    return _getBytes(value, name, true);\n  }\n  function isHexString2(value, length) {\n    if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n      return false;\n    }\n    if (typeof length === \"number\" && value.length !== 2 + 2 * length) {\n      return false;\n    }\n    if (length === true && value.length % 2 !== 0) {\n      return false;\n    }\n    return true;\n  }\n  function isBytesLike2(value) {\n    return isHexString2(value, true) || value instanceof Uint8Array;\n  }\n  function hexlify2(data) {\n    const bytes3 = getBytes(data);\n    let result = \"0x\";\n    for (let i = 0; i < bytes3.length; i++) {\n      const v = bytes3[i];\n      result += HexCharacters2[(v & 240) >> 4] + HexCharacters2[v & 15];\n    }\n    return result;\n  }\n  function concat2(datas) {\n    return \"0x\" + datas.map((d) => hexlify2(d).substring(2)).join(\"\");\n  }\n  function dataLength(data) {\n    if (isHexString2(data, true)) {\n      return (data.length - 2) / 2;\n    }\n    return getBytes(data).length;\n  }\n  function dataSlice(data, start, end) {\n    const bytes3 = getBytes(data);\n    if (end != null && end > bytes3.length) {\n      assert3(false, \"cannot slice beyond data bounds\", \"BUFFER_OVERRUN\", {\n        buffer: bytes3,\n        length: bytes3.length,\n        offset: end\n      });\n    }\n    return hexlify2(bytes3.slice(start == null ? 0 : start, end == null ? bytes3.length : end));\n  }\n  function zeroPad2(data, length, left) {\n    const bytes3 = getBytes(data);\n    assert3(length >= bytes3.length, \"padding exceeds data length\", \"BUFFER_OVERRUN\", {\n      buffer: new Uint8Array(bytes3),\n      length,\n      offset: length + 1\n    });\n    const result = new Uint8Array(length);\n    result.fill(0);\n    if (left) {\n      result.set(bytes3, length - bytes3.length);\n    } else {\n      result.set(bytes3, 0);\n    }\n    return hexlify2(result);\n  }\n  function zeroPadValue(data, length) {\n    return zeroPad2(data, length, true);\n  }\n  function zeroPadBytes(data, length) {\n    return zeroPad2(data, length, false);\n  }\n  var HexCharacters2;\n  var init_data = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/data.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_errors2();\n      HexCharacters2 = \"0123456789abcdef\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/maths.js\n  function fromTwos(_value, _width) {\n    const value = getUint(_value, \"value\");\n    const width = BigInt(getNumber(_width, \"width\"));\n    assert3(value >> width === BN_0, \"overflow\", \"NUMERIC_FAULT\", {\n      operation: \"fromTwos\",\n      fault: \"overflow\",\n      value: _value\n    });\n    if (value >> width - BN_1) {\n      const mask2 = (BN_1 << width) - BN_1;\n      return -((~value & mask2) + BN_1);\n    }\n    return value;\n  }\n  function toTwos(_value, _width) {\n    let value = getBigInt(_value, \"value\");\n    const width = BigInt(getNumber(_width, \"width\"));\n    const limit = BN_1 << width - BN_1;\n    if (value < BN_0) {\n      value = -value;\n      assert3(value <= limit, \"too low\", \"NUMERIC_FAULT\", {\n        operation: \"toTwos\",\n        fault: \"overflow\",\n        value: _value\n      });\n      const mask2 = (BN_1 << width) - BN_1;\n      return (~value & mask2) + BN_1;\n    } else {\n      assert3(value < limit, \"too high\", \"NUMERIC_FAULT\", {\n        operation: \"toTwos\",\n        fault: \"overflow\",\n        value: _value\n      });\n    }\n    return value;\n  }\n  function mask(_value, _bits) {\n    const value = getUint(_value, \"value\");\n    const bits = BigInt(getNumber(_bits, \"bits\"));\n    return value & (BN_1 << bits) - BN_1;\n  }\n  function getBigInt(value, name) {\n    switch (typeof value) {\n      case \"bigint\":\n        return value;\n      case \"number\":\n        assertArgument(Number.isInteger(value), \"underflow\", name || \"value\", value);\n        assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n        return BigInt(value);\n      case \"string\":\n        try {\n          if (value === \"\") {\n            throw new Error(\"empty string\");\n          }\n          if (value[0] === \"-\" && value[1] !== \"-\") {\n            return -BigInt(value.substring(1));\n          }\n          return BigInt(value);\n        } catch (e) {\n          assertArgument(false, `invalid BigNumberish string: ${e.message}`, name || \"value\", value);\n        }\n    }\n    assertArgument(false, \"invalid BigNumberish value\", name || \"value\", value);\n  }\n  function getUint(value, name) {\n    const result = getBigInt(value, name);\n    assert3(result >= BN_0, \"unsigned value cannot be negative\", \"NUMERIC_FAULT\", {\n      fault: \"overflow\",\n      operation: \"getUint\",\n      value\n    });\n    return result;\n  }\n  function toBigInt(value) {\n    if (value instanceof Uint8Array) {\n      let result = \"0x0\";\n      for (const v of value) {\n        result += Nibbles[v >> 4];\n        result += Nibbles[v & 15];\n      }\n      return BigInt(result);\n    }\n    return getBigInt(value);\n  }\n  function getNumber(value, name) {\n    switch (typeof value) {\n      case \"bigint\":\n        assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n        return Number(value);\n      case \"number\":\n        assertArgument(Number.isInteger(value), \"underflow\", name || \"value\", value);\n        assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n        return value;\n      case \"string\":\n        try {\n          if (value === \"\") {\n            throw new Error(\"empty string\");\n          }\n          return getNumber(BigInt(value), name);\n        } catch (e) {\n          assertArgument(false, `invalid numeric string: ${e.message}`, name || \"value\", value);\n        }\n    }\n    assertArgument(false, \"invalid numeric value\", name || \"value\", value);\n  }\n  function toNumber(value) {\n    return getNumber(toBigInt(value));\n  }\n  function toBeHex(_value, _width) {\n    const value = getUint(_value, \"value\");\n    let result = value.toString(16);\n    if (_width == null) {\n      if (result.length % 2) {\n        result = \"0\" + result;\n      }\n    } else {\n      const width = getNumber(_width, \"width\");\n      assert3(width * 2 >= result.length, `value exceeds width (${width} bytes)`, \"NUMERIC_FAULT\", {\n        operation: \"toBeHex\",\n        fault: \"overflow\",\n        value: _value\n      });\n      while (result.length < width * 2) {\n        result = \"0\" + result;\n      }\n    }\n    return \"0x\" + result;\n  }\n  function toBeArray(_value) {\n    const value = getUint(_value, \"value\");\n    if (value === BN_0) {\n      return new Uint8Array([]);\n    }\n    let hex = value.toString(16);\n    if (hex.length % 2) {\n      hex = \"0\" + hex;\n    }\n    const result = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < result.length; i++) {\n      const offset = i * 2;\n      result[i] = parseInt(hex.substring(offset, offset + 2), 16);\n    }\n    return result;\n  }\n  function toQuantity(value) {\n    let result = hexlify2(isBytesLike2(value) ? value : toBeArray(value)).substring(2);\n    while (result.startsWith(\"0\")) {\n      result = result.substring(1);\n    }\n    if (result === \"\") {\n      result = \"0\";\n    }\n    return \"0x\" + result;\n  }\n  var BN_0, BN_1, maxValue, Nibbles;\n  var init_maths = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/maths.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_data();\n      init_errors2();\n      BN_0 = BigInt(0);\n      BN_1 = BigInt(1);\n      maxValue = 9007199254740991;\n      Nibbles = \"0123456789abcdef\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/base58.js\n  function encodeBase58(_value) {\n    const bytes3 = getBytes(_value);\n    let value = toBigInt(bytes3);\n    let result = \"\";\n    while (value) {\n      result = Alphabet[Number(value % BN_58)] + result;\n      value /= BN_58;\n    }\n    for (let i = 0; i < bytes3.length; i++) {\n      if (bytes3[i]) {\n        break;\n      }\n      result = Alphabet[0] + result;\n    }\n    return result;\n  }\n  var Alphabet, BN_02, BN_58;\n  var init_base58 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/base58.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_data();\n      init_maths();\n      Alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n      BN_02 = BigInt(0);\n      BN_58 = BigInt(58);\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/base64-browser.js\n  function decodeBase64(textData) {\n    textData = atob(textData);\n    const data = new Uint8Array(textData.length);\n    for (let i = 0; i < textData.length; i++) {\n      data[i] = textData.charCodeAt(i);\n    }\n    return getBytes(data);\n  }\n  function encodeBase64(_data) {\n    const data = getBytes(_data);\n    let textData = \"\";\n    for (let i = 0; i < data.length; i++) {\n      textData += String.fromCharCode(data[i]);\n    }\n    return btoa(textData);\n  }\n  var init_base64_browser = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/base64-browser.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_data();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/events.js\n  var EventPayload;\n  var init_events = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/events.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_properties();\n      EventPayload = class {\n        /**\n         *  The event filter.\n         */\n        filter;\n        /**\n         *  The **EventEmitterable**.\n         */\n        emitter;\n        #listener;\n        /**\n         *  Create a new **EventPayload** for %%emitter%% with\n         *  the %%listener%% and for %%filter%%.\n         */\n        constructor(emitter, listener, filter) {\n          this.#listener = listener;\n          defineProperties(this, { emitter, filter });\n        }\n        /**\n         *  Unregister the triggered listener for future events.\n         */\n        async removeListener() {\n          if (this.#listener == null) {\n            return;\n          }\n          await this.emitter.off(this.filter, this.#listener);\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/utf8.js\n  function errorFunc2(reason, offset, bytes3, output2, badCodepoint) {\n    assertArgument(false, `invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes3);\n  }\n  function ignoreFunc2(reason, offset, bytes3, output2, badCodepoint) {\n    if (reason === \"BAD_PREFIX\" || reason === \"UNEXPECTED_CONTINUE\") {\n      let i = 0;\n      for (let o = offset + 1; o < bytes3.length; o++) {\n        if (bytes3[o] >> 6 !== 2) {\n          break;\n        }\n        i++;\n      }\n      return i;\n    }\n    if (reason === \"OVERRUN\") {\n      return bytes3.length - offset - 1;\n    }\n    return 0;\n  }\n  function replaceFunc2(reason, offset, bytes3, output2, badCodepoint) {\n    if (reason === \"OVERLONG\") {\n      assertArgument(typeof badCodepoint === \"number\", \"invalid bad code point for replacement\", \"badCodepoint\", badCodepoint);\n      output2.push(badCodepoint);\n      return 0;\n    }\n    output2.push(65533);\n    return ignoreFunc2(reason, offset, bytes3, output2, badCodepoint);\n  }\n  function getUtf8CodePoints2(_bytes, onError) {\n    if (onError == null) {\n      onError = Utf8ErrorFuncs2.error;\n    }\n    const bytes3 = getBytes(_bytes, \"bytes\");\n    const result = [];\n    let i = 0;\n    while (i < bytes3.length) {\n      const c = bytes3[i++];\n      if (c >> 7 === 0) {\n        result.push(c);\n        continue;\n      }\n      let extraLength = null;\n      let overlongMask = null;\n      if ((c & 224) === 192) {\n        extraLength = 1;\n        overlongMask = 127;\n      } else if ((c & 240) === 224) {\n        extraLength = 2;\n        overlongMask = 2047;\n      } else if ((c & 248) === 240) {\n        extraLength = 3;\n        overlongMask = 65535;\n      } else {\n        if ((c & 192) === 128) {\n          i += onError(\"UNEXPECTED_CONTINUE\", i - 1, bytes3, result);\n        } else {\n          i += onError(\"BAD_PREFIX\", i - 1, bytes3, result);\n        }\n        continue;\n      }\n      if (i - 1 + extraLength >= bytes3.length) {\n        i += onError(\"OVERRUN\", i - 1, bytes3, result);\n        continue;\n      }\n      let res = c & (1 << 8 - extraLength - 1) - 1;\n      for (let j = 0; j < extraLength; j++) {\n        let nextChar = bytes3[i];\n        if ((nextChar & 192) != 128) {\n          i += onError(\"MISSING_CONTINUE\", i, bytes3, result);\n          res = null;\n          break;\n        }\n        ;\n        res = res << 6 | nextChar & 63;\n        i++;\n      }\n      if (res === null) {\n        continue;\n      }\n      if (res > 1114111) {\n        i += onError(\"OUT_OF_RANGE\", i - 1 - extraLength, bytes3, result, res);\n        continue;\n      }\n      if (res >= 55296 && res <= 57343) {\n        i += onError(\"UTF16_SURROGATE\", i - 1 - extraLength, bytes3, result, res);\n        continue;\n      }\n      if (res <= overlongMask) {\n        i += onError(\"OVERLONG\", i - 1 - extraLength, bytes3, result, res);\n        continue;\n      }\n      result.push(res);\n    }\n    return result;\n  }\n  function toUtf8Bytes2(str, form) {\n    assertArgument(typeof str === \"string\", \"invalid string value\", \"str\", str);\n    if (form != null) {\n      assertNormalize(form);\n      str = str.normalize(form);\n    }\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n      const c = str.charCodeAt(i);\n      if (c < 128) {\n        result.push(c);\n      } else if (c < 2048) {\n        result.push(c >> 6 | 192);\n        result.push(c & 63 | 128);\n      } else if ((c & 64512) == 55296) {\n        i++;\n        const c2 = str.charCodeAt(i);\n        assertArgument(i < str.length && (c2 & 64512) === 56320, \"invalid surrogate pair\", \"str\", str);\n        const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);\n        result.push(pair >> 18 | 240);\n        result.push(pair >> 12 & 63 | 128);\n        result.push(pair >> 6 & 63 | 128);\n        result.push(pair & 63 | 128);\n      } else {\n        result.push(c >> 12 | 224);\n        result.push(c >> 6 & 63 | 128);\n        result.push(c & 63 | 128);\n      }\n    }\n    return new Uint8Array(result);\n  }\n  function _toUtf8String2(codePoints) {\n    return codePoints.map((codePoint) => {\n      if (codePoint <= 65535) {\n        return String.fromCharCode(codePoint);\n      }\n      codePoint -= 65536;\n      return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);\n    }).join(\"\");\n  }\n  function toUtf8String2(bytes3, onError) {\n    return _toUtf8String2(getUtf8CodePoints2(bytes3, onError));\n  }\n  var Utf8ErrorFuncs2;\n  var init_utf82 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/utf8.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_data();\n      init_errors2();\n      Utf8ErrorFuncs2 = Object.freeze({\n        error: errorFunc2,\n        ignore: ignoreFunc2,\n        replace: replaceFunc2\n      });\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/geturl-browser.js\n  function createGetUrl(options) {\n    async function getUrl2(req, _signal) {\n      assert3(_signal == null || !_signal.cancelled, \"request cancelled before sending\", \"CANCELLED\");\n      const protocol = req.url.split(\":\")[0].toLowerCase();\n      assert3(protocol === \"http\" || protocol === \"https\", `unsupported protocol ${protocol}`, \"UNSUPPORTED_OPERATION\", {\n        info: { protocol },\n        operation: \"request\"\n      });\n      assert3(protocol === \"https\" || !req.credentials || req.allowInsecureAuthentication, \"insecure authorized connections unsupported\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"request\"\n      });\n      let error = null;\n      const controller = new AbortController();\n      const timer2 = setTimeout(() => {\n        error = makeError(\"request timeout\", \"TIMEOUT\");\n        controller.abort();\n      }, req.timeout);\n      if (_signal) {\n        _signal.addListener(() => {\n          error = makeError(\"request cancelled\", \"CANCELLED\");\n          controller.abort();\n        });\n      }\n      const init3 = Object.assign({}, options, {\n        method: req.method,\n        headers: new Headers(Array.from(req)),\n        body: req.body || void 0,\n        signal: controller.signal\n      });\n      let resp;\n      try {\n        resp = await fetch(req.url, init3);\n      } catch (_error) {\n        clearTimeout(timer2);\n        if (error) {\n          throw error;\n        }\n        throw _error;\n      }\n      clearTimeout(timer2);\n      const headers = {};\n      resp.headers.forEach((value, key2) => {\n        headers[key2.toLowerCase()] = value;\n      });\n      const respBody = await resp.arrayBuffer();\n      const body = respBody == null ? null : new Uint8Array(respBody);\n      return {\n        statusCode: resp.status,\n        statusMessage: resp.statusText,\n        headers,\n        body\n      };\n    }\n    return getUrl2;\n  }\n  var defaultGetUrl;\n  var init_geturl_browser = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/geturl-browser.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_errors2();\n      defaultGetUrl = createGetUrl({});\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/fetch.js\n  async function dataGatewayFunc(url, signal) {\n    try {\n      const match = url.match(reData);\n      if (!match) {\n        throw new Error(\"invalid data\");\n      }\n      return new FetchResponse(200, \"OK\", {\n        \"content-type\": match[1] || \"text/plain\"\n      }, match[2] ? decodeBase64(match[3]) : unpercent2(match[3]));\n    } catch (error) {\n      return new FetchResponse(599, \"BAD REQUEST (invalid data: URI)\", {}, null, new FetchRequest(url));\n    }\n  }\n  function getIpfsGatewayFunc(baseUrl) {\n    async function gatewayIpfs(url, signal) {\n      try {\n        const match = url.match(reIpfs);\n        if (!match) {\n          throw new Error(\"invalid link\");\n        }\n        return new FetchRequest(`${baseUrl}${match[2]}`);\n      } catch (error) {\n        return new FetchResponse(599, \"BAD REQUEST (invalid IPFS URI)\", {}, null, new FetchRequest(url));\n      }\n    }\n    return gatewayIpfs;\n  }\n  function checkSignal(signal) {\n    if (signal == null) {\n      throw new Error(\"missing signal; should not happen\");\n    }\n    signal.checkSignal();\n    return signal;\n  }\n  function getTime2() {\n    return (/* @__PURE__ */ new Date()).getTime();\n  }\n  function unpercent2(value) {\n    return toUtf8Bytes2(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n      return String.fromCharCode(parseInt(code, 16));\n    }));\n  }\n  function wait(delay) {\n    return new Promise((resolve) => setTimeout(resolve, delay));\n  }\n  var MAX_ATTEMPTS, SLOT_INTERVAL, defaultGetUrlFunc, reData, reIpfs, locked, Gateways, fetchSignals, FetchCancelSignal, FetchRequest, FetchResponse;\n  var init_fetch = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/fetch.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_base64_browser();\n      init_data();\n      init_errors2();\n      init_properties();\n      init_utf82();\n      init_geturl_browser();\n      MAX_ATTEMPTS = 12;\n      SLOT_INTERVAL = 250;\n      defaultGetUrlFunc = createGetUrl();\n      reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n      reIpfs = new RegExp(\"^ipfs://(ipfs/)?(.*)$\", \"i\");\n      locked = false;\n      Gateways = {\n        \"data\": dataGatewayFunc,\n        \"ipfs\": getIpfsGatewayFunc(\"https://gateway.ipfs.io/ipfs/\")\n      };\n      fetchSignals = /* @__PURE__ */ new WeakMap();\n      FetchCancelSignal = class {\n        #listeners;\n        #cancelled;\n        constructor(request) {\n          this.#listeners = [];\n          this.#cancelled = false;\n          fetchSignals.set(request, () => {\n            if (this.#cancelled) {\n              return;\n            }\n            this.#cancelled = true;\n            for (const listener of this.#listeners) {\n              setTimeout(() => {\n                listener();\n              }, 0);\n            }\n            this.#listeners = [];\n          });\n        }\n        addListener(listener) {\n          assert3(!this.#cancelled, \"singal already cancelled\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fetchCancelSignal.addCancelListener\"\n          });\n          this.#listeners.push(listener);\n        }\n        get cancelled() {\n          return this.#cancelled;\n        }\n        checkSignal() {\n          assert3(!this.cancelled, \"cancelled\", \"CANCELLED\", {});\n        }\n      };\n      FetchRequest = class _FetchRequest {\n        #allowInsecure;\n        #gzip;\n        #headers;\n        #method;\n        #timeout;\n        #url;\n        #body;\n        #bodyType;\n        #creds;\n        // Hooks\n        #preflight;\n        #process;\n        #retry;\n        #signal;\n        #throttle;\n        #getUrlFunc;\n        /**\n         *  The fetch URL to request.\n         */\n        get url() {\n          return this.#url;\n        }\n        set url(url) {\n          this.#url = String(url);\n        }\n        /**\n         *  The fetch body, if any, to send as the request body. //(default: null)//\n         *\n         *  When setting a body, the intrinsic ``Content-Type`` is automatically\n         *  set and will be used if **not overridden** by setting a custom\n         *  header.\n         *\n         *  If %%body%% is null, the body is cleared (along with the\n         *  intrinsic ``Content-Type``).\n         *\n         *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to\n         *  ``text/plain``.\n         *\n         *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to\n         *  ``application/octet-stream``.\n         *\n         *  If %%body%% is any other object, the intrinsic ``Content-Type`` is\n         *  set to ``application/json``.\n         */\n        get body() {\n          if (this.#body == null) {\n            return null;\n          }\n          return new Uint8Array(this.#body);\n        }\n        set body(body) {\n          if (body == null) {\n            this.#body = void 0;\n            this.#bodyType = void 0;\n          } else if (typeof body === \"string\") {\n            this.#body = toUtf8Bytes2(body);\n            this.#bodyType = \"text/plain\";\n          } else if (body instanceof Uint8Array) {\n            this.#body = body;\n            this.#bodyType = \"application/octet-stream\";\n          } else if (typeof body === \"object\") {\n            this.#body = toUtf8Bytes2(JSON.stringify(body));\n            this.#bodyType = \"application/json\";\n          } else {\n            throw new Error(\"invalid body\");\n          }\n        }\n        /**\n         *  Returns true if the request has a body.\n         */\n        hasBody() {\n          return this.#body != null;\n        }\n        /**\n         *  The HTTP method to use when requesting the URI. If no method\n         *  has been explicitly set, then ``GET`` is used if the body is\n         *  null and ``POST`` otherwise.\n         */\n        get method() {\n          if (this.#method) {\n            return this.#method;\n          }\n          if (this.hasBody()) {\n            return \"POST\";\n          }\n          return \"GET\";\n        }\n        set method(method) {\n          if (method == null) {\n            method = \"\";\n          }\n          this.#method = String(method).toUpperCase();\n        }\n        /**\n         *  The headers that will be used when requesting the URI. All\n         *  keys are lower-case.\n         *\n         *  This object is a copy, so any changes will **NOT** be reflected\n         *  in the ``FetchRequest``.\n         *\n         *  To set a header entry, use the ``setHeader`` method.\n         */\n        get headers() {\n          const headers = Object.assign({}, this.#headers);\n          if (this.#creds) {\n            headers[\"authorization\"] = `Basic ${encodeBase64(toUtf8Bytes2(this.#creds))}`;\n          }\n          ;\n          if (this.allowGzip) {\n            headers[\"accept-encoding\"] = \"gzip\";\n          }\n          if (headers[\"content-type\"] == null && this.#bodyType) {\n            headers[\"content-type\"] = this.#bodyType;\n          }\n          if (this.body) {\n            headers[\"content-length\"] = String(this.body.length);\n          }\n          return headers;\n        }\n        /**\n         *  Get the header for %%key%%, ignoring case.\n         */\n        getHeader(key2) {\n          return this.headers[key2.toLowerCase()];\n        }\n        /**\n         *  Set the header for %%key%% to %%value%%. All values are coerced\n         *  to a string.\n         */\n        setHeader(key2, value) {\n          this.#headers[String(key2).toLowerCase()] = String(value);\n        }\n        /**\n         *  Clear all headers, resetting all intrinsic headers.\n         */\n        clearHeaders() {\n          this.#headers = {};\n        }\n        [Symbol.iterator]() {\n          const headers = this.headers;\n          const keys = Object.keys(headers);\n          let index = 0;\n          return {\n            next: () => {\n              if (index < keys.length) {\n                const key2 = keys[index++];\n                return {\n                  value: [key2, headers[key2]],\n                  done: false\n                };\n              }\n              return { value: void 0, done: true };\n            }\n          };\n        }\n        /**\n         *  The value that will be sent for the ``Authorization`` header.\n         *\n         *  To set the credentials, use the ``setCredentials`` method.\n         */\n        get credentials() {\n          return this.#creds || null;\n        }\n        /**\n         *  Sets an ``Authorization`` for %%username%% with %%password%%.\n         */\n        setCredentials(username, password) {\n          assertArgument(!username.match(/:/), \"invalid basic authentication username\", \"username\", \"[REDACTED]\");\n          this.#creds = `${username}:${password}`;\n        }\n        /**\n         *  Enable and request gzip-encoded responses. The response will\n         *  automatically be decompressed. //(default: true)//\n         */\n        get allowGzip() {\n          return this.#gzip;\n        }\n        set allowGzip(value) {\n          this.#gzip = !!value;\n        }\n        /**\n         *  Allow ``Authentication`` credentials to be sent over insecure\n         *  channels. //(default: false)//\n         */\n        get allowInsecureAuthentication() {\n          return !!this.#allowInsecure;\n        }\n        set allowInsecureAuthentication(value) {\n          this.#allowInsecure = !!value;\n        }\n        /**\n         *  The timeout (in milliseconds) to wait for a complete response.\n         *  //(default: 5 minutes)//\n         */\n        get timeout() {\n          return this.#timeout;\n        }\n        set timeout(timeout) {\n          assertArgument(timeout >= 0, \"timeout must be non-zero\", \"timeout\", timeout);\n          this.#timeout = timeout;\n        }\n        /**\n         *  This function is called prior to each request, for example\n         *  during a redirection or retry in case of server throttling.\n         *\n         *  This offers an opportunity to populate headers or update\n         *  content before sending a request.\n         */\n        get preflightFunc() {\n          return this.#preflight || null;\n        }\n        set preflightFunc(preflight) {\n          this.#preflight = preflight;\n        }\n        /**\n         *  This function is called after each response, offering an\n         *  opportunity to provide client-level throttling or updating\n         *  response data.\n         *\n         *  Any error thrown in this causes the ``send()`` to throw.\n         *\n         *  To schedule a retry attempt (assuming the maximum retry limit\n         *  has not been reached), use [[response.throwThrottleError]].\n         */\n        get processFunc() {\n          return this.#process || null;\n        }\n        set processFunc(process2) {\n          this.#process = process2;\n        }\n        /**\n         *  This function is called on each retry attempt.\n         */\n        get retryFunc() {\n          return this.#retry || null;\n        }\n        set retryFunc(retry) {\n          this.#retry = retry;\n        }\n        /**\n         *  This function is called to fetch content from HTTP and\n         *  HTTPS URLs and is platform specific (e.g. nodejs vs\n         *  browsers).\n         *\n         *  This is by default the currently registered global getUrl\n         *  function, which can be changed using [[registerGetUrl]].\n         *  If this has been set, setting is to ``null`` will cause\n         *  this FetchRequest (and any future clones) to revert back to\n         *  using the currently registered global getUrl function.\n         *\n         *  Setting this is generally not necessary, but may be useful\n         *  for developers that wish to intercept requests or to\n         *  configurege a proxy or other agent.\n         */\n        get getUrlFunc() {\n          return this.#getUrlFunc || defaultGetUrlFunc;\n        }\n        set getUrlFunc(value) {\n          this.#getUrlFunc = value;\n        }\n        /**\n         *  Create a new FetchRequest instance with default values.\n         *\n         *  Once created, each property may be set before issuing a\n         *  ``.send()`` to make the request.\n         */\n        constructor(url) {\n          this.#url = String(url);\n          this.#allowInsecure = false;\n          this.#gzip = true;\n          this.#headers = {};\n          this.#method = \"\";\n          this.#timeout = 3e5;\n          this.#throttle = {\n            slotInterval: SLOT_INTERVAL,\n            maxAttempts: MAX_ATTEMPTS\n          };\n          this.#getUrlFunc = null;\n        }\n        toString() {\n          return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#body ? hexlify2(this.#body) : \"null\"}>`;\n        }\n        /**\n         *  Update the throttle parameters used to determine maximum\n         *  attempts and exponential-backoff properties.\n         */\n        setThrottleParams(params) {\n          if (params.slotInterval != null) {\n            this.#throttle.slotInterval = params.slotInterval;\n          }\n          if (params.maxAttempts != null) {\n            this.#throttle.maxAttempts = params.maxAttempts;\n          }\n        }\n        async #send(attempt, expires, delay, _request, _response) {\n          if (attempt >= this.#throttle.maxAttempts) {\n            return _response.makeServerError(\"exceeded maximum retry limit\");\n          }\n          assert3(getTime2() <= expires, \"timeout\", \"TIMEOUT\", {\n            operation: \"request.send\",\n            reason: \"timeout\",\n            request: _request\n          });\n          if (delay > 0) {\n            await wait(delay);\n          }\n          let req = this.clone();\n          const scheme = (req.url.split(\":\")[0] || \"\").toLowerCase();\n          if (scheme in Gateways) {\n            const result = await Gateways[scheme](req.url, checkSignal(_request.#signal));\n            if (result instanceof FetchResponse) {\n              let response2 = result;\n              if (this.processFunc) {\n                checkSignal(_request.#signal);\n                try {\n                  response2 = await this.processFunc(req, response2);\n                } catch (error) {\n                  if (error.throttle == null || typeof error.stall !== \"number\") {\n                    response2.makeServerError(\"error in post-processing function\", error).assertOk();\n                  }\n                }\n              }\n              return response2;\n            }\n            req = result;\n          }\n          if (this.preflightFunc) {\n            req = await this.preflightFunc(req);\n          }\n          const resp = await this.getUrlFunc(req, checkSignal(_request.#signal));\n          let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);\n          if (response.statusCode === 301 || response.statusCode === 302) {\n            try {\n              const location = response.headers.location || \"\";\n              return req.redirect(location).#send(attempt + 1, expires, 0, _request, response);\n            } catch (error) {\n            }\n            return response;\n          } else if (response.statusCode === 429) {\n            if (this.retryFunc == null || await this.retryFunc(req, response, attempt)) {\n              const retryAfter = response.headers[\"retry-after\"];\n              let delay2 = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n              if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                delay2 = parseInt(retryAfter);\n              }\n              return req.clone().#send(attempt + 1, expires, delay2, _request, response);\n            }\n          }\n          if (this.processFunc) {\n            checkSignal(_request.#signal);\n            try {\n              response = await this.processFunc(req, response);\n            } catch (error) {\n              if (error.throttle == null || typeof error.stall !== \"number\") {\n                response.makeServerError(\"error in post-processing function\", error).assertOk();\n              }\n              let delay2 = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n              ;\n              if (error.stall >= 0) {\n                delay2 = error.stall;\n              }\n              return req.clone().#send(attempt + 1, expires, delay2, _request, response);\n            }\n          }\n          return response;\n        }\n        /**\n         *  Resolves to the response by sending the request.\n         */\n        send() {\n          assert3(this.#signal == null, \"request already sent\", \"UNSUPPORTED_OPERATION\", { operation: \"fetchRequest.send\" });\n          this.#signal = new FetchCancelSignal(this);\n          return this.#send(0, getTime2() + this.timeout, 0, this, new FetchResponse(0, \"\", {}, null, this));\n        }\n        /**\n         *  Cancels the inflight response, causing a ``CANCELLED``\n         *  error to be rejected from the [[send]].\n         */\n        cancel() {\n          assert3(this.#signal != null, \"request has not been sent\", \"UNSUPPORTED_OPERATION\", { operation: \"fetchRequest.cancel\" });\n          const signal = fetchSignals.get(this);\n          if (!signal) {\n            throw new Error(\"missing signal; should not happen\");\n          }\n          signal();\n        }\n        /**\n         *  Returns a new [[FetchRequest]] that represents the redirection\n         *  to %%location%%.\n         */\n        redirect(location) {\n          const current = this.url.split(\":\")[0].toLowerCase();\n          const target = location.split(\":\")[0].toLowerCase();\n          assert3(this.method === \"GET\" && (current !== \"https\" || target !== \"http\") && location.match(/^https?:/), `unsupported redirect`, \"UNSUPPORTED_OPERATION\", {\n            operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`\n          });\n          const req = new _FetchRequest(location);\n          req.method = \"GET\";\n          req.allowGzip = this.allowGzip;\n          req.timeout = this.timeout;\n          req.#headers = Object.assign({}, this.#headers);\n          if (this.#body) {\n            req.#body = new Uint8Array(this.#body);\n          }\n          req.#bodyType = this.#bodyType;\n          return req;\n        }\n        /**\n         *  Create a new copy of this request.\n         */\n        clone() {\n          const clone = new _FetchRequest(this.url);\n          clone.#method = this.#method;\n          if (this.#body) {\n            clone.#body = this.#body;\n          }\n          clone.#bodyType = this.#bodyType;\n          clone.#headers = Object.assign({}, this.#headers);\n          clone.#creds = this.#creds;\n          if (this.allowGzip) {\n            clone.allowGzip = true;\n          }\n          clone.timeout = this.timeout;\n          if (this.allowInsecureAuthentication) {\n            clone.allowInsecureAuthentication = true;\n          }\n          clone.#preflight = this.#preflight;\n          clone.#process = this.#process;\n          clone.#retry = this.#retry;\n          clone.#throttle = Object.assign({}, this.#throttle);\n          clone.#getUrlFunc = this.#getUrlFunc;\n          return clone;\n        }\n        /**\n         *  Locks all static configuration for gateways and FetchGetUrlFunc\n         *  registration.\n         */\n        static lockConfig() {\n          locked = true;\n        }\n        /**\n         *  Get the current Gateway function for %%scheme%%.\n         */\n        static getGateway(scheme) {\n          return Gateways[scheme.toLowerCase()] || null;\n        }\n        /**\n         *  Use the %%func%% when fetching URIs using %%scheme%%.\n         *\n         *  This method affects all requests globally.\n         *\n         *  If [[lockConfig]] has been called, no change is made and this\n         *  throws.\n         */\n        static registerGateway(scheme, func) {\n          scheme = scheme.toLowerCase();\n          if (scheme === \"http\" || scheme === \"https\") {\n            throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);\n          }\n          if (locked) {\n            throw new Error(\"gateways locked\");\n          }\n          Gateways[scheme] = func;\n        }\n        /**\n         *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.\n         *\n         *  This method affects all requests globally.\n         *\n         *  If [[lockConfig]] has been called, no change is made and this\n         *  throws.\n         */\n        static registerGetUrl(getUrl2) {\n          if (locked) {\n            throw new Error(\"gateways locked\");\n          }\n          defaultGetUrlFunc = getUrl2;\n        }\n        /**\n         *  Creates a getUrl function that fetches content from HTTP and\n         *  HTTPS URLs.\n         *\n         *  The available %%options%% are dependent on the platform\n         *  implementation of the default getUrl function.\n         *\n         *  This is not generally something that is needed, but is useful\n         *  when trying to customize simple behaviour when fetching HTTP\n         *  content.\n         */\n        static createGetUrlFunc(options) {\n          return createGetUrl(options);\n        }\n        /**\n         *  Creates a function that can \"fetch\" data URIs.\n         *\n         *  Note that this is automatically done internally to support\n         *  data URIs, so it is not necessary to register it.\n         *\n         *  This is not generally something that is needed, but may\n         *  be useful in a wrapper to perfom custom data URI functionality.\n         */\n        static createDataGateway() {\n          return dataGatewayFunc;\n        }\n        /**\n         *  Creates a function that will fetch IPFS (unvalidated) from\n         *  a custom gateway baseUrl.\n         *\n         *  The default IPFS gateway used internally is\n         *  ``\"https:/\\/gateway.ipfs.io/ipfs/\"``.\n         */\n        static createIpfsGatewayFunc(baseUrl) {\n          return getIpfsGatewayFunc(baseUrl);\n        }\n      };\n      FetchResponse = class _FetchResponse {\n        #statusCode;\n        #statusMessage;\n        #headers;\n        #body;\n        #request;\n        #error;\n        toString() {\n          return `<FetchResponse status=${this.statusCode} body=${this.#body ? hexlify2(this.#body) : \"null\"}>`;\n        }\n        /**\n         *  The response status code.\n         */\n        get statusCode() {\n          return this.#statusCode;\n        }\n        /**\n         *  The response status message.\n         */\n        get statusMessage() {\n          return this.#statusMessage;\n        }\n        /**\n         *  The response headers. All keys are lower-case.\n         */\n        get headers() {\n          return Object.assign({}, this.#headers);\n        }\n        /**\n         *  The response body, or ``null`` if there was no body.\n         */\n        get body() {\n          return this.#body == null ? null : new Uint8Array(this.#body);\n        }\n        /**\n         *  The response body as a UTF-8 encoded string, or the empty\n         *  string (i.e. ``\"\"``) if there was no body.\n         *\n         *  An error is thrown if the body is invalid UTF-8 data.\n         */\n        get bodyText() {\n          try {\n            return this.#body == null ? \"\" : toUtf8String2(this.#body);\n          } catch (error) {\n            assert3(false, \"response body is not valid UTF-8 data\", \"UNSUPPORTED_OPERATION\", {\n              operation: \"bodyText\",\n              info: { response: this }\n            });\n          }\n        }\n        /**\n         *  The response body, decoded as JSON.\n         *\n         *  An error is thrown if the body is invalid JSON-encoded data\n         *  or if there was no body.\n         */\n        get bodyJson() {\n          try {\n            return JSON.parse(this.bodyText);\n          } catch (error) {\n            assert3(false, \"response body is not valid JSON\", \"UNSUPPORTED_OPERATION\", {\n              operation: \"bodyJson\",\n              info: { response: this }\n            });\n          }\n        }\n        [Symbol.iterator]() {\n          const headers = this.headers;\n          const keys = Object.keys(headers);\n          let index = 0;\n          return {\n            next: () => {\n              if (index < keys.length) {\n                const key2 = keys[index++];\n                return {\n                  value: [key2, headers[key2]],\n                  done: false\n                };\n              }\n              return { value: void 0, done: true };\n            }\n          };\n        }\n        constructor(statusCode, statusMessage, headers, body, request) {\n          this.#statusCode = statusCode;\n          this.#statusMessage = statusMessage;\n          this.#headers = Object.keys(headers).reduce((accum, k) => {\n            accum[k.toLowerCase()] = String(headers[k]);\n            return accum;\n          }, {});\n          this.#body = body == null ? null : new Uint8Array(body);\n          this.#request = request || null;\n          this.#error = { message: \"\" };\n        }\n        /**\n         *  Return a Response with matching headers and body, but with\n         *  an error status code (i.e. 599) and %%message%% with an\n         *  optional %%error%%.\n         */\n        makeServerError(message, error) {\n          let statusMessage;\n          if (!message) {\n            message = `${this.statusCode} ${this.statusMessage}`;\n            statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;\n          } else {\n            statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;\n          }\n          const response = new _FetchResponse(599, statusMessage, this.headers, this.body, this.#request || void 0);\n          response.#error = { message, error };\n          return response;\n        }\n        /**\n         *  If called within a [request.processFunc](FetchRequest-processFunc)\n         *  call, causes the request to retry as if throttled for %%stall%%\n         *  milliseconds.\n         */\n        throwThrottleError(message, stall4) {\n          if (stall4 == null) {\n            stall4 = -1;\n          } else {\n            assertArgument(Number.isInteger(stall4) && stall4 >= 0, \"invalid stall timeout\", \"stall\", stall4);\n          }\n          const error = new Error(message || \"throttling requests\");\n          defineProperties(error, { stall: stall4, throttle: true });\n          throw error;\n        }\n        /**\n         *  Get the header value for %%key%%, ignoring case.\n         */\n        getHeader(key2) {\n          return this.headers[key2.toLowerCase()];\n        }\n        /**\n         *  Returns true if the response has a body.\n         */\n        hasBody() {\n          return this.#body != null;\n        }\n        /**\n         *  The request made for this response.\n         */\n        get request() {\n          return this.#request;\n        }\n        /**\n         *  Returns true if this response was a success statusCode.\n         */\n        ok() {\n          return this.#error.message === \"\" && this.statusCode >= 200 && this.statusCode < 300;\n        }\n        /**\n         *  Throws a ``SERVER_ERROR`` if this response is not ok.\n         */\n        assertOk() {\n          if (this.ok()) {\n            return;\n          }\n          let { message, error } = this.#error;\n          if (message === \"\") {\n            message = `server response ${this.statusCode} ${this.statusMessage}`;\n          }\n          let requestUrl = null;\n          if (this.request) {\n            requestUrl = this.request.url;\n          }\n          let responseBody = null;\n          try {\n            if (this.#body) {\n              responseBody = toUtf8String2(this.#body);\n            }\n          } catch (e) {\n          }\n          assert3(false, message, \"SERVER_ERROR\", {\n            request: this.request || \"unknown request\",\n            response: this,\n            error,\n            info: {\n              requestUrl,\n              responseBody,\n              responseStatus: `${this.statusCode} ${this.statusMessage}`\n            }\n          });\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/rlp-decode.js\n  function hexlifyByte(value) {\n    let result = value.toString(16);\n    while (result.length < 2) {\n      result = \"0\" + result;\n    }\n    return \"0x\" + result;\n  }\n  function unarrayifyInteger2(data, offset, length) {\n    let result = 0;\n    for (let i = 0; i < length; i++) {\n      result = result * 256 + data[offset + i];\n    }\n    return result;\n  }\n  function _decodeChildren2(data, offset, childOffset, length) {\n    const result = [];\n    while (childOffset < offset + 1 + length) {\n      const decoded = _decode2(data, childOffset);\n      result.push(decoded.result);\n      childOffset += decoded.consumed;\n      assert3(childOffset <= offset + 1 + length, \"child data too short\", \"BUFFER_OVERRUN\", {\n        buffer: data,\n        length,\n        offset\n      });\n    }\n    return { consumed: 1 + length, result };\n  }\n  function _decode2(data, offset) {\n    assert3(data.length !== 0, \"data too short\", \"BUFFER_OVERRUN\", {\n      buffer: data,\n      length: 0,\n      offset: 1\n    });\n    const checkOffset = (offset2) => {\n      assert3(offset2 <= data.length, \"data short segment too short\", \"BUFFER_OVERRUN\", {\n        buffer: data,\n        length: data.length,\n        offset: offset2\n      });\n    };\n    if (data[offset] >= 248) {\n      const lengthLength = data[offset] - 247;\n      checkOffset(offset + 1 + lengthLength);\n      const length = unarrayifyInteger2(data, offset + 1, lengthLength);\n      checkOffset(offset + 1 + lengthLength + length);\n      return _decodeChildren2(data, offset, offset + 1 + lengthLength, lengthLength + length);\n    } else if (data[offset] >= 192) {\n      const length = data[offset] - 192;\n      checkOffset(offset + 1 + length);\n      return _decodeChildren2(data, offset, offset + 1, length);\n    } else if (data[offset] >= 184) {\n      const lengthLength = data[offset] - 183;\n      checkOffset(offset + 1 + lengthLength);\n      const length = unarrayifyInteger2(data, offset + 1, lengthLength);\n      checkOffset(offset + 1 + lengthLength + length);\n      const result = hexlify2(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));\n      return { consumed: 1 + lengthLength + length, result };\n    } else if (data[offset] >= 128) {\n      const length = data[offset] - 128;\n      checkOffset(offset + 1 + length);\n      const result = hexlify2(data.slice(offset + 1, offset + 1 + length));\n      return { consumed: 1 + length, result };\n    }\n    return { consumed: 1, result: hexlifyByte(data[offset]) };\n  }\n  function decodeRlp(_data) {\n    const data = getBytes(_data, \"data\");\n    const decoded = _decode2(data, 0);\n    assertArgument(decoded.consumed === data.length, \"unexpected junk after rlp payload\", \"data\", _data);\n    return decoded.result;\n  }\n  var init_rlp_decode = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/rlp-decode.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_data();\n      init_errors2();\n      init_data();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/rlp-encode.js\n  function arrayifyInteger2(value) {\n    const result = [];\n    while (value) {\n      result.unshift(value & 255);\n      value >>= 8;\n    }\n    return result;\n  }\n  function _encode3(object2) {\n    if (Array.isArray(object2)) {\n      let payload = [];\n      object2.forEach(function(child) {\n        payload = payload.concat(_encode3(child));\n      });\n      if (payload.length <= 55) {\n        payload.unshift(192 + payload.length);\n        return payload;\n      }\n      const length2 = arrayifyInteger2(payload.length);\n      length2.unshift(247 + length2.length);\n      return length2.concat(payload);\n    }\n    const data = Array.prototype.slice.call(getBytes(object2, \"object\"));\n    if (data.length === 1 && data[0] <= 127) {\n      return data;\n    } else if (data.length <= 55) {\n      data.unshift(128 + data.length);\n      return data;\n    }\n    const length = arrayifyInteger2(data.length);\n    length.unshift(183 + length.length);\n    return length.concat(data);\n  }\n  function encodeRlp(object2) {\n    let result = \"0x\";\n    for (const v of _encode3(object2)) {\n      result += nibbles[v >> 4];\n      result += nibbles[v & 15];\n    }\n    return result;\n  }\n  var nibbles;\n  var init_rlp_encode = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/rlp-encode.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_data();\n      nibbles = \"0123456789abcdef\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/index.js\n  var init_utils3 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_base58();\n      init_data();\n      init_errors2();\n      init_events();\n      init_fetch();\n      init_maths();\n      init_properties();\n      init_rlp_decode();\n      init_rlp_encode();\n      init_utf82();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\n  function getNames(result) {\n    return resultNames.get(result);\n  }\n  function setNames(result, names2) {\n    resultNames.set(result, names2);\n  }\n  function throwError(name, error) {\n    const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);\n    wrapped.error = error;\n    throw wrapped;\n  }\n  function toObject(names2, items, deep) {\n    if (names2.indexOf(null) >= 0) {\n      return items.map((item, index) => {\n        if (item instanceof Result) {\n          return toObject(getNames(item), item, deep);\n        }\n        return item;\n      });\n    }\n    return names2.reduce((accum, name, index) => {\n      let item = items.getValue(name);\n      if (!(name in accum)) {\n        if (deep && item instanceof Result) {\n          item = toObject(getNames(item), item, deep);\n        }\n        accum[name] = item;\n      }\n      return accum;\n    }, {});\n  }\n  function getValue(value) {\n    let bytes3 = toBeArray(value);\n    assert3(bytes3.length <= WordSize, \"value out-of-bounds\", \"BUFFER_OVERRUN\", { buffer: bytes3, length: WordSize, offset: bytes3.length });\n    if (bytes3.length !== WordSize) {\n      bytes3 = getBytesCopy(concat2([Padding.slice(bytes3.length % WordSize), bytes3]));\n    }\n    return bytes3;\n  }\n  var WordSize, Padding, passProperties, _guard, resultNames, Result, Coder2, Writer2, Reader2;\n  var init_abstract_coder2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_utils3();\n      WordSize = 32;\n      Padding = new Uint8Array(WordSize);\n      passProperties = [\"then\"];\n      _guard = {};\n      resultNames = /* @__PURE__ */ new WeakMap();\n      Result = class _Result extends Array {\n        // No longer used; but cannot be removed as it will remove the\n        // #private field from the .d.ts which may break backwards\n        // compatibility\n        #names;\n        /**\n         *  @private\n         */\n        constructor(...args) {\n          const guard = args[0];\n          let items = args[1];\n          let names2 = (args[2] || []).slice();\n          let wrap = true;\n          if (guard !== _guard) {\n            items = args;\n            names2 = [];\n            wrap = false;\n          }\n          super(items.length);\n          items.forEach((item, index) => {\n            this[index] = item;\n          });\n          const nameCounts = names2.reduce((accum, name) => {\n            if (typeof name === \"string\") {\n              accum.set(name, (accum.get(name) || 0) + 1);\n            }\n            return accum;\n          }, /* @__PURE__ */ new Map());\n          setNames(this, Object.freeze(items.map((item, index) => {\n            const name = names2[index];\n            if (name != null && nameCounts.get(name) === 1) {\n              return name;\n            }\n            return null;\n          })));\n          this.#names = [];\n          if (this.#names == null) {\n            void this.#names;\n          }\n          if (!wrap) {\n            return;\n          }\n          Object.freeze(this);\n          const proxy = new Proxy(this, {\n            get: (target, prop, receiver) => {\n              if (typeof prop === \"string\") {\n                if (prop.match(/^[0-9]+$/)) {\n                  const index = getNumber(prop, \"%index\");\n                  if (index < 0 || index >= this.length) {\n                    throw new RangeError(\"out of result range\");\n                  }\n                  const item = target[index];\n                  if (item instanceof Error) {\n                    throwError(`index ${index}`, item);\n                  }\n                  return item;\n                }\n                if (passProperties.indexOf(prop) >= 0) {\n                  return Reflect.get(target, prop, receiver);\n                }\n                const value = target[prop];\n                if (value instanceof Function) {\n                  return function(...args2) {\n                    return value.apply(this === receiver ? target : this, args2);\n                  };\n                } else if (!(prop in target)) {\n                  return target.getValue.apply(this === receiver ? target : this, [prop]);\n                }\n              }\n              return Reflect.get(target, prop, receiver);\n            }\n          });\n          setNames(proxy, getNames(this));\n          return proxy;\n        }\n        /**\n         *  Returns the Result as a normal Array. If %%deep%%, any children\n         *  which are Result objects are also converted to a normal Array.\n         *\n         *  This will throw if there are any outstanding deferred\n         *  errors.\n         */\n        toArray(deep) {\n          const result = [];\n          this.forEach((item, index) => {\n            if (item instanceof Error) {\n              throwError(`index ${index}`, item);\n            }\n            if (deep && item instanceof _Result) {\n              item = item.toArray(deep);\n            }\n            result.push(item);\n          });\n          return result;\n        }\n        /**\n         *  Returns the Result as an Object with each name-value pair. If\n         *  %%deep%%, any children which are Result objects are also\n         *  converted to an Object.\n         *\n         *  This will throw if any value is unnamed, or if there are\n         *  any outstanding deferred errors.\n         */\n        toObject(deep) {\n          const names2 = getNames(this);\n          return names2.reduce((accum, name, index) => {\n            assert3(name != null, `value at index ${index} unnamed`, \"UNSUPPORTED_OPERATION\", {\n              operation: \"toObject()\"\n            });\n            return toObject(names2, this, deep);\n          }, {});\n        }\n        /**\n         *  @_ignore\n         */\n        slice(start, end) {\n          if (start == null) {\n            start = 0;\n          }\n          if (start < 0) {\n            start += this.length;\n            if (start < 0) {\n              start = 0;\n            }\n          }\n          if (end == null) {\n            end = this.length;\n          }\n          if (end < 0) {\n            end += this.length;\n            if (end < 0) {\n              end = 0;\n            }\n          }\n          if (end > this.length) {\n            end = this.length;\n          }\n          const _names = getNames(this);\n          const result = [], names2 = [];\n          for (let i = start; i < end; i++) {\n            result.push(this[i]);\n            names2.push(_names[i]);\n          }\n          return new _Result(_guard, result, names2);\n        }\n        /**\n         *  @_ignore\n         */\n        filter(callback, thisArg) {\n          const _names = getNames(this);\n          const result = [], names2 = [];\n          for (let i = 0; i < this.length; i++) {\n            const item = this[i];\n            if (item instanceof Error) {\n              throwError(`index ${i}`, item);\n            }\n            if (callback.call(thisArg, item, i, this)) {\n              result.push(item);\n              names2.push(_names[i]);\n            }\n          }\n          return new _Result(_guard, result, names2);\n        }\n        /**\n         *  @_ignore\n         */\n        map(callback, thisArg) {\n          const result = [];\n          for (let i = 0; i < this.length; i++) {\n            const item = this[i];\n            if (item instanceof Error) {\n              throwError(`index ${i}`, item);\n            }\n            result.push(callback.call(thisArg, item, i, this));\n          }\n          return result;\n        }\n        /**\n         *  Returns the value for %%name%%.\n         *\n         *  Since it is possible to have a key whose name conflicts with\n         *  a method on a [[Result]] or its superclass Array, or any\n         *  JavaScript keyword, this ensures all named values are still\n         *  accessible by name.\n         */\n        getValue(name) {\n          const index = getNames(this).indexOf(name);\n          if (index === -1) {\n            return void 0;\n          }\n          const value = this[index];\n          if (value instanceof Error) {\n            throwError(`property ${JSON.stringify(name)}`, value.error);\n          }\n          return value;\n        }\n        /**\n         *  Creates a new [[Result]] for %%items%% with each entry\n         *  also accessible by its corresponding name in %%keys%%.\n         */\n        static fromItems(items, keys) {\n          return new _Result(_guard, items, keys);\n        }\n      };\n      Coder2 = class {\n        // The coder name:\n        //   - address, uint256, tuple, array, etc.\n        name;\n        // The fully expanded type, including composite types:\n        //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.\n        type;\n        // The localName bound in the signature, in this example it is \"baz\":\n        //   - tuple(address foo, uint bar) baz\n        localName;\n        // Whether this type is dynamic:\n        //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.\n        //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)\n        dynamic;\n        constructor(name, type, localName, dynamic) {\n          defineProperties(this, { name, type, localName, dynamic }, {\n            name: \"string\",\n            type: \"string\",\n            localName: \"string\",\n            dynamic: \"boolean\"\n          });\n        }\n        _throwError(message, value) {\n          assertArgument(false, message, this.localName, value);\n        }\n      };\n      Writer2 = class {\n        // An array of WordSize lengthed objects to concatenation\n        #data;\n        #dataLength;\n        constructor() {\n          this.#data = [];\n          this.#dataLength = 0;\n        }\n        get data() {\n          return concat2(this.#data);\n        }\n        get length() {\n          return this.#dataLength;\n        }\n        #writeData(data) {\n          this.#data.push(data);\n          this.#dataLength += data.length;\n          return data.length;\n        }\n        appendWriter(writer) {\n          return this.#writeData(getBytesCopy(writer.data));\n        }\n        // Arrayish item; pad on the right to *nearest* WordSize\n        writeBytes(value) {\n          let bytes3 = getBytesCopy(value);\n          const paddingOffset = bytes3.length % WordSize;\n          if (paddingOffset) {\n            bytes3 = getBytesCopy(concat2([bytes3, Padding.slice(paddingOffset)]));\n          }\n          return this.#writeData(bytes3);\n        }\n        // Numeric item; pad on the left *to* WordSize\n        writeValue(value) {\n          return this.#writeData(getValue(value));\n        }\n        // Inserts a numeric place-holder, returning a callback that can\n        // be used to asjust the value later\n        writeUpdatableValue() {\n          const offset = this.#data.length;\n          this.#data.push(Padding);\n          this.#dataLength += WordSize;\n          return (value) => {\n            this.#data[offset] = getValue(value);\n          };\n        }\n      };\n      Reader2 = class _Reader {\n        // Allows incomplete unpadded data to be read; otherwise an error\n        // is raised if attempting to overrun the buffer. This is required\n        // to deal with an old Solidity bug, in which event data for\n        // external (not public thoguh) was tightly packed.\n        allowLoose;\n        #data;\n        #offset;\n        #bytesRead;\n        #parent;\n        #maxInflation;\n        constructor(data, allowLoose, maxInflation) {\n          defineProperties(this, { allowLoose: !!allowLoose });\n          this.#data = getBytesCopy(data);\n          this.#bytesRead = 0;\n          this.#parent = null;\n          this.#maxInflation = maxInflation != null ? maxInflation : 1024;\n          this.#offset = 0;\n        }\n        get data() {\n          return hexlify2(this.#data);\n        }\n        get dataLength() {\n          return this.#data.length;\n        }\n        get consumed() {\n          return this.#offset;\n        }\n        get bytes() {\n          return new Uint8Array(this.#data);\n        }\n        #incrementBytesRead(count) {\n          if (this.#parent) {\n            return this.#parent.#incrementBytesRead(count);\n          }\n          this.#bytesRead += count;\n          assert3(this.#maxInflation < 1 || this.#bytesRead <= this.#maxInflation * this.dataLength, `compressed ABI data exceeds inflation ratio of ${this.#maxInflation} ( see: https://github.com/ethers-io/ethers.js/issues/4537 )`, \"BUFFER_OVERRUN\", {\n            buffer: getBytesCopy(this.#data),\n            offset: this.#offset,\n            length: count,\n            info: {\n              bytesRead: this.#bytesRead,\n              dataLength: this.dataLength\n            }\n          });\n        }\n        #peekBytes(offset, length, loose) {\n          let alignedLength = Math.ceil(length / WordSize) * WordSize;\n          if (this.#offset + alignedLength > this.#data.length) {\n            if (this.allowLoose && loose && this.#offset + length <= this.#data.length) {\n              alignedLength = length;\n            } else {\n              assert3(false, \"data out-of-bounds\", \"BUFFER_OVERRUN\", {\n                buffer: getBytesCopy(this.#data),\n                length: this.#data.length,\n                offset: this.#offset + alignedLength\n              });\n            }\n          }\n          return this.#data.slice(this.#offset, this.#offset + alignedLength);\n        }\n        // Create a sub-reader with the same underlying data, but offset\n        subReader(offset) {\n          const reader = new _Reader(this.#data.slice(this.#offset + offset), this.allowLoose, this.#maxInflation);\n          reader.#parent = this;\n          return reader;\n        }\n        // Read bytes\n        readBytes(length, loose) {\n          let bytes3 = this.#peekBytes(0, length, !!loose);\n          this.#incrementBytesRead(length);\n          this.#offset += bytes3.length;\n          return bytes3.slice(0, length);\n        }\n        // Read a numeric values\n        readValue() {\n          return toBigInt(this.readBytes(WordSize));\n        }\n        readIndex() {\n          return toNumber(this.readBytes(WordSize));\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/_assert.js\n  function number(n2) {\n    if (!Number.isSafeInteger(n2) || n2 < 0)\n      throw new Error(`Wrong positive integer: ${n2}`);\n  }\n  function bytes(b2, ...lengths) {\n    if (!(b2 instanceof Uint8Array))\n      throw new Error(\"Expected Uint8Array\");\n    if (lengths.length > 0 && !lengths.includes(b2.length))\n      throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b2.length}`);\n  }\n  function hash3(hash4) {\n    if (typeof hash4 !== \"function\" || typeof hash4.create !== \"function\")\n      throw new Error(\"Hash should be wrapped by utils.wrapConstructor\");\n    number(hash4.outputLen);\n    number(hash4.blockLen);\n  }\n  function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n      throw new Error(\"Hash instance has been destroyed\");\n    if (checkFinished && instance.finished)\n      throw new Error(\"Hash#digest() has already been called\");\n  }\n  function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n      throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n  }\n  var init_assert = __esm({\n    \"../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/_assert.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/crypto.js\n  var crypto2;\n  var init_crypto = __esm({\n    \"../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/crypto.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      crypto2 = typeof globalThis === \"object\" && \"crypto\" in globalThis ? globalThis.crypto : void 0;\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/utils.js\n  function utf8ToBytes(str) {\n    if (typeof str !== \"string\")\n      throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str));\n  }\n  function toBytes(data) {\n    if (typeof data === \"string\")\n      data = utf8ToBytes(data);\n    if (!u8a(data))\n      throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n  }\n  function concatBytes(...arrays) {\n    const r2 = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0;\n    arrays.forEach((a) => {\n      if (!u8a(a))\n        throw new Error(\"Uint8Array expected\");\n      r2.set(a, pad);\n      pad += a.length;\n    });\n    return r2;\n  }\n  function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n  }\n  function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n  }\n  function randomBytes2(bytesLength = 32) {\n    if (crypto2 && typeof crypto2.getRandomValues === \"function\") {\n      return crypto2.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error(\"crypto.getRandomValues must be defined\");\n  }\n  var u8a, u32, createView, rotr, isLE, Hash, toStr;\n  var init_utils4 = __esm({\n    \"../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/utils.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_crypto();\n      u8a = (a) => a instanceof Uint8Array;\n      u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n      createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n      rotr = (word, shift) => word << 32 - shift | word >>> shift;\n      isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;\n      if (!isLE)\n        throw new Error(\"Non little-endian hardware is not supported\");\n      Hash = class {\n        // Safe version that clones internal state\n        clone() {\n          return this._cloneInto();\n        }\n      };\n      toStr = {}.toString;\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/hmac.js\n  var HMAC, hmac2;\n  var init_hmac = __esm({\n    \"../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/hmac.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_assert();\n      init_utils4();\n      HMAC = class extends Hash {\n        constructor(hash4, _key) {\n          super();\n          this.finished = false;\n          this.destroyed = false;\n          hash3(hash4);\n          const key2 = toBytes(_key);\n          this.iHash = hash4.create();\n          if (typeof this.iHash.update !== \"function\")\n            throw new Error(\"Expected instance of class which extends utils.Hash\");\n          this.blockLen = this.iHash.blockLen;\n          this.outputLen = this.iHash.outputLen;\n          const blockLen = this.blockLen;\n          const pad = new Uint8Array(blockLen);\n          pad.set(key2.length > blockLen ? hash4.create().update(key2).digest() : key2);\n          for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 54;\n          this.iHash.update(pad);\n          this.oHash = hash4.create();\n          for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 54 ^ 92;\n          this.oHash.update(pad);\n          pad.fill(0);\n        }\n        update(buf) {\n          exists(this);\n          this.iHash.update(buf);\n          return this;\n        }\n        digestInto(out) {\n          exists(this);\n          bytes(out, this.outputLen);\n          this.finished = true;\n          this.iHash.digestInto(out);\n          this.oHash.update(out);\n          this.oHash.digestInto(out);\n          this.destroy();\n        }\n        digest() {\n          const out = new Uint8Array(this.oHash.outputLen);\n          this.digestInto(out);\n          return out;\n        }\n        _cloneInto(to) {\n          to || (to = Object.create(Object.getPrototypeOf(this), {}));\n          const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n          to = to;\n          to.finished = finished;\n          to.destroyed = destroyed;\n          to.blockLen = blockLen;\n          to.outputLen = outputLen;\n          to.oHash = oHash._cloneInto(to.oHash);\n          to.iHash = iHash._cloneInto(to.iHash);\n          return to;\n        }\n        destroy() {\n          this.destroyed = true;\n          this.oHash.destroy();\n          this.iHash.destroy();\n        }\n      };\n      hmac2 = (hash4, key2, message) => new HMAC(hash4, key2).update(message).digest();\n      hmac2.create = (hash4, key2) => new HMAC(hash4, key2);\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/_sha2.js\n  function setBigUint64(view, byteOffset, value, isLE2) {\n    if (typeof view.setBigUint64 === \"function\")\n      return view.setBigUint64(byteOffset, value, isLE2);\n    const _32n2 = BigInt(32);\n    const _u32_max = BigInt(4294967295);\n    const wh = Number(value >> _32n2 & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE2 ? 4 : 0;\n    const l = isLE2 ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE2);\n    view.setUint32(byteOffset + l, wl, isLE2);\n  }\n  var SHA2;\n  var init_sha22 = __esm({\n    \"../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/_sha2.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_assert();\n      init_utils4();\n      SHA2 = class extends Hash {\n        constructor(blockLen, outputLen, padOffset, isLE2) {\n          super();\n          this.blockLen = blockLen;\n          this.outputLen = outputLen;\n          this.padOffset = padOffset;\n          this.isLE = isLE2;\n          this.finished = false;\n          this.length = 0;\n          this.pos = 0;\n          this.destroyed = false;\n          this.buffer = new Uint8Array(blockLen);\n          this.view = createView(this.buffer);\n        }\n        update(data) {\n          exists(this);\n          const { view, buffer, blockLen } = this;\n          data = toBytes(data);\n          const len = data.length;\n          for (let pos = 0; pos < len; ) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            if (take === blockLen) {\n              const dataView = createView(data);\n              for (; blockLen <= len - pos; pos += blockLen)\n                this.process(dataView, pos);\n              continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n              this.process(view, 0);\n              this.pos = 0;\n            }\n          }\n          this.length += data.length;\n          this.roundClean();\n          return this;\n        }\n        digestInto(out) {\n          exists(this);\n          output(out, this);\n          this.finished = true;\n          const { buffer, view, blockLen, isLE: isLE2 } = this;\n          let { pos } = this;\n          buffer[pos++] = 128;\n          this.buffer.subarray(pos).fill(0);\n          if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n          }\n          for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n          setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);\n          this.process(view, 0);\n          const oview = createView(out);\n          const len = this.outputLen;\n          if (len % 4)\n            throw new Error(\"_sha2: outputLen should be aligned to 32bit\");\n          const outLen = len / 4;\n          const state = this.get();\n          if (outLen > state.length)\n            throw new Error(\"_sha2: outputLen bigger than state\");\n          for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE2);\n        }\n        digest() {\n          const { buffer, outputLen } = this;\n          this.digestInto(buffer);\n          const res = buffer.slice(0, outputLen);\n          this.destroy();\n          return res;\n        }\n        _cloneInto(to) {\n          to || (to = new this.constructor());\n          to.set(...this.get());\n          const { blockLen, buffer, length, finished, destroyed, pos } = this;\n          to.length = length;\n          to.pos = pos;\n          to.finished = finished;\n          to.destroyed = destroyed;\n          if (length % blockLen)\n            to.buffer.set(buffer);\n          return to;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/sha256.js\n  var Chi, Maj, SHA256_K, IV, SHA256_W, SHA256, sha2563;\n  var init_sha256 = __esm({\n    \"../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/sha256.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_sha22();\n      init_utils4();\n      Chi = (a, b2, c) => a & b2 ^ ~a & c;\n      Maj = (a, b2, c) => a & b2 ^ a & c ^ b2 & c;\n      SHA256_K = /* @__PURE__ */ new Uint32Array([\n        1116352408,\n        1899447441,\n        3049323471,\n        3921009573,\n        961987163,\n        1508970993,\n        2453635748,\n        2870763221,\n        3624381080,\n        310598401,\n        607225278,\n        1426881987,\n        1925078388,\n        2162078206,\n        2614888103,\n        3248222580,\n        3835390401,\n        4022224774,\n        264347078,\n        604807628,\n        770255983,\n        1249150122,\n        1555081692,\n        1996064986,\n        2554220882,\n        2821834349,\n        2952996808,\n        3210313671,\n        3336571891,\n        3584528711,\n        113926993,\n        338241895,\n        666307205,\n        773529912,\n        1294757372,\n        1396182291,\n        1695183700,\n        1986661051,\n        2177026350,\n        2456956037,\n        2730485921,\n        2820302411,\n        3259730800,\n        3345764771,\n        3516065817,\n        3600352804,\n        4094571909,\n        275423344,\n        430227734,\n        506948616,\n        659060556,\n        883997877,\n        958139571,\n        1322822218,\n        1537002063,\n        1747873779,\n        1955562222,\n        2024104815,\n        2227730452,\n        2361852424,\n        2428436474,\n        2756734187,\n        3204031479,\n        3329325298\n      ]);\n      IV = /* @__PURE__ */ new Uint32Array([\n        1779033703,\n        3144134277,\n        1013904242,\n        2773480762,\n        1359893119,\n        2600822924,\n        528734635,\n        1541459225\n      ]);\n      SHA256_W = /* @__PURE__ */ new Uint32Array(64);\n      SHA256 = class extends SHA2 {\n        constructor() {\n          super(64, 32, 8, false);\n          this.A = IV[0] | 0;\n          this.B = IV[1] | 0;\n          this.C = IV[2] | 0;\n          this.D = IV[3] | 0;\n          this.E = IV[4] | 0;\n          this.F = IV[5] | 0;\n          this.G = IV[6] | 0;\n          this.H = IV[7] | 0;\n        }\n        get() {\n          const { A, B, C, D, E, F, G, H } = this;\n          return [A, B, C, D, E, F, G, H];\n        }\n        // prettier-ignore\n        set(A, B, C, D, E, F, G, H) {\n          this.A = A | 0;\n          this.B = B | 0;\n          this.C = C | 0;\n          this.D = D | 0;\n          this.E = E | 0;\n          this.F = F | 0;\n          this.G = G | 0;\n          this.H = H | 0;\n        }\n        process(view, offset) {\n          for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n          for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;\n            SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;\n          }\n          let { A, B, C, D, E, F, G, H } = this;\n          for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T12 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = sigma0 + Maj(A, B, C) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = D + T12 | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = T12 + T2 | 0;\n          }\n          A = A + this.A | 0;\n          B = B + this.B | 0;\n          C = C + this.C | 0;\n          D = D + this.D | 0;\n          E = E + this.E | 0;\n          F = F + this.F | 0;\n          G = G + this.G | 0;\n          H = H + this.H | 0;\n          this.set(A, B, C, D, E, F, G, H);\n        }\n        roundClean() {\n          SHA256_W.fill(0);\n        }\n        destroy() {\n          this.set(0, 0, 0, 0, 0, 0, 0, 0);\n          this.buffer.fill(0);\n        }\n      };\n      sha2563 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/_u64.js\n  function fromBig(n2, le = false) {\n    if (le)\n      return { h: Number(n2 & U32_MASK64), l: Number(n2 >> _32n & U32_MASK64) };\n    return { h: Number(n2 >> _32n & U32_MASK64) | 0, l: Number(n2 & U32_MASK64) | 0 };\n  }\n  function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n      const { h, l } = fromBig(lst[i], le);\n      [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n  }\n  function add3(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };\n  }\n  var U32_MASK64, _32n, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add3L, add3H, add4L, add4H, add5L, add5H, u64, u64_default;\n  var init_u64 = __esm({\n    \"../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/_u64.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\n      _32n = /* @__PURE__ */ BigInt(32);\n      toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);\n      shrSH = (h, _l, s) => h >>> s;\n      shrSL = (h, l, s) => h << 32 - s | l >>> s;\n      rotrSH = (h, l, s) => h >>> s | l << 32 - s;\n      rotrSL = (h, l, s) => h << 32 - s | l >>> s;\n      rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;\n      rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;\n      rotr32H = (_h, l) => l;\n      rotr32L = (h, _l) => h;\n      rotlSH = (h, l, s) => h << s | l >>> 32 - s;\n      rotlSL = (h, l, s) => l << s | h >>> 32 - s;\n      rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;\n      rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;\n      add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\n      add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\n      add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\n      add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\n      add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\n      add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;\n      u64 = {\n        fromBig,\n        split,\n        toBig,\n        shrSH,\n        shrSL,\n        rotrSH,\n        rotrSL,\n        rotrBH,\n        rotrBL,\n        rotr32H,\n        rotr32L,\n        rotlSH,\n        rotlSL,\n        rotlBH,\n        rotlBL,\n        add: add3,\n        add3L,\n        add3H,\n        add4L,\n        add4H,\n        add5H,\n        add5L\n      };\n      u64_default = u64;\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/sha512.js\n  var SHA512_Kh, SHA512_Kl, SHA512_W_H, SHA512_W_L, SHA512, sha5122;\n  var init_sha512 = __esm({\n    \"../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/sha512.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_sha22();\n      init_u64();\n      init_utils4();\n      [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64_default.split([\n        \"0x428a2f98d728ae22\",\n        \"0x7137449123ef65cd\",\n        \"0xb5c0fbcfec4d3b2f\",\n        \"0xe9b5dba58189dbbc\",\n        \"0x3956c25bf348b538\",\n        \"0x59f111f1b605d019\",\n        \"0x923f82a4af194f9b\",\n        \"0xab1c5ed5da6d8118\",\n        \"0xd807aa98a3030242\",\n        \"0x12835b0145706fbe\",\n        \"0x243185be4ee4b28c\",\n        \"0x550c7dc3d5ffb4e2\",\n        \"0x72be5d74f27b896f\",\n        \"0x80deb1fe3b1696b1\",\n        \"0x9bdc06a725c71235\",\n        \"0xc19bf174cf692694\",\n        \"0xe49b69c19ef14ad2\",\n        \"0xefbe4786384f25e3\",\n        \"0x0fc19dc68b8cd5b5\",\n        \"0x240ca1cc77ac9c65\",\n        \"0x2de92c6f592b0275\",\n        \"0x4a7484aa6ea6e483\",\n        \"0x5cb0a9dcbd41fbd4\",\n        \"0x76f988da831153b5\",\n        \"0x983e5152ee66dfab\",\n        \"0xa831c66d2db43210\",\n        \"0xb00327c898fb213f\",\n        \"0xbf597fc7beef0ee4\",\n        \"0xc6e00bf33da88fc2\",\n        \"0xd5a79147930aa725\",\n        \"0x06ca6351e003826f\",\n        \"0x142929670a0e6e70\",\n        \"0x27b70a8546d22ffc\",\n        \"0x2e1b21385c26c926\",\n        \"0x4d2c6dfc5ac42aed\",\n        \"0x53380d139d95b3df\",\n        \"0x650a73548baf63de\",\n        \"0x766a0abb3c77b2a8\",\n        \"0x81c2c92e47edaee6\",\n        \"0x92722c851482353b\",\n        \"0xa2bfe8a14cf10364\",\n        \"0xa81a664bbc423001\",\n        \"0xc24b8b70d0f89791\",\n        \"0xc76c51a30654be30\",\n        \"0xd192e819d6ef5218\",\n        \"0xd69906245565a910\",\n        \"0xf40e35855771202a\",\n        \"0x106aa07032bbd1b8\",\n        \"0x19a4c116b8d2d0c8\",\n        \"0x1e376c085141ab53\",\n        \"0x2748774cdf8eeb99\",\n        \"0x34b0bcb5e19b48a8\",\n        \"0x391c0cb3c5c95a63\",\n        \"0x4ed8aa4ae3418acb\",\n        \"0x5b9cca4f7763e373\",\n        \"0x682e6ff3d6b2b8a3\",\n        \"0x748f82ee5defb2fc\",\n        \"0x78a5636f43172f60\",\n        \"0x84c87814a1f0ab72\",\n        \"0x8cc702081a6439ec\",\n        \"0x90befffa23631e28\",\n        \"0xa4506cebde82bde9\",\n        \"0xbef9a3f7b2c67915\",\n        \"0xc67178f2e372532b\",\n        \"0xca273eceea26619c\",\n        \"0xd186b8c721c0c207\",\n        \"0xeada7dd6cde0eb1e\",\n        \"0xf57d4f7fee6ed178\",\n        \"0x06f067aa72176fba\",\n        \"0x0a637dc5a2c898a6\",\n        \"0x113f9804bef90dae\",\n        \"0x1b710b35131c471b\",\n        \"0x28db77f523047d84\",\n        \"0x32caab7b40c72493\",\n        \"0x3c9ebe0a15c9bebc\",\n        \"0x431d67c49c100d4c\",\n        \"0x4cc5d4becb3e42b6\",\n        \"0x597f299cfc657e2a\",\n        \"0x5fcb6fab3ad6faec\",\n        \"0x6c44198c4a475817\"\n      ].map((n2) => BigInt(n2))))();\n      SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\n      SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\n      SHA512 = class extends SHA2 {\n        constructor() {\n          super(128, 64, 16, false);\n          this.Ah = 1779033703 | 0;\n          this.Al = 4089235720 | 0;\n          this.Bh = 3144134277 | 0;\n          this.Bl = 2227873595 | 0;\n          this.Ch = 1013904242 | 0;\n          this.Cl = 4271175723 | 0;\n          this.Dh = 2773480762 | 0;\n          this.Dl = 1595750129 | 0;\n          this.Eh = 1359893119 | 0;\n          this.El = 2917565137 | 0;\n          this.Fh = 2600822924 | 0;\n          this.Fl = 725511199 | 0;\n          this.Gh = 528734635 | 0;\n          this.Gl = 4215389547 | 0;\n          this.Hh = 1541459225 | 0;\n          this.Hl = 327033209 | 0;\n        }\n        // prettier-ignore\n        get() {\n          const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n          return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n        }\n        // prettier-ignore\n        set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n          this.Ah = Ah | 0;\n          this.Al = Al | 0;\n          this.Bh = Bh | 0;\n          this.Bl = Bl | 0;\n          this.Ch = Ch | 0;\n          this.Cl = Cl | 0;\n          this.Dh = Dh | 0;\n          this.Dl = Dl | 0;\n          this.Eh = Eh | 0;\n          this.El = El | 0;\n          this.Fh = Fh | 0;\n          this.Fl = Fl | 0;\n          this.Gh = Gh | 0;\n          this.Gl = Gl | 0;\n          this.Hh = Hh | 0;\n          this.Hl = Hl | 0;\n        }\n        process(view, offset) {\n          for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32(offset += 4);\n          }\n          for (let i = 16; i < 80; i++) {\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64_default.rotrSH(W15h, W15l, 1) ^ u64_default.rotrSH(W15h, W15l, 8) ^ u64_default.shrSH(W15h, W15l, 7);\n            const s0l = u64_default.rotrSL(W15h, W15l, 1) ^ u64_default.rotrSL(W15h, W15l, 8) ^ u64_default.shrSL(W15h, W15l, 7);\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64_default.rotrSH(W2h, W2l, 19) ^ u64_default.rotrBH(W2h, W2l, 61) ^ u64_default.shrSH(W2h, W2l, 6);\n            const s1l = u64_default.rotrSL(W2h, W2l, 19) ^ u64_default.rotrBL(W2h, W2l, 61) ^ u64_default.shrSL(W2h, W2l, 6);\n            const SUMl = u64_default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64_default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n          }\n          let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n          for (let i = 0; i < 80; i++) {\n            const sigma1h = u64_default.rotrSH(Eh, El, 14) ^ u64_default.rotrSH(Eh, El, 18) ^ u64_default.rotrBH(Eh, El, 41);\n            const sigma1l = u64_default.rotrSL(Eh, El, 14) ^ u64_default.rotrSL(Eh, El, 18) ^ u64_default.rotrBL(Eh, El, 41);\n            const CHIh = Eh & Fh ^ ~Eh & Gh;\n            const CHIl = El & Fl ^ ~El & Gl;\n            const T1ll = u64_default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64_default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            const sigma0h = u64_default.rotrSH(Ah, Al, 28) ^ u64_default.rotrBH(Ah, Al, 34) ^ u64_default.rotrBH(Ah, Al, 39);\n            const sigma0l = u64_default.rotrSL(Ah, Al, 28) ^ u64_default.rotrBL(Ah, Al, 34) ^ u64_default.rotrBL(Ah, Al, 39);\n            const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;\n            const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64_default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64_default.add3L(T1l, sigma0l, MAJl);\n            Ah = u64_default.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n          }\n          ({ h: Ah, l: Al } = u64_default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n          ({ h: Bh, l: Bl } = u64_default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n          ({ h: Ch, l: Cl } = u64_default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n          ({ h: Dh, l: Dl } = u64_default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n          ({ h: Eh, l: El } = u64_default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n          ({ h: Fh, l: Fl } = u64_default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n          ({ h: Gh, l: Gl } = u64_default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n          ({ h: Hh, l: Hl } = u64_default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n          this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n        }\n        roundClean() {\n          SHA512_W_H.fill(0);\n          SHA512_W_L.fill(0);\n        }\n        destroy() {\n          this.buffer.fill(0);\n          this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n        }\n      };\n      sha5122 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/crypto/crypto-browser.js\n  function getGlobal2() {\n    if (typeof self !== \"undefined\") {\n      return self;\n    }\n    if (typeof window !== \"undefined\") {\n      return window;\n    }\n    if (typeof global !== \"undefined\") {\n      return global;\n    }\n    throw new Error(\"unable to locate global object\");\n  }\n  function createHash(algo) {\n    switch (algo) {\n      case \"sha256\":\n        return sha2563.create();\n      case \"sha512\":\n        return sha5122.create();\n    }\n    assertArgument(false, \"invalid hashing algorithm name\", \"algorithm\", algo);\n  }\n  var anyGlobal2, crypto3;\n  var init_crypto_browser = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/crypto/crypto-browser.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_sha256();\n      init_sha512();\n      init_utils3();\n      anyGlobal2 = getGlobal2();\n      crypto3 = anyGlobal2.crypto || anyGlobal2.msCrypto;\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/sha3.js\n  function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    for (let round = 24 - rounds; round < 24; round++) {\n      for (let x = 0; x < 10; x++)\n        B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n      for (let x = 0; x < 10; x += 2) {\n        const idx1 = (x + 8) % 10;\n        const idx0 = (x + 2) % 10;\n        const B0 = B[idx0];\n        const B1 = B[idx0 + 1];\n        const Th = rotlH(B0, B1, 1) ^ B[idx1];\n        const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n        for (let y = 0; y < 50; y += 10) {\n          s[x + y] ^= Th;\n          s[x + y + 1] ^= Tl;\n        }\n      }\n      let curH = s[2];\n      let curL = s[3];\n      for (let t = 0; t < 24; t++) {\n        const shift = SHA3_ROTL[t];\n        const Th = rotlH(curH, curL, shift);\n        const Tl = rotlL(curH, curL, shift);\n        const PI = SHA3_PI[t];\n        curH = s[PI];\n        curL = s[PI + 1];\n        s[PI] = Th;\n        s[PI + 1] = Tl;\n      }\n      for (let y = 0; y < 50; y += 10) {\n        for (let x = 0; x < 10; x++)\n          B[x] = s[y + x];\n        for (let x = 0; x < 10; x++)\n          s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n      }\n      s[0] ^= SHA3_IOTA_H[round];\n      s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n  }\n  var SHA3_PI, SHA3_ROTL, _SHA3_IOTA, _0n, _1n, _2n, _7n, _256n, _0x71n, SHA3_IOTA_H, SHA3_IOTA_L, rotlH, rotlL, Keccak, gen, sha3_224, sha3_256, sha3_384, sha3_512, keccak_224, keccak_256, keccak_384, keccak_512, genShake, shake128, shake256;\n  var init_sha3 = __esm({\n    \"../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/sha3.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_assert();\n      init_u64();\n      init_utils4();\n      [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\n      _0n = /* @__PURE__ */ BigInt(0);\n      _1n = /* @__PURE__ */ BigInt(1);\n      _2n = /* @__PURE__ */ BigInt(2);\n      _7n = /* @__PURE__ */ BigInt(7);\n      _256n = /* @__PURE__ */ BigInt(256);\n      _0x71n = /* @__PURE__ */ BigInt(113);\n      for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n        [x, y] = [y, (2 * x + 3 * y) % 5];\n        SHA3_PI.push(2 * (5 * y + x));\n        SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);\n        let t = _0n;\n        for (let j = 0; j < 7; j++) {\n          R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;\n          if (R & _2n)\n            t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;\n        }\n        _SHA3_IOTA.push(t);\n      }\n      [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n      rotlH = (h, l, s) => s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s);\n      rotlL = (h, l, s) => s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s);\n      Keccak = class _Keccak extends Hash {\n        // NOTE: we accept arguments in bytes instead of bits here.\n        constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n          super();\n          this.blockLen = blockLen;\n          this.suffix = suffix;\n          this.outputLen = outputLen;\n          this.enableXOF = enableXOF;\n          this.rounds = rounds;\n          this.pos = 0;\n          this.posOut = 0;\n          this.finished = false;\n          this.destroyed = false;\n          number(outputLen);\n          if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error(\"Sha3 supports only keccak-f1600 function\");\n          this.state = new Uint8Array(200);\n          this.state32 = u32(this.state);\n        }\n        keccak() {\n          keccakP(this.state32, this.rounds);\n          this.posOut = 0;\n          this.pos = 0;\n        }\n        update(data) {\n          exists(this);\n          const { blockLen, state } = this;\n          data = toBytes(data);\n          const len = data.length;\n          for (let pos = 0; pos < len; ) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n              state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n              this.keccak();\n          }\n          return this;\n        }\n        finish() {\n          if (this.finished)\n            return;\n          this.finished = true;\n          const { state, suffix, pos, blockLen } = this;\n          state[pos] ^= suffix;\n          if ((suffix & 128) !== 0 && pos === blockLen - 1)\n            this.keccak();\n          state[blockLen - 1] ^= 128;\n          this.keccak();\n        }\n        writeInto(out) {\n          exists(this, false);\n          bytes(out);\n          this.finish();\n          const bufferOut = this.state;\n          const { blockLen } = this;\n          for (let pos = 0, len = out.length; pos < len; ) {\n            if (this.posOut >= blockLen)\n              this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n          }\n          return out;\n        }\n        xofInto(out) {\n          if (!this.enableXOF)\n            throw new Error(\"XOF is not possible for this instance\");\n          return this.writeInto(out);\n        }\n        xof(bytes3) {\n          number(bytes3);\n          return this.xofInto(new Uint8Array(bytes3));\n        }\n        digestInto(out) {\n          output(out, this);\n          if (this.finished)\n            throw new Error(\"digest() was already called\");\n          this.writeInto(out);\n          this.destroy();\n          return out;\n        }\n        digest() {\n          return this.digestInto(new Uint8Array(this.outputLen));\n        }\n        destroy() {\n          this.destroyed = true;\n          this.state.fill(0);\n        }\n        _cloneInto(to) {\n          const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n          to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n          to.state32.set(this.state32);\n          to.pos = this.pos;\n          to.posOut = this.posOut;\n          to.finished = this.finished;\n          to.rounds = rounds;\n          to.suffix = suffix;\n          to.outputLen = outputLen;\n          to.enableXOF = enableXOF;\n          to.destroyed = this.destroyed;\n          return to;\n        }\n      };\n      gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n      sha3_224 = /* @__PURE__ */ gen(6, 144, 224 / 8);\n      sha3_256 = /* @__PURE__ */ gen(6, 136, 256 / 8);\n      sha3_384 = /* @__PURE__ */ gen(6, 104, 384 / 8);\n      sha3_512 = /* @__PURE__ */ gen(6, 72, 512 / 8);\n      keccak_224 = /* @__PURE__ */ gen(1, 144, 224 / 8);\n      keccak_256 = /* @__PURE__ */ gen(1, 136, 256 / 8);\n      keccak_384 = /* @__PURE__ */ gen(1, 104, 384 / 8);\n      keccak_512 = /* @__PURE__ */ gen(1, 72, 512 / 8);\n      genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));\n      shake128 = /* @__PURE__ */ genShake(31, 168, 128 / 8);\n      shake256 = /* @__PURE__ */ genShake(31, 136, 256 / 8);\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/crypto/keccak.js\n  function keccak2563(_data) {\n    const data = getBytes(_data, \"data\");\n    return hexlify2(__keccak256(data));\n  }\n  var locked2, _keccak256, __keccak256;\n  var init_keccak = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/crypto/keccak.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_sha3();\n      init_utils3();\n      locked2 = false;\n      _keccak256 = function(data) {\n        return keccak_256(data);\n      };\n      __keccak256 = _keccak256;\n      keccak2563._ = _keccak256;\n      keccak2563.lock = function() {\n        locked2 = true;\n      };\n      keccak2563.register = function(func) {\n        if (locked2) {\n          throw new TypeError(\"keccak256 is locked\");\n        }\n        __keccak256 = func;\n      };\n      Object.freeze(keccak2563);\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/crypto/sha2.js\n  function sha2564(_data) {\n    const data = getBytes(_data, \"data\");\n    return hexlify2(__sha256(data));\n  }\n  function sha5123(_data) {\n    const data = getBytes(_data, \"data\");\n    return hexlify2(__sha512(data));\n  }\n  var _sha256, _sha512, __sha256, __sha512, locked256, locked512;\n  var init_sha23 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/crypto/sha2.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_crypto_browser();\n      init_utils3();\n      _sha256 = function(data) {\n        return createHash(\"sha256\").update(data).digest();\n      };\n      _sha512 = function(data) {\n        return createHash(\"sha512\").update(data).digest();\n      };\n      __sha256 = _sha256;\n      __sha512 = _sha512;\n      locked256 = false;\n      locked512 = false;\n      sha2564._ = _sha256;\n      sha2564.lock = function() {\n        locked256 = true;\n      };\n      sha2564.register = function(func) {\n        if (locked256) {\n          throw new Error(\"sha256 is locked\");\n        }\n        __sha256 = func;\n      };\n      Object.freeze(sha2564);\n      sha5123._ = _sha512;\n      sha5123.lock = function() {\n        locked512 = true;\n      };\n      sha5123.register = function(func) {\n        if (locked512) {\n          throw new Error(\"sha512 is locked\");\n        }\n        __sha512 = func;\n      };\n      Object.freeze(sha2564);\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@noble+curves@1.2.0/node_modules/@noble/curves/esm/abstract/utils.js\n  var utils_exports2 = {};\n  __export(utils_exports2, {\n    bitGet: () => bitGet,\n    bitLen: () => bitLen,\n    bitMask: () => bitMask,\n    bitSet: () => bitSet,\n    bytesToHex: () => bytesToHex,\n    bytesToNumberBE: () => bytesToNumberBE,\n    bytesToNumberLE: () => bytesToNumberLE,\n    concatBytes: () => concatBytes2,\n    createHmacDrbg: () => createHmacDrbg,\n    ensureBytes: () => ensureBytes,\n    equalBytes: () => equalBytes,\n    hexToBytes: () => hexToBytes,\n    hexToNumber: () => hexToNumber,\n    numberToBytesBE: () => numberToBytesBE,\n    numberToBytesLE: () => numberToBytesLE,\n    numberToHexUnpadded: () => numberToHexUnpadded,\n    numberToVarBytesBE: () => numberToVarBytesBE,\n    utf8ToBytes: () => utf8ToBytes2,\n    validateObject: () => validateObject\n  });\n  function bytesToHex(bytes3) {\n    if (!u8a2(bytes3))\n      throw new Error(\"Uint8Array expected\");\n    let hex = \"\";\n    for (let i = 0; i < bytes3.length; i++) {\n      hex += hexes[bytes3[i]];\n    }\n    return hex;\n  }\n  function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n  }\n  function hexToNumber(hex) {\n    if (typeof hex !== \"string\")\n      throw new Error(\"hex string expected, got \" + typeof hex);\n    return BigInt(hex === \"\" ? \"0\" : `0x${hex}`);\n  }\n  function hexToBytes(hex) {\n    if (typeof hex !== \"string\")\n      throw new Error(\"hex string expected, got \" + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n      throw new Error(\"padded hex string expected, got unpadded hex of length \" + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n      const j = i * 2;\n      const hexByte = hex.slice(j, j + 2);\n      const byte = Number.parseInt(hexByte, 16);\n      if (Number.isNaN(byte) || byte < 0)\n        throw new Error(\"Invalid byte sequence\");\n      array[i] = byte;\n    }\n    return array;\n  }\n  function bytesToNumberBE(bytes3) {\n    return hexToNumber(bytesToHex(bytes3));\n  }\n  function bytesToNumberLE(bytes3) {\n    if (!u8a2(bytes3))\n      throw new Error(\"Uint8Array expected\");\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes3).reverse()));\n  }\n  function numberToBytesBE(n2, len) {\n    return hexToBytes(n2.toString(16).padStart(len * 2, \"0\"));\n  }\n  function numberToBytesLE(n2, len) {\n    return numberToBytesBE(n2, len).reverse();\n  }\n  function numberToVarBytesBE(n2) {\n    return hexToBytes(numberToHexUnpadded(n2));\n  }\n  function ensureBytes(title2, hex, expectedLength) {\n    let res;\n    if (typeof hex === \"string\") {\n      try {\n        res = hexToBytes(hex);\n      } catch (e) {\n        throw new Error(`${title2} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n      }\n    } else if (u8a2(hex)) {\n      res = Uint8Array.from(hex);\n    } else {\n      throw new Error(`${title2} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === \"number\" && len !== expectedLength)\n      throw new Error(`${title2} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n  }\n  function concatBytes2(...arrays) {\n    const r2 = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0;\n    arrays.forEach((a) => {\n      if (!u8a2(a))\n        throw new Error(\"Uint8Array expected\");\n      r2.set(a, pad);\n      pad += a.length;\n    });\n    return r2;\n  }\n  function equalBytes(b1, b2) {\n    if (b1.length !== b2.length)\n      return false;\n    for (let i = 0; i < b1.length; i++)\n      if (b1[i] !== b2[i])\n        return false;\n    return true;\n  }\n  function utf8ToBytes2(str) {\n    if (typeof str !== \"string\")\n      throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str));\n  }\n  function bitLen(n2) {\n    let len;\n    for (len = 0; n2 > _0n2; n2 >>= _1n2, len += 1)\n      ;\n    return len;\n  }\n  function bitGet(n2, pos) {\n    return n2 >> BigInt(pos) & _1n2;\n  }\n  function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== \"number\" || hashLen < 2)\n      throw new Error(\"hashLen must be a number\");\n    if (typeof qByteLen !== \"number\" || qByteLen < 2)\n      throw new Error(\"qByteLen must be a number\");\n    if (typeof hmacFn !== \"function\")\n      throw new Error(\"hmacFn must be a function\");\n    let v = u8n(hashLen);\n    let k = u8n(hashLen);\n    let i = 0;\n    const reset = () => {\n      v.fill(1);\n      k.fill(0);\n      i = 0;\n    };\n    const h = (...b2) => hmacFn(k, v, ...b2);\n    const reseed2 = (seed = u8n()) => {\n      k = h(u8fr([0]), seed);\n      v = h();\n      if (seed.length === 0)\n        return;\n      k = h(u8fr([1]), seed);\n      v = h();\n    };\n    const gen2 = () => {\n      if (i++ >= 1e3)\n        throw new Error(\"drbg: tried 1000 values\");\n      let len = 0;\n      const out = [];\n      while (len < qByteLen) {\n        v = h();\n        const sl = v.slice();\n        out.push(sl);\n        len += v.length;\n      }\n      return concatBytes2(...out);\n    };\n    const genUntil = (seed, pred) => {\n      reset();\n      reseed2(seed);\n      let res = void 0;\n      while (!(res = pred(gen2())))\n        reseed2();\n      reset();\n      return res;\n    };\n    return genUntil;\n  }\n  function validateObject(object2, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n      const checkVal = validatorFns[type];\n      if (typeof checkVal !== \"function\")\n        throw new Error(`Invalid validator \"${type}\", expected function`);\n      const val = object2[fieldName];\n      if (isOptional && val === void 0)\n        return;\n      if (!checkVal(val, object2)) {\n        throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n      }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n      checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n      checkField(fieldName, type, true);\n    return object2;\n  }\n  var _0n2, _1n2, _2n2, u8a2, hexes, bitSet, bitMask, u8n, u8fr, validatorFns;\n  var init_utils5 = __esm({\n    \"../../../node_modules/.pnpm/@noble+curves@1.2.0/node_modules/@noble/curves/esm/abstract/utils.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      _0n2 = BigInt(0);\n      _1n2 = BigInt(1);\n      _2n2 = BigInt(2);\n      u8a2 = (a) => a instanceof Uint8Array;\n      hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, \"0\"));\n      bitSet = (n2, pos, value) => {\n        return n2 | (value ? _1n2 : _0n2) << BigInt(pos);\n      };\n      bitMask = (n2) => (_2n2 << BigInt(n2 - 1)) - _1n2;\n      u8n = (data) => new Uint8Array(data);\n      u8fr = (arr) => Uint8Array.from(arr);\n      validatorFns = {\n        bigint: (val) => typeof val === \"bigint\",\n        function: (val) => typeof val === \"function\",\n        boolean: (val) => typeof val === \"boolean\",\n        string: (val) => typeof val === \"string\",\n        stringOrUint8Array: (val) => typeof val === \"string\" || val instanceof Uint8Array,\n        isSafeInteger: (val) => Number.isSafeInteger(val),\n        array: (val) => Array.isArray(val),\n        field: (val, object2) => object2.Fp.isValid(val),\n        hash: (val) => typeof val === \"function\" && Number.isSafeInteger(val.outputLen)\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@noble+curves@1.2.0/node_modules/@noble/curves/esm/abstract/modular.js\n  function mod(a, b2) {\n    const result = a % b2;\n    return result >= _0n3 ? result : b2 + result;\n  }\n  function pow(num, power, modulo) {\n    if (modulo <= _0n3 || power < _0n3)\n      throw new Error(\"Expected power/modulo > 0\");\n    if (modulo === _1n3)\n      return _0n3;\n    let res = _1n3;\n    while (power > _0n3) {\n      if (power & _1n3)\n        res = res * num % modulo;\n      num = num * num % modulo;\n      power >>= _1n3;\n    }\n    return res;\n  }\n  function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n3) {\n      res *= res;\n      res %= modulo;\n    }\n    return res;\n  }\n  function invert(number2, modulo) {\n    if (number2 === _0n3 || modulo <= _0n3) {\n      throw new Error(`invert: expected positive integers, got n=${number2} mod=${modulo}`);\n    }\n    let a = mod(number2, modulo);\n    let b2 = modulo;\n    let x = _0n3, y = _1n3, u = _1n3, v = _0n3;\n    while (a !== _0n3) {\n      const q = b2 / a;\n      const r2 = b2 % a;\n      const m = x - u * q;\n      const n2 = y - v * q;\n      b2 = a, a = r2, x = u, y = v, u = m, v = n2;\n    }\n    const gcd = b2;\n    if (gcd !== _1n3)\n      throw new Error(\"invert: does not exist\");\n    return mod(x, modulo);\n  }\n  function tonelliShanks(P) {\n    const legendreC = (P - _1n3) / _2n3;\n    let Q, S, Z;\n    for (Q = P - _1n3, S = 0; Q % _2n3 === _0n3; Q /= _2n3, S++)\n      ;\n    for (Z = _2n3; Z < P && pow(Z, legendreC, P) !== P - _1n3; Z++)\n      ;\n    if (S === 1) {\n      const p1div4 = (P + _1n3) / _4n;\n      return function tonelliFast(Fp2, n2) {\n        const root = Fp2.pow(n2, p1div4);\n        if (!Fp2.eql(Fp2.sqr(root), n2))\n          throw new Error(\"Cannot find square root\");\n        return root;\n      };\n    }\n    const Q1div2 = (Q + _1n3) / _2n3;\n    return function tonelliSlow(Fp2, n2) {\n      if (Fp2.pow(n2, legendreC) === Fp2.neg(Fp2.ONE))\n        throw new Error(\"Cannot find square root\");\n      let r2 = S;\n      let g = Fp2.pow(Fp2.mul(Fp2.ONE, Z), Q);\n      let x = Fp2.pow(n2, Q1div2);\n      let b2 = Fp2.pow(n2, Q);\n      while (!Fp2.eql(b2, Fp2.ONE)) {\n        if (Fp2.eql(b2, Fp2.ZERO))\n          return Fp2.ZERO;\n        let m = 1;\n        for (let t2 = Fp2.sqr(b2); m < r2; m++) {\n          if (Fp2.eql(t2, Fp2.ONE))\n            break;\n          t2 = Fp2.sqr(t2);\n        }\n        const ge = Fp2.pow(g, _1n3 << BigInt(r2 - m - 1));\n        g = Fp2.sqr(ge);\n        x = Fp2.mul(x, ge);\n        b2 = Fp2.mul(b2, g);\n        r2 = m;\n      }\n      return x;\n    };\n  }\n  function FpSqrt(P) {\n    if (P % _4n === _3n) {\n      const p1div4 = (P + _1n3) / _4n;\n      return function sqrt3mod4(Fp2, n2) {\n        const root = Fp2.pow(n2, p1div4);\n        if (!Fp2.eql(Fp2.sqr(root), n2))\n          throw new Error(\"Cannot find square root\");\n        return root;\n      };\n    }\n    if (P % _8n === _5n) {\n      const c1 = (P - _5n) / _8n;\n      return function sqrt5mod8(Fp2, n2) {\n        const n22 = Fp2.mul(n2, _2n3);\n        const v = Fp2.pow(n22, c1);\n        const nv = Fp2.mul(n2, v);\n        const i = Fp2.mul(Fp2.mul(nv, _2n3), v);\n        const root = Fp2.mul(nv, Fp2.sub(i, Fp2.ONE));\n        if (!Fp2.eql(Fp2.sqr(root), n2))\n          throw new Error(\"Cannot find square root\");\n        return root;\n      };\n    }\n    if (P % _16n === _9n) {\n    }\n    return tonelliShanks(P);\n  }\n  function validateField(field) {\n    const initial = {\n      ORDER: \"bigint\",\n      MASK: \"bigint\",\n      BYTES: \"isSafeInteger\",\n      BITS: \"isSafeInteger\"\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n      map[val] = \"function\";\n      return map;\n    }, initial);\n    return validateObject(field, opts);\n  }\n  function FpPow(f, num, power) {\n    if (power < _0n3)\n      throw new Error(\"Expected power > 0\");\n    if (power === _0n3)\n      return f.ONE;\n    if (power === _1n3)\n      return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n3) {\n      if (power & _1n3)\n        p = f.mul(p, d);\n      d = f.sqr(d);\n      power >>= _1n3;\n    }\n    return p;\n  }\n  function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n      if (f.is0(num))\n        return acc;\n      tmp[i] = acc;\n      return f.mul(acc, num);\n    }, f.ONE);\n    const inverted = f.inv(lastMultiplied);\n    nums.reduceRight((acc, num, i) => {\n      if (f.is0(num))\n        return acc;\n      tmp[i] = f.mul(acc, tmp[i]);\n      return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n  }\n  function nLength(n2, nBitLength) {\n    const _nBitLength = nBitLength !== void 0 ? nBitLength : n2.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n  }\n  function Field(ORDER, bitLen2, isLE2 = false, redef = {}) {\n    if (ORDER <= _0n3)\n      throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen2);\n    if (BYTES > 2048)\n      throw new Error(\"Field lengths over 2048 bytes are not supported\");\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n      ORDER,\n      BITS,\n      BYTES,\n      MASK: bitMask(BITS),\n      ZERO: _0n3,\n      ONE: _1n3,\n      create: (num) => mod(num, ORDER),\n      isValid: (num) => {\n        if (typeof num !== \"bigint\")\n          throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n        return _0n3 <= num && num < ORDER;\n      },\n      is0: (num) => num === _0n3,\n      isOdd: (num) => (num & _1n3) === _1n3,\n      neg: (num) => mod(-num, ORDER),\n      eql: (lhs, rhs) => lhs === rhs,\n      sqr: (num) => mod(num * num, ORDER),\n      add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n      sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n      mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n      pow: (num, power) => FpPow(f, num, power),\n      div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n      // Same as above, but doesn't normalize\n      sqrN: (num) => num * num,\n      addN: (lhs, rhs) => lhs + rhs,\n      subN: (lhs, rhs) => lhs - rhs,\n      mulN: (lhs, rhs) => lhs * rhs,\n      inv: (num) => invert(num, ORDER),\n      sqrt: redef.sqrt || ((n2) => sqrtP(f, n2)),\n      invertBatch: (lst) => FpInvertBatch(f, lst),\n      // TODO: do we really need constant cmov?\n      // We don't have const-time bigints anyway, so probably will be not very useful\n      cmov: (a, b2, c) => c ? b2 : a,\n      toBytes: (num) => isLE2 ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES),\n      fromBytes: (bytes3) => {\n        if (bytes3.length !== BYTES)\n          throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes3.length}`);\n        return isLE2 ? bytesToNumberLE(bytes3) : bytesToNumberBE(bytes3);\n      }\n    });\n    return Object.freeze(f);\n  }\n  function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== \"bigint\")\n      throw new Error(\"field order must be bigint\");\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n  }\n  function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n  }\n  function mapHashToField(key2, fieldOrder, isLE2 = false) {\n    const len = key2.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    if (len < 16 || len < minLen || len > 1024)\n      throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE2 ? bytesToNumberBE(key2) : bytesToNumberLE(key2);\n    const reduced = mod(num, fieldOrder - _1n3) + _1n3;\n    return isLE2 ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n  }\n  var _0n3, _1n3, _2n3, _3n, _4n, _5n, _8n, _9n, _16n, FIELD_FIELDS;\n  var init_modular = __esm({\n    \"../../../node_modules/.pnpm/@noble+curves@1.2.0/node_modules/@noble/curves/esm/abstract/modular.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_utils5();\n      _0n3 = BigInt(0);\n      _1n3 = BigInt(1);\n      _2n3 = BigInt(2);\n      _3n = BigInt(3);\n      _4n = BigInt(4);\n      _5n = BigInt(5);\n      _8n = BigInt(8);\n      _9n = BigInt(9);\n      _16n = BigInt(16);\n      FIELD_FIELDS = [\n        \"create\",\n        \"isValid\",\n        \"is0\",\n        \"neg\",\n        \"inv\",\n        \"sqrt\",\n        \"sqr\",\n        \"eql\",\n        \"add\",\n        \"sub\",\n        \"mul\",\n        \"pow\",\n        \"div\",\n        \"addN\",\n        \"subN\",\n        \"mulN\",\n        \"sqrN\"\n      ];\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@noble+curves@1.2.0/node_modules/@noble/curves/esm/abstract/curve.js\n  function wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n      const neg3 = item.negate();\n      return condition ? neg3 : item;\n    };\n    const opts = (W) => {\n      const windows = Math.ceil(bits / W) + 1;\n      const windowSize = 2 ** (W - 1);\n      return { windows, windowSize };\n    };\n    return {\n      constTimeNegate,\n      // non-const time multiplication ladder\n      unsafeLadder(elm, n2) {\n        let p = c.ZERO;\n        let d = elm;\n        while (n2 > _0n4) {\n          if (n2 & _1n4)\n            p = p.add(d);\n          d = d.double();\n          n2 >>= _1n4;\n        }\n        return p;\n      },\n      /**\n       * Creates a wNAF precomputation window. Used for caching.\n       * Default window size is set by `utils.precompute()` and is equal to 8.\n       * Number of precomputed points depends on the curve size:\n       * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n       * - 𝑊 is the window size\n       * - 𝑛 is the bitlength of the curve order.\n       * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n       * @returns precomputed point tables flattened to a single array\n       */\n      precomputeWindow(elm, W) {\n        const { windows, windowSize } = opts(W);\n        const points = [];\n        let p = elm;\n        let base2 = p;\n        for (let window2 = 0; window2 < windows; window2++) {\n          base2 = p;\n          points.push(base2);\n          for (let i = 1; i < windowSize; i++) {\n            base2 = base2.add(p);\n            points.push(base2);\n          }\n          p = base2.double();\n        }\n        return points;\n      },\n      /**\n       * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n       * @param W window size\n       * @param precomputes precomputed tables\n       * @param n scalar (we don't check here, but should be less than curve order)\n       * @returns real and fake (for const-time) points\n       */\n      wNAF(W, precomputes, n2) {\n        const { windows, windowSize } = opts(W);\n        let p = c.ZERO;\n        let f = c.BASE;\n        const mask2 = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window2 = 0; window2 < windows; window2++) {\n          const offset = window2 * windowSize;\n          let wbits = Number(n2 & mask2);\n          n2 >>= shiftBy;\n          if (wbits > windowSize) {\n            wbits -= maxNumber;\n            n2 += _1n4;\n          }\n          const offset1 = offset;\n          const offset2 = offset + Math.abs(wbits) - 1;\n          const cond1 = window2 % 2 !== 0;\n          const cond2 = wbits < 0;\n          if (wbits === 0) {\n            f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n          } else {\n            p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n          }\n        }\n        return { p, f };\n      },\n      wNAFCached(P, precomputesMap, n2, transform) {\n        const W = P._WINDOW_SIZE || 1;\n        let comp = precomputesMap.get(P);\n        if (!comp) {\n          comp = this.precomputeWindow(P, W);\n          if (W !== 1) {\n            precomputesMap.set(P, transform(comp));\n          }\n        }\n        return this.wNAF(W, comp, n2);\n      }\n    };\n  }\n  function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n      n: \"bigint\",\n      h: \"bigint\",\n      Gx: \"field\",\n      Gy: \"field\"\n    }, {\n      nBitLength: \"isSafeInteger\",\n      nByteLength: \"isSafeInteger\"\n    });\n    return Object.freeze({\n      ...nLength(curve.n, curve.nBitLength),\n      ...curve,\n      ...{ p: curve.Fp.ORDER }\n    });\n  }\n  var _0n4, _1n4;\n  var init_curve = __esm({\n    \"../../../node_modules/.pnpm/@noble+curves@1.2.0/node_modules/@noble/curves/esm/abstract/curve.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_modular();\n      init_utils5();\n      _0n4 = BigInt(0);\n      _1n4 = BigInt(1);\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@noble+curves@1.2.0/node_modules/@noble/curves/esm/abstract/weierstrass.js\n  function validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    validateObject(opts, {\n      a: \"field\",\n      b: \"field\"\n    }, {\n      allowedPrivateKeyLengths: \"array\",\n      wrapPrivateKey: \"boolean\",\n      isTorsionFree: \"function\",\n      clearCofactor: \"function\",\n      allowInfinityPoint: \"boolean\",\n      fromBytes: \"function\",\n      toBytes: \"function\"\n    });\n    const { endo, Fp: Fp2, a } = opts;\n    if (endo) {\n      if (!Fp2.eql(a, Fp2.ZERO)) {\n        throw new Error(\"Endomorphism can only be defined for Koblitz curves that have a=0\");\n      }\n      if (typeof endo !== \"object\" || typeof endo.beta !== \"bigint\" || typeof endo.splitScalar !== \"function\") {\n        throw new Error(\"Expected endomorphism with beta: bigint and splitScalar: function\");\n      }\n    }\n    return Object.freeze({ ...opts });\n  }\n  function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp: Fp2 } = CURVE;\n    const toBytes2 = CURVE.toBytes || ((_c, point3, _isCompressed) => {\n      const a = point3.toAffine();\n      return concatBytes2(Uint8Array.from([4]), Fp2.toBytes(a.x), Fp2.toBytes(a.y));\n    });\n    const fromBytes = CURVE.fromBytes || ((bytes3) => {\n      const tail = bytes3.subarray(1);\n      const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));\n      const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));\n      return { x, y };\n    });\n    function weierstrassEquation(x) {\n      const { a, b: b2 } = CURVE;\n      const x2 = Fp2.sqr(x);\n      const x3 = Fp2.mul(x2, x);\n      return Fp2.add(Fp2.add(x3, Fp2.mul(x, a)), b2);\n    }\n    if (!Fp2.eql(Fp2.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n      throw new Error(\"bad generator point: equation left != right\");\n    function isWithinCurveOrder(num) {\n      return typeof num === \"bigint\" && _0n5 < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n      if (!isWithinCurveOrder(num))\n        throw new Error(\"Expected valid bigint: 0 < bigint < curve.n\");\n    }\n    function normPrivateKeyToScalar(key2) {\n      const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: n2 } = CURVE;\n      if (lengths && typeof key2 !== \"bigint\") {\n        if (key2 instanceof Uint8Array)\n          key2 = bytesToHex(key2);\n        if (typeof key2 !== \"string\" || !lengths.includes(key2.length))\n          throw new Error(\"Invalid key\");\n        key2 = key2.padStart(nByteLength * 2, \"0\");\n      }\n      let num;\n      try {\n        num = typeof key2 === \"bigint\" ? key2 : bytesToNumberBE(ensureBytes(\"private key\", key2, nByteLength));\n      } catch (error) {\n        throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key2}`);\n      }\n      if (wrapPrivateKey)\n        num = mod(num, n2);\n      assertGE(num);\n      return num;\n    }\n    const pointPrecomputes = /* @__PURE__ */ new Map();\n    function assertPrjPoint(other) {\n      if (!(other instanceof Point3))\n        throw new Error(\"ProjectivePoint expected\");\n    }\n    class Point3 {\n      constructor(px, py, pz) {\n        this.px = px;\n        this.py = py;\n        this.pz = pz;\n        if (px == null || !Fp2.isValid(px))\n          throw new Error(\"x required\");\n        if (py == null || !Fp2.isValid(py))\n          throw new Error(\"y required\");\n        if (pz == null || !Fp2.isValid(pz))\n          throw new Error(\"z required\");\n      }\n      // Does not validate if the point is on-curve.\n      // Use fromHex instead, or call assertValidity() later.\n      static fromAffine(p) {\n        const { x, y } = p || {};\n        if (!p || !Fp2.isValid(x) || !Fp2.isValid(y))\n          throw new Error(\"invalid affine point\");\n        if (p instanceof Point3)\n          throw new Error(\"projective point not allowed\");\n        const is0 = (i) => Fp2.eql(i, Fp2.ZERO);\n        if (is0(x) && is0(y))\n          return Point3.ZERO;\n        return new Point3(x, y, Fp2.ONE);\n      }\n      get x() {\n        return this.toAffine().x;\n      }\n      get y() {\n        return this.toAffine().y;\n      }\n      /**\n       * Takes a bunch of Projective Points but executes only one\n       * inversion on all of them. Inversion is very slow operation,\n       * so this improves performance massively.\n       * Optimization: converts a list of projective points to a list of identical points with Z=1.\n       */\n      static normalizeZ(points) {\n        const toInv = Fp2.invertBatch(points.map((p) => p.pz));\n        return points.map((p, i) => p.toAffine(toInv[i])).map(Point3.fromAffine);\n      }\n      /**\n       * Converts hash string or Uint8Array to Point.\n       * @param hex short/long ECDSA hex\n       */\n      static fromHex(hex) {\n        const P = Point3.fromAffine(fromBytes(ensureBytes(\"pointHex\", hex)));\n        P.assertValidity();\n        return P;\n      }\n      // Multiplies generator point by privateKey.\n      static fromPrivateKey(privateKey) {\n        return Point3.BASE.multiply(normPrivateKeyToScalar(privateKey));\n      }\n      // \"Private method\", don't use it directly\n      _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n      }\n      // A point on curve is valid if it conforms to equation.\n      assertValidity() {\n        if (this.is0()) {\n          if (CURVE.allowInfinityPoint && !Fp2.is0(this.py))\n            return;\n          throw new Error(\"bad point: ZERO\");\n        }\n        const { x, y } = this.toAffine();\n        if (!Fp2.isValid(x) || !Fp2.isValid(y))\n          throw new Error(\"bad point: x or y not FE\");\n        const left = Fp2.sqr(y);\n        const right = weierstrassEquation(x);\n        if (!Fp2.eql(left, right))\n          throw new Error(\"bad point: equation left != right\");\n        if (!this.isTorsionFree())\n          throw new Error(\"bad point: not in prime-order subgroup\");\n      }\n      hasEvenY() {\n        const { y } = this.toAffine();\n        if (Fp2.isOdd)\n          return !Fp2.isOdd(y);\n        throw new Error(\"Field doesn't support isOdd\");\n      }\n      /**\n       * Compare one point to another.\n       */\n      equals(other) {\n        assertPrjPoint(other);\n        const { px: X1, py: Y1, pz: Z1 } = this;\n        const { px: X2, py: Y2, pz: Z2 } = other;\n        const U1 = Fp2.eql(Fp2.mul(X1, Z2), Fp2.mul(X2, Z1));\n        const U2 = Fp2.eql(Fp2.mul(Y1, Z2), Fp2.mul(Y2, Z1));\n        return U1 && U2;\n      }\n      /**\n       * Flips point to one corresponding to (x, -y) in Affine coordinates.\n       */\n      negate() {\n        return new Point3(this.px, Fp2.neg(this.py), this.pz);\n      }\n      // Renes-Costello-Batina exception-free doubling formula.\n      // There is 30% faster Jacobian formula, but it is not complete.\n      // https://eprint.iacr.org/2015/1060, algorithm 3\n      // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n      double() {\n        const { a, b: b2 } = CURVE;\n        const b3 = Fp2.mul(b2, _3n2);\n        const { px: X1, py: Y1, pz: Z1 } = this;\n        let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;\n        let t0 = Fp2.mul(X1, X1);\n        let t1 = Fp2.mul(Y1, Y1);\n        let t2 = Fp2.mul(Z1, Z1);\n        let t3 = Fp2.mul(X1, Y1);\n        t3 = Fp2.add(t3, t3);\n        Z3 = Fp2.mul(X1, Z1);\n        Z3 = Fp2.add(Z3, Z3);\n        X3 = Fp2.mul(a, Z3);\n        Y3 = Fp2.mul(b3, t2);\n        Y3 = Fp2.add(X3, Y3);\n        X3 = Fp2.sub(t1, Y3);\n        Y3 = Fp2.add(t1, Y3);\n        Y3 = Fp2.mul(X3, Y3);\n        X3 = Fp2.mul(t3, X3);\n        Z3 = Fp2.mul(b3, Z3);\n        t2 = Fp2.mul(a, t2);\n        t3 = Fp2.sub(t0, t2);\n        t3 = Fp2.mul(a, t3);\n        t3 = Fp2.add(t3, Z3);\n        Z3 = Fp2.add(t0, t0);\n        t0 = Fp2.add(Z3, t0);\n        t0 = Fp2.add(t0, t2);\n        t0 = Fp2.mul(t0, t3);\n        Y3 = Fp2.add(Y3, t0);\n        t2 = Fp2.mul(Y1, Z1);\n        t2 = Fp2.add(t2, t2);\n        t0 = Fp2.mul(t2, t3);\n        X3 = Fp2.sub(X3, t0);\n        Z3 = Fp2.mul(t2, t1);\n        Z3 = Fp2.add(Z3, Z3);\n        Z3 = Fp2.add(Z3, Z3);\n        return new Point3(X3, Y3, Z3);\n      }\n      // Renes-Costello-Batina exception-free addition formula.\n      // There is 30% faster Jacobian formula, but it is not complete.\n      // https://eprint.iacr.org/2015/1060, algorithm 1\n      // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n      add(other) {\n        assertPrjPoint(other);\n        const { px: X1, py: Y1, pz: Z1 } = this;\n        const { px: X2, py: Y2, pz: Z2 } = other;\n        let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;\n        const a = CURVE.a;\n        const b3 = Fp2.mul(CURVE.b, _3n2);\n        let t0 = Fp2.mul(X1, X2);\n        let t1 = Fp2.mul(Y1, Y2);\n        let t2 = Fp2.mul(Z1, Z2);\n        let t3 = Fp2.add(X1, Y1);\n        let t4 = Fp2.add(X2, Y2);\n        t3 = Fp2.mul(t3, t4);\n        t4 = Fp2.add(t0, t1);\n        t3 = Fp2.sub(t3, t4);\n        t4 = Fp2.add(X1, Z1);\n        let t5 = Fp2.add(X2, Z2);\n        t4 = Fp2.mul(t4, t5);\n        t5 = Fp2.add(t0, t2);\n        t4 = Fp2.sub(t4, t5);\n        t5 = Fp2.add(Y1, Z1);\n        X3 = Fp2.add(Y2, Z2);\n        t5 = Fp2.mul(t5, X3);\n        X3 = Fp2.add(t1, t2);\n        t5 = Fp2.sub(t5, X3);\n        Z3 = Fp2.mul(a, t4);\n        X3 = Fp2.mul(b3, t2);\n        Z3 = Fp2.add(X3, Z3);\n        X3 = Fp2.sub(t1, Z3);\n        Z3 = Fp2.add(t1, Z3);\n        Y3 = Fp2.mul(X3, Z3);\n        t1 = Fp2.add(t0, t0);\n        t1 = Fp2.add(t1, t0);\n        t2 = Fp2.mul(a, t2);\n        t4 = Fp2.mul(b3, t4);\n        t1 = Fp2.add(t1, t2);\n        t2 = Fp2.sub(t0, t2);\n        t2 = Fp2.mul(a, t2);\n        t4 = Fp2.add(t4, t2);\n        t0 = Fp2.mul(t1, t4);\n        Y3 = Fp2.add(Y3, t0);\n        t0 = Fp2.mul(t5, t4);\n        X3 = Fp2.mul(t3, X3);\n        X3 = Fp2.sub(X3, t0);\n        t0 = Fp2.mul(t3, t1);\n        Z3 = Fp2.mul(t5, Z3);\n        Z3 = Fp2.add(Z3, t0);\n        return new Point3(X3, Y3, Z3);\n      }\n      subtract(other) {\n        return this.add(other.negate());\n      }\n      is0() {\n        return this.equals(Point3.ZERO);\n      }\n      wNAF(n2) {\n        return wnaf.wNAFCached(this, pointPrecomputes, n2, (comp) => {\n          const toInv = Fp2.invertBatch(comp.map((p) => p.pz));\n          return comp.map((p, i) => p.toAffine(toInv[i])).map(Point3.fromAffine);\n        });\n      }\n      /**\n       * Non-constant-time multiplication. Uses double-and-add algorithm.\n       * It's faster, but should only be used when you don't care about\n       * an exposed private key e.g. sig verification, which works over *public* keys.\n       */\n      multiplyUnsafe(n2) {\n        const I = Point3.ZERO;\n        if (n2 === _0n5)\n          return I;\n        assertGE(n2);\n        if (n2 === _1n5)\n          return this;\n        const { endo } = CURVE;\n        if (!endo)\n          return wnaf.unsafeLadder(this, n2);\n        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n2);\n        let k1p = I;\n        let k2p = I;\n        let d = this;\n        while (k1 > _0n5 || k2 > _0n5) {\n          if (k1 & _1n5)\n            k1p = k1p.add(d);\n          if (k2 & _1n5)\n            k2p = k2p.add(d);\n          d = d.double();\n          k1 >>= _1n5;\n          k2 >>= _1n5;\n        }\n        if (k1neg)\n          k1p = k1p.negate();\n        if (k2neg)\n          k2p = k2p.negate();\n        k2p = new Point3(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        return k1p.add(k2p);\n      }\n      /**\n       * Constant time multiplication.\n       * Uses wNAF method. Windowed method may be 10% faster,\n       * but takes 2x longer to generate and consumes 2x memory.\n       * Uses precomputes when available.\n       * Uses endomorphism for Koblitz curves.\n       * @param scalar by which the point would be multiplied\n       * @returns New point\n       */\n      multiply(scalar) {\n        assertGE(scalar);\n        let n2 = scalar;\n        let point3, fake;\n        const { endo } = CURVE;\n        if (endo) {\n          const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n2);\n          let { p: k1p, f: f1p } = this.wNAF(k1);\n          let { p: k2p, f: f2p } = this.wNAF(k2);\n          k1p = wnaf.constTimeNegate(k1neg, k1p);\n          k2p = wnaf.constTimeNegate(k2neg, k2p);\n          k2p = new Point3(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n          point3 = k1p.add(k2p);\n          fake = f1p.add(f2p);\n        } else {\n          const { p, f } = this.wNAF(n2);\n          point3 = p;\n          fake = f;\n        }\n        return Point3.normalizeZ([point3, fake])[0];\n      }\n      /**\n       * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n       * Not using Strauss-Shamir trick: precomputation tables are faster.\n       * The trick could be useful if both P and Q are not G (not in our case).\n       * @returns non-zero affine point\n       */\n      multiplyAndAddUnsafe(Q, a, b2) {\n        const G = Point3.BASE;\n        const mul3 = (P, a2) => a2 === _0n5 || a2 === _1n5 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);\n        const sum = mul3(this, a).add(mul3(Q, b2));\n        return sum.is0() ? void 0 : sum;\n      }\n      // Converts Projective point to affine (x, y) coordinates.\n      // Can accept precomputed Z^-1 - for example, from invertBatch.\n      // (x, y, z) ∋ (x=x/z, y=y/z)\n      toAffine(iz) {\n        const { px: x, py: y, pz: z } = this;\n        const is0 = this.is0();\n        if (iz == null)\n          iz = is0 ? Fp2.ONE : Fp2.inv(z);\n        const ax = Fp2.mul(x, iz);\n        const ay = Fp2.mul(y, iz);\n        const zz = Fp2.mul(z, iz);\n        if (is0)\n          return { x: Fp2.ZERO, y: Fp2.ZERO };\n        if (!Fp2.eql(zz, Fp2.ONE))\n          throw new Error(\"invZ was invalid\");\n        return { x: ax, y: ay };\n      }\n      isTorsionFree() {\n        const { h: cofactor, isTorsionFree } = CURVE;\n        if (cofactor === _1n5)\n          return true;\n        if (isTorsionFree)\n          return isTorsionFree(Point3, this);\n        throw new Error(\"isTorsionFree() has not been declared for the elliptic curve\");\n      }\n      clearCofactor() {\n        const { h: cofactor, clearCofactor } = CURVE;\n        if (cofactor === _1n5)\n          return this;\n        if (clearCofactor)\n          return clearCofactor(Point3, this);\n        return this.multiplyUnsafe(CURVE.h);\n      }\n      toRawBytes(isCompressed = true) {\n        this.assertValidity();\n        return toBytes2(Point3, this, isCompressed);\n      }\n      toHex(isCompressed = true) {\n        return bytesToHex(this.toRawBytes(isCompressed));\n      }\n    }\n    Point3.BASE = new Point3(CURVE.Gx, CURVE.Gy, Fp2.ONE);\n    Point3.ZERO = new Point3(Fp2.ZERO, Fp2.ONE, Fp2.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point3, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    return {\n      CURVE,\n      ProjectivePoint: Point3,\n      normPrivateKeyToScalar,\n      weierstrassEquation,\n      isWithinCurveOrder\n    };\n  }\n  function validateOpts(curve) {\n    const opts = validateBasic(curve);\n    validateObject(opts, {\n      hash: \"hash\",\n      hmac: \"function\",\n      randomBytes: \"function\"\n    }, {\n      bits2int: \"function\",\n      bits2int_modN: \"function\",\n      lowS: \"boolean\"\n    });\n    return Object.freeze({ lowS: true, ...opts });\n  }\n  function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp: Fp2, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp2.BYTES + 1;\n    const uncompressedLen = 2 * Fp2.BYTES + 1;\n    function isValidFieldElement(num) {\n      return _0n5 < num && num < Fp2.ORDER;\n    }\n    function modN(a) {\n      return mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n      return invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point3, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({\n      ...CURVE,\n      toBytes(_c, point3, isCompressed) {\n        const a = point3.toAffine();\n        const x = Fp2.toBytes(a.x);\n        const cat = concatBytes2;\n        if (isCompressed) {\n          return cat(Uint8Array.from([point3.hasEvenY() ? 2 : 3]), x);\n        } else {\n          return cat(Uint8Array.from([4]), x, Fp2.toBytes(a.y));\n        }\n      },\n      fromBytes(bytes3) {\n        const len = bytes3.length;\n        const head = bytes3[0];\n        const tail = bytes3.subarray(1);\n        if (len === compressedLen && (head === 2 || head === 3)) {\n          const x = bytesToNumberBE(tail);\n          if (!isValidFieldElement(x))\n            throw new Error(\"Point is not on curve\");\n          const y2 = weierstrassEquation(x);\n          let y = Fp2.sqrt(y2);\n          const isYOdd = (y & _1n5) === _1n5;\n          const isHeadOdd = (head & 1) === 1;\n          if (isHeadOdd !== isYOdd)\n            y = Fp2.neg(y);\n          return { x, y };\n        } else if (len === uncompressedLen && head === 4) {\n          const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));\n          const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));\n          return { x, y };\n        } else {\n          throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n        }\n      }\n    });\n    const numToNByteStr = (num) => bytesToHex(numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number2) {\n      const HALF = CURVE_ORDER >> _1n5;\n      return number2 > HALF;\n    }\n    function normalizeS(s) {\n      return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    const slcNum = (b2, from, to) => bytesToNumberBE(b2.slice(from, to));\n    class Signature3 {\n      constructor(r2, s, recovery) {\n        this.r = r2;\n        this.s = s;\n        this.recovery = recovery;\n        this.assertValidity();\n      }\n      // pair (bytes of r, bytes of s)\n      static fromCompact(hex) {\n        const l = CURVE.nByteLength;\n        hex = ensureBytes(\"compactSignature\", hex, l * 2);\n        return new Signature3(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n      }\n      // DER encoded ECDSA signature\n      // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n      static fromDER(hex) {\n        const { r: r2, s } = DER.toSig(ensureBytes(\"DER\", hex));\n        return new Signature3(r2, s);\n      }\n      assertValidity() {\n        if (!isWithinCurveOrder(this.r))\n          throw new Error(\"r must be 0 < r < CURVE.n\");\n        if (!isWithinCurveOrder(this.s))\n          throw new Error(\"s must be 0 < s < CURVE.n\");\n      }\n      addRecoveryBit(recovery) {\n        return new Signature3(this.r, this.s, recovery);\n      }\n      recoverPublicKey(msgHash) {\n        const { r: r2, s, recovery: rec } = this;\n        const h = bits2int_modN(ensureBytes(\"msgHash\", msgHash));\n        if (rec == null || ![0, 1, 2, 3].includes(rec))\n          throw new Error(\"recovery id invalid\");\n        const radj = rec === 2 || rec === 3 ? r2 + CURVE.n : r2;\n        if (radj >= Fp2.ORDER)\n          throw new Error(\"recovery id 2 or 3 invalid\");\n        const prefix = (rec & 1) === 0 ? \"02\" : \"03\";\n        const R = Point3.fromHex(prefix + numToNByteStr(radj));\n        const ir = invN(radj);\n        const u1 = modN(-h * ir);\n        const u2 = modN(s * ir);\n        const Q = Point3.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n          throw new Error(\"point at infinify\");\n        Q.assertValidity();\n        return Q;\n      }\n      // Signatures should be low-s, to prevent malleability.\n      hasHighS() {\n        return isBiggerThanHalfOrder(this.s);\n      }\n      normalizeS() {\n        return this.hasHighS() ? new Signature3(this.r, modN(-this.s), this.recovery) : this;\n      }\n      // DER-encoded\n      toDERRawBytes() {\n        return hexToBytes(this.toDERHex());\n      }\n      toDERHex() {\n        return DER.hexFromSig({ r: this.r, s: this.s });\n      }\n      // padded bytes of r, then padded bytes of s\n      toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n      }\n      toCompactHex() {\n        return numToNByteStr(this.r) + numToNByteStr(this.s);\n      }\n    }\n    const utils = {\n      isValidPrivateKey(privateKey) {\n        try {\n          normPrivateKeyToScalar(privateKey);\n          return true;\n        } catch (error) {\n          return false;\n        }\n      },\n      normPrivateKeyToScalar,\n      /**\n       * Produces cryptographically secure private key from random of size\n       * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n       */\n      randomPrivateKey: () => {\n        const length = getMinHashLength(CURVE.n);\n        return mapHashToField(CURVE.randomBytes(length), CURVE.n);\n      },\n      /**\n       * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n       * Allows to massively speed-up `point.multiply(scalar)`.\n       * @returns cached point\n       * @example\n       * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n       * fast.multiply(privKey); // much faster ECDH now\n       */\n      precompute(windowSize = 8, point3 = Point3.BASE) {\n        point3._setWindowSize(windowSize);\n        point3.multiply(BigInt(3));\n        return point3;\n      }\n    };\n    function getPublicKey(privateKey, isCompressed = true) {\n      return Point3.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    function isProbPub(item) {\n      const arr = item instanceof Uint8Array;\n      const str = typeof item === \"string\";\n      const len = (arr || str) && item.length;\n      if (arr)\n        return len === compressedLen || len === uncompressedLen;\n      if (str)\n        return len === 2 * compressedLen || len === 2 * uncompressedLen;\n      if (item instanceof Point3)\n        return true;\n      return false;\n    }\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n      if (isProbPub(privateA))\n        throw new Error(\"first arg must be private key\");\n      if (!isProbPub(publicB))\n        throw new Error(\"second arg must be public key\");\n      const b2 = Point3.fromHex(publicB);\n      return b2.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    const bits2int = CURVE.bits2int || function(bytes3) {\n      const num = bytesToNumberBE(bytes3);\n      const delta = bytes3.length * 8 - CURVE.nBitLength;\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n    const bits2int_modN = CURVE.bits2int_modN || function(bytes3) {\n      return modN(bits2int(bytes3));\n    };\n    const ORDER_MASK = bitMask(CURVE.nBitLength);\n    function int2octets(num) {\n      if (typeof num !== \"bigint\")\n        throw new Error(\"bigint expected\");\n      if (!(_0n5 <= num && num < ORDER_MASK))\n        throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n      return numberToBytesBE(num, CURVE.nByteLength);\n    }\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n      if ([\"recovered\", \"canonical\"].some((k) => k in opts))\n        throw new Error(\"sign() legacy options not supported\");\n      const { hash: hash4, randomBytes: randomBytes3 } = CURVE;\n      let { lowS, prehash, extraEntropy: ent } = opts;\n      if (lowS == null)\n        lowS = true;\n      msgHash = ensureBytes(\"msgHash\", msgHash);\n      if (prehash)\n        msgHash = ensureBytes(\"prehashed msgHash\", hash4(msgHash));\n      const h1int = bits2int_modN(msgHash);\n      const d = normPrivateKeyToScalar(privateKey);\n      const seedArgs = [int2octets(d), int2octets(h1int)];\n      if (ent != null) {\n        const e = ent === true ? randomBytes3(Fp2.BYTES) : ent;\n        seedArgs.push(ensureBytes(\"extraEntropy\", e));\n      }\n      const seed = concatBytes2(...seedArgs);\n      const m = h1int;\n      function k2sig(kBytes) {\n        const k = bits2int(kBytes);\n        if (!isWithinCurveOrder(k))\n          return;\n        const ik = invN(k);\n        const q = Point3.BASE.multiply(k).toAffine();\n        const r2 = modN(q.x);\n        if (r2 === _0n5)\n          return;\n        const s = modN(ik * modN(m + r2 * d));\n        if (s === _0n5)\n          return;\n        let recovery = (q.x === r2 ? 0 : 2) | Number(q.y & _1n5);\n        let normS = s;\n        if (lowS && isBiggerThanHalfOrder(s)) {\n          normS = normalizeS(s);\n          recovery ^= 1;\n        }\n        return new Signature3(r2, normS, recovery);\n      }\n      return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    function sign3(msgHash, privKey, opts = defaultSigOpts) {\n      const { seed, k2sig } = prepSig(msgHash, privKey, opts);\n      const C = CURVE;\n      const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n      return drbg(seed, k2sig);\n    }\n    Point3.BASE._setWindowSize(8);\n    function verify3(signature2, msgHash, publicKey, opts = defaultVerOpts) {\n      const sg = signature2;\n      msgHash = ensureBytes(\"msgHash\", msgHash);\n      publicKey = ensureBytes(\"publicKey\", publicKey);\n      if (\"strict\" in opts)\n        throw new Error(\"options.strict was renamed to lowS\");\n      const { lowS, prehash } = opts;\n      let _sig = void 0;\n      let P;\n      try {\n        if (typeof sg === \"string\" || sg instanceof Uint8Array) {\n          try {\n            _sig = Signature3.fromDER(sg);\n          } catch (derError) {\n            if (!(derError instanceof DER.Err))\n              throw derError;\n            _sig = Signature3.fromCompact(sg);\n          }\n        } else if (typeof sg === \"object\" && typeof sg.r === \"bigint\" && typeof sg.s === \"bigint\") {\n          const { r: r3, s: s2 } = sg;\n          _sig = new Signature3(r3, s2);\n        } else {\n          throw new Error(\"PARSE\");\n        }\n        P = Point3.fromHex(publicKey);\n      } catch (error) {\n        if (error.message === \"PARSE\")\n          throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n        return false;\n      }\n      if (lowS && _sig.hasHighS())\n        return false;\n      if (prehash)\n        msgHash = CURVE.hash(msgHash);\n      const { r: r2, s } = _sig;\n      const h = bits2int_modN(msgHash);\n      const is = invN(s);\n      const u1 = modN(h * is);\n      const u2 = modN(r2 * is);\n      const R = Point3.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine();\n      if (!R)\n        return false;\n      const v = modN(R.x);\n      return v === r2;\n    }\n    return {\n      CURVE,\n      getPublicKey,\n      getSharedSecret,\n      sign: sign3,\n      verify: verify3,\n      ProjectivePoint: Point3,\n      Signature: Signature3,\n      utils\n    };\n  }\n  var b2n, h2b, DER, _0n5, _1n5, _2n4, _3n2, _4n2;\n  var init_weierstrass = __esm({\n    \"../../../node_modules/.pnpm/@noble+curves@1.2.0/node_modules/@noble/curves/esm/abstract/weierstrass.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_modular();\n      init_utils5();\n      init_utils5();\n      init_curve();\n      ({ bytesToNumberBE: b2n, hexToBytes: h2b } = utils_exports2);\n      DER = {\n        // asn.1 DER encoding utils\n        Err: class DERErr extends Error {\n          constructor(m = \"\") {\n            super(m);\n          }\n        },\n        _parseInt(data) {\n          const { Err: E } = DER;\n          if (data.length < 2 || data[0] !== 2)\n            throw new E(\"Invalid signature integer tag\");\n          const len = data[1];\n          const res = data.subarray(2, len + 2);\n          if (!len || res.length !== len)\n            throw new E(\"Invalid signature integer: wrong length\");\n          if (res[0] & 128)\n            throw new E(\"Invalid signature integer: negative\");\n          if (res[0] === 0 && !(res[1] & 128))\n            throw new E(\"Invalid signature integer: unnecessary leading zero\");\n          return { d: b2n(res), l: data.subarray(len + 2) };\n        },\n        toSig(hex) {\n          const { Err: E } = DER;\n          const data = typeof hex === \"string\" ? h2b(hex) : hex;\n          if (!(data instanceof Uint8Array))\n            throw new Error(\"ui8a expected\");\n          let l = data.length;\n          if (l < 2 || data[0] != 48)\n            throw new E(\"Invalid signature tag\");\n          if (data[1] !== l - 2)\n            throw new E(\"Invalid signature: incorrect length\");\n          const { d: r2, l: sBytes } = DER._parseInt(data.subarray(2));\n          const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n          if (rBytesLeft.length)\n            throw new E(\"Invalid signature: left bytes after parsing\");\n          return { r: r2, s };\n        },\n        hexFromSig(sig) {\n          const slice = (s2) => Number.parseInt(s2[0], 16) & 8 ? \"00\" + s2 : s2;\n          const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n          };\n          const s = slice(h(sig.s));\n          const r2 = slice(h(sig.r));\n          const shl = s.length / 2;\n          const rhl = r2.length / 2;\n          const sl = h(shl);\n          const rl = h(rhl);\n          return `30${h(rhl + shl + 4)}02${rl}${r2}02${sl}${s}`;\n        }\n      };\n      _0n5 = BigInt(0);\n      _1n5 = BigInt(1);\n      _2n4 = BigInt(2);\n      _3n2 = BigInt(3);\n      _4n2 = BigInt(4);\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@noble+curves@1.2.0/node_modules/@noble/curves/esm/_shortw_utils.js\n  function getHash(hash4) {\n    return {\n      hash: hash4,\n      hmac: (key2, ...msgs) => hmac2(hash4, key2, concatBytes(...msgs)),\n      randomBytes: randomBytes2\n    };\n  }\n  function createCurve(curveDef, defHash) {\n    const create = (hash4) => weierstrass({ ...curveDef, ...getHash(hash4) });\n    return Object.freeze({ ...create(defHash), create });\n  }\n  var init_shortw_utils = __esm({\n    \"../../../node_modules/.pnpm/@noble+curves@1.2.0/node_modules/@noble/curves/esm/_shortw_utils.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_hmac();\n      init_utils4();\n      init_weierstrass();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@noble+curves@1.2.0/node_modules/@noble/curves/esm/secp256k1.js\n  function sqrtMod(y) {\n    const P = secp256k1P;\n    const _3n3 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = y * y * y % P;\n    const b3 = b2 * b2 * y % P;\n    const b6 = pow2(b3, _3n3, P) * b3 % P;\n    const b9 = pow2(b6, _3n3, P) * b3 % P;\n    const b11 = pow2(b9, _2n5, P) * b2 % P;\n    const b22 = pow2(b11, _11n, P) * b11 % P;\n    const b44 = pow2(b22, _22n, P) * b22 % P;\n    const b88 = pow2(b44, _44n, P) * b44 % P;\n    const b176 = pow2(b88, _88n, P) * b88 % P;\n    const b220 = pow2(b176, _44n, P) * b44 % P;\n    const b223 = pow2(b220, _3n3, P) * b3 % P;\n    const t1 = pow2(b223, _23n, P) * b22 % P;\n    const t2 = pow2(t1, _6n, P) * b2 % P;\n    const root = pow2(t2, _2n5, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n      throw new Error(\"Cannot find square root\");\n    return root;\n  }\n  var secp256k1P, secp256k1N, _1n6, _2n5, divNearest, Fp, secp256k1, _0n6, Point2;\n  var init_secp256k1 = __esm({\n    \"../../../node_modules/.pnpm/@noble+curves@1.2.0/node_modules/@noble/curves/esm/secp256k1.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_sha256();\n      init_modular();\n      init_shortw_utils();\n      secp256k1P = BigInt(\"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\");\n      secp256k1N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n      _1n6 = BigInt(1);\n      _2n5 = BigInt(2);\n      divNearest = (a, b2) => (a + b2 / _2n5) / b2;\n      Fp = Field(secp256k1P, void 0, void 0, { sqrt: sqrtMod });\n      secp256k1 = createCurve({\n        a: BigInt(0),\n        b: BigInt(7),\n        Fp,\n        n: secp256k1N,\n        // Base point (x, y) aka generator point\n        Gx: BigInt(\"55066263022277343669578718895168534326250603453777594175500187360389116729240\"),\n        Gy: BigInt(\"32670510020758816978083085130507043184471273380659243275938904335757337482424\"),\n        h: BigInt(1),\n        lowS: true,\n        /**\n         * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n         * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n         * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n         * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n         */\n        endo: {\n          beta: BigInt(\"0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\"),\n          splitScalar: (k) => {\n            const n2 = secp256k1N;\n            const a1 = BigInt(\"0x3086d221a7d46bcde86c90e49284eb15\");\n            const b1 = -_1n6 * BigInt(\"0xe4437ed6010e88286f547fa90abfe4c3\");\n            const a2 = BigInt(\"0x114ca50f7a8e2f3f657c1108d9d44cfd8\");\n            const b2 = a1;\n            const POW_2_128 = BigInt(\"0x100000000000000000000000000000000\");\n            const c1 = divNearest(b2 * k, n2);\n            const c2 = divNearest(-b1 * k, n2);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n2);\n            let k2 = mod(-c1 * b1 - c2 * b2, n2);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n              k1 = n2 - k1;\n            if (k2neg)\n              k2 = n2 - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n              throw new Error(\"splitScalar: Endomorphism failed, k=\" + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n          }\n        }\n      }, sha2563);\n      _0n6 = BigInt(0);\n      Point2 = secp256k1.ProjectivePoint;\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/constants/addresses.js\n  var ZeroAddress;\n  var init_addresses2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/constants/addresses.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      ZeroAddress = \"0x0000000000000000000000000000000000000000\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/constants/hashes.js\n  var ZeroHash;\n  var init_hashes2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/constants/hashes.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      ZeroHash = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/constants/index.js\n  var init_constants2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/constants/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_addresses2();\n      init_hashes2();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/crypto/signature.js\n  function toUint256(value) {\n    return zeroPadValue(toBeArray(value), 32);\n  }\n  var BN_03, BN_12, BN_2, BN_27, BN_28, BN_35, _guard2, Signature2;\n  var init_signature = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/crypto/signature.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_constants2();\n      init_utils3();\n      BN_03 = BigInt(0);\n      BN_12 = BigInt(1);\n      BN_2 = BigInt(2);\n      BN_27 = BigInt(27);\n      BN_28 = BigInt(28);\n      BN_35 = BigInt(35);\n      _guard2 = {};\n      Signature2 = class _Signature {\n        #r;\n        #s;\n        #v;\n        #networkV;\n        /**\n         *  The ``r`` value for a signature.\n         *\n         *  This represents the ``x`` coordinate of a \"reference\" or\n         *  challenge point, from which the ``y`` can be computed.\n         */\n        get r() {\n          return this.#r;\n        }\n        set r(value) {\n          assertArgument(dataLength(value) === 32, \"invalid r\", \"value\", value);\n          this.#r = hexlify2(value);\n        }\n        /**\n         *  The ``s`` value for a signature.\n         */\n        get s() {\n          return this.#s;\n        }\n        set s(_value) {\n          assertArgument(dataLength(_value) === 32, \"invalid s\", \"value\", _value);\n          const value = hexlify2(_value);\n          assertArgument(parseInt(value.substring(0, 3)) < 8, \"non-canonical s\", \"value\", value);\n          this.#s = value;\n        }\n        /**\n         *  The ``v`` value for a signature.\n         *\n         *  Since a given ``x`` value for ``r`` has two possible values for\n         *  its correspondin ``y``, the ``v`` indicates which of the two ``y``\n         *  values to use.\n         *\n         *  It is normalized to the values ``27`` or ``28`` for legacy\n         *  purposes.\n         */\n        get v() {\n          return this.#v;\n        }\n        set v(value) {\n          const v = getNumber(value, \"value\");\n          assertArgument(v === 27 || v === 28, \"invalid v\", \"v\", value);\n          this.#v = v;\n        }\n        /**\n         *  The EIP-155 ``v`` for legacy transactions. For non-legacy\n         *  transactions, this value is ``null``.\n         */\n        get networkV() {\n          return this.#networkV;\n        }\n        /**\n         *  The chain ID for EIP-155 legacy transactions. For non-legacy\n         *  transactions, this value is ``null``.\n         */\n        get legacyChainId() {\n          const v = this.networkV;\n          if (v == null) {\n            return null;\n          }\n          return _Signature.getChainId(v);\n        }\n        /**\n         *  The ``yParity`` for the signature.\n         *\n         *  See ``v`` for more details on how this value is used.\n         */\n        get yParity() {\n          return this.v === 27 ? 0 : 1;\n        }\n        /**\n         *  The [[link-eip-2098]] compact representation of the ``yParity``\n         *  and ``s`` compacted into a single ``bytes32``.\n         */\n        get yParityAndS() {\n          const yParityAndS = getBytes(this.s);\n          if (this.yParity) {\n            yParityAndS[0] |= 128;\n          }\n          return hexlify2(yParityAndS);\n        }\n        /**\n         *  The [[link-eip-2098]] compact representation.\n         */\n        get compactSerialized() {\n          return concat2([this.r, this.yParityAndS]);\n        }\n        /**\n         *  The serialized representation.\n         */\n        get serialized() {\n          return concat2([this.r, this.s, this.yParity ? \"0x1c\" : \"0x1b\"]);\n        }\n        /**\n         *  @private\n         */\n        constructor(guard, r2, s, v) {\n          assertPrivate(guard, _guard2, \"Signature\");\n          this.#r = r2;\n          this.#s = s;\n          this.#v = v;\n          this.#networkV = null;\n        }\n        [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n          return `Signature { r: \"${this.r}\", s: \"${this.s}\", yParity: ${this.yParity}, networkV: ${this.networkV} }`;\n        }\n        /**\n         *  Returns a new identical [[Signature]].\n         */\n        clone() {\n          const clone = new _Signature(_guard2, this.r, this.s, this.v);\n          if (this.networkV) {\n            clone.#networkV = this.networkV;\n          }\n          return clone;\n        }\n        /**\n         *  Returns a representation that is compatible with ``JSON.stringify``.\n         */\n        toJSON() {\n          const networkV = this.networkV;\n          return {\n            _type: \"signature\",\n            networkV: networkV != null ? networkV.toString() : null,\n            r: this.r,\n            s: this.s,\n            v: this.v\n          };\n        }\n        /**\n         *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.\n         *\n         *  @example:\n         *    Signature.getChainId(45)\n         *    //_result:\n         *\n         *    Signature.getChainId(46)\n         *    //_result:\n         */\n        static getChainId(v) {\n          const bv = getBigInt(v, \"v\");\n          if (bv == BN_27 || bv == BN_28) {\n            return BN_03;\n          }\n          assertArgument(bv >= BN_35, \"invalid EIP-155 v\", \"v\", v);\n          return (bv - BN_35) / BN_2;\n        }\n        /**\n         *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.\n         *\n         *  Legacy transactions which use [[link-eip-155]] hijack the ``v``\n         *  property to include the chain ID.\n         *\n         *  @example:\n         *    Signature.getChainIdV(5, 27)\n         *    //_result:\n         *\n         *    Signature.getChainIdV(5, 28)\n         *    //_result:\n         *\n         */\n        static getChainIdV(chainId, v) {\n          return getBigInt(chainId) * BN_2 + BigInt(35 + v - 27);\n        }\n        /**\n         *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,\n         *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.\n         *\n         *  @example:\n         *    // The values 0 and 1 imply v is actually yParity\n         *    Signature.getNormalizedV(0)\n         *    //_result:\n         *\n         *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)\n         *    Signature.getNormalizedV(27)\n         *    //_result:\n         *\n         *    // Legacy EIP-155 transaction (i.e. >= 35)\n         *    Signature.getNormalizedV(46)\n         *    //_result:\n         *\n         *    // Invalid values throw\n         *    Signature.getNormalizedV(5)\n         *    //_error:\n         */\n        static getNormalizedV(v) {\n          const bv = getBigInt(v);\n          if (bv === BN_03 || bv === BN_27) {\n            return 27;\n          }\n          if (bv === BN_12 || bv === BN_28) {\n            return 28;\n          }\n          assertArgument(bv >= BN_35, \"invalid v\", \"v\", v);\n          return bv & BN_12 ? 27 : 28;\n        }\n        /**\n         *  Creates a new [[Signature]].\n         *\n         *  If no %%sig%% is provided, a new [[Signature]] is created\n         *  with default values.\n         *\n         *  If %%sig%% is a string, it is parsed.\n         */\n        static from(sig) {\n          function assertError(check, message) {\n            assertArgument(check, message, \"signature\", sig);\n          }\n          ;\n          if (sig == null) {\n            return new _Signature(_guard2, ZeroHash, ZeroHash, 27);\n          }\n          if (typeof sig === \"string\") {\n            const bytes3 = getBytes(sig, \"signature\");\n            if (bytes3.length === 64) {\n              const r3 = hexlify2(bytes3.slice(0, 32));\n              const s2 = bytes3.slice(32, 64);\n              const v2 = s2[0] & 128 ? 28 : 27;\n              s2[0] &= 127;\n              return new _Signature(_guard2, r3, hexlify2(s2), v2);\n            }\n            if (bytes3.length === 65) {\n              const r3 = hexlify2(bytes3.slice(0, 32));\n              const s2 = bytes3.slice(32, 64);\n              assertError((s2[0] & 128) === 0, \"non-canonical s\");\n              const v2 = _Signature.getNormalizedV(bytes3[64]);\n              return new _Signature(_guard2, r3, hexlify2(s2), v2);\n            }\n            assertError(false, \"invalid raw signature length\");\n          }\n          if (sig instanceof _Signature) {\n            return sig.clone();\n          }\n          const _r = sig.r;\n          assertError(_r != null, \"missing r\");\n          const r2 = toUint256(_r);\n          const s = function(s2, yParityAndS) {\n            if (s2 != null) {\n              return toUint256(s2);\n            }\n            if (yParityAndS != null) {\n              assertError(isHexString2(yParityAndS, 32), \"invalid yParityAndS\");\n              const bytes3 = getBytes(yParityAndS);\n              bytes3[0] &= 127;\n              return hexlify2(bytes3);\n            }\n            assertError(false, \"missing s\");\n          }(sig.s, sig.yParityAndS);\n          assertError((getBytes(s)[0] & 128) == 0, \"non-canonical s\");\n          const { networkV, v } = function(_v, yParityAndS, yParity) {\n            if (_v != null) {\n              const v2 = getBigInt(_v);\n              return {\n                networkV: v2 >= BN_35 ? v2 : void 0,\n                v: _Signature.getNormalizedV(v2)\n              };\n            }\n            if (yParityAndS != null) {\n              assertError(isHexString2(yParityAndS, 32), \"invalid yParityAndS\");\n              return { v: getBytes(yParityAndS)[0] & 128 ? 28 : 27 };\n            }\n            if (yParity != null) {\n              switch (getNumber(yParity, \"sig.yParity\")) {\n                case 0:\n                  return { v: 27 };\n                case 1:\n                  return { v: 28 };\n              }\n              assertError(false, \"invalid yParity\");\n            }\n            assertError(false, \"missing v\");\n          }(sig.v, sig.yParityAndS, sig.yParity);\n          const result = new _Signature(_guard2, r2, s, v);\n          if (networkV) {\n            result.#networkV = networkV;\n          }\n          assertError(sig.yParity == null || getNumber(sig.yParity, \"sig.yParity\") === result.yParity, \"yParity mismatch\");\n          assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, \"yParityAndS mismatch\");\n          return result;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/crypto/signing-key.js\n  var SigningKey2;\n  var init_signing_key = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/crypto/signing-key.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_secp256k1();\n      init_utils3();\n      init_signature();\n      SigningKey2 = class _SigningKey {\n        #privateKey;\n        /**\n         *  Creates a new **SigningKey** for %%privateKey%%.\n         */\n        constructor(privateKey) {\n          assertArgument(dataLength(privateKey) === 32, \"invalid private key\", \"privateKey\", \"[REDACTED]\");\n          this.#privateKey = hexlify2(privateKey);\n        }\n        /**\n         *  The private key.\n         */\n        get privateKey() {\n          return this.#privateKey;\n        }\n        /**\n         *  The uncompressed public key.\n         *\n         * This will always begin with the prefix ``0x04`` and be 132\n         * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).\n         */\n        get publicKey() {\n          return _SigningKey.computePublicKey(this.#privateKey);\n        }\n        /**\n         *  The compressed public key.\n         *\n         *  This will always begin with either the prefix ``0x02`` or ``0x03``\n         *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal\n         *  nibbles)\n         */\n        get compressedPublicKey() {\n          return _SigningKey.computePublicKey(this.#privateKey, true);\n        }\n        /**\n         *  Return the signature of the signed %%digest%%.\n         */\n        sign(digest) {\n          assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n          const sig = secp256k1.sign(getBytesCopy(digest), getBytesCopy(this.#privateKey), {\n            lowS: true\n          });\n          return Signature2.from({\n            r: toBeHex(sig.r, 32),\n            s: toBeHex(sig.s, 32),\n            v: sig.recovery ? 28 : 27\n          });\n        }\n        /**\n         *  Returns the [[link-wiki-ecdh]] shared secret between this\n         *  private key and the %%other%% key.\n         *\n         *  The %%other%% key may be any type of key, a raw public key,\n         *  a compressed/uncompressed pubic key or aprivate key.\n         *\n         *  Best practice is usually to use a cryptographic hash on the\n         *  returned value before using it as a symetric secret.\n         *\n         *  @example:\n         *    sign1 = new SigningKey(id(\"some-secret-1\"))\n         *    sign2 = new SigningKey(id(\"some-secret-2\"))\n         *\n         *    // Notice that privA.computeSharedSecret(pubB)...\n         *    sign1.computeSharedSecret(sign2.publicKey)\n         *    //_result:\n         *\n         *    // ...is equal to privB.computeSharedSecret(pubA).\n         *    sign2.computeSharedSecret(sign1.publicKey)\n         *    //_result:\n         */\n        computeSharedSecret(other) {\n          const pubKey = _SigningKey.computePublicKey(other);\n          return hexlify2(secp256k1.getSharedSecret(getBytesCopy(this.#privateKey), getBytes(pubKey), false));\n        }\n        /**\n         *  Compute the public key for %%key%%, optionally %%compressed%%.\n         *\n         *  The %%key%% may be any type of key, a raw public key, a\n         *  compressed/uncompressed public key or private key.\n         *\n         *  @example:\n         *    sign = new SigningKey(id(\"some-secret\"));\n         *\n         *    // Compute the uncompressed public key for a private key\n         *    SigningKey.computePublicKey(sign.privateKey)\n         *    //_result:\n         *\n         *    // Compute the compressed public key for a private key\n         *    SigningKey.computePublicKey(sign.privateKey, true)\n         *    //_result:\n         *\n         *    // Compute the uncompressed public key\n         *    SigningKey.computePublicKey(sign.publicKey, false);\n         *    //_result:\n         *\n         *    // Compute the Compressed a public key\n         *    SigningKey.computePublicKey(sign.publicKey, true);\n         *    //_result:\n         */\n        static computePublicKey(key2, compressed) {\n          let bytes3 = getBytes(key2, \"key\");\n          if (bytes3.length === 32) {\n            const pubKey = secp256k1.getPublicKey(bytes3, !!compressed);\n            return hexlify2(pubKey);\n          }\n          if (bytes3.length === 64) {\n            const pub = new Uint8Array(65);\n            pub[0] = 4;\n            pub.set(bytes3, 1);\n            bytes3 = pub;\n          }\n          const point3 = secp256k1.ProjectivePoint.fromHex(bytes3);\n          return hexlify2(point3.toRawBytes(compressed));\n        }\n        /**\n         *  Returns the public key for the private key which produced the\n         *  %%signature%% for the given %%digest%%.\n         *\n         *  @example:\n         *    key = new SigningKey(id(\"some-secret\"))\n         *    digest = id(\"hello world\")\n         *    sig = key.sign(digest)\n         *\n         *    // Notice the signer public key...\n         *    key.publicKey\n         *    //_result:\n         *\n         *    // ...is equal to the recovered public key\n         *    SigningKey.recoverPublicKey(digest, sig)\n         *    //_result:\n         *\n         */\n        static recoverPublicKey(digest, signature2) {\n          assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n          const sig = Signature2.from(signature2);\n          let secpSig = secp256k1.Signature.fromCompact(getBytesCopy(concat2([sig.r, sig.s])));\n          secpSig = secpSig.addRecoveryBit(sig.yParity);\n          const pubKey = secpSig.recoverPublicKey(getBytesCopy(digest));\n          assertArgument(pubKey != null, \"invalid signature for digest\", \"signature\", signature2);\n          return \"0x\" + pubKey.toHex(false);\n        }\n        /**\n         *  Returns the point resulting from adding the ellipic curve points\n         *  %%p0%% and %%p1%%.\n         *\n         *  This is not a common function most developers should require, but\n         *  can be useful for certain privacy-specific techniques.\n         *\n         *  For example, it is used by [[HDNodeWallet]] to compute child\n         *  addresses from parent public keys and chain codes.\n         */\n        static addPoints(p0, p1, compressed) {\n          const pub0 = secp256k1.ProjectivePoint.fromHex(_SigningKey.computePublicKey(p0).substring(2));\n          const pub1 = secp256k1.ProjectivePoint.fromHex(_SigningKey.computePublicKey(p1).substring(2));\n          return \"0x\" + pub0.add(pub1).toHex(!!compressed);\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/crypto/index.js\n  var init_crypto2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/crypto/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_keccak();\n      init_sha23();\n      init_signing_key();\n      init_signature();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/address/address.js\n  function getChecksumAddress2(address) {\n    address = address.toLowerCase();\n    const chars = address.substring(2).split(\"\");\n    const expanded = new Uint8Array(40);\n    for (let i = 0; i < 40; i++) {\n      expanded[i] = chars[i].charCodeAt(0);\n    }\n    const hashed = getBytes(keccak2563(expanded));\n    for (let i = 0; i < 40; i += 2) {\n      if (hashed[i >> 1] >> 4 >= 8) {\n        chars[i] = chars[i].toUpperCase();\n      }\n      if ((hashed[i >> 1] & 15) >= 8) {\n        chars[i + 1] = chars[i + 1].toUpperCase();\n      }\n    }\n    return \"0x\" + chars.join(\"\");\n  }\n  function ibanChecksum2(address) {\n    address = address.toUpperCase();\n    address = address.substring(4) + address.substring(0, 2) + \"00\";\n    let expanded = address.split(\"\").map((c) => {\n      return ibanLookup2[c];\n    }).join(\"\");\n    while (expanded.length >= safeDigits2) {\n      let block = expanded.substring(0, safeDigits2);\n      expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n    }\n    let checksum = String(98 - parseInt(expanded, 10) % 97);\n    while (checksum.length < 2) {\n      checksum = \"0\" + checksum;\n    }\n    return checksum;\n  }\n  function fromBase36(value) {\n    value = value.toLowerCase();\n    let result = BN_04;\n    for (let i = 0; i < value.length; i++) {\n      result = result * BN_36 + Base36[value[i]];\n    }\n    return result;\n  }\n  function getAddress2(address) {\n    assertArgument(typeof address === \"string\", \"invalid address\", \"address\", address);\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n      if (!address.startsWith(\"0x\")) {\n        address = \"0x\" + address;\n      }\n      const result = getChecksumAddress2(address);\n      assertArgument(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, \"bad address checksum\", \"address\", address);\n      return result;\n    }\n    if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n      assertArgument(address.substring(2, 4) === ibanChecksum2(address), \"bad icap checksum\", \"address\", address);\n      let result = fromBase36(address.substring(4)).toString(16);\n      while (result.length < 40) {\n        result = \"0\" + result;\n      }\n      return getChecksumAddress2(\"0x\" + result);\n    }\n    assertArgument(false, \"invalid address\", \"address\", address);\n  }\n  var BN_04, BN_36, ibanLookup2, safeDigits2, Base36;\n  var init_address2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/address/address.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_crypto2();\n      init_utils3();\n      BN_04 = BigInt(0);\n      BN_36 = BigInt(36);\n      ibanLookup2 = {};\n      for (let i = 0; i < 10; i++) {\n        ibanLookup2[String(i)] = String(i);\n      }\n      for (let i = 0; i < 26; i++) {\n        ibanLookup2[String.fromCharCode(65 + i)] = String(10 + i);\n      }\n      safeDigits2 = 15;\n      Base36 = function() {\n        ;\n        const result = {};\n        for (let i = 0; i < 36; i++) {\n          const key2 = \"0123456789abcdefghijklmnopqrstuvwxyz\"[i];\n          result[key2] = BigInt(i);\n        }\n        return result;\n      }();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/address/contract-address.js\n  function getCreateAddress(tx) {\n    const from = getAddress2(tx.from);\n    const nonce = getBigInt(tx.nonce, \"tx.nonce\");\n    let nonceHex = nonce.toString(16);\n    if (nonceHex === \"0\") {\n      nonceHex = \"0x\";\n    } else if (nonceHex.length % 2) {\n      nonceHex = \"0x0\" + nonceHex;\n    } else {\n      nonceHex = \"0x\" + nonceHex;\n    }\n    return getAddress2(dataSlice(keccak2563(encodeRlp([from, nonceHex])), 12));\n  }\n  var init_contract_address = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/address/contract-address.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_crypto2();\n      init_utils3();\n      init_address2();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/address/checks.js\n  function isAddressable(value) {\n    return value && typeof value.getAddress === \"function\";\n  }\n  async function checkAddress(target, promise) {\n    const result = await promise;\n    if (result == null || result === \"0x0000000000000000000000000000000000000000\") {\n      assert3(typeof target !== \"string\", \"unconfigured name\", \"UNCONFIGURED_NAME\", { value: target });\n      assertArgument(false, \"invalid AddressLike value; did not resolve to a value address\", \"target\", target);\n    }\n    return getAddress2(result);\n  }\n  function resolveAddress(target, resolver) {\n    if (typeof target === \"string\") {\n      if (target.match(/^0x[0-9a-f]{40}$/i)) {\n        return getAddress2(target);\n      }\n      assert3(resolver != null, \"ENS resolution requires a provider\", \"UNSUPPORTED_OPERATION\", { operation: \"resolveName\" });\n      return checkAddress(target, resolver.resolveName(target));\n    } else if (isAddressable(target)) {\n      return checkAddress(target, target.getAddress());\n    } else if (target && typeof target.then === \"function\") {\n      return checkAddress(target, target);\n    }\n    assertArgument(false, \"unsupported addressable value\", \"target\", target);\n  }\n  var init_checks = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/address/checks.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_utils3();\n      init_address2();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/address/index.js\n  var init_address3 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/address/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_address2();\n      init_contract_address();\n      init_checks();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/typed.js\n  function n(value, width) {\n    let signed3 = false;\n    if (width < 0) {\n      signed3 = true;\n      width *= -1;\n    }\n    return new Typed(_gaurd, `${signed3 ? \"\" : \"u\"}int${width}`, value, { signed: signed3, width });\n  }\n  function b(value, size) {\n    return new Typed(_gaurd, `bytes${size ? size : \"\"}`, value, { size });\n  }\n  var _gaurd, _typedSymbol, Typed;\n  var init_typed = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/typed.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_utils3();\n      _gaurd = {};\n      _typedSymbol = Symbol.for(\"_ethers_typed\");\n      Typed = class _Typed {\n        /**\n         *  The type, as a Solidity-compatible type.\n         */\n        type;\n        /**\n         *  The actual value.\n         */\n        value;\n        #options;\n        /**\n         *  @_ignore:\n         */\n        _typedSymbol;\n        /**\n         *  @_ignore:\n         */\n        constructor(gaurd, type, value, options) {\n          if (options == null) {\n            options = null;\n          }\n          assertPrivate(_gaurd, gaurd, \"Typed\");\n          defineProperties(this, { _typedSymbol, type, value });\n          this.#options = options;\n          this.format();\n        }\n        /**\n         *  Format the type as a Human-Readable type.\n         */\n        format() {\n          if (this.type === \"array\") {\n            throw new Error(\"\");\n          } else if (this.type === \"dynamicArray\") {\n            throw new Error(\"\");\n          } else if (this.type === \"tuple\") {\n            return `tuple(${this.value.map((v) => v.format()).join(\",\")})`;\n          }\n          return this.type;\n        }\n        /**\n         *  The default value returned by this type.\n         */\n        defaultValue() {\n          return 0;\n        }\n        /**\n         *  The minimum value for numeric types.\n         */\n        minValue() {\n          return 0;\n        }\n        /**\n         *  The maximum value for numeric types.\n         */\n        maxValue() {\n          return 0;\n        }\n        /**\n         *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].\n         */\n        isBigInt() {\n          return !!this.type.match(/^u?int[0-9]+$/);\n        }\n        /**\n         *  Returns ``true`` and provides a type guard is this is a [[TypedData]].\n         */\n        isData() {\n          return this.type.startsWith(\"bytes\");\n        }\n        /**\n         *  Returns ``true`` and provides a type guard is this is a [[TypedString]].\n         */\n        isString() {\n          return this.type === \"string\";\n        }\n        /**\n         *  Returns the tuple name, if this is a tuple. Throws otherwise.\n         */\n        get tupleName() {\n          if (this.type !== \"tuple\") {\n            throw TypeError(\"not a tuple\");\n          }\n          return this.#options;\n        }\n        // Returns the length of this type as an array\n        // - `null` indicates the length is unforced, it could be dynamic\n        // - `-1` indicates the length is dynamic\n        // - any other value indicates it is a static array and is its length\n        /**\n         *  Returns the length of the array type or ``-1`` if it is dynamic.\n         *\n         *  Throws if the type is not an array.\n         */\n        get arrayLength() {\n          if (this.type !== \"array\") {\n            throw TypeError(\"not an array\");\n          }\n          if (this.#options === true) {\n            return -1;\n          }\n          if (this.#options === false) {\n            return this.value.length;\n          }\n          return null;\n        }\n        /**\n         *  Returns a new **Typed** of %%type%% with the %%value%%.\n         */\n        static from(type, value) {\n          return new _Typed(_gaurd, type, value);\n        }\n        /**\n         *  Return a new ``uint8`` type for %%v%%.\n         */\n        static uint8(v) {\n          return n(v, 8);\n        }\n        /**\n         *  Return a new ``uint16`` type for %%v%%.\n         */\n        static uint16(v) {\n          return n(v, 16);\n        }\n        /**\n         *  Return a new ``uint24`` type for %%v%%.\n         */\n        static uint24(v) {\n          return n(v, 24);\n        }\n        /**\n         *  Return a new ``uint32`` type for %%v%%.\n         */\n        static uint32(v) {\n          return n(v, 32);\n        }\n        /**\n         *  Return a new ``uint40`` type for %%v%%.\n         */\n        static uint40(v) {\n          return n(v, 40);\n        }\n        /**\n         *  Return a new ``uint48`` type for %%v%%.\n         */\n        static uint48(v) {\n          return n(v, 48);\n        }\n        /**\n         *  Return a new ``uint56`` type for %%v%%.\n         */\n        static uint56(v) {\n          return n(v, 56);\n        }\n        /**\n         *  Return a new ``uint64`` type for %%v%%.\n         */\n        static uint64(v) {\n          return n(v, 64);\n        }\n        /**\n         *  Return a new ``uint72`` type for %%v%%.\n         */\n        static uint72(v) {\n          return n(v, 72);\n        }\n        /**\n         *  Return a new ``uint80`` type for %%v%%.\n         */\n        static uint80(v) {\n          return n(v, 80);\n        }\n        /**\n         *  Return a new ``uint88`` type for %%v%%.\n         */\n        static uint88(v) {\n          return n(v, 88);\n        }\n        /**\n         *  Return a new ``uint96`` type for %%v%%.\n         */\n        static uint96(v) {\n          return n(v, 96);\n        }\n        /**\n         *  Return a new ``uint104`` type for %%v%%.\n         */\n        static uint104(v) {\n          return n(v, 104);\n        }\n        /**\n         *  Return a new ``uint112`` type for %%v%%.\n         */\n        static uint112(v) {\n          return n(v, 112);\n        }\n        /**\n         *  Return a new ``uint120`` type for %%v%%.\n         */\n        static uint120(v) {\n          return n(v, 120);\n        }\n        /**\n         *  Return a new ``uint128`` type for %%v%%.\n         */\n        static uint128(v) {\n          return n(v, 128);\n        }\n        /**\n         *  Return a new ``uint136`` type for %%v%%.\n         */\n        static uint136(v) {\n          return n(v, 136);\n        }\n        /**\n         *  Return a new ``uint144`` type for %%v%%.\n         */\n        static uint144(v) {\n          return n(v, 144);\n        }\n        /**\n         *  Return a new ``uint152`` type for %%v%%.\n         */\n        static uint152(v) {\n          return n(v, 152);\n        }\n        /**\n         *  Return a new ``uint160`` type for %%v%%.\n         */\n        static uint160(v) {\n          return n(v, 160);\n        }\n        /**\n         *  Return a new ``uint168`` type for %%v%%.\n         */\n        static uint168(v) {\n          return n(v, 168);\n        }\n        /**\n         *  Return a new ``uint176`` type for %%v%%.\n         */\n        static uint176(v) {\n          return n(v, 176);\n        }\n        /**\n         *  Return a new ``uint184`` type for %%v%%.\n         */\n        static uint184(v) {\n          return n(v, 184);\n        }\n        /**\n         *  Return a new ``uint192`` type for %%v%%.\n         */\n        static uint192(v) {\n          return n(v, 192);\n        }\n        /**\n         *  Return a new ``uint200`` type for %%v%%.\n         */\n        static uint200(v) {\n          return n(v, 200);\n        }\n        /**\n         *  Return a new ``uint208`` type for %%v%%.\n         */\n        static uint208(v) {\n          return n(v, 208);\n        }\n        /**\n         *  Return a new ``uint216`` type for %%v%%.\n         */\n        static uint216(v) {\n          return n(v, 216);\n        }\n        /**\n         *  Return a new ``uint224`` type for %%v%%.\n         */\n        static uint224(v) {\n          return n(v, 224);\n        }\n        /**\n         *  Return a new ``uint232`` type for %%v%%.\n         */\n        static uint232(v) {\n          return n(v, 232);\n        }\n        /**\n         *  Return a new ``uint240`` type for %%v%%.\n         */\n        static uint240(v) {\n          return n(v, 240);\n        }\n        /**\n         *  Return a new ``uint248`` type for %%v%%.\n         */\n        static uint248(v) {\n          return n(v, 248);\n        }\n        /**\n         *  Return a new ``uint256`` type for %%v%%.\n         */\n        static uint256(v) {\n          return n(v, 256);\n        }\n        /**\n         *  Return a new ``uint256`` type for %%v%%.\n         */\n        static uint(v) {\n          return n(v, 256);\n        }\n        /**\n         *  Return a new ``int8`` type for %%v%%.\n         */\n        static int8(v) {\n          return n(v, -8);\n        }\n        /**\n         *  Return a new ``int16`` type for %%v%%.\n         */\n        static int16(v) {\n          return n(v, -16);\n        }\n        /**\n         *  Return a new ``int24`` type for %%v%%.\n         */\n        static int24(v) {\n          return n(v, -24);\n        }\n        /**\n         *  Return a new ``int32`` type for %%v%%.\n         */\n        static int32(v) {\n          return n(v, -32);\n        }\n        /**\n         *  Return a new ``int40`` type for %%v%%.\n         */\n        static int40(v) {\n          return n(v, -40);\n        }\n        /**\n         *  Return a new ``int48`` type for %%v%%.\n         */\n        static int48(v) {\n          return n(v, -48);\n        }\n        /**\n         *  Return a new ``int56`` type for %%v%%.\n         */\n        static int56(v) {\n          return n(v, -56);\n        }\n        /**\n         *  Return a new ``int64`` type for %%v%%.\n         */\n        static int64(v) {\n          return n(v, -64);\n        }\n        /**\n         *  Return a new ``int72`` type for %%v%%.\n         */\n        static int72(v) {\n          return n(v, -72);\n        }\n        /**\n         *  Return a new ``int80`` type for %%v%%.\n         */\n        static int80(v) {\n          return n(v, -80);\n        }\n        /**\n         *  Return a new ``int88`` type for %%v%%.\n         */\n        static int88(v) {\n          return n(v, -88);\n        }\n        /**\n         *  Return a new ``int96`` type for %%v%%.\n         */\n        static int96(v) {\n          return n(v, -96);\n        }\n        /**\n         *  Return a new ``int104`` type for %%v%%.\n         */\n        static int104(v) {\n          return n(v, -104);\n        }\n        /**\n         *  Return a new ``int112`` type for %%v%%.\n         */\n        static int112(v) {\n          return n(v, -112);\n        }\n        /**\n         *  Return a new ``int120`` type for %%v%%.\n         */\n        static int120(v) {\n          return n(v, -120);\n        }\n        /**\n         *  Return a new ``int128`` type for %%v%%.\n         */\n        static int128(v) {\n          return n(v, -128);\n        }\n        /**\n         *  Return a new ``int136`` type for %%v%%.\n         */\n        static int136(v) {\n          return n(v, -136);\n        }\n        /**\n         *  Return a new ``int144`` type for %%v%%.\n         */\n        static int144(v) {\n          return n(v, -144);\n        }\n        /**\n         *  Return a new ``int52`` type for %%v%%.\n         */\n        static int152(v) {\n          return n(v, -152);\n        }\n        /**\n         *  Return a new ``int160`` type for %%v%%.\n         */\n        static int160(v) {\n          return n(v, -160);\n        }\n        /**\n         *  Return a new ``int168`` type for %%v%%.\n         */\n        static int168(v) {\n          return n(v, -168);\n        }\n        /**\n         *  Return a new ``int176`` type for %%v%%.\n         */\n        static int176(v) {\n          return n(v, -176);\n        }\n        /**\n         *  Return a new ``int184`` type for %%v%%.\n         */\n        static int184(v) {\n          return n(v, -184);\n        }\n        /**\n         *  Return a new ``int92`` type for %%v%%.\n         */\n        static int192(v) {\n          return n(v, -192);\n        }\n        /**\n         *  Return a new ``int200`` type for %%v%%.\n         */\n        static int200(v) {\n          return n(v, -200);\n        }\n        /**\n         *  Return a new ``int208`` type for %%v%%.\n         */\n        static int208(v) {\n          return n(v, -208);\n        }\n        /**\n         *  Return a new ``int216`` type for %%v%%.\n         */\n        static int216(v) {\n          return n(v, -216);\n        }\n        /**\n         *  Return a new ``int224`` type for %%v%%.\n         */\n        static int224(v) {\n          return n(v, -224);\n        }\n        /**\n         *  Return a new ``int232`` type for %%v%%.\n         */\n        static int232(v) {\n          return n(v, -232);\n        }\n        /**\n         *  Return a new ``int240`` type for %%v%%.\n         */\n        static int240(v) {\n          return n(v, -240);\n        }\n        /**\n         *  Return a new ``int248`` type for %%v%%.\n         */\n        static int248(v) {\n          return n(v, -248);\n        }\n        /**\n         *  Return a new ``int256`` type for %%v%%.\n         */\n        static int256(v) {\n          return n(v, -256);\n        }\n        /**\n         *  Return a new ``int256`` type for %%v%%.\n         */\n        static int(v) {\n          return n(v, -256);\n        }\n        /**\n         *  Return a new ``bytes1`` type for %%v%%.\n         */\n        static bytes1(v) {\n          return b(v, 1);\n        }\n        /**\n         *  Return a new ``bytes2`` type for %%v%%.\n         */\n        static bytes2(v) {\n          return b(v, 2);\n        }\n        /**\n         *  Return a new ``bytes3`` type for %%v%%.\n         */\n        static bytes3(v) {\n          return b(v, 3);\n        }\n        /**\n         *  Return a new ``bytes4`` type for %%v%%.\n         */\n        static bytes4(v) {\n          return b(v, 4);\n        }\n        /**\n         *  Return a new ``bytes5`` type for %%v%%.\n         */\n        static bytes5(v) {\n          return b(v, 5);\n        }\n        /**\n         *  Return a new ``bytes6`` type for %%v%%.\n         */\n        static bytes6(v) {\n          return b(v, 6);\n        }\n        /**\n         *  Return a new ``bytes7`` type for %%v%%.\n         */\n        static bytes7(v) {\n          return b(v, 7);\n        }\n        /**\n         *  Return a new ``bytes8`` type for %%v%%.\n         */\n        static bytes8(v) {\n          return b(v, 8);\n        }\n        /**\n         *  Return a new ``bytes9`` type for %%v%%.\n         */\n        static bytes9(v) {\n          return b(v, 9);\n        }\n        /**\n         *  Return a new ``bytes10`` type for %%v%%.\n         */\n        static bytes10(v) {\n          return b(v, 10);\n        }\n        /**\n         *  Return a new ``bytes11`` type for %%v%%.\n         */\n        static bytes11(v) {\n          return b(v, 11);\n        }\n        /**\n         *  Return a new ``bytes12`` type for %%v%%.\n         */\n        static bytes12(v) {\n          return b(v, 12);\n        }\n        /**\n         *  Return a new ``bytes13`` type for %%v%%.\n         */\n        static bytes13(v) {\n          return b(v, 13);\n        }\n        /**\n         *  Return a new ``bytes14`` type for %%v%%.\n         */\n        static bytes14(v) {\n          return b(v, 14);\n        }\n        /**\n         *  Return a new ``bytes15`` type for %%v%%.\n         */\n        static bytes15(v) {\n          return b(v, 15);\n        }\n        /**\n         *  Return a new ``bytes16`` type for %%v%%.\n         */\n        static bytes16(v) {\n          return b(v, 16);\n        }\n        /**\n         *  Return a new ``bytes17`` type for %%v%%.\n         */\n        static bytes17(v) {\n          return b(v, 17);\n        }\n        /**\n         *  Return a new ``bytes18`` type for %%v%%.\n         */\n        static bytes18(v) {\n          return b(v, 18);\n        }\n        /**\n         *  Return a new ``bytes19`` type for %%v%%.\n         */\n        static bytes19(v) {\n          return b(v, 19);\n        }\n        /**\n         *  Return a new ``bytes20`` type for %%v%%.\n         */\n        static bytes20(v) {\n          return b(v, 20);\n        }\n        /**\n         *  Return a new ``bytes21`` type for %%v%%.\n         */\n        static bytes21(v) {\n          return b(v, 21);\n        }\n        /**\n         *  Return a new ``bytes22`` type for %%v%%.\n         */\n        static bytes22(v) {\n          return b(v, 22);\n        }\n        /**\n         *  Return a new ``bytes23`` type for %%v%%.\n         */\n        static bytes23(v) {\n          return b(v, 23);\n        }\n        /**\n         *  Return a new ``bytes24`` type for %%v%%.\n         */\n        static bytes24(v) {\n          return b(v, 24);\n        }\n        /**\n         *  Return a new ``bytes25`` type for %%v%%.\n         */\n        static bytes25(v) {\n          return b(v, 25);\n        }\n        /**\n         *  Return a new ``bytes26`` type for %%v%%.\n         */\n        static bytes26(v) {\n          return b(v, 26);\n        }\n        /**\n         *  Return a new ``bytes27`` type for %%v%%.\n         */\n        static bytes27(v) {\n          return b(v, 27);\n        }\n        /**\n         *  Return a new ``bytes28`` type for %%v%%.\n         */\n        static bytes28(v) {\n          return b(v, 28);\n        }\n        /**\n         *  Return a new ``bytes29`` type for %%v%%.\n         */\n        static bytes29(v) {\n          return b(v, 29);\n        }\n        /**\n         *  Return a new ``bytes30`` type for %%v%%.\n         */\n        static bytes30(v) {\n          return b(v, 30);\n        }\n        /**\n         *  Return a new ``bytes31`` type for %%v%%.\n         */\n        static bytes31(v) {\n          return b(v, 31);\n        }\n        /**\n         *  Return a new ``bytes32`` type for %%v%%.\n         */\n        static bytes32(v) {\n          return b(v, 32);\n        }\n        /**\n         *  Return a new ``address`` type for %%v%%.\n         */\n        static address(v) {\n          return new _Typed(_gaurd, \"address\", v);\n        }\n        /**\n         *  Return a new ``bool`` type for %%v%%.\n         */\n        static bool(v) {\n          return new _Typed(_gaurd, \"bool\", !!v);\n        }\n        /**\n         *  Return a new ``bytes`` type for %%v%%.\n         */\n        static bytes(v) {\n          return new _Typed(_gaurd, \"bytes\", v);\n        }\n        /**\n         *  Return a new ``string`` type for %%v%%.\n         */\n        static string(v) {\n          return new _Typed(_gaurd, \"string\", v);\n        }\n        /**\n         *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.\n         */\n        static array(v, dynamic) {\n          throw new Error(\"not implemented yet\");\n          return new _Typed(_gaurd, \"array\", v, dynamic);\n        }\n        /**\n         *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.\n         */\n        static tuple(v, name) {\n          throw new Error(\"not implemented yet\");\n          return new _Typed(_gaurd, \"tuple\", v, name);\n        }\n        /**\n         *  Return a new ``uint8`` type for %%v%%.\n         */\n        static overrides(v) {\n          return new _Typed(_gaurd, \"overrides\", Object.assign({}, v));\n        }\n        /**\n         *  Returns true only if %%value%% is a [[Typed]] instance.\n         */\n        static isTyped(value) {\n          return value && typeof value === \"object\" && \"_typedSymbol\" in value && value._typedSymbol === _typedSymbol;\n        }\n        /**\n         *  If the value is a [[Typed]] instance, validates the underlying value\n         *  and returns it, otherwise returns value directly.\n         *\n         *  This is useful for functions that with to accept either a [[Typed]]\n         *  object or values.\n         */\n        static dereference(value, type) {\n          if (_Typed.isTyped(value)) {\n            if (value.type !== type) {\n              throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);\n            }\n            return value.value;\n          }\n          return value;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/address.js\n  var AddressCoder2;\n  var init_address4 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/address.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_address3();\n      init_maths();\n      init_typed();\n      init_abstract_coder2();\n      AddressCoder2 = class extends Coder2 {\n        constructor(localName) {\n          super(\"address\", \"address\", localName, false);\n        }\n        defaultValue() {\n          return \"0x0000000000000000000000000000000000000000\";\n        }\n        encode(writer, _value) {\n          let value = Typed.dereference(_value, \"string\");\n          try {\n            value = getAddress2(value);\n          } catch (error) {\n            return this._throwError(error.message, _value);\n          }\n          return writer.writeValue(value);\n        }\n        decode(reader) {\n          return getAddress2(toBeHex(reader.readValue(), 20));\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/anonymous.js\n  var AnonymousCoder2;\n  var init_anonymous2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/anonymous.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_abstract_coder2();\n      AnonymousCoder2 = class extends Coder2 {\n        coder;\n        constructor(coder) {\n          super(coder.name, coder.type, \"_\", coder.dynamic);\n          this.coder = coder;\n        }\n        defaultValue() {\n          return this.coder.defaultValue();\n        }\n        encode(writer, value) {\n          return this.coder.encode(writer, value);\n        }\n        decode(reader) {\n          return this.coder.decode(reader);\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/array.js\n  function pack3(writer, coders, values) {\n    let arrayValues = [];\n    if (Array.isArray(values)) {\n      arrayValues = values;\n    } else if (values && typeof values === \"object\") {\n      let unique = {};\n      arrayValues = coders.map((coder) => {\n        const name = coder.localName;\n        assert3(name, \"cannot encode object for signature with missing names\", \"INVALID_ARGUMENT\", { argument: \"values\", info: { coder }, value: values });\n        assert3(!unique[name], \"cannot encode object for signature with duplicate names\", \"INVALID_ARGUMENT\", { argument: \"values\", info: { coder }, value: values });\n        unique[name] = true;\n        return values[name];\n      });\n    } else {\n      assertArgument(false, \"invalid tuple value\", \"tuple\", values);\n    }\n    assertArgument(coders.length === arrayValues.length, \"types/value length mismatch\", \"tuple\", values);\n    let staticWriter = new Writer2();\n    let dynamicWriter = new Writer2();\n    let updateFuncs = [];\n    coders.forEach((coder, index) => {\n      let value = arrayValues[index];\n      if (coder.dynamic) {\n        let dynamicOffset = dynamicWriter.length;\n        coder.encode(dynamicWriter, value);\n        let updateFunc = staticWriter.writeUpdatableValue();\n        updateFuncs.push((baseOffset) => {\n          updateFunc(baseOffset + dynamicOffset);\n        });\n      } else {\n        coder.encode(staticWriter, value);\n      }\n    });\n    updateFuncs.forEach((func) => {\n      func(staticWriter.length);\n    });\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n  }\n  function unpack2(reader, coders) {\n    let values = [];\n    let keys = [];\n    let baseReader = reader.subReader(0);\n    coders.forEach((coder) => {\n      let value = null;\n      if (coder.dynamic) {\n        let offset = reader.readIndex();\n        let offsetReader = baseReader.subReader(offset);\n        try {\n          value = coder.decode(offsetReader);\n        } catch (error) {\n          if (isError(error, \"BUFFER_OVERRUN\")) {\n            throw error;\n          }\n          value = error;\n          value.baseType = coder.name;\n          value.name = coder.localName;\n          value.type = coder.type;\n        }\n      } else {\n        try {\n          value = coder.decode(reader);\n        } catch (error) {\n          if (isError(error, \"BUFFER_OVERRUN\")) {\n            throw error;\n          }\n          value = error;\n          value.baseType = coder.name;\n          value.name = coder.localName;\n          value.type = coder.type;\n        }\n      }\n      if (value == void 0) {\n        throw new Error(\"investigate\");\n      }\n      values.push(value);\n      keys.push(coder.localName || null);\n    });\n    return Result.fromItems(values, keys);\n  }\n  var ArrayCoder2;\n  var init_array2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/array.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_utils3();\n      init_typed();\n      init_abstract_coder2();\n      init_anonymous2();\n      ArrayCoder2 = class extends Coder2 {\n        coder;\n        length;\n        constructor(coder, length, localName) {\n          const type = coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\";\n          const dynamic = length === -1 || coder.dynamic;\n          super(\"array\", type, localName, dynamic);\n          defineProperties(this, { coder, length });\n        }\n        defaultValue() {\n          const defaultChild = this.coder.defaultValue();\n          const result = [];\n          for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n          }\n          return result;\n        }\n        encode(writer, _value) {\n          const value = Typed.dereference(_value, \"array\");\n          if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n          }\n          let count = this.length;\n          if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n          }\n          assertArgumentCount(value.length, count, \"coder array\" + (this.localName ? \" \" + this.localName : \"\"));\n          let coders = [];\n          for (let i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n          }\n          return pack3(writer, coders, value);\n        }\n        decode(reader) {\n          let count = this.length;\n          if (count === -1) {\n            count = reader.readIndex();\n            assert3(count * WordSize <= reader.dataLength, \"insufficient data length\", \"BUFFER_OVERRUN\", { buffer: reader.bytes, offset: count * WordSize, length: reader.dataLength });\n          }\n          let coders = [];\n          for (let i = 0; i < count; i++) {\n            coders.push(new AnonymousCoder2(this.coder));\n          }\n          return unpack2(reader, coders);\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/boolean.js\n  var BooleanCoder2;\n  var init_boolean2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/boolean.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_typed();\n      init_abstract_coder2();\n      BooleanCoder2 = class extends Coder2 {\n        constructor(localName) {\n          super(\"bool\", \"bool\", localName, false);\n        }\n        defaultValue() {\n          return false;\n        }\n        encode(writer, _value) {\n          const value = Typed.dereference(_value, \"bool\");\n          return writer.writeValue(value ? 1 : 0);\n        }\n        decode(reader) {\n          return !!reader.readValue();\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/bytes.js\n  var DynamicBytesCoder2, BytesCoder2;\n  var init_bytes2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/bytes.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_utils3();\n      init_abstract_coder2();\n      DynamicBytesCoder2 = class extends Coder2 {\n        constructor(type, localName) {\n          super(type, type, localName, true);\n        }\n        defaultValue() {\n          return \"0x\";\n        }\n        encode(writer, value) {\n          value = getBytesCopy(value);\n          let length = writer.writeValue(value.length);\n          length += writer.writeBytes(value);\n          return length;\n        }\n        decode(reader) {\n          return reader.readBytes(reader.readIndex(), true);\n        }\n      };\n      BytesCoder2 = class extends DynamicBytesCoder2 {\n        constructor(localName) {\n          super(\"bytes\", localName);\n        }\n        decode(reader) {\n          return hexlify2(super.decode(reader));\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/fixed-bytes.js\n  var FixedBytesCoder2;\n  var init_fixed_bytes2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/fixed-bytes.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_utils3();\n      init_typed();\n      init_abstract_coder2();\n      FixedBytesCoder2 = class extends Coder2 {\n        size;\n        constructor(size, localName) {\n          let name = \"bytes\" + String(size);\n          super(name, name, localName, false);\n          defineProperties(this, { size }, { size: \"number\" });\n        }\n        defaultValue() {\n          return \"0x0000000000000000000000000000000000000000000000000000000000000000\".substring(0, 2 + this.size * 2);\n        }\n        encode(writer, _value) {\n          let data = getBytesCopy(Typed.dereference(_value, this.type));\n          if (data.length !== this.size) {\n            this._throwError(\"incorrect data length\", _value);\n          }\n          return writer.writeBytes(data);\n        }\n        decode(reader) {\n          return hexlify2(reader.readBytes(this.size));\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/null.js\n  var Empty, NullCoder2;\n  var init_null2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/null.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_abstract_coder2();\n      Empty = new Uint8Array([]);\n      NullCoder2 = class extends Coder2 {\n        constructor(localName) {\n          super(\"null\", \"\", localName, false);\n        }\n        defaultValue() {\n          return null;\n        }\n        encode(writer, value) {\n          if (value != null) {\n            this._throwError(\"not null\", value);\n          }\n          return writer.writeBytes(Empty);\n        }\n        decode(reader) {\n          reader.readBytes(0);\n          return null;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/number.js\n  var BN_05, BN_13, BN_MAX_UINT256, NumberCoder2;\n  var init_number2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/number.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_utils3();\n      init_typed();\n      init_abstract_coder2();\n      BN_05 = BigInt(0);\n      BN_13 = BigInt(1);\n      BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n      NumberCoder2 = class extends Coder2 {\n        size;\n        signed;\n        constructor(size, signed3, localName) {\n          const name = (signed3 ? \"int\" : \"uint\") + size * 8;\n          super(name, name, localName, false);\n          defineProperties(this, { size, signed: signed3 }, { size: \"number\", signed: \"boolean\" });\n        }\n        defaultValue() {\n          return 0;\n        }\n        encode(writer, _value) {\n          let value = getBigInt(Typed.dereference(_value, this.type));\n          let maxUintValue = mask(BN_MAX_UINT256, WordSize * 8);\n          if (this.signed) {\n            let bounds = mask(maxUintValue, this.size * 8 - 1);\n            if (value > bounds || value < -(bounds + BN_13)) {\n              this._throwError(\"value out-of-bounds\", _value);\n            }\n            value = toTwos(value, 8 * WordSize);\n          } else if (value < BN_05 || value > mask(maxUintValue, this.size * 8)) {\n            this._throwError(\"value out-of-bounds\", _value);\n          }\n          return writer.writeValue(value);\n        }\n        decode(reader) {\n          let value = mask(reader.readValue(), this.size * 8);\n          if (this.signed) {\n            value = fromTwos(value, this.size * 8);\n          }\n          return value;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/string.js\n  var StringCoder2;\n  var init_string2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/string.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_utf82();\n      init_typed();\n      init_bytes2();\n      StringCoder2 = class extends DynamicBytesCoder2 {\n        constructor(localName) {\n          super(\"string\", localName);\n        }\n        defaultValue() {\n          return \"\";\n        }\n        encode(writer, _value) {\n          return super.encode(writer, toUtf8Bytes2(Typed.dereference(_value, \"string\")));\n        }\n        decode(reader) {\n          return toUtf8String2(super.decode(reader));\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/tuple.js\n  var TupleCoder2;\n  var init_tuple2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/tuple.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_properties();\n      init_typed();\n      init_abstract_coder2();\n      init_array2();\n      TupleCoder2 = class extends Coder2 {\n        coders;\n        constructor(coders, localName) {\n          let dynamic = false;\n          const types = [];\n          coders.forEach((coder) => {\n            if (coder.dynamic) {\n              dynamic = true;\n            }\n            types.push(coder.type);\n          });\n          const type = \"tuple(\" + types.join(\",\") + \")\";\n          super(\"tuple\", type, localName, dynamic);\n          defineProperties(this, { coders: Object.freeze(coders.slice()) });\n        }\n        defaultValue() {\n          const values = [];\n          this.coders.forEach((coder) => {\n            values.push(coder.defaultValue());\n          });\n          const uniqueNames = this.coders.reduce((accum, coder) => {\n            const name = coder.localName;\n            if (name) {\n              if (!accum[name]) {\n                accum[name] = 0;\n              }\n              accum[name]++;\n            }\n            return accum;\n          }, {});\n          this.coders.forEach((coder, index) => {\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) {\n              return;\n            }\n            if (name === \"length\") {\n              name = \"_length\";\n            }\n            if (values[name] != null) {\n              return;\n            }\n            values[name] = values[index];\n          });\n          return Object.freeze(values);\n        }\n        encode(writer, _value) {\n          const value = Typed.dereference(_value, \"tuple\");\n          return pack3(writer, this.coders, value);\n        }\n        decode(reader) {\n          return unpack2(reader, this.coders);\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/transaction/accesslist.js\n  function accessSetify2(addr, storageKeys) {\n    return {\n      address: getAddress2(addr),\n      storageKeys: storageKeys.map((storageKey, index) => {\n        assertArgument(isHexString2(storageKey, 32), \"invalid slot\", `storageKeys[${index}]`, storageKey);\n        return storageKey.toLowerCase();\n      })\n    };\n  }\n  function accessListify2(value) {\n    if (Array.isArray(value)) {\n      return value.map((set, index) => {\n        if (Array.isArray(set)) {\n          assertArgument(set.length === 2, \"invalid slot set\", `value[${index}]`, set);\n          return accessSetify2(set[0], set[1]);\n        }\n        assertArgument(set != null && typeof set === \"object\", \"invalid address-slot set\", \"value\", value);\n        return accessSetify2(set.address, set.storageKeys);\n      });\n    }\n    assertArgument(value != null && typeof value === \"object\", \"invalid access list\", \"value\", value);\n    const result = Object.keys(value).map((addr) => {\n      const storageKeys = value[addr].reduce((accum, storageKey) => {\n        accum[storageKey] = true;\n        return accum;\n      }, {});\n      return accessSetify2(addr, Object.keys(storageKeys).sort());\n    });\n    result.sort((a, b2) => a.address.localeCompare(b2.address));\n    return result;\n  }\n  var init_accesslist = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/transaction/accesslist.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_address3();\n      init_utils3();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/transaction/authorization.js\n  function authorizationify(auth) {\n    return {\n      address: getAddress2(auth.address),\n      nonce: getBigInt(auth.nonce != null ? auth.nonce : 0),\n      chainId: getBigInt(auth.chainId != null ? auth.chainId : 0),\n      signature: Signature2.from(auth.signature)\n    };\n  }\n  var init_authorization = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/transaction/authorization.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_address3();\n      init_crypto2();\n      init_utils3();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/transaction/address.js\n  function computeAddress2(key2) {\n    let pubkey;\n    if (typeof key2 === \"string\") {\n      pubkey = SigningKey2.computePublicKey(key2, false);\n    } else {\n      pubkey = key2.publicKey;\n    }\n    return getAddress2(keccak2563(\"0x\" + pubkey.substring(4)).substring(26));\n  }\n  function recoverAddress2(digest, signature2) {\n    return computeAddress2(SigningKey2.recoverPublicKey(digest, signature2));\n  }\n  var init_address5 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/transaction/address.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_address3();\n      init_crypto2();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/transaction/transaction.js\n  function getKzgLibrary(kzg) {\n    const blobToKzgCommitment = (blob) => {\n      if (\"computeBlobProof\" in kzg) {\n        if (\"blobToKzgCommitment\" in kzg && typeof kzg.blobToKzgCommitment === \"function\") {\n          return getBytes(kzg.blobToKzgCommitment(hexlify2(blob)));\n        }\n      } else if (\"blobToKzgCommitment\" in kzg && typeof kzg.blobToKzgCommitment === \"function\") {\n        return getBytes(kzg.blobToKzgCommitment(blob));\n      }\n      if (\"blobToKZGCommitment\" in kzg && typeof kzg.blobToKZGCommitment === \"function\") {\n        return getBytes(kzg.blobToKZGCommitment(hexlify2(blob)));\n      }\n      assertArgument(false, \"unsupported KZG library\", \"kzg\", kzg);\n    };\n    const computeBlobKzgProof = (blob, commitment) => {\n      if (\"computeBlobProof\" in kzg && typeof kzg.computeBlobProof === \"function\") {\n        return getBytes(kzg.computeBlobProof(hexlify2(blob), hexlify2(commitment)));\n      }\n      if (\"computeBlobKzgProof\" in kzg && typeof kzg.computeBlobKzgProof === \"function\") {\n        return kzg.computeBlobKzgProof(blob, commitment);\n      }\n      if (\"computeBlobKZGProof\" in kzg && typeof kzg.computeBlobKZGProof === \"function\") {\n        return getBytes(kzg.computeBlobKZGProof(hexlify2(blob), hexlify2(commitment)));\n      }\n      assertArgument(false, \"unsupported KZG library\", \"kzg\", kzg);\n    };\n    return { blobToKzgCommitment, computeBlobKzgProof };\n  }\n  function getVersionedHash(version29, hash4) {\n    let versioned = version29.toString(16);\n    while (versioned.length < 2) {\n      versioned = \"0\" + versioned;\n    }\n    versioned += sha2564(hash4).substring(4);\n    return \"0x\" + versioned;\n  }\n  function handleAddress2(value) {\n    if (value === \"0x\") {\n      return null;\n    }\n    return getAddress2(value);\n  }\n  function handleAccessList(value, param) {\n    try {\n      return accessListify2(value);\n    } catch (error) {\n      assertArgument(false, error.message, param, value);\n    }\n  }\n  function handleAuthorizationList(value, param) {\n    try {\n      if (!Array.isArray(value)) {\n        throw new Error(\"authorizationList: invalid array\");\n      }\n      const result = [];\n      for (let i = 0; i < value.length; i++) {\n        const auth = value[i];\n        if (!Array.isArray(auth)) {\n          throw new Error(`authorization[${i}]: invalid array`);\n        }\n        if (auth.length !== 6) {\n          throw new Error(`authorization[${i}]: wrong length`);\n        }\n        if (!auth[1]) {\n          throw new Error(`authorization[${i}]: null address`);\n        }\n        result.push({\n          address: handleAddress2(auth[1]),\n          nonce: handleUint(auth[2], \"nonce\"),\n          chainId: handleUint(auth[0], \"chainId\"),\n          signature: Signature2.from({\n            yParity: handleNumber2(auth[3], \"yParity\"),\n            r: zeroPadValue(auth[4], 32),\n            s: zeroPadValue(auth[5], 32)\n          })\n        });\n      }\n      return result;\n    } catch (error) {\n      assertArgument(false, error.message, param, value);\n    }\n  }\n  function handleNumber2(_value, param) {\n    if (_value === \"0x\") {\n      return 0;\n    }\n    return getNumber(_value, param);\n  }\n  function handleUint(_value, param) {\n    if (_value === \"0x\") {\n      return BN_06;\n    }\n    const value = getBigInt(_value, param);\n    assertArgument(value <= BN_MAX_UINT, \"value exceeds uint size\", param, value);\n    return value;\n  }\n  function formatNumber2(_value, name) {\n    const value = getBigInt(_value, \"value\");\n    const result = toBeArray(value);\n    assertArgument(result.length <= 32, `value too large`, `tx.${name}`, value);\n    return result;\n  }\n  function formatAccessList2(value) {\n    return accessListify2(value).map((set) => [set.address, set.storageKeys]);\n  }\n  function formatAuthorizationList(value) {\n    return value.map((a) => {\n      return [\n        formatNumber2(a.chainId, \"chainId\"),\n        a.address,\n        formatNumber2(a.nonce, \"nonce\"),\n        formatNumber2(a.signature.yParity, \"yParity\"),\n        toBeArray(a.signature.r),\n        toBeArray(a.signature.s)\n      ];\n    });\n  }\n  function formatHashes(value, param) {\n    assertArgument(Array.isArray(value), `invalid ${param}`, \"value\", value);\n    for (let i = 0; i < value.length; i++) {\n      assertArgument(isHexString2(value[i], 32), \"invalid ${ param } hash\", `value[${i}]`, value[i]);\n    }\n    return value;\n  }\n  function _parseLegacy(data) {\n    const fields = decodeRlp(data);\n    assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), \"invalid field count for legacy transaction\", \"data\", data);\n    const tx = {\n      type: 0,\n      nonce: handleNumber2(fields[0], \"nonce\"),\n      gasPrice: handleUint(fields[1], \"gasPrice\"),\n      gasLimit: handleUint(fields[2], \"gasLimit\"),\n      to: handleAddress2(fields[3]),\n      value: handleUint(fields[4], \"value\"),\n      data: hexlify2(fields[5]),\n      chainId: BN_06\n    };\n    if (fields.length === 6) {\n      return tx;\n    }\n    const v = handleUint(fields[6], \"v\");\n    const r2 = handleUint(fields[7], \"r\");\n    const s = handleUint(fields[8], \"s\");\n    if (r2 === BN_06 && s === BN_06) {\n      tx.chainId = v;\n    } else {\n      let chainId = (v - BN_352) / BN_22;\n      if (chainId < BN_06) {\n        chainId = BN_06;\n      }\n      tx.chainId = chainId;\n      assertArgument(chainId !== BN_06 || (v === BN_272 || v === BN_282), \"non-canonical legacy v\", \"v\", fields[6]);\n      tx.signature = Signature2.from({\n        r: zeroPadValue(fields[7], 32),\n        s: zeroPadValue(fields[8], 32),\n        v\n      });\n    }\n    return tx;\n  }\n  function _serializeLegacy(tx, sig) {\n    const fields = [\n      formatNumber2(tx.nonce, \"nonce\"),\n      formatNumber2(tx.gasPrice || 0, \"gasPrice\"),\n      formatNumber2(tx.gasLimit, \"gasLimit\"),\n      tx.to || \"0x\",\n      formatNumber2(tx.value, \"value\"),\n      tx.data\n    ];\n    let chainId = BN_06;\n    if (tx.chainId != BN_06) {\n      chainId = getBigInt(tx.chainId, \"tx.chainId\");\n      assertArgument(!sig || sig.networkV == null || sig.legacyChainId === chainId, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n    } else if (tx.signature) {\n      const legacy = tx.signature.legacyChainId;\n      if (legacy != null) {\n        chainId = legacy;\n      }\n    }\n    if (!sig) {\n      if (chainId !== BN_06) {\n        fields.push(toBeArray(chainId));\n        fields.push(\"0x\");\n        fields.push(\"0x\");\n      }\n      return encodeRlp(fields);\n    }\n    let v = BigInt(27 + sig.yParity);\n    if (chainId !== BN_06) {\n      v = Signature2.getChainIdV(chainId, sig.v);\n    } else if (BigInt(sig.v) !== v) {\n      assertArgument(false, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n    }\n    fields.push(toBeArray(v));\n    fields.push(toBeArray(sig.r));\n    fields.push(toBeArray(sig.s));\n    return encodeRlp(fields);\n  }\n  function _parseEipSignature2(tx, fields) {\n    let yParity;\n    try {\n      yParity = handleNumber2(fields[0], \"yParity\");\n      if (yParity !== 0 && yParity !== 1) {\n        throw new Error(\"bad yParity\");\n      }\n    } catch (error) {\n      assertArgument(false, \"invalid yParity\", \"yParity\", fields[0]);\n    }\n    const r2 = zeroPadValue(fields[1], 32);\n    const s = zeroPadValue(fields[2], 32);\n    const signature2 = Signature2.from({ r: r2, s, yParity });\n    tx.signature = signature2;\n  }\n  function _parseEip15592(data) {\n    const fields = decodeRlp(getBytes(data).slice(1));\n    assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), \"invalid field count for transaction type: 2\", \"data\", hexlify2(data));\n    const tx = {\n      type: 2,\n      chainId: handleUint(fields[0], \"chainId\"),\n      nonce: handleNumber2(fields[1], \"nonce\"),\n      maxPriorityFeePerGas: handleUint(fields[2], \"maxPriorityFeePerGas\"),\n      maxFeePerGas: handleUint(fields[3], \"maxFeePerGas\"),\n      gasPrice: null,\n      gasLimit: handleUint(fields[4], \"gasLimit\"),\n      to: handleAddress2(fields[5]),\n      value: handleUint(fields[6], \"value\"),\n      data: hexlify2(fields[7]),\n      accessList: handleAccessList(fields[8], \"accessList\")\n    };\n    if (fields.length === 9) {\n      return tx;\n    }\n    _parseEipSignature2(tx, fields.slice(9));\n    return tx;\n  }\n  function _serializeEip15592(tx, sig) {\n    const fields = [\n      formatNumber2(tx.chainId, \"chainId\"),\n      formatNumber2(tx.nonce, \"nonce\"),\n      formatNumber2(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n      formatNumber2(tx.maxFeePerGas || 0, \"maxFeePerGas\"),\n      formatNumber2(tx.gasLimit, \"gasLimit\"),\n      tx.to || \"0x\",\n      formatNumber2(tx.value, \"value\"),\n      tx.data,\n      formatAccessList2(tx.accessList || [])\n    ];\n    if (sig) {\n      fields.push(formatNumber2(sig.yParity, \"yParity\"));\n      fields.push(toBeArray(sig.r));\n      fields.push(toBeArray(sig.s));\n    }\n    return concat2([\"0x02\", encodeRlp(fields)]);\n  }\n  function _parseEip29302(data) {\n    const fields = decodeRlp(getBytes(data).slice(1));\n    assertArgument(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), \"invalid field count for transaction type: 1\", \"data\", hexlify2(data));\n    const tx = {\n      type: 1,\n      chainId: handleUint(fields[0], \"chainId\"),\n      nonce: handleNumber2(fields[1], \"nonce\"),\n      gasPrice: handleUint(fields[2], \"gasPrice\"),\n      gasLimit: handleUint(fields[3], \"gasLimit\"),\n      to: handleAddress2(fields[4]),\n      value: handleUint(fields[5], \"value\"),\n      data: hexlify2(fields[6]),\n      accessList: handleAccessList(fields[7], \"accessList\")\n    };\n    if (fields.length === 8) {\n      return tx;\n    }\n    _parseEipSignature2(tx, fields.slice(8));\n    return tx;\n  }\n  function _serializeEip29302(tx, sig) {\n    const fields = [\n      formatNumber2(tx.chainId, \"chainId\"),\n      formatNumber2(tx.nonce, \"nonce\"),\n      formatNumber2(tx.gasPrice || 0, \"gasPrice\"),\n      formatNumber2(tx.gasLimit, \"gasLimit\"),\n      tx.to || \"0x\",\n      formatNumber2(tx.value, \"value\"),\n      tx.data,\n      formatAccessList2(tx.accessList || [])\n    ];\n    if (sig) {\n      fields.push(formatNumber2(sig.yParity, \"recoveryParam\"));\n      fields.push(toBeArray(sig.r));\n      fields.push(toBeArray(sig.s));\n    }\n    return concat2([\"0x01\", encodeRlp(fields)]);\n  }\n  function _parseEip4844(data) {\n    let fields = decodeRlp(getBytes(data).slice(1));\n    let typeName = \"3\";\n    let blobs = null;\n    if (fields.length === 4 && Array.isArray(fields[0])) {\n      typeName = \"3 (network format)\";\n      const fBlobs = fields[1], fCommits = fields[2], fProofs = fields[3];\n      assertArgument(Array.isArray(fBlobs), \"invalid network format: blobs not an array\", \"fields[1]\", fBlobs);\n      assertArgument(Array.isArray(fCommits), \"invalid network format: commitments not an array\", \"fields[2]\", fCommits);\n      assertArgument(Array.isArray(fProofs), \"invalid network format: proofs not an array\", \"fields[3]\", fProofs);\n      assertArgument(fBlobs.length === fCommits.length, \"invalid network format: blobs/commitments length mismatch\", \"fields\", fields);\n      assertArgument(fBlobs.length === fProofs.length, \"invalid network format: blobs/proofs length mismatch\", \"fields\", fields);\n      blobs = [];\n      for (let i = 0; i < fields[1].length; i++) {\n        blobs.push({\n          data: fBlobs[i],\n          commitment: fCommits[i],\n          proof: fProofs[i]\n        });\n      }\n      fields = fields[0];\n    }\n    assertArgument(Array.isArray(fields) && (fields.length === 11 || fields.length === 14), `invalid field count for transaction type: ${typeName}`, \"data\", hexlify2(data));\n    const tx = {\n      type: 3,\n      chainId: handleUint(fields[0], \"chainId\"),\n      nonce: handleNumber2(fields[1], \"nonce\"),\n      maxPriorityFeePerGas: handleUint(fields[2], \"maxPriorityFeePerGas\"),\n      maxFeePerGas: handleUint(fields[3], \"maxFeePerGas\"),\n      gasPrice: null,\n      gasLimit: handleUint(fields[4], \"gasLimit\"),\n      to: handleAddress2(fields[5]),\n      value: handleUint(fields[6], \"value\"),\n      data: hexlify2(fields[7]),\n      accessList: handleAccessList(fields[8], \"accessList\"),\n      maxFeePerBlobGas: handleUint(fields[9], \"maxFeePerBlobGas\"),\n      blobVersionedHashes: fields[10]\n    };\n    if (blobs) {\n      tx.blobs = blobs;\n    }\n    assertArgument(tx.to != null, `invalid address for transaction type: ${typeName}`, \"data\", data);\n    assertArgument(Array.isArray(tx.blobVersionedHashes), \"invalid blobVersionedHashes: must be an array\", \"data\", data);\n    for (let i = 0; i < tx.blobVersionedHashes.length; i++) {\n      assertArgument(isHexString2(tx.blobVersionedHashes[i], 32), `invalid blobVersionedHash at index ${i}: must be length 32`, \"data\", data);\n    }\n    if (fields.length === 11) {\n      return tx;\n    }\n    _parseEipSignature2(tx, fields.slice(11));\n    return tx;\n  }\n  function _serializeEip4844(tx, sig, blobs) {\n    const fields = [\n      formatNumber2(tx.chainId, \"chainId\"),\n      formatNumber2(tx.nonce, \"nonce\"),\n      formatNumber2(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n      formatNumber2(tx.maxFeePerGas || 0, \"maxFeePerGas\"),\n      formatNumber2(tx.gasLimit, \"gasLimit\"),\n      tx.to || ZeroAddress,\n      formatNumber2(tx.value, \"value\"),\n      tx.data,\n      formatAccessList2(tx.accessList || []),\n      formatNumber2(tx.maxFeePerBlobGas || 0, \"maxFeePerBlobGas\"),\n      formatHashes(tx.blobVersionedHashes || [], \"blobVersionedHashes\")\n    ];\n    if (sig) {\n      fields.push(formatNumber2(sig.yParity, \"yParity\"));\n      fields.push(toBeArray(sig.r));\n      fields.push(toBeArray(sig.s));\n      if (blobs) {\n        return concat2([\n          \"0x03\",\n          encodeRlp([\n            fields,\n            blobs.map((b2) => b2.data),\n            blobs.map((b2) => b2.commitment),\n            blobs.map((b2) => b2.proof)\n          ])\n        ]);\n      }\n    }\n    return concat2([\"0x03\", encodeRlp(fields)]);\n  }\n  function _parseEip7702(data) {\n    const fields = decodeRlp(getBytes(data).slice(1));\n    assertArgument(Array.isArray(fields) && (fields.length === 10 || fields.length === 13), \"invalid field count for transaction type: 4\", \"data\", hexlify2(data));\n    const tx = {\n      type: 4,\n      chainId: handleUint(fields[0], \"chainId\"),\n      nonce: handleNumber2(fields[1], \"nonce\"),\n      maxPriorityFeePerGas: handleUint(fields[2], \"maxPriorityFeePerGas\"),\n      maxFeePerGas: handleUint(fields[3], \"maxFeePerGas\"),\n      gasPrice: null,\n      gasLimit: handleUint(fields[4], \"gasLimit\"),\n      to: handleAddress2(fields[5]),\n      value: handleUint(fields[6], \"value\"),\n      data: hexlify2(fields[7]),\n      accessList: handleAccessList(fields[8], \"accessList\"),\n      authorizationList: handleAuthorizationList(fields[9], \"authorizationList\")\n    };\n    if (fields.length === 10) {\n      return tx;\n    }\n    _parseEipSignature2(tx, fields.slice(10));\n    return tx;\n  }\n  function _serializeEip7702(tx, sig) {\n    const fields = [\n      formatNumber2(tx.chainId, \"chainId\"),\n      formatNumber2(tx.nonce, \"nonce\"),\n      formatNumber2(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n      formatNumber2(tx.maxFeePerGas || 0, \"maxFeePerGas\"),\n      formatNumber2(tx.gasLimit, \"gasLimit\"),\n      tx.to || \"0x\",\n      formatNumber2(tx.value, \"value\"),\n      tx.data,\n      formatAccessList2(tx.accessList || []),\n      formatAuthorizationList(tx.authorizationList || [])\n    ];\n    if (sig) {\n      fields.push(formatNumber2(sig.yParity, \"yParity\"));\n      fields.push(toBeArray(sig.r));\n      fields.push(toBeArray(sig.s));\n    }\n    return concat2([\"0x04\", encodeRlp(fields)]);\n  }\n  var BN_06, BN_22, BN_272, BN_282, BN_352, BN_MAX_UINT, BLOB_SIZE, Transaction;\n  var init_transaction = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/transaction/transaction.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_address3();\n      init_addresses2();\n      init_crypto2();\n      init_utils3();\n      init_accesslist();\n      init_authorization();\n      init_address5();\n      BN_06 = BigInt(0);\n      BN_22 = BigInt(2);\n      BN_272 = BigInt(27);\n      BN_282 = BigInt(28);\n      BN_352 = BigInt(35);\n      BN_MAX_UINT = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n      BLOB_SIZE = 4096 * 32;\n      Transaction = class _Transaction {\n        #type;\n        #to;\n        #data;\n        #nonce;\n        #gasLimit;\n        #gasPrice;\n        #maxPriorityFeePerGas;\n        #maxFeePerGas;\n        #value;\n        #chainId;\n        #sig;\n        #accessList;\n        #maxFeePerBlobGas;\n        #blobVersionedHashes;\n        #kzg;\n        #blobs;\n        #auths;\n        /**\n         *  The transaction type.\n         *\n         *  If null, the type will be automatically inferred based on\n         *  explicit properties.\n         */\n        get type() {\n          return this.#type;\n        }\n        set type(value) {\n          switch (value) {\n            case null:\n              this.#type = null;\n              break;\n            case 0:\n            case \"legacy\":\n              this.#type = 0;\n              break;\n            case 1:\n            case \"berlin\":\n            case \"eip-2930\":\n              this.#type = 1;\n              break;\n            case 2:\n            case \"london\":\n            case \"eip-1559\":\n              this.#type = 2;\n              break;\n            case 3:\n            case \"cancun\":\n            case \"eip-4844\":\n              this.#type = 3;\n              break;\n            case 4:\n            case \"pectra\":\n            case \"eip-7702\":\n              this.#type = 4;\n              break;\n            default:\n              assertArgument(false, \"unsupported transaction type\", \"type\", value);\n          }\n        }\n        /**\n         *  The name of the transaction type.\n         */\n        get typeName() {\n          switch (this.type) {\n            case 0:\n              return \"legacy\";\n            case 1:\n              return \"eip-2930\";\n            case 2:\n              return \"eip-1559\";\n            case 3:\n              return \"eip-4844\";\n            case 4:\n              return \"eip-7702\";\n          }\n          return null;\n        }\n        /**\n         *  The ``to`` address for the transaction or ``null`` if the\n         *  transaction is an ``init`` transaction.\n         */\n        get to() {\n          const value = this.#to;\n          if (value == null && this.type === 3) {\n            return ZeroAddress;\n          }\n          return value;\n        }\n        set to(value) {\n          this.#to = value == null ? null : getAddress2(value);\n        }\n        /**\n         *  The transaction nonce.\n         */\n        get nonce() {\n          return this.#nonce;\n        }\n        set nonce(value) {\n          this.#nonce = getNumber(value, \"value\");\n        }\n        /**\n         *  The gas limit.\n         */\n        get gasLimit() {\n          return this.#gasLimit;\n        }\n        set gasLimit(value) {\n          this.#gasLimit = getBigInt(value);\n        }\n        /**\n         *  The gas price.\n         *\n         *  On legacy networks this defines the fee that will be paid. On\n         *  EIP-1559 networks, this should be ``null``.\n         */\n        get gasPrice() {\n          const value = this.#gasPrice;\n          if (value == null && (this.type === 0 || this.type === 1)) {\n            return BN_06;\n          }\n          return value;\n        }\n        set gasPrice(value) {\n          this.#gasPrice = value == null ? null : getBigInt(value, \"gasPrice\");\n        }\n        /**\n         *  The maximum priority fee per unit of gas to pay. On legacy\n         *  networks this should be ``null``.\n         */\n        get maxPriorityFeePerGas() {\n          const value = this.#maxPriorityFeePerGas;\n          if (value == null) {\n            if (this.type === 2 || this.type === 3) {\n              return BN_06;\n            }\n            return null;\n          }\n          return value;\n        }\n        set maxPriorityFeePerGas(value) {\n          this.#maxPriorityFeePerGas = value == null ? null : getBigInt(value, \"maxPriorityFeePerGas\");\n        }\n        /**\n         *  The maximum total fee per unit of gas to pay. On legacy\n         *  networks this should be ``null``.\n         */\n        get maxFeePerGas() {\n          const value = this.#maxFeePerGas;\n          if (value == null) {\n            if (this.type === 2 || this.type === 3) {\n              return BN_06;\n            }\n            return null;\n          }\n          return value;\n        }\n        set maxFeePerGas(value) {\n          this.#maxFeePerGas = value == null ? null : getBigInt(value, \"maxFeePerGas\");\n        }\n        /**\n         *  The transaction data. For ``init`` transactions this is the\n         *  deployment code.\n         */\n        get data() {\n          return this.#data;\n        }\n        set data(value) {\n          this.#data = hexlify2(value);\n        }\n        /**\n         *  The amount of ether (in wei) to send in this transactions.\n         */\n        get value() {\n          return this.#value;\n        }\n        set value(value) {\n          this.#value = getBigInt(value, \"value\");\n        }\n        /**\n         *  The chain ID this transaction is valid on.\n         */\n        get chainId() {\n          return this.#chainId;\n        }\n        set chainId(value) {\n          this.#chainId = getBigInt(value);\n        }\n        /**\n         *  If signed, the signature for this transaction.\n         */\n        get signature() {\n          return this.#sig || null;\n        }\n        set signature(value) {\n          this.#sig = value == null ? null : Signature2.from(value);\n        }\n        /**\n         *  The access list.\n         *\n         *  An access list permits discounted (but pre-paid) access to\n         *  bytecode and state variable access within contract execution.\n         */\n        get accessList() {\n          const value = this.#accessList || null;\n          if (value == null) {\n            if (this.type === 1 || this.type === 2 || this.type === 3) {\n              return [];\n            }\n            return null;\n          }\n          return value;\n        }\n        set accessList(value) {\n          this.#accessList = value == null ? null : accessListify2(value);\n        }\n        get authorizationList() {\n          const value = this.#auths || null;\n          if (value == null) {\n            if (this.type === 4) {\n              return [];\n            }\n          }\n          return value;\n        }\n        set authorizationList(auths) {\n          this.#auths = auths == null ? null : auths.map((a) => authorizationify(a));\n        }\n        /**\n         *  The max fee per blob gas for Cancun transactions.\n         */\n        get maxFeePerBlobGas() {\n          const value = this.#maxFeePerBlobGas;\n          if (value == null && this.type === 3) {\n            return BN_06;\n          }\n          return value;\n        }\n        set maxFeePerBlobGas(value) {\n          this.#maxFeePerBlobGas = value == null ? null : getBigInt(value, \"maxFeePerBlobGas\");\n        }\n        /**\n         *  The BLOb versioned hashes for Cancun transactions.\n         */\n        get blobVersionedHashes() {\n          let value = this.#blobVersionedHashes;\n          if (value == null && this.type === 3) {\n            return [];\n          }\n          return value;\n        }\n        set blobVersionedHashes(value) {\n          if (value != null) {\n            assertArgument(Array.isArray(value), \"blobVersionedHashes must be an Array\", \"value\", value);\n            value = value.slice();\n            for (let i = 0; i < value.length; i++) {\n              assertArgument(isHexString2(value[i], 32), \"invalid blobVersionedHash\", `value[${i}]`, value[i]);\n            }\n          }\n          this.#blobVersionedHashes = value;\n        }\n        /**\n         *  The BLObs for the Transaction, if any.\n         *\n         *  If ``blobs`` is non-``null``, then the [[seriailized]]\n         *  will return the network formatted sidecar, otherwise it\n         *  will return the standard [[link-eip-2718]] payload. The\n         *  [[unsignedSerialized]] is unaffected regardless.\n         *\n         *  When setting ``blobs``, either fully valid [[Blob]] objects\n         *  may be specified (i.e. correctly padded, with correct\n         *  committments and proofs) or a raw [[BytesLike]] may\n         *  be provided.\n         *\n         *  If raw [[BytesLike]] are provided, the [[kzg]] property **must**\n         *  be already set. The blob will be correctly padded and the\n         *  [[KzgLibrary]] will be used to compute the committment and\n         *  proof for the blob.\n         *\n         *  A BLOb is a sequence of field elements, each of which must\n         *  be within the BLS field modulo, so some additional processing\n         *  may be required to encode arbitrary data to ensure each 32 byte\n         *  field is within the valid range.\n         *\n         *  Setting this automatically populates [[blobVersionedHashes]],\n         *  overwriting any existing values. Setting this to ``null``\n         *  does **not** remove the [[blobVersionedHashes]], leaving them\n         *  present.\n         */\n        get blobs() {\n          if (this.#blobs == null) {\n            return null;\n          }\n          return this.#blobs.map((b2) => Object.assign({}, b2));\n        }\n        set blobs(_blobs) {\n          if (_blobs == null) {\n            this.#blobs = null;\n            return;\n          }\n          const blobs = [];\n          const versionedHashes = [];\n          for (let i = 0; i < _blobs.length; i++) {\n            const blob = _blobs[i];\n            if (isBytesLike2(blob)) {\n              assert3(this.#kzg, \"adding a raw blob requires a KZG library\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"set blobs()\"\n              });\n              let data = getBytes(blob);\n              assertArgument(data.length <= BLOB_SIZE, \"blob is too large\", `blobs[${i}]`, blob);\n              if (data.length !== BLOB_SIZE) {\n                const padded = new Uint8Array(BLOB_SIZE);\n                padded.set(data);\n                data = padded;\n              }\n              const commit = this.#kzg.blobToKzgCommitment(data);\n              const proof = hexlify2(this.#kzg.computeBlobKzgProof(data, commit));\n              blobs.push({\n                data: hexlify2(data),\n                commitment: hexlify2(commit),\n                proof\n              });\n              versionedHashes.push(getVersionedHash(1, commit));\n            } else {\n              const commit = hexlify2(blob.commitment);\n              blobs.push({\n                data: hexlify2(blob.data),\n                commitment: commit,\n                proof: hexlify2(blob.proof)\n              });\n              versionedHashes.push(getVersionedHash(1, commit));\n            }\n          }\n          this.#blobs = blobs;\n          this.#blobVersionedHashes = versionedHashes;\n        }\n        get kzg() {\n          return this.#kzg;\n        }\n        set kzg(kzg) {\n          if (kzg == null) {\n            this.#kzg = null;\n          } else {\n            this.#kzg = getKzgLibrary(kzg);\n          }\n        }\n        /**\n         *  Creates a new Transaction with default values.\n         */\n        constructor() {\n          this.#type = null;\n          this.#to = null;\n          this.#nonce = 0;\n          this.#gasLimit = BN_06;\n          this.#gasPrice = null;\n          this.#maxPriorityFeePerGas = null;\n          this.#maxFeePerGas = null;\n          this.#data = \"0x\";\n          this.#value = BN_06;\n          this.#chainId = BN_06;\n          this.#sig = null;\n          this.#accessList = null;\n          this.#maxFeePerBlobGas = null;\n          this.#blobVersionedHashes = null;\n          this.#kzg = null;\n          this.#blobs = null;\n          this.#auths = null;\n        }\n        /**\n         *  The transaction hash, if signed. Otherwise, ``null``.\n         */\n        get hash() {\n          if (this.signature == null) {\n            return null;\n          }\n          return keccak2563(this.#getSerialized(true, false));\n        }\n        /**\n         *  The pre-image hash of this transaction.\n         *\n         *  This is the digest that a [[Signer]] must sign to authorize\n         *  this transaction.\n         */\n        get unsignedHash() {\n          return keccak2563(this.unsignedSerialized);\n        }\n        /**\n         *  The sending address, if signed. Otherwise, ``null``.\n         */\n        get from() {\n          if (this.signature == null) {\n            return null;\n          }\n          return recoverAddress2(this.unsignedHash, this.signature);\n        }\n        /**\n         *  The public key of the sender, if signed. Otherwise, ``null``.\n         */\n        get fromPublicKey() {\n          if (this.signature == null) {\n            return null;\n          }\n          return SigningKey2.recoverPublicKey(this.unsignedHash, this.signature);\n        }\n        /**\n         *  Returns true if signed.\n         *\n         *  This provides a Type Guard that properties requiring a signed\n         *  transaction are non-null.\n         */\n        isSigned() {\n          return this.signature != null;\n        }\n        #getSerialized(signed3, sidecar) {\n          assert3(!signed3 || this.signature != null, \"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized\", \"UNSUPPORTED_OPERATION\", { operation: \".serialized\" });\n          const sig = signed3 ? this.signature : null;\n          switch (this.inferType()) {\n            case 0:\n              return _serializeLegacy(this, sig);\n            case 1:\n              return _serializeEip29302(this, sig);\n            case 2:\n              return _serializeEip15592(this, sig);\n            case 3:\n              return _serializeEip4844(this, sig, sidecar ? this.blobs : null);\n            case 4:\n              return _serializeEip7702(this, sig);\n          }\n          assert3(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \".serialized\" });\n        }\n        /**\n         *  The serialized transaction.\n         *\n         *  This throws if the transaction is unsigned. For the pre-image,\n         *  use [[unsignedSerialized]].\n         */\n        get serialized() {\n          return this.#getSerialized(true, true);\n        }\n        /**\n         *  The transaction pre-image.\n         *\n         *  The hash of this is the digest which needs to be signed to\n         *  authorize this transaction.\n         */\n        get unsignedSerialized() {\n          return this.#getSerialized(false, false);\n        }\n        /**\n         *  Return the most \"likely\" type; currently the highest\n         *  supported transaction type.\n         */\n        inferType() {\n          const types = this.inferTypes();\n          if (types.indexOf(2) >= 0) {\n            return 2;\n          }\n          return types.pop();\n        }\n        /**\n         *  Validates the explicit properties and returns a list of compatible\n         *  transaction types.\n         */\n        inferTypes() {\n          const hasGasPrice = this.gasPrice != null;\n          const hasFee = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null;\n          const hasAccessList = this.accessList != null;\n          const hasBlob = this.#maxFeePerBlobGas != null || this.#blobVersionedHashes;\n          if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {\n            assert3(this.maxFeePerGas >= this.maxPriorityFeePerGas, \"priorityFee cannot be more than maxFee\", \"BAD_DATA\", { value: this });\n          }\n          assert3(!hasFee || this.type !== 0 && this.type !== 1, \"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas\", \"BAD_DATA\", { value: this });\n          assert3(this.type !== 0 || !hasAccessList, \"legacy transaction cannot have accessList\", \"BAD_DATA\", { value: this });\n          const types = [];\n          if (this.type != null) {\n            types.push(this.type);\n          } else {\n            if (this.authorizationList && this.authorizationList.length) {\n              types.push(4);\n            } else if (hasFee) {\n              types.push(2);\n            } else if (hasGasPrice) {\n              types.push(1);\n              if (!hasAccessList) {\n                types.push(0);\n              }\n            } else if (hasAccessList) {\n              types.push(1);\n              types.push(2);\n            } else if (hasBlob && this.to) {\n              types.push(3);\n            } else {\n              types.push(0);\n              types.push(1);\n              types.push(2);\n              types.push(3);\n            }\n          }\n          types.sort();\n          return types;\n        }\n        /**\n         *  Returns true if this transaction is a legacy transaction (i.e.\n         *  ``type === 0``).\n         *\n         *  This provides a Type Guard that the related properties are\n         *  non-null.\n         */\n        isLegacy() {\n          return this.type === 0;\n        }\n        /**\n         *  Returns true if this transaction is berlin hardform transaction (i.e.\n         *  ``type === 1``).\n         *\n         *  This provides a Type Guard that the related properties are\n         *  non-null.\n         */\n        isBerlin() {\n          return this.type === 1;\n        }\n        /**\n         *  Returns true if this transaction is london hardform transaction (i.e.\n         *  ``type === 2``).\n         *\n         *  This provides a Type Guard that the related properties are\n         *  non-null.\n         */\n        isLondon() {\n          return this.type === 2;\n        }\n        /**\n         *  Returns true if this transaction is an [[link-eip-4844]] BLOB\n         *  transaction.\n         *\n         *  This provides a Type Guard that the related properties are\n         *  non-null.\n         */\n        isCancun() {\n          return this.type === 3;\n        }\n        /**\n         *  Create a copy of this transaciton.\n         */\n        clone() {\n          return _Transaction.from(this);\n        }\n        /**\n         *  Return a JSON-friendly object.\n         */\n        toJSON() {\n          const s = (v) => {\n            if (v == null) {\n              return null;\n            }\n            return v.toString();\n          };\n          return {\n            type: this.type,\n            to: this.to,\n            //            from: this.from,\n            data: this.data,\n            nonce: this.nonce,\n            gasLimit: s(this.gasLimit),\n            gasPrice: s(this.gasPrice),\n            maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),\n            maxFeePerGas: s(this.maxFeePerGas),\n            value: s(this.value),\n            chainId: s(this.chainId),\n            sig: this.signature ? this.signature.toJSON() : null,\n            accessList: this.accessList\n          };\n        }\n        /**\n         *  Create a **Transaction** from a serialized transaction or a\n         *  Transaction-like object.\n         */\n        static from(tx) {\n          if (tx == null) {\n            return new _Transaction();\n          }\n          if (typeof tx === \"string\") {\n            const payload = getBytes(tx);\n            if (payload[0] >= 127) {\n              return _Transaction.from(_parseLegacy(payload));\n            }\n            switch (payload[0]) {\n              case 1:\n                return _Transaction.from(_parseEip29302(payload));\n              case 2:\n                return _Transaction.from(_parseEip15592(payload));\n              case 3:\n                return _Transaction.from(_parseEip4844(payload));\n              case 4:\n                return _Transaction.from(_parseEip7702(payload));\n            }\n            assert3(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \"from\" });\n          }\n          const result = new _Transaction();\n          if (tx.type != null) {\n            result.type = tx.type;\n          }\n          if (tx.to != null) {\n            result.to = tx.to;\n          }\n          if (tx.nonce != null) {\n            result.nonce = tx.nonce;\n          }\n          if (tx.gasLimit != null) {\n            result.gasLimit = tx.gasLimit;\n          }\n          if (tx.gasPrice != null) {\n            result.gasPrice = tx.gasPrice;\n          }\n          if (tx.maxPriorityFeePerGas != null) {\n            result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;\n          }\n          if (tx.maxFeePerGas != null) {\n            result.maxFeePerGas = tx.maxFeePerGas;\n          }\n          if (tx.maxFeePerBlobGas != null) {\n            result.maxFeePerBlobGas = tx.maxFeePerBlobGas;\n          }\n          if (tx.data != null) {\n            result.data = tx.data;\n          }\n          if (tx.value != null) {\n            result.value = tx.value;\n          }\n          if (tx.chainId != null) {\n            result.chainId = tx.chainId;\n          }\n          if (tx.signature != null) {\n            result.signature = Signature2.from(tx.signature);\n          }\n          if (tx.accessList != null) {\n            result.accessList = tx.accessList;\n          }\n          if (tx.authorizationList != null) {\n            result.authorizationList = tx.authorizationList;\n          }\n          if (tx.blobVersionedHashes != null) {\n            result.blobVersionedHashes = tx.blobVersionedHashes;\n          }\n          if (tx.kzg != null) {\n            result.kzg = tx.kzg;\n          }\n          if (tx.blobs != null) {\n            result.blobs = tx.blobs;\n          }\n          if (tx.hash != null) {\n            assertArgument(result.isSigned(), \"unsigned transaction cannot define '.hash'\", \"tx\", tx);\n            assertArgument(result.hash === tx.hash, \"hash mismatch\", \"tx\", tx);\n          }\n          if (tx.from != null) {\n            assertArgument(result.isSigned(), \"unsigned transaction cannot define '.from'\", \"tx\", tx);\n            assertArgument(result.from.toLowerCase() === (tx.from || \"\").toLowerCase(), \"from mismatch\", \"tx\", tx);\n          }\n          return result;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/transaction/index.js\n  var init_transaction2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/transaction/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_accesslist();\n      init_authorization();\n      init_transaction();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/hash/id.js\n  function id2(value) {\n    return keccak2563(toUtf8Bytes2(value));\n  }\n  var init_id2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/hash/id.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_crypto2();\n      init_utils3();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/@adraffy+ens-normalize@1.10.1/node_modules/@adraffy/ens-normalize/dist/index.mjs\n  function decode_arithmetic2(bytes3) {\n    let pos = 0;\n    function u16() {\n      return bytes3[pos++] << 8 | bytes3[pos++];\n    }\n    let symbol_count = u16();\n    let total = 1;\n    let acc = [0, 1];\n    for (let i = 1; i < symbol_count; i++) {\n      acc.push(total += u16());\n    }\n    let skip = u16();\n    let pos_payload = pos;\n    pos += skip;\n    let read_width = 0;\n    let read_buffer = 0;\n    function read_bit() {\n      if (read_width == 0) {\n        read_buffer = read_buffer << 8 | bytes3[pos++];\n        read_width = 8;\n      }\n      return read_buffer >> --read_width & 1;\n    }\n    const N2 = 31;\n    const FULL = 2 ** N2;\n    const HALF = FULL >>> 1;\n    const QRTR = HALF >> 1;\n    const MASK = FULL - 1;\n    let register = 0;\n    for (let i = 0; i < N2; i++)\n      register = register << 1 | read_bit();\n    let symbols = [];\n    let low = 0;\n    let range = FULL;\n    while (true) {\n      let value = Math.floor(((register - low + 1) * total - 1) / range);\n      let start = 0;\n      let end = symbol_count;\n      while (end - start > 1) {\n        let mid = start + end >>> 1;\n        if (value < acc[mid]) {\n          end = mid;\n        } else {\n          start = mid;\n        }\n      }\n      if (start == 0)\n        break;\n      symbols.push(start);\n      let a = low + Math.floor(range * acc[start] / total);\n      let b2 = low + Math.floor(range * acc[start + 1] / total) - 1;\n      while (((a ^ b2) & HALF) == 0) {\n        register = register << 1 & MASK | read_bit();\n        a = a << 1 & MASK;\n        b2 = b2 << 1 & MASK | 1;\n      }\n      while (a & ~b2 & QRTR) {\n        register = register & HALF | register << 1 & MASK >>> 1 | read_bit();\n        a = a << 1 ^ HALF;\n        b2 = (b2 ^ HALF) << 1 | HALF | 1;\n      }\n      low = a;\n      range = 1 + b2 - a;\n    }\n    let offset = symbol_count - 4;\n    return symbols.map((x) => {\n      switch (x - offset) {\n        case 3:\n          return offset + 65792 + (bytes3[pos_payload++] << 16 | bytes3[pos_payload++] << 8 | bytes3[pos_payload++]);\n        case 2:\n          return offset + 256 + (bytes3[pos_payload++] << 8 | bytes3[pos_payload++]);\n        case 1:\n          return offset + bytes3[pos_payload++];\n        default:\n          return x - 1;\n      }\n    });\n  }\n  function read_payload2(v) {\n    let pos = 0;\n    return () => v[pos++];\n  }\n  function read_compressed_payload2(s) {\n    return read_payload2(decode_arithmetic2(unsafe_atob(s)));\n  }\n  function unsafe_atob(s) {\n    let lookup = [];\n    [...\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"].forEach((c, i) => lookup[c.charCodeAt(0)] = i);\n    let n2 = s.length;\n    let ret = new Uint8Array(6 * n2 >> 3);\n    for (let i = 0, pos = 0, width = 0, carry = 0; i < n2; i++) {\n      carry = carry << 6 | lookup[s.charCodeAt(i)];\n      width += 6;\n      if (width >= 8) {\n        ret[pos++] = carry >> (width -= 8);\n      }\n    }\n    return ret;\n  }\n  function signed2(i) {\n    return i & 1 ? ~i >> 1 : i >> 1;\n  }\n  function read_deltas2(n2, next) {\n    let v = Array(n2);\n    for (let i = 0, x = 0; i < n2; i++)\n      v[i] = x += signed2(next());\n    return v;\n  }\n  function read_sorted(next, prev = 0) {\n    let ret = [];\n    while (true) {\n      let x = next();\n      let n2 = next();\n      if (!n2)\n        break;\n      prev += x;\n      for (let i = 0; i < n2; i++) {\n        ret.push(prev + i);\n      }\n      prev += n2 + 1;\n    }\n    return ret;\n  }\n  function read_sorted_arrays(next) {\n    return read_array_while(() => {\n      let v = read_sorted(next);\n      if (v.length)\n        return v;\n    });\n  }\n  function read_mapped(next) {\n    let ret = [];\n    while (true) {\n      let w = next();\n      if (w == 0)\n        break;\n      ret.push(read_linear_table2(w, next));\n    }\n    while (true) {\n      let w = next() - 1;\n      if (w < 0)\n        break;\n      ret.push(read_replacement_table2(w, next));\n    }\n    return ret.flat();\n  }\n  function read_array_while(next) {\n    let v = [];\n    while (true) {\n      let x = next(v.length);\n      if (!x)\n        break;\n      v.push(x);\n    }\n    return v;\n  }\n  function read_transposed2(n2, w, next) {\n    let m = Array(n2).fill().map(() => []);\n    for (let i = 0; i < w; i++) {\n      read_deltas2(n2, next).forEach((x, j) => m[j].push(x));\n    }\n    return m;\n  }\n  function read_linear_table2(w, next) {\n    let dx = 1 + next();\n    let dy = next();\n    let vN = read_array_while(next);\n    let m = read_transposed2(vN.length, 1 + w, next);\n    return m.flatMap((v, i) => {\n      let [x, ...ys] = v;\n      return Array(vN[i]).fill().map((_, j) => {\n        let j_dy = j * dy;\n        return [x + j * dx, ys.map((y) => y + j_dy)];\n      });\n    });\n  }\n  function read_replacement_table2(w, next) {\n    let n2 = 1 + next();\n    let m = read_transposed2(n2, 1 + w, next);\n    return m.map((v) => [v[0], v.slice(1)]);\n  }\n  function read_trie(next) {\n    let ret = [];\n    let sorted = read_sorted(next);\n    expand(decode3([]), []);\n    return ret;\n    function decode3(Q) {\n      let S = next();\n      let B = read_array_while(() => {\n        let cps = read_sorted(next).map((i) => sorted[i]);\n        if (cps.length)\n          return decode3(cps);\n      });\n      return { S, B, Q };\n    }\n    function expand({ S, B }, cps, saved) {\n      if (S & 4 && saved === cps[cps.length - 1])\n        return;\n      if (S & 2)\n        saved = cps[cps.length - 1];\n      if (S & 1)\n        ret.push(cps);\n      for (let br of B) {\n        for (let cp of br.Q) {\n          expand(br, [...cps, cp], saved);\n        }\n      }\n    }\n  }\n  function hex_cp(cp) {\n    return cp.toString(16).toUpperCase().padStart(2, \"0\");\n  }\n  function quote_cp(cp) {\n    return `{${hex_cp(cp)}}`;\n  }\n  function explode_cp2(s) {\n    let cps = [];\n    for (let pos = 0, len = s.length; pos < len; ) {\n      let cp = s.codePointAt(pos);\n      pos += cp < 65536 ? 1 : 2;\n      cps.push(cp);\n    }\n    return cps;\n  }\n  function str_from_cps(cps) {\n    const chunk = 4096;\n    let len = cps.length;\n    if (len < chunk)\n      return String.fromCodePoint(...cps);\n    let buf = [];\n    for (let i = 0; i < len; ) {\n      buf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));\n    }\n    return buf.join(\"\");\n  }\n  function compare_arrays(a, b2) {\n    let n2 = a.length;\n    let c = n2 - b2.length;\n    for (let i = 0; c == 0 && i < n2; i++)\n      c = a[i] - b2[i];\n    return c;\n  }\n  function unpack_cc(packed) {\n    return packed >> 24 & 255;\n  }\n  function unpack_cp(packed) {\n    return packed & 16777215;\n  }\n  function init$1() {\n    let r2 = read_compressed_payload2(COMPRESSED);\n    SHIFTED_RANK = new Map(read_sorted_arrays(r2).flatMap((v, i) => v.map((x) => [x, i + 1 << 24])));\n    EXCLUSIONS = new Set(read_sorted(r2));\n    DECOMP = /* @__PURE__ */ new Map();\n    RECOMP = /* @__PURE__ */ new Map();\n    for (let [cp, cps] of read_mapped(r2)) {\n      if (!EXCLUSIONS.has(cp) && cps.length == 2) {\n        let [a, b2] = cps;\n        let bucket = RECOMP.get(a);\n        if (!bucket) {\n          bucket = /* @__PURE__ */ new Map();\n          RECOMP.set(a, bucket);\n        }\n        bucket.set(b2, cp);\n      }\n      DECOMP.set(cp, cps.reverse());\n    }\n  }\n  function is_hangul(cp) {\n    return cp >= S0 && cp < S1;\n  }\n  function compose_pair(a, b2) {\n    if (a >= L0 && a < L1 && b2 >= V0 && b2 < V1) {\n      return S0 + (a - L0) * N_COUNT + (b2 - V0) * T_COUNT;\n    } else if (is_hangul(a) && b2 > T0 && b2 < T1 && (a - S0) % T_COUNT == 0) {\n      return a + (b2 - T0);\n    } else {\n      let recomp = RECOMP.get(a);\n      if (recomp) {\n        recomp = recomp.get(b2);\n        if (recomp) {\n          return recomp;\n        }\n      }\n      return -1;\n    }\n  }\n  function decomposed(cps) {\n    if (!SHIFTED_RANK)\n      init$1();\n    let ret = [];\n    let buf = [];\n    let check_order = false;\n    function add4(cp) {\n      let cc = SHIFTED_RANK.get(cp);\n      if (cc) {\n        check_order = true;\n        cp |= cc;\n      }\n      ret.push(cp);\n    }\n    for (let cp of cps) {\n      while (true) {\n        if (cp < 128) {\n          ret.push(cp);\n        } else if (is_hangul(cp)) {\n          let s_index = cp - S0;\n          let l_index = s_index / N_COUNT | 0;\n          let v_index = s_index % N_COUNT / T_COUNT | 0;\n          let t_index = s_index % T_COUNT;\n          add4(L0 + l_index);\n          add4(V0 + v_index);\n          if (t_index > 0)\n            add4(T0 + t_index);\n        } else {\n          let mapped = DECOMP.get(cp);\n          if (mapped) {\n            buf.push(...mapped);\n          } else {\n            add4(cp);\n          }\n        }\n        if (!buf.length)\n          break;\n        cp = buf.pop();\n      }\n    }\n    if (check_order && ret.length > 1) {\n      let prev_cc = unpack_cc(ret[0]);\n      for (let i = 1; i < ret.length; i++) {\n        let cc = unpack_cc(ret[i]);\n        if (cc == 0 || prev_cc <= cc) {\n          prev_cc = cc;\n          continue;\n        }\n        let j = i - 1;\n        while (true) {\n          let tmp = ret[j + 1];\n          ret[j + 1] = ret[j];\n          ret[j] = tmp;\n          if (!j)\n            break;\n          prev_cc = unpack_cc(ret[--j]);\n          if (prev_cc <= cc)\n            break;\n        }\n        prev_cc = unpack_cc(ret[i]);\n      }\n    }\n    return ret;\n  }\n  function composed_from_decomposed(v) {\n    let ret = [];\n    let stack = [];\n    let prev_cp = -1;\n    let prev_cc = 0;\n    for (let packed of v) {\n      let cc = unpack_cc(packed);\n      let cp = unpack_cp(packed);\n      if (prev_cp == -1) {\n        if (cc == 0) {\n          prev_cp = cp;\n        } else {\n          ret.push(cp);\n        }\n      } else if (prev_cc > 0 && prev_cc >= cc) {\n        if (cc == 0) {\n          ret.push(prev_cp, ...stack);\n          stack.length = 0;\n          prev_cp = cp;\n        } else {\n          stack.push(cp);\n        }\n        prev_cc = cc;\n      } else {\n        let composed = compose_pair(prev_cp, cp);\n        if (composed >= 0) {\n          prev_cp = composed;\n        } else if (prev_cc == 0 && cc == 0) {\n          ret.push(prev_cp);\n          prev_cp = cp;\n        } else {\n          stack.push(cp);\n          prev_cc = cc;\n        }\n      }\n    }\n    if (prev_cp >= 0) {\n      ret.push(prev_cp, ...stack);\n    }\n    return ret;\n  }\n  function nfd(cps) {\n    return decomposed(cps).map(unpack_cp);\n  }\n  function nfc2(cps) {\n    return composed_from_decomposed(decomposed(cps));\n  }\n  function group_has_cp(g, cp) {\n    return g.P.has(cp) || g.Q.has(cp);\n  }\n  function init2() {\n    if (MAPPED2)\n      return;\n    let r2 = read_compressed_payload2(COMPRESSED$1);\n    const read_sorted_array = () => read_sorted(r2);\n    const read_sorted_set = () => new Set(read_sorted_array());\n    const set_add_many = (set, v) => v.forEach((x) => set.add(x));\n    MAPPED2 = new Map(read_mapped(r2));\n    IGNORED2 = read_sorted_set();\n    CM = read_sorted_array();\n    NSM = new Set(read_sorted_array().map((i) => CM[i]));\n    CM = new Set(CM);\n    ESCAPE = read_sorted_set();\n    NFC_CHECK = read_sorted_set();\n    let chunks = read_sorted_arrays(r2);\n    let unrestricted = r2();\n    const read_chunked = () => {\n      let set = /* @__PURE__ */ new Set();\n      read_sorted_array().forEach((i) => set_add_many(set, chunks[i]));\n      set_add_many(set, read_sorted_array());\n      return set;\n    };\n    GROUPS = read_array_while((i) => {\n      let N2 = read_array_while(r2).map((x) => x + 96);\n      if (N2.length) {\n        let R = i >= unrestricted;\n        N2[0] -= 32;\n        N2 = str_from_cps(N2);\n        if (R)\n          N2 = `Restricted[${N2}]`;\n        let P = read_chunked();\n        let Q = read_chunked();\n        let M = !r2();\n        return { N: N2, P, Q, M, R };\n      }\n    });\n    WHOLE_VALID = read_sorted_set();\n    WHOLE_MAP = /* @__PURE__ */ new Map();\n    let wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b2) => a - b2);\n    wholes.forEach((cp, i) => {\n      let d = r2();\n      let w = wholes[i] = d ? wholes[i - d] : { V: [], M: /* @__PURE__ */ new Map() };\n      w.V.push(cp);\n      if (!WHOLE_VALID.has(cp)) {\n        WHOLE_MAP.set(cp, w);\n      }\n    });\n    for (let { V, M } of new Set(WHOLE_MAP.values())) {\n      let recs = [];\n      for (let cp of V) {\n        let gs = GROUPS.filter((g) => group_has_cp(g, cp));\n        let rec = recs.find(({ G }) => gs.some((g) => G.has(g)));\n        if (!rec) {\n          rec = { G: /* @__PURE__ */ new Set(), V: [] };\n          recs.push(rec);\n        }\n        rec.V.push(cp);\n        set_add_many(rec.G, gs);\n      }\n      let union = recs.flatMap((x) => Array_from(x.G));\n      for (let { G, V: V2 } of recs) {\n        let complement = new Set(union.filter((g) => !G.has(g)));\n        for (let cp of V2) {\n          M.set(cp, complement);\n        }\n      }\n    }\n    VALID2 = /* @__PURE__ */ new Set();\n    let multi = /* @__PURE__ */ new Set();\n    const add_to_union = (cp) => VALID2.has(cp) ? multi.add(cp) : VALID2.add(cp);\n    for (let g of GROUPS) {\n      for (let cp of g.P)\n        add_to_union(cp);\n      for (let cp of g.Q)\n        add_to_union(cp);\n    }\n    for (let cp of VALID2) {\n      if (!WHOLE_MAP.has(cp) && !multi.has(cp)) {\n        WHOLE_MAP.set(cp, UNIQUE_PH);\n      }\n    }\n    set_add_many(VALID2, nfd(VALID2));\n    EMOJI_LIST = read_trie(r2).map((v) => Emoji.from(v)).sort(compare_arrays);\n    EMOJI_ROOT2 = /* @__PURE__ */ new Map();\n    for (let cps of EMOJI_LIST) {\n      let prev = [EMOJI_ROOT2];\n      for (let cp of cps) {\n        let next = prev.map((node) => {\n          let child = node.get(cp);\n          if (!child) {\n            child = /* @__PURE__ */ new Map();\n            node.set(cp, child);\n          }\n          return child;\n        });\n        if (cp === FE0F) {\n          prev.push(...next);\n        } else {\n          prev = next;\n        }\n      }\n      for (let x of prev) {\n        x.V = cps;\n      }\n    }\n  }\n  function quoted_cp(cp) {\n    return (should_escape(cp) ? \"\" : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);\n  }\n  function bidi_qq(s) {\n    return `\"${s}\"\\u200E`;\n  }\n  function check_label_extension(cps) {\n    if (cps.length >= 4 && cps[2] == HYPHEN2 && cps[3] == HYPHEN2) {\n      throw new Error(`invalid label extension: \"${str_from_cps(cps.slice(0, 4))}\"`);\n    }\n  }\n  function check_leading_underscore(cps) {\n    const UNDERSCORE2 = 95;\n    for (let i = cps.lastIndexOf(UNDERSCORE2); i > 0; ) {\n      if (cps[--i] !== UNDERSCORE2) {\n        throw new Error(\"underscore allowed only at start\");\n      }\n    }\n  }\n  function check_fenced(cps) {\n    let cp = cps[0];\n    let prev = FENCED.get(cp);\n    if (prev)\n      throw error_placement(`leading ${prev}`);\n    let n2 = cps.length;\n    let last = -1;\n    for (let i = 1; i < n2; i++) {\n      cp = cps[i];\n      let match = FENCED.get(cp);\n      if (match) {\n        if (last == i)\n          throw error_placement(`${prev} + ${match}`);\n        last = i + 1;\n        prev = match;\n      }\n    }\n    if (last == n2)\n      throw error_placement(`trailing ${prev}`);\n  }\n  function safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {\n    let buf = [];\n    if (is_combining_mark(cps[0]))\n      buf.push(\"\\u25CC\");\n    if (cps.length > max) {\n      max >>= 1;\n      cps = [...cps.slice(0, max), 8230, ...cps.slice(-max)];\n    }\n    let prev = 0;\n    let n2 = cps.length;\n    for (let i = 0; i < n2; i++) {\n      let cp = cps[i];\n      if (should_escape(cp)) {\n        buf.push(str_from_cps(cps.slice(prev, i)));\n        buf.push(quoter(cp));\n        prev = i + 1;\n      }\n    }\n    buf.push(str_from_cps(cps.slice(prev, n2)));\n    return buf.join(\"\");\n  }\n  function is_combining_mark(cp) {\n    init2();\n    return CM.has(cp);\n  }\n  function should_escape(cp) {\n    init2();\n    return ESCAPE.has(cp);\n  }\n  function ens_normalize2(name) {\n    return flatten2(split2(name, nfc2, filter_fe0f2));\n  }\n  function split2(name, nf, ef) {\n    if (!name)\n      return [];\n    init2();\n    let offset = 0;\n    return name.split(STOP_CH).map((label) => {\n      let input = explode_cp2(label);\n      let info = {\n        input,\n        offset\n        // codepoint, not substring!\n      };\n      offset += input.length + 1;\n      try {\n        let tokens = info.tokens = tokens_from_str(input, nf, ef);\n        let token_count = tokens.length;\n        let type;\n        if (!token_count) {\n          throw new Error(`empty label`);\n        }\n        let norm = info.output = tokens.flat();\n        check_leading_underscore(norm);\n        let emoji = info.emoji = token_count > 1 || tokens[0].is_emoji;\n        if (!emoji && norm.every((cp) => cp < 128)) {\n          check_label_extension(norm);\n          type = \"ASCII\";\n        } else {\n          let chars = tokens.flatMap((x) => x.is_emoji ? [] : x);\n          if (!chars.length) {\n            type = \"Emoji\";\n          } else {\n            if (CM.has(norm[0]))\n              throw error_placement(\"leading combining mark\");\n            for (let i = 1; i < token_count; i++) {\n              let cps = tokens[i];\n              if (!cps.is_emoji && CM.has(cps[0])) {\n                throw error_placement(`emoji + combining mark: \"${str_from_cps(tokens[i - 1])} + ${safe_str_from_cps([cps[0]])}\"`);\n              }\n            }\n            check_fenced(norm);\n            let unique = Array_from(new Set(chars));\n            let [g] = determine_group(unique);\n            check_group(g, chars);\n            check_whole(g, unique);\n            type = g.N;\n          }\n        }\n        info.type = type;\n      } catch (err) {\n        info.error = err;\n      }\n      return info;\n    });\n  }\n  function check_whole(group, unique) {\n    let maker;\n    let shared = [];\n    for (let cp of unique) {\n      let whole = WHOLE_MAP.get(cp);\n      if (whole === UNIQUE_PH)\n        return;\n      if (whole) {\n        let set = whole.M.get(cp);\n        maker = maker ? maker.filter((g) => set.has(g)) : Array_from(set);\n        if (!maker.length)\n          return;\n      } else {\n        shared.push(cp);\n      }\n    }\n    if (maker) {\n      for (let g of maker) {\n        if (shared.every((cp) => group_has_cp(g, cp))) {\n          throw new Error(`whole-script confusable: ${group.N}/${g.N}`);\n        }\n      }\n    }\n  }\n  function determine_group(unique) {\n    let groups = GROUPS;\n    for (let cp of unique) {\n      let gs = groups.filter((g) => group_has_cp(g, cp));\n      if (!gs.length) {\n        if (!GROUPS.some((g) => group_has_cp(g, cp))) {\n          throw error_disallowed(cp);\n        } else {\n          throw error_group_member(groups[0], cp);\n        }\n      }\n      groups = gs;\n      if (gs.length == 1)\n        break;\n    }\n    return groups;\n  }\n  function flatten2(split3) {\n    return split3.map(({ input, error, output: output2 }) => {\n      if (error) {\n        let msg = error.message;\n        throw new Error(split3.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`);\n      }\n      return str_from_cps(output2);\n    }).join(STOP_CH);\n  }\n  function error_disallowed(cp) {\n    return new Error(`disallowed character: ${quoted_cp(cp)}`);\n  }\n  function error_group_member(g, cp) {\n    let quoted = quoted_cp(cp);\n    let gg = GROUPS.find((g2) => g2.P.has(cp));\n    if (gg) {\n      quoted = `${gg.N} ${quoted}`;\n    }\n    return new Error(`illegal mixture: ${g.N} + ${quoted}`);\n  }\n  function error_placement(where) {\n    return new Error(`illegal placement: ${where}`);\n  }\n  function check_group(g, cps) {\n    for (let cp of cps) {\n      if (!group_has_cp(g, cp)) {\n        throw error_group_member(g, cp);\n      }\n    }\n    if (g.M) {\n      let decomposed2 = nfd(cps);\n      for (let i = 1, e = decomposed2.length; i < e; i++) {\n        if (NSM.has(decomposed2[i])) {\n          let j = i + 1;\n          for (let cp; j < e && NSM.has(cp = decomposed2[j]); j++) {\n            for (let k = i; k < j; k++) {\n              if (decomposed2[k] == cp) {\n                throw new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);\n              }\n            }\n          }\n          if (j - i > NSM_MAX) {\n            throw new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed2.slice(i - 1, j)))} (${j - i}/${NSM_MAX})`);\n          }\n          i = j;\n        }\n      }\n    }\n  }\n  function tokens_from_str(input, nf, ef) {\n    let ret = [];\n    let chars = [];\n    input = input.slice().reverse();\n    while (input.length) {\n      let emoji = consume_emoji_reversed2(input);\n      if (emoji) {\n        if (chars.length) {\n          ret.push(nf(chars));\n          chars = [];\n        }\n        ret.push(ef(emoji));\n      } else {\n        let cp = input.pop();\n        if (VALID2.has(cp)) {\n          chars.push(cp);\n        } else {\n          let cps = MAPPED2.get(cp);\n          if (cps) {\n            chars.push(...cps);\n          } else if (!IGNORED2.has(cp)) {\n            throw error_disallowed(cp);\n          }\n        }\n      }\n    }\n    if (chars.length) {\n      ret.push(nf(chars));\n    }\n    return ret;\n  }\n  function filter_fe0f2(cps) {\n    return cps.filter((cp) => cp != FE0F);\n  }\n  function consume_emoji_reversed2(cps, eaten) {\n    let node = EMOJI_ROOT2;\n    let emoji;\n    let pos = cps.length;\n    while (pos) {\n      node = node.get(cps[--pos]);\n      if (!node)\n        break;\n      let { V } = node;\n      if (V) {\n        emoji = V;\n        if (eaten)\n          eaten.push(...cps.slice(pos).reverse());\n        cps.length = pos;\n      }\n    }\n    return emoji;\n  }\n  var COMPRESSED$1, FENCED, NSM_MAX, COMPRESSED, S0, L0, V0, T0, L_COUNT, V_COUNT, T_COUNT, N_COUNT, S_COUNT, S1, L1, V1, T1, SHIFTED_RANK, EXCLUSIONS, DECOMP, RECOMP, HYPHEN2, STOP_CH, FE0F, UNIQUE_PH, Array_from, Emoji, MAPPED2, IGNORED2, CM, NSM, ESCAPE, NFC_CHECK, GROUPS, WHOLE_VALID, WHOLE_MAP, VALID2, EMOJI_LIST, EMOJI_ROOT2;\n  var init_dist = __esm({\n    \"../../../node_modules/.pnpm/@adraffy+ens-normalize@1.10.1/node_modules/@adraffy/ens-normalize/dist/index.mjs\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      COMPRESSED$1 = \"\";\n      FENCED = /* @__PURE__ */ new Map([[8217, \"apostrophe\"], [8260, \"fraction slash\"], [12539, \"middle dot\"]]);\n      NSM_MAX = 4;\n      COMPRESSED = \"AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g\";\n      S0 = 44032;\n      L0 = 4352;\n      V0 = 4449;\n      T0 = 4519;\n      L_COUNT = 19;\n      V_COUNT = 21;\n      T_COUNT = 28;\n      N_COUNT = V_COUNT * T_COUNT;\n      S_COUNT = L_COUNT * N_COUNT;\n      S1 = S0 + S_COUNT;\n      L1 = L0 + L_COUNT;\n      V1 = V0 + V_COUNT;\n      T1 = T0 + T_COUNT;\n      HYPHEN2 = 45;\n      STOP_CH = \".\";\n      FE0F = 65039;\n      UNIQUE_PH = 1;\n      Array_from = (x) => Array.from(x);\n      Emoji = class extends Array {\n        get is_emoji() {\n          return true;\n        }\n        // free tagging system\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/hash/namehash.js\n  function checkComponent2(comp) {\n    assertArgument(comp.length !== 0, \"invalid ENS name; empty component\", \"comp\", comp);\n    return comp;\n  }\n  function ensNameSplit2(name) {\n    const bytes3 = toUtf8Bytes2(ensNormalize(name));\n    const comps = [];\n    if (name.length === 0) {\n      return comps;\n    }\n    let last = 0;\n    for (let i = 0; i < bytes3.length; i++) {\n      const d = bytes3[i];\n      if (d === 46) {\n        comps.push(checkComponent2(bytes3.slice(last, i)));\n        last = i + 1;\n      }\n    }\n    assertArgument(last < bytes3.length, \"invalid ENS name; empty component\", \"name\", name);\n    comps.push(checkComponent2(bytes3.slice(last)));\n    return comps;\n  }\n  function ensNormalize(name) {\n    try {\n      if (name.length === 0) {\n        throw new Error(\"empty label\");\n      }\n      return ens_normalize2(name);\n    } catch (error) {\n      assertArgument(false, `invalid ENS name (${error.message})`, \"name\", name);\n    }\n  }\n  function namehash2(name) {\n    assertArgument(typeof name === \"string\", \"invalid ENS name; not a string\", \"name\", name);\n    assertArgument(name.length, `invalid ENS name (empty label)`, \"name\", name);\n    let result = Zeros3;\n    const comps = ensNameSplit2(name);\n    while (comps.length) {\n      result = keccak2563(concat2([result, keccak2563(comps.pop())]));\n    }\n    return hexlify2(result);\n  }\n  function dnsEncode2(name, _maxLength) {\n    const length = _maxLength != null ? _maxLength : 63;\n    assertArgument(length <= 255, \"DNS encoded label cannot exceed 255\", \"length\", length);\n    return hexlify2(concat2(ensNameSplit2(name).map((comp) => {\n      assertArgument(comp.length <= length, `label ${JSON.stringify(name)} exceeds ${length} bytes`, \"name\", name);\n      const bytes3 = new Uint8Array(comp.length + 1);\n      bytes3.set(comp, 1);\n      bytes3[0] = bytes3.length - 1;\n      return bytes3;\n    }))) + \"00\";\n  }\n  var Zeros3;\n  var init_namehash2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/hash/namehash.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_crypto2();\n      init_utils3();\n      init_dist();\n      Zeros3 = new Uint8Array(32);\n      Zeros3.fill(0);\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/hash/typed-data.js\n  function hexPadRight2(value) {\n    const bytes3 = getBytes(value);\n    const padOffset = bytes3.length % 32;\n    if (padOffset) {\n      return concat2([bytes3, padding2.slice(padOffset)]);\n    }\n    return hexlify2(bytes3);\n  }\n  function checkString2(key2) {\n    return function(value) {\n      assertArgument(typeof value === \"string\", `invalid domain value for ${JSON.stringify(key2)}`, `domain.${key2}`, value);\n      return value;\n    };\n  }\n  function getBaseEncoder2(type) {\n    {\n      const match = type.match(/^(u?)int(\\d+)$/);\n      if (match) {\n        const signed3 = match[1] === \"\";\n        const width = parseInt(match[2]);\n        assertArgument(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), \"invalid numeric width\", \"type\", type);\n        const boundsUpper = mask(BN_MAX_UINT2562, signed3 ? width - 1 : width);\n        const boundsLower = signed3 ? (boundsUpper + BN_14) * BN__1 : BN_07;\n        return function(_value) {\n          const value = getBigInt(_value, \"value\");\n          assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, \"value\", value);\n          return toBeHex(signed3 ? toTwos(value, 256) : value, 32);\n        };\n      }\n    }\n    {\n      const match = type.match(/^bytes(\\d+)$/);\n      if (match) {\n        const width = parseInt(match[1]);\n        assertArgument(width !== 0 && width <= 32 && match[1] === String(width), \"invalid bytes width\", \"type\", type);\n        return function(value) {\n          const bytes3 = getBytes(value);\n          assertArgument(bytes3.length === width, `invalid length for ${type}`, \"value\", value);\n          return hexPadRight2(value);\n        };\n      }\n    }\n    switch (type) {\n      case \"address\":\n        return function(value) {\n          return zeroPadValue(getAddress2(value), 32);\n        };\n      case \"bool\":\n        return function(value) {\n          return !value ? hexFalse2 : hexTrue2;\n        };\n      case \"bytes\":\n        return function(value) {\n          return keccak2563(value);\n        };\n      case \"string\":\n        return function(value) {\n          return id2(value);\n        };\n    }\n    return null;\n  }\n  function encodeType2(name, fields) {\n    return `${name}(${fields.map(({ name: name2, type }) => type + \" \" + name2).join(\",\")})`;\n  }\n  function splitArray(type) {\n    const match = type.match(/^([^\\x5b]*)((\\x5b\\d*\\x5d)*)(\\x5b(\\d*)\\x5d)$/);\n    if (match) {\n      return {\n        base: match[1],\n        index: match[2] + match[4],\n        array: {\n          base: match[1],\n          prefix: match[1] + match[2],\n          count: match[5] ? parseInt(match[5]) : -1\n        }\n      };\n    }\n    return { base: type };\n  }\n  var padding2, BN__1, BN_07, BN_14, BN_MAX_UINT2562, hexTrue2, hexFalse2, domainFieldTypes2, domainFieldNames2, domainChecks2, TypedDataEncoder2;\n  var init_typed_data2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/hash/typed-data.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_address3();\n      init_crypto2();\n      init_utils3();\n      init_id2();\n      padding2 = new Uint8Array(32);\n      padding2.fill(0);\n      BN__1 = BigInt(-1);\n      BN_07 = BigInt(0);\n      BN_14 = BigInt(1);\n      BN_MAX_UINT2562 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n      hexTrue2 = toBeHex(BN_14, 32);\n      hexFalse2 = toBeHex(BN_07, 32);\n      domainFieldTypes2 = {\n        name: \"string\",\n        version: \"string\",\n        chainId: \"uint256\",\n        verifyingContract: \"address\",\n        salt: \"bytes32\"\n      };\n      domainFieldNames2 = [\n        \"name\",\n        \"version\",\n        \"chainId\",\n        \"verifyingContract\",\n        \"salt\"\n      ];\n      domainChecks2 = {\n        name: checkString2(\"name\"),\n        version: checkString2(\"version\"),\n        chainId: function(_value) {\n          const value = getBigInt(_value, \"domain.chainId\");\n          assertArgument(value >= 0, \"invalid chain ID\", \"domain.chainId\", _value);\n          if (Number.isSafeInteger(value)) {\n            return Number(value);\n          }\n          return toQuantity(value);\n        },\n        verifyingContract: function(value) {\n          try {\n            return getAddress2(value).toLowerCase();\n          } catch (error) {\n          }\n          assertArgument(false, `invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n        },\n        salt: function(value) {\n          const bytes3 = getBytes(value, \"domain.salt\");\n          assertArgument(bytes3.length === 32, `invalid domain value \"salt\"`, \"domain.salt\", value);\n          return hexlify2(bytes3);\n        }\n      };\n      TypedDataEncoder2 = class _TypedDataEncoder {\n        /**\n         *  The primary type for the structured [[types]].\n         *\n         *  This is derived automatically from the [[types]], since no\n         *  recursion is possible, once the DAG for the types is consturcted\n         *  internally, the primary type must be the only remaining type with\n         *  no parent nodes.\n         */\n        primaryType;\n        #types;\n        /**\n         *  The types.\n         */\n        get types() {\n          return JSON.parse(this.#types);\n        }\n        #fullTypes;\n        #encoderCache;\n        /**\n         *  Create a new **TypedDataEncoder** for %%types%%.\n         *\n         *  This performs all necessary checking that types are valid and\n         *  do not violate the [[link-eip-712]] structural constraints as\n         *  well as computes the [[primaryType]].\n         */\n        constructor(_types) {\n          this.#fullTypes = /* @__PURE__ */ new Map();\n          this.#encoderCache = /* @__PURE__ */ new Map();\n          const links = /* @__PURE__ */ new Map();\n          const parents = /* @__PURE__ */ new Map();\n          const subtypes = /* @__PURE__ */ new Map();\n          const types = {};\n          Object.keys(_types).forEach((type) => {\n            types[type] = _types[type].map(({ name, type: type2 }) => {\n              let { base: base2, index } = splitArray(type2);\n              if (base2 === \"int\" && !_types[\"int\"]) {\n                base2 = \"int256\";\n              }\n              if (base2 === \"uint\" && !_types[\"uint\"]) {\n                base2 = \"uint256\";\n              }\n              return { name, type: base2 + (index || \"\") };\n            });\n            links.set(type, /* @__PURE__ */ new Set());\n            parents.set(type, []);\n            subtypes.set(type, /* @__PURE__ */ new Set());\n          });\n          this.#types = JSON.stringify(types);\n          for (const name in types) {\n            const uniqueNames = /* @__PURE__ */ new Set();\n            for (const field of types[name]) {\n              assertArgument(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", _types);\n              uniqueNames.add(field.name);\n              const baseType = splitArray(field.type).base;\n              assertArgument(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, \"types\", _types);\n              const encoder = getBaseEncoder2(baseType);\n              if (encoder) {\n                continue;\n              }\n              assertArgument(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, \"types\", _types);\n              parents.get(baseType).push(name);\n              links.get(name).add(baseType);\n            }\n          }\n          const primaryTypes = Array.from(parents.keys()).filter((n2) => parents.get(n2).length === 0);\n          assertArgument(primaryTypes.length !== 0, \"missing primary type\", \"types\", _types);\n          assertArgument(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t) => JSON.stringify(t)).join(\", \")}`, \"types\", _types);\n          defineProperties(this, { primaryType: primaryTypes[0] });\n          function checkCircular(type, found) {\n            assertArgument(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, \"types\", _types);\n            found.add(type);\n            for (const child of links.get(type)) {\n              if (!parents.has(child)) {\n                continue;\n              }\n              checkCircular(child, found);\n              for (const subtype of found) {\n                subtypes.get(subtype).add(child);\n              }\n            }\n            found.delete(type);\n          }\n          checkCircular(this.primaryType, /* @__PURE__ */ new Set());\n          for (const [name, set] of subtypes) {\n            const st = Array.from(set);\n            st.sort();\n            this.#fullTypes.set(name, encodeType2(name, types[name]) + st.map((t) => encodeType2(t, types[t])).join(\"\"));\n          }\n        }\n        /**\n         *  Returnthe encoder for the specific %%type%%.\n         */\n        getEncoder(type) {\n          let encoder = this.#encoderCache.get(type);\n          if (!encoder) {\n            encoder = this.#getEncoder(type);\n            this.#encoderCache.set(type, encoder);\n          }\n          return encoder;\n        }\n        #getEncoder(type) {\n          {\n            const encoder = getBaseEncoder2(type);\n            if (encoder) {\n              return encoder;\n            }\n          }\n          const array = splitArray(type).array;\n          if (array) {\n            const subtype = array.prefix;\n            const subEncoder = this.getEncoder(subtype);\n            return (value) => {\n              assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, \"value\", value);\n              let result = value.map(subEncoder);\n              if (this.#fullTypes.has(subtype)) {\n                result = result.map(keccak2563);\n              }\n              return keccak2563(concat2(result));\n            };\n          }\n          const fields = this.types[type];\n          if (fields) {\n            const encodedType = id2(this.#fullTypes.get(type));\n            return (value) => {\n              const values = fields.map(({ name, type: type2 }) => {\n                const result = this.getEncoder(type2)(value[name]);\n                if (this.#fullTypes.has(type2)) {\n                  return keccak2563(result);\n                }\n                return result;\n              });\n              values.unshift(encodedType);\n              return concat2(values);\n            };\n          }\n          assertArgument(false, `unknown type: ${type}`, \"type\", type);\n        }\n        /**\n         *  Return the full type for %%name%%.\n         */\n        encodeType(name) {\n          const result = this.#fullTypes.get(name);\n          assertArgument(result, `unknown type: ${JSON.stringify(name)}`, \"name\", name);\n          return result;\n        }\n        /**\n         *  Return the encoded %%value%% for the %%type%%.\n         */\n        encodeData(type, value) {\n          return this.getEncoder(type)(value);\n        }\n        /**\n         *  Returns the hash of %%value%% for the type of %%name%%.\n         */\n        hashStruct(name, value) {\n          return keccak2563(this.encodeData(name, value));\n        }\n        /**\n         *  Return the fulled encoded %%value%% for the [[types]].\n         */\n        encode(value) {\n          return this.encodeData(this.primaryType, value);\n        }\n        /**\n         *  Return the hash of the fully encoded %%value%% for the [[types]].\n         */\n        hash(value) {\n          return this.hashStruct(this.primaryType, value);\n        }\n        /**\n         *  @_ignore:\n         */\n        _visit(type, value, callback) {\n          {\n            const encoder = getBaseEncoder2(type);\n            if (encoder) {\n              return callback(type, value);\n            }\n          }\n          const array = splitArray(type).array;\n          if (array) {\n            assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, \"value\", value);\n            return value.map((v) => this._visit(array.prefix, v, callback));\n          }\n          const fields = this.types[type];\n          if (fields) {\n            return fields.reduce((accum, { name, type: type2 }) => {\n              accum[name] = this._visit(type2, value[name], callback);\n              return accum;\n            }, {});\n          }\n          assertArgument(false, `unknown type: ${type}`, \"type\", type);\n        }\n        /**\n         *  Call %%calback%% for each value in %%value%%, passing the type and\n         *  component within %%value%%.\n         *\n         *  This is useful for replacing addresses or other transformation that\n         *  may be desired on each component, based on its type.\n         */\n        visit(value, callback) {\n          return this._visit(this.primaryType, value, callback);\n        }\n        /**\n         *  Create a new **TypedDataEncoder** for %%types%%.\n         */\n        static from(types) {\n          return new _TypedDataEncoder(types);\n        }\n        /**\n         *  Return the primary type for %%types%%.\n         */\n        static getPrimaryType(types) {\n          return _TypedDataEncoder.from(types).primaryType;\n        }\n        /**\n         *  Return the hashed struct for %%value%% using %%types%% and %%name%%.\n         */\n        static hashStruct(name, types, value) {\n          return _TypedDataEncoder.from(types).hashStruct(name, value);\n        }\n        /**\n         *  Return the domain hash for %%domain%%.\n         */\n        static hashDomain(domain2) {\n          const domainFields = [];\n          for (const name in domain2) {\n            if (domain2[name] == null) {\n              continue;\n            }\n            const type = domainFieldTypes2[name];\n            assertArgument(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain2);\n            domainFields.push({ name, type });\n          }\n          domainFields.sort((a, b2) => {\n            return domainFieldNames2.indexOf(a.name) - domainFieldNames2.indexOf(b2.name);\n          });\n          return _TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain2);\n        }\n        /**\n         *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n         */\n        static encode(domain2, types, value) {\n          return concat2([\n            \"0x1901\",\n            _TypedDataEncoder.hashDomain(domain2),\n            _TypedDataEncoder.from(types).hash(value)\n          ]);\n        }\n        /**\n         *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n         */\n        static hash(domain2, types, value) {\n          return keccak2563(_TypedDataEncoder.encode(domain2, types, value));\n        }\n        // Replaces all address types with ENS names with their looked up address\n        /**\n         * Resolves to the value from resolving all addresses in %%value%% for\n         * %%types%% and the %%domain%%.\n         */\n        static async resolveNames(domain2, types, value, resolveName2) {\n          domain2 = Object.assign({}, domain2);\n          for (const key2 in domain2) {\n            if (domain2[key2] == null) {\n              delete domain2[key2];\n            }\n          }\n          const ensCache = {};\n          if (domain2.verifyingContract && !isHexString2(domain2.verifyingContract, 20)) {\n            ensCache[domain2.verifyingContract] = \"0x\";\n          }\n          const encoder = _TypedDataEncoder.from(types);\n          encoder.visit(value, (type, value2) => {\n            if (type === \"address\" && !isHexString2(value2, 20)) {\n              ensCache[value2] = \"0x\";\n            }\n            return value2;\n          });\n          for (const name in ensCache) {\n            ensCache[name] = await resolveName2(name);\n          }\n          if (domain2.verifyingContract && ensCache[domain2.verifyingContract]) {\n            domain2.verifyingContract = ensCache[domain2.verifyingContract];\n          }\n          value = encoder.visit(value, (type, value2) => {\n            if (type === \"address\" && ensCache[value2]) {\n              return ensCache[value2];\n            }\n            return value2;\n          });\n          return { domain: domain2, value };\n        }\n        /**\n         *  Returns the JSON-encoded payload expected by nodes which implement\n         *  the JSON-RPC [[link-eip-712]] method.\n         */\n        static getPayload(domain2, types, value) {\n          _TypedDataEncoder.hashDomain(domain2);\n          const domainValues = {};\n          const domainTypes = [];\n          domainFieldNames2.forEach((name) => {\n            const value2 = domain2[name];\n            if (value2 == null) {\n              return;\n            }\n            domainValues[name] = domainChecks2[name](value2);\n            domainTypes.push({ name, type: domainFieldTypes2[name] });\n          });\n          const encoder = _TypedDataEncoder.from(types);\n          types = encoder.types;\n          const typesWithDomain = Object.assign({}, types);\n          assertArgument(typesWithDomain.EIP712Domain == null, \"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n          typesWithDomain.EIP712Domain = domainTypes;\n          encoder.encode(value);\n          return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type, value2) => {\n              if (type.match(/^bytes(\\d*)/)) {\n                return hexlify2(getBytes(value2));\n              }\n              if (type.match(/^u?int/)) {\n                return getBigInt(value2).toString();\n              }\n              switch (type) {\n                case \"address\":\n                  return value2.toLowerCase();\n                case \"bool\":\n                  return !!value2;\n                case \"string\":\n                  assertArgument(typeof value2 === \"string\", \"invalid string\", \"value\", value2);\n                  return value2;\n              }\n              assertArgument(false, \"unsupported type\", \"type\", type);\n            })\n          };\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/hash/index.js\n  var init_hash = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/hash/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_id2();\n      init_namehash2();\n      init_typed_data2();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/fragments.js\n  function setify(items) {\n    const result = /* @__PURE__ */ new Set();\n    items.forEach((k) => result.add(k));\n    return Object.freeze(result);\n  }\n  function lex(text) {\n    const tokens = [];\n    const throwError2 = (message) => {\n      const token = offset < text.length ? JSON.stringify(text[offset]) : \"$EOI\";\n      throw new Error(`invalid token ${token} at ${offset}: ${message}`);\n    };\n    let brackets = [];\n    let commas = [];\n    let offset = 0;\n    while (offset < text.length) {\n      let cur = text.substring(offset);\n      let match = cur.match(regexWhitespacePrefix);\n      if (match) {\n        offset += match[1].length;\n        cur = text.substring(offset);\n      }\n      const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: \"\", text: \"\", offset, value: -1 };\n      tokens.push(token);\n      let type = SimpleTokens[cur[0]] || \"\";\n      if (type) {\n        token.type = type;\n        token.text = cur[0];\n        offset++;\n        if (type === \"OPEN_PAREN\") {\n          brackets.push(tokens.length - 1);\n          commas.push(tokens.length - 1);\n        } else if (type == \"CLOSE_PAREN\") {\n          if (brackets.length === 0) {\n            throwError2(\"no matching open bracket\");\n          }\n          token.match = brackets.pop();\n          tokens[token.match].match = tokens.length - 1;\n          token.depth--;\n          token.linkBack = commas.pop();\n          tokens[token.linkBack].linkNext = tokens.length - 1;\n        } else if (type === \"COMMA\") {\n          token.linkBack = commas.pop();\n          tokens[token.linkBack].linkNext = tokens.length - 1;\n          commas.push(tokens.length - 1);\n        } else if (type === \"OPEN_BRACKET\") {\n          token.type = \"BRACKET\";\n        } else if (type === \"CLOSE_BRACKET\") {\n          let suffix = tokens.pop().text;\n          if (tokens.length > 0 && tokens[tokens.length - 1].type === \"NUMBER\") {\n            const value = tokens.pop().text;\n            suffix = value + suffix;\n            tokens[tokens.length - 1].value = getNumber(value);\n          }\n          if (tokens.length === 0 || tokens[tokens.length - 1].type !== \"BRACKET\") {\n            throw new Error(\"missing opening bracket\");\n          }\n          tokens[tokens.length - 1].text += suffix;\n        }\n        continue;\n      }\n      match = cur.match(regexIdPrefix);\n      if (match) {\n        token.text = match[1];\n        offset += token.text.length;\n        if (Keywords.has(token.text)) {\n          token.type = \"KEYWORD\";\n          continue;\n        }\n        if (token.text.match(regexType)) {\n          token.type = \"TYPE\";\n          continue;\n        }\n        token.type = \"ID\";\n        continue;\n      }\n      match = cur.match(regexNumberPrefix);\n      if (match) {\n        token.text = match[1];\n        token.type = \"NUMBER\";\n        offset += token.text.length;\n        continue;\n      }\n      throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);\n    }\n    return new TokenString(tokens.map((t) => Object.freeze(t)));\n  }\n  function allowSingle(set, allowed) {\n    let included = [];\n    for (const key2 in allowed.keys()) {\n      if (set.has(key2)) {\n        included.push(key2);\n      }\n    }\n    if (included.length > 1) {\n      throw new Error(`conflicting types: ${included.join(\", \")}`);\n    }\n  }\n  function consumeName(type, tokens) {\n    if (tokens.peekKeyword(KwTypes)) {\n      const keyword = tokens.pop().text;\n      if (keyword !== type) {\n        throw new Error(`expected ${type}, got ${keyword}`);\n      }\n    }\n    return tokens.popType(\"ID\");\n  }\n  function consumeKeywords(tokens, allowed) {\n    const keywords = /* @__PURE__ */ new Set();\n    while (true) {\n      const keyword = tokens.peekType(\"KEYWORD\");\n      if (keyword == null || allowed && !allowed.has(keyword)) {\n        break;\n      }\n      tokens.pop();\n      if (keywords.has(keyword)) {\n        throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);\n      }\n      keywords.add(keyword);\n    }\n    return Object.freeze(keywords);\n  }\n  function consumeMutability(tokens) {\n    let modifiers = consumeKeywords(tokens, KwVisib);\n    allowSingle(modifiers, setify(\"constant payable nonpayable\".split(\" \")));\n    allowSingle(modifiers, setify(\"pure view payable nonpayable\".split(\" \")));\n    if (modifiers.has(\"view\")) {\n      return \"view\";\n    }\n    if (modifiers.has(\"pure\")) {\n      return \"pure\";\n    }\n    if (modifiers.has(\"payable\")) {\n      return \"payable\";\n    }\n    if (modifiers.has(\"nonpayable\")) {\n      return \"nonpayable\";\n    }\n    if (modifiers.has(\"constant\")) {\n      return \"view\";\n    }\n    return \"nonpayable\";\n  }\n  function consumeParams(tokens, allowIndexed) {\n    return tokens.popParams().map((t) => ParamType2.from(t, allowIndexed));\n  }\n  function consumeGas(tokens) {\n    if (tokens.peekType(\"AT\")) {\n      tokens.pop();\n      if (tokens.peekType(\"NUMBER\")) {\n        return getBigInt(tokens.pop().text);\n      }\n      throw new Error(\"invalid gas\");\n    }\n    return null;\n  }\n  function consumeEoi(tokens) {\n    if (tokens.length) {\n      throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);\n    }\n  }\n  function verifyBasicType(type) {\n    const match = type.match(regexType);\n    assertArgument(match, \"invalid type\", \"type\", type);\n    if (type === \"uint\") {\n      return \"uint256\";\n    }\n    if (type === \"int\") {\n      return \"int256\";\n    }\n    if (match[2]) {\n      const length = parseInt(match[2]);\n      assertArgument(length !== 0 && length <= 32, \"invalid bytes length\", \"type\", type);\n    } else if (match[3]) {\n      const size = parseInt(match[3]);\n      assertArgument(size !== 0 && size <= 256 && size % 8 === 0, \"invalid numeric width\", \"type\", type);\n    }\n    return type;\n  }\n  function joinParams(format, params) {\n    return \"(\" + params.map((p) => p.format(format)).join(format === \"full\" ? \", \" : \",\") + \")\";\n  }\n  var _kwVisibDeploy, KwVisibDeploy, _kwVisib, KwVisib, _kwTypes, KwTypes, _kwModifiers, KwModifiers, _kwOther, _keywords, Keywords, SimpleTokens, regexWhitespacePrefix, regexNumberPrefix, regexIdPrefix, regexId, regexType, TokenString, regexArrayType, _guard3, internal, ParamTypeInternal, ErrorFragmentInternal, EventFragmentInternal, ConstructorFragmentInternal, FallbackFragmentInternal, FunctionFragmentInternal, StructFragmentInternal, ParamType2, Fragment2, NamedFragment, ErrorFragment2, EventFragment2, ConstructorFragment2, FallbackFragment, FunctionFragment2, StructFragment;\n  var init_fragments2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/fragments.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_utils3();\n      init_hash();\n      _kwVisibDeploy = \"external public payable override\";\n      KwVisibDeploy = setify(_kwVisibDeploy.split(\" \"));\n      _kwVisib = \"constant external internal payable private public pure view override\";\n      KwVisib = setify(_kwVisib.split(\" \"));\n      _kwTypes = \"constructor error event fallback function receive struct\";\n      KwTypes = setify(_kwTypes.split(\" \"));\n      _kwModifiers = \"calldata memory storage payable indexed\";\n      KwModifiers = setify(_kwModifiers.split(\" \"));\n      _kwOther = \"tuple returns\";\n      _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(\" \");\n      Keywords = setify(_keywords.split(\" \"));\n      SimpleTokens = {\n        \"(\": \"OPEN_PAREN\",\n        \")\": \"CLOSE_PAREN\",\n        \"[\": \"OPEN_BRACKET\",\n        \"]\": \"CLOSE_BRACKET\",\n        \",\": \"COMMA\",\n        \"@\": \"AT\"\n      };\n      regexWhitespacePrefix = new RegExp(\"^(\\\\s*)\");\n      regexNumberPrefix = new RegExp(\"^([0-9]+)\");\n      regexIdPrefix = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)\");\n      regexId = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)$\");\n      regexType = new RegExp(\"^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$\");\n      TokenString = class _TokenString {\n        #offset;\n        #tokens;\n        get offset() {\n          return this.#offset;\n        }\n        get length() {\n          return this.#tokens.length - this.#offset;\n        }\n        constructor(tokens) {\n          this.#offset = 0;\n          this.#tokens = tokens.slice();\n        }\n        clone() {\n          return new _TokenString(this.#tokens);\n        }\n        reset() {\n          this.#offset = 0;\n        }\n        #subTokenString(from = 0, to = 0) {\n          return new _TokenString(this.#tokens.slice(from, to).map((t) => {\n            return Object.freeze(Object.assign({}, t, {\n              match: t.match - from,\n              linkBack: t.linkBack - from,\n              linkNext: t.linkNext - from\n            }));\n          }));\n        }\n        // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens\n        popKeyword(allowed) {\n          const top = this.peek();\n          if (top.type !== \"KEYWORD\" || !allowed.has(top.text)) {\n            throw new Error(`expected keyword ${top.text}`);\n          }\n          return this.pop().text;\n        }\n        // Pops and returns the value of the next token if it is `type`; throws if out of tokens\n        popType(type) {\n          if (this.peek().type !== type) {\n            const top = this.peek();\n            throw new Error(`expected ${type}; got ${top.type} ${JSON.stringify(top.text)}`);\n          }\n          return this.pop().text;\n        }\n        // Pops and returns a \"(\" TOKENS \")\"\n        popParen() {\n          const top = this.peek();\n          if (top.type !== \"OPEN_PAREN\") {\n            throw new Error(\"bad start\");\n          }\n          const result = this.#subTokenString(this.#offset + 1, top.match + 1);\n          this.#offset = top.match + 1;\n          return result;\n        }\n        // Pops and returns the items within \"(\" ITEM1 \",\" ITEM2 \",\" ... \")\"\n        popParams() {\n          const top = this.peek();\n          if (top.type !== \"OPEN_PAREN\") {\n            throw new Error(\"bad start\");\n          }\n          const result = [];\n          while (this.#offset < top.match - 1) {\n            const link = this.peek().linkNext;\n            result.push(this.#subTokenString(this.#offset + 1, link));\n            this.#offset = link;\n          }\n          this.#offset = top.match + 1;\n          return result;\n        }\n        // Returns the top Token, throwing if out of tokens\n        peek() {\n          if (this.#offset >= this.#tokens.length) {\n            throw new Error(\"out-of-bounds\");\n          }\n          return this.#tokens[this.#offset];\n        }\n        // Returns the next value, if it is a keyword in `allowed`\n        peekKeyword(allowed) {\n          const top = this.peekType(\"KEYWORD\");\n          return top != null && allowed.has(top) ? top : null;\n        }\n        // Returns the value of the next token if it is `type`\n        peekType(type) {\n          if (this.length === 0) {\n            return null;\n          }\n          const top = this.peek();\n          return top.type === type ? top.text : null;\n        }\n        // Returns the next token; throws if out of tokens\n        pop() {\n          const result = this.peek();\n          this.#offset++;\n          return result;\n        }\n        toString() {\n          const tokens = [];\n          for (let i = this.#offset; i < this.#tokens.length; i++) {\n            const token = this.#tokens[i];\n            tokens.push(`${token.type}:${token.text}`);\n          }\n          return `<TokenString ${tokens.join(\" \")}>`;\n        }\n      };\n      regexArrayType = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\n      _guard3 = {};\n      internal = Symbol.for(\"_ethers_internal\");\n      ParamTypeInternal = \"_ParamTypeInternal\";\n      ErrorFragmentInternal = \"_ErrorInternal\";\n      EventFragmentInternal = \"_EventInternal\";\n      ConstructorFragmentInternal = \"_ConstructorInternal\";\n      FallbackFragmentInternal = \"_FallbackInternal\";\n      FunctionFragmentInternal = \"_FunctionInternal\";\n      StructFragmentInternal = \"_StructInternal\";\n      ParamType2 = class _ParamType {\n        /**\n         *  The local name of the parameter (or ``\"\"`` if unbound)\n         */\n        name;\n        /**\n         *  The fully qualified type (e.g. ``\"address\"``, ``\"tuple(address)\"``,\n         *  ``\"uint256[3][]\"``)\n         */\n        type;\n        /**\n         *  The base type (e.g. ``\"address\"``, ``\"tuple\"``, ``\"array\"``)\n         */\n        baseType;\n        /**\n         *  True if the parameters is indexed.\n         *\n         *  For non-indexable types this is ``null``.\n         */\n        indexed;\n        /**\n         *  The components for the tuple.\n         *\n         *  For non-tuple types this is ``null``.\n         */\n        components;\n        /**\n         *  The array length, or ``-1`` for dynamic-lengthed arrays.\n         *\n         *  For non-array types this is ``null``.\n         */\n        arrayLength;\n        /**\n         *  The type of each child in the array.\n         *\n         *  For non-array types this is ``null``.\n         */\n        arrayChildren;\n        /**\n         *  @private\n         */\n        constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren) {\n          assertPrivate(guard, _guard3, \"ParamType\");\n          Object.defineProperty(this, internal, { value: ParamTypeInternal });\n          if (components) {\n            components = Object.freeze(components.slice());\n          }\n          if (baseType === \"array\") {\n            if (arrayLength == null || arrayChildren == null) {\n              throw new Error(\"\");\n            }\n          } else if (arrayLength != null || arrayChildren != null) {\n            throw new Error(\"\");\n          }\n          if (baseType === \"tuple\") {\n            if (components == null) {\n              throw new Error(\"\");\n            }\n          } else if (components != null) {\n            throw new Error(\"\");\n          }\n          defineProperties(this, {\n            name,\n            type,\n            baseType,\n            indexed,\n            components,\n            arrayLength,\n            arrayChildren\n          });\n        }\n        /**\n         *  Return a string representation of this type.\n         *\n         *  For example,\n         *\n         *  ``sighash\" => \"(uint256,address)\"``\n         *\n         *  ``\"minimal\" => \"tuple(uint256,address) indexed\"``\n         *\n         *  ``\"full\" => \"tuple(uint256 foo, address bar) indexed baz\"``\n         */\n        format(format) {\n          if (format == null) {\n            format = \"sighash\";\n          }\n          if (format === \"json\") {\n            const name = this.name || \"\";\n            if (this.isArray()) {\n              const result3 = JSON.parse(this.arrayChildren.format(\"json\"));\n              result3.name = name;\n              result3.type += `[${this.arrayLength < 0 ? \"\" : String(this.arrayLength)}]`;\n              return JSON.stringify(result3);\n            }\n            const result2 = {\n              type: this.baseType === \"tuple\" ? \"tuple\" : this.type,\n              name\n            };\n            if (typeof this.indexed === \"boolean\") {\n              result2.indexed = this.indexed;\n            }\n            if (this.isTuple()) {\n              result2.components = this.components.map((c) => JSON.parse(c.format(format)));\n            }\n            return JSON.stringify(result2);\n          }\n          let result = \"\";\n          if (this.isArray()) {\n            result += this.arrayChildren.format(format);\n            result += `[${this.arrayLength < 0 ? \"\" : String(this.arrayLength)}]`;\n          } else {\n            if (this.isTuple()) {\n              result += \"(\" + this.components.map((comp) => comp.format(format)).join(format === \"full\" ? \", \" : \",\") + \")\";\n            } else {\n              result += this.type;\n            }\n          }\n          if (format !== \"sighash\") {\n            if (this.indexed === true) {\n              result += \" indexed\";\n            }\n            if (format === \"full\" && this.name) {\n              result += \" \" + this.name;\n            }\n          }\n          return result;\n        }\n        /**\n         *  Returns true if %%this%% is an Array type.\n         *\n         *  This provides a type gaurd ensuring that [[arrayChildren]]\n         *  and [[arrayLength]] are non-null.\n         */\n        isArray() {\n          return this.baseType === \"array\";\n        }\n        /**\n         *  Returns true if %%this%% is a Tuple type.\n         *\n         *  This provides a type gaurd ensuring that [[components]]\n         *  is non-null.\n         */\n        isTuple() {\n          return this.baseType === \"tuple\";\n        }\n        /**\n         *  Returns true if %%this%% is an Indexable type.\n         *\n         *  This provides a type gaurd ensuring that [[indexed]]\n         *  is non-null.\n         */\n        isIndexable() {\n          return this.indexed != null;\n        }\n        /**\n         *  Walks the **ParamType** with %%value%%, calling %%process%%\n         *  on each type, destructing the %%value%% recursively.\n         */\n        walk(value, process2) {\n          if (this.isArray()) {\n            if (!Array.isArray(value)) {\n              throw new Error(\"invalid array value\");\n            }\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n              throw new Error(\"array is wrong length\");\n            }\n            const _this = this;\n            return value.map((v) => _this.arrayChildren.walk(v, process2));\n          }\n          if (this.isTuple()) {\n            if (!Array.isArray(value)) {\n              throw new Error(\"invalid tuple value\");\n            }\n            if (value.length !== this.components.length) {\n              throw new Error(\"array is wrong length\");\n            }\n            const _this = this;\n            return value.map((v, i) => _this.components[i].walk(v, process2));\n          }\n          return process2(this.type, value);\n        }\n        #walkAsync(promises, value, process2, setValue) {\n          if (this.isArray()) {\n            if (!Array.isArray(value)) {\n              throw new Error(\"invalid array value\");\n            }\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n              throw new Error(\"array is wrong length\");\n            }\n            const childType = this.arrayChildren;\n            const result2 = value.slice();\n            result2.forEach((value2, index) => {\n              childType.#walkAsync(promises, value2, process2, (value3) => {\n                result2[index] = value3;\n              });\n            });\n            setValue(result2);\n            return;\n          }\n          if (this.isTuple()) {\n            const components = this.components;\n            let result2;\n            if (Array.isArray(value)) {\n              result2 = value.slice();\n            } else {\n              if (value == null || typeof value !== \"object\") {\n                throw new Error(\"invalid tuple value\");\n              }\n              result2 = components.map((param) => {\n                if (!param.name) {\n                  throw new Error(\"cannot use object value with unnamed components\");\n                }\n                if (!(param.name in value)) {\n                  throw new Error(`missing value for component ${param.name}`);\n                }\n                return value[param.name];\n              });\n            }\n            if (result2.length !== this.components.length) {\n              throw new Error(\"array is wrong length\");\n            }\n            result2.forEach((value2, index) => {\n              components[index].#walkAsync(promises, value2, process2, (value3) => {\n                result2[index] = value3;\n              });\n            });\n            setValue(result2);\n            return;\n          }\n          const result = process2(this.type, value);\n          if (result.then) {\n            promises.push(async function() {\n              setValue(await result);\n            }());\n          } else {\n            setValue(result);\n          }\n        }\n        /**\n         *  Walks the **ParamType** with %%value%%, asynchronously calling\n         *  %%process%% on each type, destructing the %%value%% recursively.\n         *\n         *  This can be used to resolve ENS names by walking and resolving each\n         *  ``\"address\"`` type.\n         */\n        async walkAsync(value, process2) {\n          const promises = [];\n          const result = [value];\n          this.#walkAsync(promises, value, process2, (value2) => {\n            result[0] = value2;\n          });\n          if (promises.length) {\n            await Promise.all(promises);\n          }\n          return result[0];\n        }\n        /**\n         *  Creates a new **ParamType** for %%obj%%.\n         *\n         *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,\n         *  otherwise the ``indexed`` keyword will throw an error.\n         */\n        static from(obj, allowIndexed) {\n          if (_ParamType.isParamType(obj)) {\n            return obj;\n          }\n          if (typeof obj === \"string\") {\n            try {\n              return _ParamType.from(lex(obj), allowIndexed);\n            } catch (error) {\n              assertArgument(false, \"invalid param type\", \"obj\", obj);\n            }\n          } else if (obj instanceof TokenString) {\n            let type2 = \"\", baseType = \"\";\n            let comps = null;\n            if (consumeKeywords(obj, setify([\"tuple\"])).has(\"tuple\") || obj.peekType(\"OPEN_PAREN\")) {\n              baseType = \"tuple\";\n              comps = obj.popParams().map((t) => _ParamType.from(t));\n              type2 = `tuple(${comps.map((c) => c.format()).join(\",\")})`;\n            } else {\n              type2 = verifyBasicType(obj.popType(\"TYPE\"));\n              baseType = type2;\n            }\n            let arrayChildren = null;\n            let arrayLength = null;\n            while (obj.length && obj.peekType(\"BRACKET\")) {\n              const bracket = obj.pop();\n              arrayChildren = new _ParamType(_guard3, \"\", type2, baseType, null, comps, arrayLength, arrayChildren);\n              arrayLength = bracket.value;\n              type2 += bracket.text;\n              baseType = \"array\";\n              comps = null;\n            }\n            let indexed2 = null;\n            const keywords = consumeKeywords(obj, KwModifiers);\n            if (keywords.has(\"indexed\")) {\n              if (!allowIndexed) {\n                throw new Error(\"\");\n              }\n              indexed2 = true;\n            }\n            const name2 = obj.peekType(\"ID\") ? obj.pop().text : \"\";\n            if (obj.length) {\n              throw new Error(\"leftover tokens\");\n            }\n            return new _ParamType(_guard3, name2, type2, baseType, indexed2, comps, arrayLength, arrayChildren);\n          }\n          const name = obj.name;\n          assertArgument(!name || typeof name === \"string\" && name.match(regexId), \"invalid name\", \"obj.name\", name);\n          let indexed = obj.indexed;\n          if (indexed != null) {\n            assertArgument(allowIndexed, \"parameter cannot be indexed\", \"obj.indexed\", obj.indexed);\n            indexed = !!indexed;\n          }\n          let type = obj.type;\n          let arrayMatch = type.match(regexArrayType);\n          if (arrayMatch) {\n            const arrayLength = parseInt(arrayMatch[2] || \"-1\");\n            const arrayChildren = _ParamType.from({\n              type: arrayMatch[1],\n              components: obj.components\n            });\n            return new _ParamType(_guard3, name || \"\", type, \"array\", indexed, null, arrayLength, arrayChildren);\n          }\n          if (type === \"tuple\" || type.startsWith(\n            \"tuple(\"\n            /* fix: ) */\n          ) || type.startsWith(\n            \"(\"\n            /* fix: ) */\n          )) {\n            const comps = obj.components != null ? obj.components.map((c) => _ParamType.from(c)) : null;\n            const tuple = new _ParamType(_guard3, name || \"\", type, \"tuple\", indexed, comps, null, null);\n            return tuple;\n          }\n          type = verifyBasicType(obj.type);\n          return new _ParamType(_guard3, name || \"\", type, type, indexed, null, null, null);\n        }\n        /**\n         *  Returns true if %%value%% is a **ParamType**.\n         */\n        static isParamType(value) {\n          return value && value[internal] === ParamTypeInternal;\n        }\n      };\n      Fragment2 = class _Fragment {\n        /**\n         *  The type of the fragment.\n         */\n        type;\n        /**\n         *  The inputs for the fragment.\n         */\n        inputs;\n        /**\n         *  @private\n         */\n        constructor(guard, type, inputs) {\n          assertPrivate(guard, _guard3, \"Fragment\");\n          inputs = Object.freeze(inputs.slice());\n          defineProperties(this, { type, inputs });\n        }\n        /**\n         *  Creates a new **Fragment** for %%obj%%, wich can be any supported\n         *  ABI frgament type.\n         */\n        static from(obj) {\n          if (typeof obj === \"string\") {\n            try {\n              _Fragment.from(JSON.parse(obj));\n            } catch (e) {\n            }\n            return _Fragment.from(lex(obj));\n          }\n          if (obj instanceof TokenString) {\n            const type = obj.peekKeyword(KwTypes);\n            switch (type) {\n              case \"constructor\":\n                return ConstructorFragment2.from(obj);\n              case \"error\":\n                return ErrorFragment2.from(obj);\n              case \"event\":\n                return EventFragment2.from(obj);\n              case \"fallback\":\n              case \"receive\":\n                return FallbackFragment.from(obj);\n              case \"function\":\n                return FunctionFragment2.from(obj);\n              case \"struct\":\n                return StructFragment.from(obj);\n            }\n          } else if (typeof obj === \"object\") {\n            switch (obj.type) {\n              case \"constructor\":\n                return ConstructorFragment2.from(obj);\n              case \"error\":\n                return ErrorFragment2.from(obj);\n              case \"event\":\n                return EventFragment2.from(obj);\n              case \"fallback\":\n              case \"receive\":\n                return FallbackFragment.from(obj);\n              case \"function\":\n                return FunctionFragment2.from(obj);\n              case \"struct\":\n                return StructFragment.from(obj);\n            }\n            assert3(false, `unsupported type: ${obj.type}`, \"UNSUPPORTED_OPERATION\", {\n              operation: \"Fragment.from\"\n            });\n          }\n          assertArgument(false, \"unsupported frgament object\", \"obj\", obj);\n        }\n        /**\n         *  Returns true if %%value%% is a [[ConstructorFragment]].\n         */\n        static isConstructor(value) {\n          return ConstructorFragment2.isFragment(value);\n        }\n        /**\n         *  Returns true if %%value%% is an [[ErrorFragment]].\n         */\n        static isError(value) {\n          return ErrorFragment2.isFragment(value);\n        }\n        /**\n         *  Returns true if %%value%% is an [[EventFragment]].\n         */\n        static isEvent(value) {\n          return EventFragment2.isFragment(value);\n        }\n        /**\n         *  Returns true if %%value%% is a [[FunctionFragment]].\n         */\n        static isFunction(value) {\n          return FunctionFragment2.isFragment(value);\n        }\n        /**\n         *  Returns true if %%value%% is a [[StructFragment]].\n         */\n        static isStruct(value) {\n          return StructFragment.isFragment(value);\n        }\n      };\n      NamedFragment = class extends Fragment2 {\n        /**\n         *  The name of the fragment.\n         */\n        name;\n        /**\n         *  @private\n         */\n        constructor(guard, type, name, inputs) {\n          super(guard, type, inputs);\n          assertArgument(typeof name === \"string\" && name.match(regexId), \"invalid identifier\", \"name\", name);\n          inputs = Object.freeze(inputs.slice());\n          defineProperties(this, { name });\n        }\n      };\n      ErrorFragment2 = class _ErrorFragment extends NamedFragment {\n        /**\n         *  @private\n         */\n        constructor(guard, name, inputs) {\n          super(guard, \"error\", name, inputs);\n          Object.defineProperty(this, internal, { value: ErrorFragmentInternal });\n        }\n        /**\n         *  The Custom Error selector.\n         */\n        get selector() {\n          return id2(this.format(\"sighash\")).substring(0, 10);\n        }\n        /**\n         *  Returns a string representation of this fragment as %%format%%.\n         */\n        format(format) {\n          if (format == null) {\n            format = \"sighash\";\n          }\n          if (format === \"json\") {\n            return JSON.stringify({\n              type: \"error\",\n              name: this.name,\n              inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n          }\n          const result = [];\n          if (format !== \"sighash\") {\n            result.push(\"error\");\n          }\n          result.push(this.name + joinParams(format, this.inputs));\n          return result.join(\" \");\n        }\n        /**\n         *  Returns a new **ErrorFragment** for %%obj%%.\n         */\n        static from(obj) {\n          if (_ErrorFragment.isFragment(obj)) {\n            return obj;\n          }\n          if (typeof obj === \"string\") {\n            return _ErrorFragment.from(lex(obj));\n          } else if (obj instanceof TokenString) {\n            const name = consumeName(\"error\", obj);\n            const inputs = consumeParams(obj);\n            consumeEoi(obj);\n            return new _ErrorFragment(_guard3, name, inputs);\n          }\n          return new _ErrorFragment(_guard3, obj.name, obj.inputs ? obj.inputs.map(ParamType2.from) : []);\n        }\n        /**\n         *  Returns ``true`` and provides a type guard if %%value%% is an\n         *  **ErrorFragment**.\n         */\n        static isFragment(value) {\n          return value && value[internal] === ErrorFragmentInternal;\n        }\n      };\n      EventFragment2 = class _EventFragment extends NamedFragment {\n        /**\n         *  Whether this event is anonymous.\n         */\n        anonymous;\n        /**\n         *  @private\n         */\n        constructor(guard, name, inputs, anonymous) {\n          super(guard, \"event\", name, inputs);\n          Object.defineProperty(this, internal, { value: EventFragmentInternal });\n          defineProperties(this, { anonymous });\n        }\n        /**\n         *  The Event topic hash.\n         */\n        get topicHash() {\n          return id2(this.format(\"sighash\"));\n        }\n        /**\n         *  Returns a string representation of this event as %%format%%.\n         */\n        format(format) {\n          if (format == null) {\n            format = \"sighash\";\n          }\n          if (format === \"json\") {\n            return JSON.stringify({\n              type: \"event\",\n              anonymous: this.anonymous,\n              name: this.name,\n              inputs: this.inputs.map((i) => JSON.parse(i.format(format)))\n            });\n          }\n          const result = [];\n          if (format !== \"sighash\") {\n            result.push(\"event\");\n          }\n          result.push(this.name + joinParams(format, this.inputs));\n          if (format !== \"sighash\" && this.anonymous) {\n            result.push(\"anonymous\");\n          }\n          return result.join(\" \");\n        }\n        /**\n         *  Return the topic hash for an event with %%name%% and %%params%%.\n         */\n        static getTopicHash(name, params) {\n          params = (params || []).map((p) => ParamType2.from(p));\n          const fragment = new _EventFragment(_guard3, name, params, false);\n          return fragment.topicHash;\n        }\n        /**\n         *  Returns a new **EventFragment** for %%obj%%.\n         */\n        static from(obj) {\n          if (_EventFragment.isFragment(obj)) {\n            return obj;\n          }\n          if (typeof obj === \"string\") {\n            try {\n              return _EventFragment.from(lex(obj));\n            } catch (error) {\n              assertArgument(false, \"invalid event fragment\", \"obj\", obj);\n            }\n          } else if (obj instanceof TokenString) {\n            const name = consumeName(\"event\", obj);\n            const inputs = consumeParams(obj, true);\n            const anonymous = !!consumeKeywords(obj, setify([\"anonymous\"])).has(\"anonymous\");\n            consumeEoi(obj);\n            return new _EventFragment(_guard3, name, inputs, anonymous);\n          }\n          return new _EventFragment(_guard3, obj.name, obj.inputs ? obj.inputs.map((p) => ParamType2.from(p, true)) : [], !!obj.anonymous);\n        }\n        /**\n         *  Returns ``true`` and provides a type guard if %%value%% is an\n         *  **EventFragment**.\n         */\n        static isFragment(value) {\n          return value && value[internal] === EventFragmentInternal;\n        }\n      };\n      ConstructorFragment2 = class _ConstructorFragment extends Fragment2 {\n        /**\n         *  Whether the constructor can receive an endowment.\n         */\n        payable;\n        /**\n         *  The recommended gas limit for deployment or ``null``.\n         */\n        gas;\n        /**\n         *  @private\n         */\n        constructor(guard, type, inputs, payable, gas) {\n          super(guard, type, inputs);\n          Object.defineProperty(this, internal, { value: ConstructorFragmentInternal });\n          defineProperties(this, { payable, gas });\n        }\n        /**\n         *  Returns a string representation of this constructor as %%format%%.\n         */\n        format(format) {\n          assert3(format != null && format !== \"sighash\", \"cannot format a constructor for sighash\", \"UNSUPPORTED_OPERATION\", { operation: \"format(sighash)\" });\n          if (format === \"json\") {\n            return JSON.stringify({\n              type: \"constructor\",\n              stateMutability: this.payable ? \"payable\" : \"undefined\",\n              payable: this.payable,\n              gas: this.gas != null ? this.gas : void 0,\n              inputs: this.inputs.map((i) => JSON.parse(i.format(format)))\n            });\n          }\n          const result = [`constructor${joinParams(format, this.inputs)}`];\n          if (this.payable) {\n            result.push(\"payable\");\n          }\n          if (this.gas != null) {\n            result.push(`@${this.gas.toString()}`);\n          }\n          return result.join(\" \");\n        }\n        /**\n         *  Returns a new **ConstructorFragment** for %%obj%%.\n         */\n        static from(obj) {\n          if (_ConstructorFragment.isFragment(obj)) {\n            return obj;\n          }\n          if (typeof obj === \"string\") {\n            try {\n              return _ConstructorFragment.from(lex(obj));\n            } catch (error) {\n              assertArgument(false, \"invalid constuctor fragment\", \"obj\", obj);\n            }\n          } else if (obj instanceof TokenString) {\n            consumeKeywords(obj, setify([\"constructor\"]));\n            const inputs = consumeParams(obj);\n            const payable = !!consumeKeywords(obj, KwVisibDeploy).has(\"payable\");\n            const gas = consumeGas(obj);\n            consumeEoi(obj);\n            return new _ConstructorFragment(_guard3, \"constructor\", inputs, payable, gas);\n          }\n          return new _ConstructorFragment(_guard3, \"constructor\", obj.inputs ? obj.inputs.map(ParamType2.from) : [], !!obj.payable, obj.gas != null ? obj.gas : null);\n        }\n        /**\n         *  Returns ``true`` and provides a type guard if %%value%% is a\n         *  **ConstructorFragment**.\n         */\n        static isFragment(value) {\n          return value && value[internal] === ConstructorFragmentInternal;\n        }\n      };\n      FallbackFragment = class _FallbackFragment extends Fragment2 {\n        /**\n         *  If the function can be sent value during invocation.\n         */\n        payable;\n        constructor(guard, inputs, payable) {\n          super(guard, \"fallback\", inputs);\n          Object.defineProperty(this, internal, { value: FallbackFragmentInternal });\n          defineProperties(this, { payable });\n        }\n        /**\n         *  Returns a string representation of this fallback as %%format%%.\n         */\n        format(format) {\n          const type = this.inputs.length === 0 ? \"receive\" : \"fallback\";\n          if (format === \"json\") {\n            const stateMutability = this.payable ? \"payable\" : \"nonpayable\";\n            return JSON.stringify({ type, stateMutability });\n          }\n          return `${type}()${this.payable ? \" payable\" : \"\"}`;\n        }\n        /**\n         *  Returns a new **FallbackFragment** for %%obj%%.\n         */\n        static from(obj) {\n          if (_FallbackFragment.isFragment(obj)) {\n            return obj;\n          }\n          if (typeof obj === \"string\") {\n            try {\n              return _FallbackFragment.from(lex(obj));\n            } catch (error) {\n              assertArgument(false, \"invalid fallback fragment\", \"obj\", obj);\n            }\n          } else if (obj instanceof TokenString) {\n            const errorObj = obj.toString();\n            const topIsValid = obj.peekKeyword(setify([\"fallback\", \"receive\"]));\n            assertArgument(topIsValid, \"type must be fallback or receive\", \"obj\", errorObj);\n            const type = obj.popKeyword(setify([\"fallback\", \"receive\"]));\n            if (type === \"receive\") {\n              const inputs2 = consumeParams(obj);\n              assertArgument(inputs2.length === 0, `receive cannot have arguments`, \"obj.inputs\", inputs2);\n              consumeKeywords(obj, setify([\"payable\"]));\n              consumeEoi(obj);\n              return new _FallbackFragment(_guard3, [], true);\n            }\n            let inputs = consumeParams(obj);\n            if (inputs.length) {\n              assertArgument(inputs.length === 1 && inputs[0].type === \"bytes\", \"invalid fallback inputs\", \"obj.inputs\", inputs.map((i) => i.format(\"minimal\")).join(\", \"));\n            } else {\n              inputs = [ParamType2.from(\"bytes\")];\n            }\n            const mutability = consumeMutability(obj);\n            assertArgument(mutability === \"nonpayable\" || mutability === \"payable\", \"fallback cannot be constants\", \"obj.stateMutability\", mutability);\n            if (consumeKeywords(obj, setify([\"returns\"])).has(\"returns\")) {\n              const outputs = consumeParams(obj);\n              assertArgument(outputs.length === 1 && outputs[0].type === \"bytes\", \"invalid fallback outputs\", \"obj.outputs\", outputs.map((i) => i.format(\"minimal\")).join(\", \"));\n            }\n            consumeEoi(obj);\n            return new _FallbackFragment(_guard3, inputs, mutability === \"payable\");\n          }\n          if (obj.type === \"receive\") {\n            return new _FallbackFragment(_guard3, [], true);\n          }\n          if (obj.type === \"fallback\") {\n            const inputs = [ParamType2.from(\"bytes\")];\n            const payable = obj.stateMutability === \"payable\";\n            return new _FallbackFragment(_guard3, inputs, payable);\n          }\n          assertArgument(false, \"invalid fallback description\", \"obj\", obj);\n        }\n        /**\n         *  Returns ``true`` and provides a type guard if %%value%% is a\n         *  **FallbackFragment**.\n         */\n        static isFragment(value) {\n          return value && value[internal] === FallbackFragmentInternal;\n        }\n      };\n      FunctionFragment2 = class _FunctionFragment extends NamedFragment {\n        /**\n         *  If the function is constant (e.g. ``pure`` or ``view`` functions).\n         */\n        constant;\n        /**\n         *  The returned types for the result of calling this function.\n         */\n        outputs;\n        /**\n         *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``\n         *  or ``pure``)\n         */\n        stateMutability;\n        /**\n         *  If the function can be sent value during invocation.\n         */\n        payable;\n        /**\n         *  The recommended gas limit to send when calling this function.\n         */\n        gas;\n        /**\n         *  @private\n         */\n        constructor(guard, name, stateMutability, inputs, outputs, gas) {\n          super(guard, \"function\", name, inputs);\n          Object.defineProperty(this, internal, { value: FunctionFragmentInternal });\n          outputs = Object.freeze(outputs.slice());\n          const constant = stateMutability === \"view\" || stateMutability === \"pure\";\n          const payable = stateMutability === \"payable\";\n          defineProperties(this, { constant, gas, outputs, payable, stateMutability });\n        }\n        /**\n         *  The Function selector.\n         */\n        get selector() {\n          return id2(this.format(\"sighash\")).substring(0, 10);\n        }\n        /**\n         *  Returns a string representation of this function as %%format%%.\n         */\n        format(format) {\n          if (format == null) {\n            format = \"sighash\";\n          }\n          if (format === \"json\") {\n            return JSON.stringify({\n              type: \"function\",\n              name: this.name,\n              constant: this.constant,\n              stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : void 0,\n              payable: this.payable,\n              gas: this.gas != null ? this.gas : void 0,\n              inputs: this.inputs.map((i) => JSON.parse(i.format(format))),\n              outputs: this.outputs.map((o) => JSON.parse(o.format(format)))\n            });\n          }\n          const result = [];\n          if (format !== \"sighash\") {\n            result.push(\"function\");\n          }\n          result.push(this.name + joinParams(format, this.inputs));\n          if (format !== \"sighash\") {\n            if (this.stateMutability !== \"nonpayable\") {\n              result.push(this.stateMutability);\n            }\n            if (this.outputs && this.outputs.length) {\n              result.push(\"returns\");\n              result.push(joinParams(format, this.outputs));\n            }\n            if (this.gas != null) {\n              result.push(`@${this.gas.toString()}`);\n            }\n          }\n          return result.join(\" \");\n        }\n        /**\n         *  Return the selector for a function with %%name%% and %%params%%.\n         */\n        static getSelector(name, params) {\n          params = (params || []).map((p) => ParamType2.from(p));\n          const fragment = new _FunctionFragment(_guard3, name, \"view\", params, [], null);\n          return fragment.selector;\n        }\n        /**\n         *  Returns a new **FunctionFragment** for %%obj%%.\n         */\n        static from(obj) {\n          if (_FunctionFragment.isFragment(obj)) {\n            return obj;\n          }\n          if (typeof obj === \"string\") {\n            try {\n              return _FunctionFragment.from(lex(obj));\n            } catch (error) {\n              assertArgument(false, \"invalid function fragment\", \"obj\", obj);\n            }\n          } else if (obj instanceof TokenString) {\n            const name = consumeName(\"function\", obj);\n            const inputs = consumeParams(obj);\n            const mutability = consumeMutability(obj);\n            let outputs = [];\n            if (consumeKeywords(obj, setify([\"returns\"])).has(\"returns\")) {\n              outputs = consumeParams(obj);\n            }\n            const gas = consumeGas(obj);\n            consumeEoi(obj);\n            return new _FunctionFragment(_guard3, name, mutability, inputs, outputs, gas);\n          }\n          let stateMutability = obj.stateMutability;\n          if (stateMutability == null) {\n            stateMutability = \"payable\";\n            if (typeof obj.constant === \"boolean\") {\n              stateMutability = \"view\";\n              if (!obj.constant) {\n                stateMutability = \"payable\";\n                if (typeof obj.payable === \"boolean\" && !obj.payable) {\n                  stateMutability = \"nonpayable\";\n                }\n              }\n            } else if (typeof obj.payable === \"boolean\" && !obj.payable) {\n              stateMutability = \"nonpayable\";\n            }\n          }\n          return new _FunctionFragment(_guard3, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType2.from) : [], obj.outputs ? obj.outputs.map(ParamType2.from) : [], obj.gas != null ? obj.gas : null);\n        }\n        /**\n         *  Returns ``true`` and provides a type guard if %%value%% is a\n         *  **FunctionFragment**.\n         */\n        static isFragment(value) {\n          return value && value[internal] === FunctionFragmentInternal;\n        }\n      };\n      StructFragment = class _StructFragment extends NamedFragment {\n        /**\n         *  @private\n         */\n        constructor(guard, name, inputs) {\n          super(guard, \"struct\", name, inputs);\n          Object.defineProperty(this, internal, { value: StructFragmentInternal });\n        }\n        /**\n         *  Returns a string representation of this struct as %%format%%.\n         */\n        format() {\n          throw new Error(\"@TODO\");\n        }\n        /**\n         *  Returns a new **StructFragment** for %%obj%%.\n         */\n        static from(obj) {\n          if (typeof obj === \"string\") {\n            try {\n              return _StructFragment.from(lex(obj));\n            } catch (error) {\n              assertArgument(false, \"invalid struct fragment\", \"obj\", obj);\n            }\n          } else if (obj instanceof TokenString) {\n            const name = consumeName(\"struct\", obj);\n            const inputs = consumeParams(obj);\n            consumeEoi(obj);\n            return new _StructFragment(_guard3, name, inputs);\n          }\n          return new _StructFragment(_guard3, obj.name, obj.inputs ? obj.inputs.map(ParamType2.from) : []);\n        }\n        // @TODO: fix this return type\n        /**\n         *  Returns ``true`` and provides a type guard if %%value%% is a\n         *  **StructFragment**.\n         */\n        static isFragment(value) {\n          return value && value[internal] === StructFragmentInternal;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/abi-coder.js\n  function getBuiltinCallException(action, tx, data, abiCoder) {\n    let message = \"missing revert data\";\n    let reason = null;\n    const invocation = null;\n    let revert = null;\n    if (data) {\n      message = \"execution reverted\";\n      const bytes3 = getBytes(data);\n      data = hexlify2(data);\n      if (bytes3.length === 0) {\n        message += \" (no data present; likely require(false) occurred\";\n        reason = \"require(false)\";\n      } else if (bytes3.length % 32 !== 4) {\n        message += \" (could not decode reason; invalid data length)\";\n      } else if (hexlify2(bytes3.slice(0, 4)) === \"0x08c379a0\") {\n        try {\n          reason = abiCoder.decode([\"string\"], bytes3.slice(4))[0];\n          revert = {\n            signature: \"Error(string)\",\n            name: \"Error\",\n            args: [reason]\n          };\n          message += `: ${JSON.stringify(reason)}`;\n        } catch (error) {\n          message += \" (could not decode reason; invalid string data)\";\n        }\n      } else if (hexlify2(bytes3.slice(0, 4)) === \"0x4e487b71\") {\n        try {\n          const code = Number(abiCoder.decode([\"uint256\"], bytes3.slice(4))[0]);\n          revert = {\n            signature: \"Panic(uint256)\",\n            name: \"Panic\",\n            args: [code]\n          };\n          reason = `Panic due to ${PanicReasons.get(code) || \"UNKNOWN\"}(${code})`;\n          message += `: ${reason}`;\n        } catch (error) {\n          message += \" (could not decode panic code)\";\n        }\n      } else {\n        message += \" (unknown custom error)\";\n      }\n    }\n    const transaction = {\n      to: tx.to ? getAddress2(tx.to) : null,\n      data: tx.data || \"0x\"\n    };\n    if (tx.from) {\n      transaction.from = getAddress2(tx.from);\n    }\n    return makeError(message, \"CALL_EXCEPTION\", {\n      action,\n      data,\n      reason,\n      transaction,\n      invocation,\n      revert\n    });\n  }\n  var PanicReasons, paramTypeBytes2, paramTypeNumber2, defaultCoder, defaultMaxInflation, AbiCoder2;\n  var init_abi_coder2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/abi-coder.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_utils3();\n      init_abstract_coder2();\n      init_address4();\n      init_array2();\n      init_boolean2();\n      init_bytes2();\n      init_fixed_bytes2();\n      init_null2();\n      init_number2();\n      init_string2();\n      init_tuple2();\n      init_fragments2();\n      init_address3();\n      init_utils3();\n      PanicReasons = /* @__PURE__ */ new Map();\n      PanicReasons.set(0, \"GENERIC_PANIC\");\n      PanicReasons.set(1, \"ASSERT_FALSE\");\n      PanicReasons.set(17, \"OVERFLOW\");\n      PanicReasons.set(18, \"DIVIDE_BY_ZERO\");\n      PanicReasons.set(33, \"ENUM_RANGE_ERROR\");\n      PanicReasons.set(34, \"BAD_STORAGE_DATA\");\n      PanicReasons.set(49, \"STACK_UNDERFLOW\");\n      PanicReasons.set(50, \"ARRAY_RANGE_ERROR\");\n      PanicReasons.set(65, \"OUT_OF_MEMORY\");\n      PanicReasons.set(81, \"UNINITIALIZED_FUNCTION_CALL\");\n      paramTypeBytes2 = new RegExp(/^bytes([0-9]*)$/);\n      paramTypeNumber2 = new RegExp(/^(u?int)([0-9]*)$/);\n      defaultCoder = null;\n      defaultMaxInflation = 1024;\n      AbiCoder2 = class _AbiCoder {\n        #getCoder(param) {\n          if (param.isArray()) {\n            return new ArrayCoder2(this.#getCoder(param.arrayChildren), param.arrayLength, param.name);\n          }\n          if (param.isTuple()) {\n            return new TupleCoder2(param.components.map((c) => this.#getCoder(c)), param.name);\n          }\n          switch (param.baseType) {\n            case \"address\":\n              return new AddressCoder2(param.name);\n            case \"bool\":\n              return new BooleanCoder2(param.name);\n            case \"string\":\n              return new StringCoder2(param.name);\n            case \"bytes\":\n              return new BytesCoder2(param.name);\n            case \"\":\n              return new NullCoder2(param.name);\n          }\n          let match = param.type.match(paramTypeNumber2);\n          if (match) {\n            let size = parseInt(match[2] || \"256\");\n            assertArgument(size !== 0 && size <= 256 && size % 8 === 0, \"invalid \" + match[1] + \" bit length\", \"param\", param);\n            return new NumberCoder2(size / 8, match[1] === \"int\", param.name);\n          }\n          match = param.type.match(paramTypeBytes2);\n          if (match) {\n            let size = parseInt(match[1]);\n            assertArgument(size !== 0 && size <= 32, \"invalid bytes length\", \"param\", param);\n            return new FixedBytesCoder2(size, param.name);\n          }\n          assertArgument(false, \"invalid type\", \"type\", param.type);\n        }\n        /**\n         *  Get the default values for the given %%types%%.\n         *\n         *  For example, a ``uint`` is by default ``0`` and ``bool``\n         *  is by default ``false``.\n         */\n        getDefaultValue(types) {\n          const coders = types.map((type) => this.#getCoder(ParamType2.from(type)));\n          const coder = new TupleCoder2(coders, \"_\");\n          return coder.defaultValue();\n        }\n        /**\n         *  Encode the %%values%% as the %%types%% into ABI data.\n         *\n         *  @returns DataHexstring\n         */\n        encode(types, values) {\n          assertArgumentCount(values.length, types.length, \"types/values length mismatch\");\n          const coders = types.map((type) => this.#getCoder(ParamType2.from(type)));\n          const coder = new TupleCoder2(coders, \"_\");\n          const writer = new Writer2();\n          coder.encode(writer, values);\n          return writer.data;\n        }\n        /**\n         *  Decode the ABI %%data%% as the %%types%% into values.\n         *\n         *  If %%loose%% decoding is enabled, then strict padding is\n         *  not enforced. Some older versions of Solidity incorrectly\n         *  padded event data emitted from ``external`` functions.\n         */\n        decode(types, data, loose) {\n          const coders = types.map((type) => this.#getCoder(ParamType2.from(type)));\n          const coder = new TupleCoder2(coders, \"_\");\n          return coder.decode(new Reader2(data, loose, defaultMaxInflation));\n        }\n        static _setDefaultMaxInflation(value) {\n          assertArgument(typeof value === \"number\" && Number.isInteger(value), \"invalid defaultMaxInflation factor\", \"value\", value);\n          defaultMaxInflation = value;\n        }\n        /**\n         *  Returns the shared singleton instance of a default [[AbiCoder]].\n         *\n         *  On the first call, the instance is created internally.\n         */\n        static defaultAbiCoder() {\n          if (defaultCoder == null) {\n            defaultCoder = new _AbiCoder();\n          }\n          return defaultCoder;\n        }\n        /**\n         *  Returns an ethers-compatible [[CallExceptionError]] Error for the given\n         *  result %%data%% for the [[CallExceptionAction]] %%action%% against\n         *  the Transaction %%tx%%.\n         */\n        static getBuiltinCallException(action, tx, data) {\n          return getBuiltinCallException(action, tx, data, _AbiCoder.defaultAbiCoder());\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/interface.js\n  var LogDescription2, TransactionDescription2, ErrorDescription2, Indexed2, PanicReasons2, BuiltinErrors2, Interface2;\n  var init_interface2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/interface.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_crypto2();\n      init_hash();\n      init_utils3();\n      init_abi_coder2();\n      init_abstract_coder2();\n      init_fragments2();\n      init_typed();\n      LogDescription2 = class {\n        /**\n         *  The matching fragment for the ``topic0``.\n         */\n        fragment;\n        /**\n         *  The name of the Event.\n         */\n        name;\n        /**\n         *  The full Event signature.\n         */\n        signature;\n        /**\n         *  The topic hash for the Event.\n         */\n        topic;\n        /**\n         *  The arguments passed into the Event with ``emit``.\n         */\n        args;\n        /**\n         *  @_ignore:\n         */\n        constructor(fragment, topic, args) {\n          const name = fragment.name, signature2 = fragment.format();\n          defineProperties(this, {\n            fragment,\n            name,\n            signature: signature2,\n            topic,\n            args\n          });\n        }\n      };\n      TransactionDescription2 = class {\n        /**\n         *  The matching fragment from the transaction ``data``.\n         */\n        fragment;\n        /**\n         *  The name of the Function from the transaction ``data``.\n         */\n        name;\n        /**\n         *  The arguments passed to the Function from the transaction ``data``.\n         */\n        args;\n        /**\n         *  The full Function signature from the transaction ``data``.\n         */\n        signature;\n        /**\n         *  The selector for the Function from the transaction ``data``.\n         */\n        selector;\n        /**\n         *  The ``value`` (in wei) from the transaction.\n         */\n        value;\n        /**\n         *  @_ignore:\n         */\n        constructor(fragment, selector, args, value) {\n          const name = fragment.name, signature2 = fragment.format();\n          defineProperties(this, {\n            fragment,\n            name,\n            args,\n            signature: signature2,\n            selector,\n            value\n          });\n        }\n      };\n      ErrorDescription2 = class {\n        /**\n         *  The matching fragment.\n         */\n        fragment;\n        /**\n         *  The name of the Error.\n         */\n        name;\n        /**\n         *  The arguments passed to the Error with ``revert``.\n         */\n        args;\n        /**\n         *  The full Error signature.\n         */\n        signature;\n        /**\n         *  The selector for the Error.\n         */\n        selector;\n        /**\n         *  @_ignore:\n         */\n        constructor(fragment, selector, args) {\n          const name = fragment.name, signature2 = fragment.format();\n          defineProperties(this, {\n            fragment,\n            name,\n            args,\n            signature: signature2,\n            selector\n          });\n        }\n      };\n      Indexed2 = class {\n        /**\n         *  The ``keccak256`` of the value logged.\n         */\n        hash;\n        /**\n         *  @_ignore:\n         */\n        _isIndexed;\n        /**\n         *  Returns ``true`` if %%value%% is an **Indexed**.\n         *\n         *  This provides a Type Guard for property access.\n         */\n        static isIndexed(value) {\n          return !!(value && value._isIndexed);\n        }\n        /**\n         *  @_ignore:\n         */\n        constructor(hash4) {\n          defineProperties(this, { hash: hash4, _isIndexed: true });\n        }\n      };\n      PanicReasons2 = {\n        \"0\": \"generic panic\",\n        \"1\": \"assert(false)\",\n        \"17\": \"arithmetic overflow\",\n        \"18\": \"division or modulo by zero\",\n        \"33\": \"enum overflow\",\n        \"34\": \"invalid encoded storage byte array accessed\",\n        \"49\": \"out-of-bounds array access; popping on an empty array\",\n        \"50\": \"out-of-bounds access of an array or bytesN\",\n        \"65\": \"out of memory\",\n        \"81\": \"uninitialized function\"\n      };\n      BuiltinErrors2 = {\n        \"0x08c379a0\": {\n          signature: \"Error(string)\",\n          name: \"Error\",\n          inputs: [\"string\"],\n          reason: (message) => {\n            return `reverted with reason string ${JSON.stringify(message)}`;\n          }\n        },\n        \"0x4e487b71\": {\n          signature: \"Panic(uint256)\",\n          name: \"Panic\",\n          inputs: [\"uint256\"],\n          reason: (code) => {\n            let reason = \"unknown panic code\";\n            if (code >= 0 && code <= 255 && PanicReasons2[code.toString()]) {\n              reason = PanicReasons2[code.toString()];\n            }\n            return `reverted with panic code 0x${code.toString(16)} (${reason})`;\n          }\n        }\n      };\n      Interface2 = class _Interface {\n        /**\n         *  All the Contract ABI members (i.e. methods, events, errors, etc).\n         */\n        fragments;\n        /**\n         *  The Contract constructor.\n         */\n        deploy;\n        /**\n         *  The Fallback method, if any.\n         */\n        fallback;\n        /**\n         *  If receiving ether is supported.\n         */\n        receive;\n        #errors;\n        #events;\n        #functions;\n        //    #structs: Map<string, StructFragment>;\n        #abiCoder;\n        /**\n         *  Create a new Interface for the %%fragments%%.\n         */\n        constructor(fragments) {\n          let abi = [];\n          if (typeof fragments === \"string\") {\n            abi = JSON.parse(fragments);\n          } else {\n            abi = fragments;\n          }\n          this.#functions = /* @__PURE__ */ new Map();\n          this.#errors = /* @__PURE__ */ new Map();\n          this.#events = /* @__PURE__ */ new Map();\n          const frags = [];\n          for (const a of abi) {\n            try {\n              frags.push(Fragment2.from(a));\n            } catch (error) {\n              console.log(`[Warning] Invalid Fragment ${JSON.stringify(a)}:`, error.message);\n            }\n          }\n          defineProperties(this, {\n            fragments: Object.freeze(frags)\n          });\n          let fallback = null;\n          let receive = false;\n          this.#abiCoder = this.getAbiCoder();\n          this.fragments.forEach((fragment, index) => {\n            let bucket;\n            switch (fragment.type) {\n              case \"constructor\":\n                if (this.deploy) {\n                  console.log(\"duplicate definition - constructor\");\n                  return;\n                }\n                defineProperties(this, { deploy: fragment });\n                return;\n              case \"fallback\":\n                if (fragment.inputs.length === 0) {\n                  receive = true;\n                } else {\n                  assertArgument(!fallback || fragment.payable !== fallback.payable, \"conflicting fallback fragments\", `fragments[${index}]`, fragment);\n                  fallback = fragment;\n                  receive = fallback.payable;\n                }\n                return;\n              case \"function\":\n                bucket = this.#functions;\n                break;\n              case \"event\":\n                bucket = this.#events;\n                break;\n              case \"error\":\n                bucket = this.#errors;\n                break;\n              default:\n                return;\n            }\n            const signature2 = fragment.format();\n            if (bucket.has(signature2)) {\n              return;\n            }\n            bucket.set(signature2, fragment);\n          });\n          if (!this.deploy) {\n            defineProperties(this, {\n              deploy: ConstructorFragment2.from(\"constructor()\")\n            });\n          }\n          defineProperties(this, { fallback, receive });\n        }\n        /**\n         *  Returns the entire Human-Readable ABI, as an array of\n         *  signatures, optionally as %%minimal%% strings, which\n         *  removes parameter names and unneceesary spaces.\n         */\n        format(minimal) {\n          const format = minimal ? \"minimal\" : \"full\";\n          const abi = this.fragments.map((f) => f.format(format));\n          return abi;\n        }\n        /**\n         *  Return the JSON-encoded ABI. This is the format Solidiy\n         *  returns.\n         */\n        formatJson() {\n          const abi = this.fragments.map((f) => f.format(\"json\"));\n          return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n        /**\n         *  The ABI coder that will be used to encode and decode binary\n         *  data.\n         */\n        getAbiCoder() {\n          return AbiCoder2.defaultAbiCoder();\n        }\n        // Find a function definition by any means necessary (unless it is ambiguous)\n        #getFunction(key2, values, forceUnique) {\n          if (isHexString2(key2)) {\n            const selector = key2.toLowerCase();\n            for (const fragment of this.#functions.values()) {\n              if (selector === fragment.selector) {\n                return fragment;\n              }\n            }\n            return null;\n          }\n          if (key2.indexOf(\"(\") === -1) {\n            const matching = [];\n            for (const [name, fragment] of this.#functions) {\n              if (name.split(\n                \"(\"\n                /* fix:) */\n              )[0] === key2) {\n                matching.push(fragment);\n              }\n            }\n            if (values) {\n              const lastValue = values.length > 0 ? values[values.length - 1] : null;\n              let valueLength = values.length;\n              let allowOptions = true;\n              if (Typed.isTyped(lastValue) && lastValue.type === \"overrides\") {\n                allowOptions = false;\n                valueLength--;\n              }\n              for (let i = matching.length - 1; i >= 0; i--) {\n                const inputs = matching[i].inputs.length;\n                if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {\n                  matching.splice(i, 1);\n                }\n              }\n              for (let i = matching.length - 1; i >= 0; i--) {\n                const inputs = matching[i].inputs;\n                for (let j = 0; j < values.length; j++) {\n                  if (!Typed.isTyped(values[j])) {\n                    continue;\n                  }\n                  if (j >= inputs.length) {\n                    if (values[j].type === \"overrides\") {\n                      continue;\n                    }\n                    matching.splice(i, 1);\n                    break;\n                  }\n                  if (values[j].type !== inputs[j].baseType) {\n                    matching.splice(i, 1);\n                    break;\n                  }\n                }\n              }\n            }\n            if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {\n              const lastArg = values[values.length - 1];\n              if (lastArg == null || Array.isArray(lastArg) || typeof lastArg !== \"object\") {\n                matching.splice(0, 1);\n              }\n            }\n            if (matching.length === 0) {\n              return null;\n            }\n            if (matching.length > 1 && forceUnique) {\n              const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\n              assertArgument(false, `ambiguous function description (i.e. matches ${matchStr})`, \"key\", key2);\n            }\n            return matching[0];\n          }\n          const result = this.#functions.get(FunctionFragment2.from(key2).format());\n          if (result) {\n            return result;\n          }\n          return null;\n        }\n        /**\n         *  Get the function name for %%key%%, which may be a function selector,\n         *  function name or function signature that belongs to the ABI.\n         */\n        getFunctionName(key2) {\n          const fragment = this.#getFunction(key2, null, false);\n          assertArgument(fragment, \"no matching function\", \"key\", key2);\n          return fragment.name;\n        }\n        /**\n         *  Returns true if %%key%% (a function selector, function name or\n         *  function signature) is present in the ABI.\n         *\n         *  In the case of a function name, the name may be ambiguous, so\n         *  accessing the [[FunctionFragment]] may require refinement.\n         */\n        hasFunction(key2) {\n          return !!this.#getFunction(key2, null, false);\n        }\n        /**\n         *  Get the [[FunctionFragment]] for %%key%%, which may be a function\n         *  selector, function name or function signature that belongs to the ABI.\n         *\n         *  If %%values%% is provided, it will use the Typed API to handle\n         *  ambiguous cases where multiple functions match by name.\n         *\n         *  If the %%key%% and %%values%% do not refine to a single function in\n         *  the ABI, this will throw.\n         */\n        getFunction(key2, values) {\n          return this.#getFunction(key2, values || null, true);\n        }\n        /**\n         *  Iterate over all functions, calling %%callback%%, sorted by their name.\n         */\n        forEachFunction(callback) {\n          const names2 = Array.from(this.#functions.keys());\n          names2.sort((a, b2) => a.localeCompare(b2));\n          for (let i = 0; i < names2.length; i++) {\n            const name = names2[i];\n            callback(this.#functions.get(name), i);\n          }\n        }\n        // Find an event definition by any means necessary (unless it is ambiguous)\n        #getEvent(key2, values, forceUnique) {\n          if (isHexString2(key2)) {\n            const eventTopic = key2.toLowerCase();\n            for (const fragment of this.#events.values()) {\n              if (eventTopic === fragment.topicHash) {\n                return fragment;\n              }\n            }\n            return null;\n          }\n          if (key2.indexOf(\"(\") === -1) {\n            const matching = [];\n            for (const [name, fragment] of this.#events) {\n              if (name.split(\n                \"(\"\n                /* fix:) */\n              )[0] === key2) {\n                matching.push(fragment);\n              }\n            }\n            if (values) {\n              for (let i = matching.length - 1; i >= 0; i--) {\n                if (matching[i].inputs.length < values.length) {\n                  matching.splice(i, 1);\n                }\n              }\n              for (let i = matching.length - 1; i >= 0; i--) {\n                const inputs = matching[i].inputs;\n                for (let j = 0; j < values.length; j++) {\n                  if (!Typed.isTyped(values[j])) {\n                    continue;\n                  }\n                  if (values[j].type !== inputs[j].baseType) {\n                    matching.splice(i, 1);\n                    break;\n                  }\n                }\n              }\n            }\n            if (matching.length === 0) {\n              return null;\n            }\n            if (matching.length > 1 && forceUnique) {\n              const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\n              assertArgument(false, `ambiguous event description (i.e. matches ${matchStr})`, \"key\", key2);\n            }\n            return matching[0];\n          }\n          const result = this.#events.get(EventFragment2.from(key2).format());\n          if (result) {\n            return result;\n          }\n          return null;\n        }\n        /**\n         *  Get the event name for %%key%%, which may be a topic hash,\n         *  event name or event signature that belongs to the ABI.\n         */\n        getEventName(key2) {\n          const fragment = this.#getEvent(key2, null, false);\n          assertArgument(fragment, \"no matching event\", \"key\", key2);\n          return fragment.name;\n        }\n        /**\n         *  Returns true if %%key%% (an event topic hash, event name or\n         *  event signature) is present in the ABI.\n         *\n         *  In the case of an event name, the name may be ambiguous, so\n         *  accessing the [[EventFragment]] may require refinement.\n         */\n        hasEvent(key2) {\n          return !!this.#getEvent(key2, null, false);\n        }\n        /**\n         *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,\n         *  event name or event signature that belongs to the ABI.\n         *\n         *  If %%values%% is provided, it will use the Typed API to handle\n         *  ambiguous cases where multiple events match by name.\n         *\n         *  If the %%key%% and %%values%% do not refine to a single event in\n         *  the ABI, this will throw.\n         */\n        getEvent(key2, values) {\n          return this.#getEvent(key2, values || null, true);\n        }\n        /**\n         *  Iterate over all events, calling %%callback%%, sorted by their name.\n         */\n        forEachEvent(callback) {\n          const names2 = Array.from(this.#events.keys());\n          names2.sort((a, b2) => a.localeCompare(b2));\n          for (let i = 0; i < names2.length; i++) {\n            const name = names2[i];\n            callback(this.#events.get(name), i);\n          }\n        }\n        /**\n         *  Get the [[ErrorFragment]] for %%key%%, which may be an error\n         *  selector, error name or error signature that belongs to the ABI.\n         *\n         *  If %%values%% is provided, it will use the Typed API to handle\n         *  ambiguous cases where multiple errors match by name.\n         *\n         *  If the %%key%% and %%values%% do not refine to a single error in\n         *  the ABI, this will throw.\n         */\n        getError(key2, values) {\n          if (isHexString2(key2)) {\n            const selector = key2.toLowerCase();\n            if (BuiltinErrors2[selector]) {\n              return ErrorFragment2.from(BuiltinErrors2[selector].signature);\n            }\n            for (const fragment of this.#errors.values()) {\n              if (selector === fragment.selector) {\n                return fragment;\n              }\n            }\n            return null;\n          }\n          if (key2.indexOf(\"(\") === -1) {\n            const matching = [];\n            for (const [name, fragment] of this.#errors) {\n              if (name.split(\n                \"(\"\n                /* fix:) */\n              )[0] === key2) {\n                matching.push(fragment);\n              }\n            }\n            if (matching.length === 0) {\n              if (key2 === \"Error\") {\n                return ErrorFragment2.from(\"error Error(string)\");\n              }\n              if (key2 === \"Panic\") {\n                return ErrorFragment2.from(\"error Panic(uint256)\");\n              }\n              return null;\n            } else if (matching.length > 1) {\n              const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\n              assertArgument(false, `ambiguous error description (i.e. ${matchStr})`, \"name\", key2);\n            }\n            return matching[0];\n          }\n          key2 = ErrorFragment2.from(key2).format();\n          if (key2 === \"Error(string)\") {\n            return ErrorFragment2.from(\"error Error(string)\");\n          }\n          if (key2 === \"Panic(uint256)\") {\n            return ErrorFragment2.from(\"error Panic(uint256)\");\n          }\n          const result = this.#errors.get(key2);\n          if (result) {\n            return result;\n          }\n          return null;\n        }\n        /**\n         *  Iterate over all errors, calling %%callback%%, sorted by their name.\n         */\n        forEachError(callback) {\n          const names2 = Array.from(this.#errors.keys());\n          names2.sort((a, b2) => a.localeCompare(b2));\n          for (let i = 0; i < names2.length; i++) {\n            const name = names2[i];\n            callback(this.#errors.get(name), i);\n          }\n        }\n        // Get the 4-byte selector used by Solidity to identify a function\n        /*\n        getSelector(fragment: ErrorFragment | FunctionFragment): string {\n            if (typeof(fragment) === \"string\") {\n                const matches: Array<Fragment> = [ ];\n        \n                try { matches.push(this.getFunction(fragment)); } catch (error) { }\n                try { matches.push(this.getError(<string>fragment)); } catch (_) { }\n        \n                if (matches.length === 0) {\n                    logger.throwArgumentError(\"unknown fragment\", \"key\", fragment);\n                } else if (matches.length > 1) {\n                    logger.throwArgumentError(\"ambiguous fragment matches function and error\", \"key\", fragment);\n                }\n        \n                fragment = matches[0];\n            }\n        \n            return dataSlice(id(fragment.format()), 0, 4);\n        }\n            */\n        // Get the 32-byte topic hash used by Solidity to identify an event\n        /*\n        getEventTopic(fragment: EventFragment): string {\n            //if (typeof(fragment) === \"string\") { fragment = this.getEvent(eventFragment); }\n            return id(fragment.format());\n        }\n        */\n        _decodeParams(params, data) {\n          return this.#abiCoder.decode(params, data);\n        }\n        _encodeParams(params, values) {\n          return this.#abiCoder.encode(params, values);\n        }\n        /**\n         *  Encodes a ``tx.data`` object for deploying the Contract with\n         *  the %%values%% as the constructor arguments.\n         */\n        encodeDeploy(values) {\n          return this._encodeParams(this.deploy.inputs, values || []);\n        }\n        /**\n         *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n         *  specified error (see [[getError]] for valid values for\n         *  %%key%%).\n         *\n         *  Most developers should prefer the [[parseCallResult]] method instead,\n         *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n         *  corresponding error.\n         */\n        decodeErrorResult(fragment, data) {\n          if (typeof fragment === \"string\") {\n            const f = this.getError(fragment);\n            assertArgument(f, \"unknown error\", \"fragment\", fragment);\n            fragment = f;\n          }\n          assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, \"data\", data);\n          return this._decodeParams(fragment.inputs, dataSlice(data, 4));\n        }\n        /**\n         *  Encodes the transaction revert data for a call result that\n         *  reverted from the the Contract with the sepcified %%error%%\n         *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.\n         *\n         *  This is generally not used by most developers, unless trying to mock\n         *  a result from a Contract.\n         */\n        encodeErrorResult(fragment, values) {\n          if (typeof fragment === \"string\") {\n            const f = this.getError(fragment);\n            assertArgument(f, \"unknown error\", \"fragment\", fragment);\n            fragment = f;\n          }\n          return concat2([\n            fragment.selector,\n            this._encodeParams(fragment.inputs, values || [])\n          ]);\n        }\n        /**\n         *  Decodes the %%data%% from a transaction ``tx.data`` for\n         *  the function specified (see [[getFunction]] for valid values\n         *  for %%fragment%%).\n         *\n         *  Most developers should prefer the [[parseTransaction]] method\n         *  instead, which will automatically detect the fragment.\n         */\n        decodeFunctionData(fragment, data) {\n          if (typeof fragment === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n          }\n          assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, \"data\", data);\n          return this._decodeParams(fragment.inputs, dataSlice(data, 4));\n        }\n        /**\n         *  Encodes the ``tx.data`` for a transaction that calls the function\n         *  specified (see [[getFunction]] for valid values for %%fragment%%) with\n         *  the %%values%%.\n         */\n        encodeFunctionData(fragment, values) {\n          if (typeof fragment === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n          }\n          return concat2([\n            fragment.selector,\n            this._encodeParams(fragment.inputs, values || [])\n          ]);\n        }\n        /**\n         *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n         *  specified function (see [[getFunction]] for valid values for\n         *  %%key%%).\n         *\n         *  Most developers should prefer the [[parseCallResult]] method instead,\n         *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n         *  corresponding error.\n         */\n        decodeFunctionResult(fragment, data) {\n          if (typeof fragment === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n          }\n          let message = \"invalid length for result data\";\n          const bytes3 = getBytesCopy(data);\n          if (bytes3.length % 32 === 0) {\n            try {\n              return this.#abiCoder.decode(fragment.outputs, bytes3);\n            } catch (error) {\n              message = \"could not decode result data\";\n            }\n          }\n          assert3(false, message, \"BAD_DATA\", {\n            value: hexlify2(bytes3),\n            info: { method: fragment.name, signature: fragment.format() }\n          });\n        }\n        makeError(_data, tx) {\n          const data = getBytes(_data, \"data\");\n          const error = AbiCoder2.getBuiltinCallException(\"call\", tx, data);\n          const customPrefix = \"execution reverted (unknown custom error)\";\n          if (error.message.startsWith(customPrefix)) {\n            const selector = hexlify2(data.slice(0, 4));\n            const ef = this.getError(selector);\n            if (ef) {\n              try {\n                const args = this.#abiCoder.decode(ef.inputs, data.slice(4));\n                error.revert = {\n                  name: ef.name,\n                  signature: ef.format(),\n                  args\n                };\n                error.reason = error.revert.signature;\n                error.message = `execution reverted: ${error.reason}`;\n              } catch (e) {\n                error.message = `execution reverted (coult not decode custom error)`;\n              }\n            }\n          }\n          const parsed = this.parseTransaction(tx);\n          if (parsed) {\n            error.invocation = {\n              method: parsed.name,\n              signature: parsed.signature,\n              args: parsed.args\n            };\n          }\n          return error;\n        }\n        /**\n         *  Encodes the result data (e.g. from an ``eth_call``) for the\n         *  specified function (see [[getFunction]] for valid values\n         *  for %%fragment%%) with %%values%%.\n         *\n         *  This is generally not used by most developers, unless trying to mock\n         *  a result from a Contract.\n         */\n        encodeFunctionResult(fragment, values) {\n          if (typeof fragment === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n          }\n          return hexlify2(this.#abiCoder.encode(fragment.outputs, values || []));\n        }\n        /*\n            spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {\n                const promises: Array<Promise<>> = [ ];\n                const process = function(type: ParamType, value: any): any {\n                    if (type.baseType === \"array\") {\n                        return descend(type.child\n                    }\n                    if (type. === \"address\") {\n                    }\n                };\n        \n                const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {\n                    if (inputs.length !== values.length) { throw new Error(\"length mismatch\"); }\n                    \n                };\n        \n                const result: Array<any> = [ ];\n                values.forEach((value, index) => {\n                    if (value == null) {\n                        topics.push(null);\n                    } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                        logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n                    } else if (Array.isArray(value)) {\n                        topics.push(value.map((value) => encodeTopic(param, value)));\n                    } else {\n                        topics.push(encodeTopic(param, value));\n                    }\n                });\n            }\n        */\n        // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n        encodeFilterTopics(fragment, values) {\n          if (typeof fragment === \"string\") {\n            const f = this.getEvent(fragment);\n            assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n          }\n          assert3(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, \"UNEXPECTED_ARGUMENT\", { count: values.length, expectedCount: fragment.inputs.length });\n          const topics = [];\n          if (!fragment.anonymous) {\n            topics.push(fragment.topicHash);\n          }\n          const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n              return id2(value);\n            } else if (param.type === \"bytes\") {\n              return keccak2563(hexlify2(value));\n            }\n            if (param.type === \"bool\" && typeof value === \"boolean\") {\n              value = value ? \"0x01\" : \"0x00\";\n            } else if (param.type.match(/^u?int/)) {\n              value = toBeHex(value);\n            } else if (param.type.match(/^bytes/)) {\n              value = zeroPadBytes(value, 32);\n            } else if (param.type === \"address\") {\n              this.#abiCoder.encode([\"address\"], [value]);\n            }\n            return zeroPadValue(hexlify2(value), 32);\n          };\n          values.forEach((value, index) => {\n            const param = fragment.inputs[index];\n            if (!param.indexed) {\n              assertArgument(value == null, \"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n              return;\n            }\n            if (value == null) {\n              topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n              assertArgument(false, \"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n            } else if (Array.isArray(value)) {\n              topics.push(value.map((value2) => encodeTopic(param, value2)));\n            } else {\n              topics.push(encodeTopic(param, value));\n            }\n          });\n          while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n          }\n          return topics;\n        }\n        encodeEventLog(fragment, values) {\n          if (typeof fragment === \"string\") {\n            const f = this.getEvent(fragment);\n            assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n          }\n          const topics = [];\n          const dataTypes = [];\n          const dataValues = [];\n          if (!fragment.anonymous) {\n            topics.push(fragment.topicHash);\n          }\n          assertArgument(values.length === fragment.inputs.length, \"event arguments/values mismatch\", \"values\", values);\n          fragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n              if (param.type === \"string\") {\n                topics.push(id2(value));\n              } else if (param.type === \"bytes\") {\n                topics.push(keccak2563(value));\n              } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                throw new Error(\"not implemented\");\n              } else {\n                topics.push(this.#abiCoder.encode([param.type], [value]));\n              }\n            } else {\n              dataTypes.push(param);\n              dataValues.push(value);\n            }\n          });\n          return {\n            data: this.#abiCoder.encode(dataTypes, dataValues),\n            topics\n          };\n        }\n        // Decode a filter for the event and the search criteria\n        decodeEventLog(fragment, data, topics) {\n          if (typeof fragment === \"string\") {\n            const f = this.getEvent(fragment);\n            assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n          }\n          if (topics != null && !fragment.anonymous) {\n            const eventTopic = fragment.topicHash;\n            assertArgument(isHexString2(topics[0], 32) && topics[0].toLowerCase() === eventTopic, \"fragment/topic mismatch\", \"topics[0]\", topics[0]);\n            topics = topics.slice(1);\n          }\n          const indexed = [];\n          const nonIndexed = [];\n          const dynamic = [];\n          fragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n              if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                indexed.push(ParamType2.from({ type: \"bytes32\", name: param.name }));\n                dynamic.push(true);\n              } else {\n                indexed.push(param);\n                dynamic.push(false);\n              }\n            } else {\n              nonIndexed.push(param);\n              dynamic.push(false);\n            }\n          });\n          const resultIndexed = topics != null ? this.#abiCoder.decode(indexed, concat2(topics)) : null;\n          const resultNonIndexed = this.#abiCoder.decode(nonIndexed, data, true);\n          const values = [];\n          const keys = [];\n          let nonIndexedIndex = 0, indexedIndex = 0;\n          fragment.inputs.forEach((param, index) => {\n            let value = null;\n            if (param.indexed) {\n              if (resultIndexed == null) {\n                value = new Indexed2(null);\n              } else if (dynamic[index]) {\n                value = new Indexed2(resultIndexed[indexedIndex++]);\n              } else {\n                try {\n                  value = resultIndexed[indexedIndex++];\n                } catch (error) {\n                  value = error;\n                }\n              }\n            } else {\n              try {\n                value = resultNonIndexed[nonIndexedIndex++];\n              } catch (error) {\n                value = error;\n              }\n            }\n            values.push(value);\n            keys.push(param.name || null);\n          });\n          return Result.fromItems(values, keys);\n        }\n        /**\n         *  Parses a transaction, finding the matching function and extracts\n         *  the parameter values along with other useful function details.\n         *\n         *  If the matching function cannot be found, return null.\n         */\n        parseTransaction(tx) {\n          const data = getBytes(tx.data, \"tx.data\");\n          const value = getBigInt(tx.value != null ? tx.value : 0, \"tx.value\");\n          const fragment = this.getFunction(hexlify2(data.slice(0, 4)));\n          if (!fragment) {\n            return null;\n          }\n          const args = this.#abiCoder.decode(fragment.inputs, data.slice(4));\n          return new TransactionDescription2(fragment, fragment.selector, args, value);\n        }\n        parseCallResult(data) {\n          throw new Error(\"@TODO\");\n        }\n        /**\n         *  Parses a receipt log, finding the matching event and extracts\n         *  the parameter values along with other useful event details.\n         *\n         *  If the matching event cannot be found, returns null.\n         */\n        parseLog(log) {\n          const fragment = this.getEvent(log.topics[0]);\n          if (!fragment || fragment.anonymous) {\n            return null;\n          }\n          return new LogDescription2(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));\n        }\n        /**\n         *  Parses a revert data, finding the matching error and extracts\n         *  the parameter values along with other useful error details.\n         *\n         *  If the matching error cannot be found, returns null.\n         */\n        parseError(data) {\n          const hexData = hexlify2(data);\n          const fragment = this.getError(dataSlice(hexData, 0, 4));\n          if (!fragment) {\n            return null;\n          }\n          const args = this.#abiCoder.decode(fragment.inputs, dataSlice(hexData, 4));\n          return new ErrorDescription2(fragment, fragment.selector, args);\n        }\n        /**\n         *  Creates a new [[Interface]] from the ABI %%value%%.\n         *\n         *  The %%value%% may be provided as an existing [[Interface]] object,\n         *  a JSON-encoded ABI or any Human-Readable ABI format.\n         */\n        static from(value) {\n          if (value instanceof _Interface) {\n            return value;\n          }\n          if (typeof value === \"string\") {\n            return new _Interface(JSON.parse(value));\n          }\n          if (typeof value.formatJson === \"function\") {\n            return new _Interface(value.formatJson());\n          }\n          if (typeof value.format === \"function\") {\n            return new _Interface(value.format(\"json\"));\n          }\n          return new _Interface(value);\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/index.js\n  var init_abi = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_abi_coder2();\n      init_interface2();\n      init_typed();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/provider.js\n  function getValue2(value) {\n    if (value == null) {\n      return null;\n    }\n    return value;\n  }\n  function toJson(value) {\n    if (value == null) {\n      return null;\n    }\n    return value.toString();\n  }\n  function copyRequest(req) {\n    const result = {};\n    if (req.to) {\n      result.to = req.to;\n    }\n    if (req.from) {\n      result.from = req.from;\n    }\n    if (req.data) {\n      result.data = hexlify2(req.data);\n    }\n    const bigIntKeys = \"chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value\".split(/,/);\n    for (const key2 of bigIntKeys) {\n      if (!(key2 in req) || req[key2] == null) {\n        continue;\n      }\n      result[key2] = getBigInt(req[key2], `request.${key2}`);\n    }\n    const numberKeys = \"type,nonce\".split(/,/);\n    for (const key2 of numberKeys) {\n      if (!(key2 in req) || req[key2] == null) {\n        continue;\n      }\n      result[key2] = getNumber(req[key2], `request.${key2}`);\n    }\n    if (req.accessList) {\n      result.accessList = accessListify2(req.accessList);\n    }\n    if (req.authorizationList) {\n      result.authorizationList = req.authorizationList.slice();\n    }\n    if (\"blockTag\" in req) {\n      result.blockTag = req.blockTag;\n    }\n    if (\"enableCcipRead\" in req) {\n      result.enableCcipRead = !!req.enableCcipRead;\n    }\n    if (\"customData\" in req) {\n      result.customData = req.customData;\n    }\n    if (\"blobVersionedHashes\" in req && req.blobVersionedHashes) {\n      result.blobVersionedHashes = req.blobVersionedHashes.slice();\n    }\n    if (\"kzg\" in req) {\n      result.kzg = req.kzg;\n    }\n    if (\"blobs\" in req && req.blobs) {\n      result.blobs = req.blobs.map((b2) => {\n        if (isBytesLike2(b2)) {\n          return hexlify2(b2);\n        }\n        return Object.assign({}, b2);\n      });\n    }\n    return result;\n  }\n  function createOrphanedBlockFilter(block) {\n    return { orphan: \"drop-block\", hash: block.hash, number: block.number };\n  }\n  function createReorderedTransactionFilter(tx, other) {\n    return { orphan: \"reorder-transaction\", tx, other };\n  }\n  function createRemovedTransactionFilter(tx) {\n    return { orphan: \"drop-transaction\", tx };\n  }\n  function createRemovedLogFilter(log) {\n    return { orphan: \"drop-log\", log: {\n      transactionHash: log.transactionHash,\n      blockHash: log.blockHash,\n      blockNumber: log.blockNumber,\n      address: log.address,\n      data: log.data,\n      topics: Object.freeze(log.topics.slice()),\n      index: log.index\n    } };\n  }\n  var BN_08, FeeData, Block, Log, TransactionReceipt, TransactionResponse;\n  var init_provider = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/provider.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_utils3();\n      init_transaction2();\n      BN_08 = BigInt(0);\n      FeeData = class {\n        /**\n         *  The gas price for legacy networks.\n         */\n        gasPrice;\n        /**\n         *  The maximum fee to pay per gas.\n         *\n         *  The base fee per gas is defined by the network and based on\n         *  congestion, increasing the cost during times of heavy load\n         *  and lowering when less busy.\n         *\n         *  The actual fee per gas will be the base fee for the block\n         *  and the priority fee, up to the max fee per gas.\n         *\n         *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n         */\n        maxFeePerGas;\n        /**\n         *  The additional amout to pay per gas to encourage a validator\n         *  to include the transaction.\n         *\n         *  The purpose of this is to compensate the validator for the\n         *  adjusted risk for including a given transaction.\n         *\n         *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n         */\n        maxPriorityFeePerGas;\n        /**\n         *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and\n         *  %%maxPriorityFeePerGas%%.\n         */\n        constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {\n          defineProperties(this, {\n            gasPrice: getValue2(gasPrice),\n            maxFeePerGas: getValue2(maxFeePerGas),\n            maxPriorityFeePerGas: getValue2(maxPriorityFeePerGas)\n          });\n        }\n        /**\n         *  Returns a JSON-friendly value.\n         */\n        toJSON() {\n          const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;\n          return {\n            _type: \"FeeData\",\n            gasPrice: toJson(gasPrice),\n            maxFeePerGas: toJson(maxFeePerGas),\n            maxPriorityFeePerGas: toJson(maxPriorityFeePerGas)\n          };\n        }\n      };\n      Block = class {\n        /**\n         *  The provider connected to the block used to fetch additional details\n         *  if necessary.\n         */\n        provider;\n        /**\n         *  The block number, sometimes called the block height. This is a\n         *  sequential number that is one higher than the parent block.\n         */\n        number;\n        /**\n         *  The block hash.\n         *\n         *  This hash includes all properties, so can be safely used to identify\n         *  an exact set of block properties.\n         */\n        hash;\n        /**\n         *  The timestamp for this block, which is the number of seconds since\n         *  epoch that this block was included.\n         */\n        timestamp;\n        /**\n         *  The block hash of the parent block.\n         */\n        parentHash;\n        /**\n         *  The hash tree root of the parent beacon block for the given\n         *  execution block. See [[link-eip-4788]].\n         */\n        parentBeaconBlockRoot;\n        /**\n         *  The nonce.\n         *\n         *  On legacy networks, this is the random number inserted which\n         *  permitted the difficulty target to be reached.\n         */\n        nonce;\n        /**\n         *  The difficulty target.\n         *\n         *  On legacy networks, this is the proof-of-work target required\n         *  for a block to meet the protocol rules to be included.\n         *\n         *  On modern networks, this is a random number arrived at using\n         *  randao.  @TODO: Find links?\n         */\n        difficulty;\n        /**\n         *  The total gas limit for this block.\n         */\n        gasLimit;\n        /**\n         *  The total gas used in this block.\n         */\n        gasUsed;\n        /**\n         *  The root hash for the global state after applying changes\n         *  in this block.\n         */\n        stateRoot;\n        /**\n         *  The hash of the transaction receipts trie.\n         */\n        receiptsRoot;\n        /**\n         *  The total amount of blob gas consumed by the transactions\n         *  within the block. See [[link-eip-4844]].\n         */\n        blobGasUsed;\n        /**\n         *  The running total of blob gas consumed in excess of the\n         *  target, prior to the block. See [[link-eip-4844]].\n         */\n        excessBlobGas;\n        /**\n         *  The miner coinbase address, wihch receives any subsidies for\n         *  including this block.\n         */\n        miner;\n        /**\n         *  The latest RANDAO mix of the post beacon state of\n         *  the previous block.\n         */\n        prevRandao;\n        /**\n         *  Any extra data the validator wished to include.\n         */\n        extraData;\n        /**\n         *  The base fee per gas that all transactions in this block were\n         *  charged.\n         *\n         *  This adjusts after each block, depending on how congested the network\n         *  is.\n         */\n        baseFeePerGas;\n        #transactions;\n        /**\n         *  Create a new **Block** object.\n         *\n         *  This should generally not be necessary as the unless implementing a\n         *  low-level library.\n         */\n        constructor(block, provider) {\n          this.#transactions = block.transactions.map((tx) => {\n            if (typeof tx !== \"string\") {\n              return new TransactionResponse(tx, provider);\n            }\n            return tx;\n          });\n          defineProperties(this, {\n            provider,\n            hash: getValue2(block.hash),\n            number: block.number,\n            timestamp: block.timestamp,\n            parentHash: block.parentHash,\n            parentBeaconBlockRoot: block.parentBeaconBlockRoot,\n            nonce: block.nonce,\n            difficulty: block.difficulty,\n            gasLimit: block.gasLimit,\n            gasUsed: block.gasUsed,\n            blobGasUsed: block.blobGasUsed,\n            excessBlobGas: block.excessBlobGas,\n            miner: block.miner,\n            prevRandao: getValue2(block.prevRandao),\n            extraData: block.extraData,\n            baseFeePerGas: getValue2(block.baseFeePerGas),\n            stateRoot: block.stateRoot,\n            receiptsRoot: block.receiptsRoot\n          });\n        }\n        /**\n         *  Returns the list of transaction hashes, in the order\n         *  they were executed within the block.\n         */\n        get transactions() {\n          return this.#transactions.map((tx) => {\n            if (typeof tx === \"string\") {\n              return tx;\n            }\n            return tx.hash;\n          });\n        }\n        /**\n         *  Returns the complete transactions, in the order they\n         *  were executed within the block.\n         *\n         *  This is only available for blocks which prefetched\n         *  transactions, by passing ``true`` to %%prefetchTxs%%\n         *  into [[Provider-getBlock]].\n         */\n        get prefetchedTransactions() {\n          const txs = this.#transactions.slice();\n          if (txs.length === 0) {\n            return [];\n          }\n          assert3(typeof txs[0] === \"object\", \"transactions were not prefetched with block request\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"transactionResponses()\"\n          });\n          return txs;\n        }\n        /**\n         *  Returns a JSON-friendly value.\n         */\n        toJSON() {\n          const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash: hash4, miner, prevRandao, nonce, number: number2, parentHash, parentBeaconBlockRoot, stateRoot, receiptsRoot, timestamp, transactions } = this;\n          return {\n            _type: \"Block\",\n            baseFeePerGas: toJson(baseFeePerGas),\n            difficulty: toJson(difficulty),\n            extraData,\n            gasLimit: toJson(gasLimit),\n            gasUsed: toJson(gasUsed),\n            blobGasUsed: toJson(this.blobGasUsed),\n            excessBlobGas: toJson(this.excessBlobGas),\n            hash: hash4,\n            miner,\n            prevRandao,\n            nonce,\n            number: number2,\n            parentHash,\n            timestamp,\n            parentBeaconBlockRoot,\n            stateRoot,\n            receiptsRoot,\n            transactions\n          };\n        }\n        [Symbol.iterator]() {\n          let index = 0;\n          const txs = this.transactions;\n          return {\n            next: () => {\n              if (index < this.length) {\n                return {\n                  value: txs[index++],\n                  done: false\n                };\n              }\n              return { value: void 0, done: true };\n            }\n          };\n        }\n        /**\n         *  The number of transactions in this block.\n         */\n        get length() {\n          return this.#transactions.length;\n        }\n        /**\n         *  The [[link-js-date]] this block was included at.\n         */\n        get date() {\n          if (this.timestamp == null) {\n            return null;\n          }\n          return new Date(this.timestamp * 1e3);\n        }\n        /**\n         *  Get the transaction at %%indexe%% within this block.\n         */\n        async getTransaction(indexOrHash) {\n          let tx = void 0;\n          if (typeof indexOrHash === \"number\") {\n            tx = this.#transactions[indexOrHash];\n          } else {\n            const hash4 = indexOrHash.toLowerCase();\n            for (const v of this.#transactions) {\n              if (typeof v === \"string\") {\n                if (v !== hash4) {\n                  continue;\n                }\n                tx = v;\n                break;\n              } else {\n                if (v.hash !== hash4) {\n                  continue;\n                }\n                tx = v;\n                break;\n              }\n            }\n          }\n          if (tx == null) {\n            throw new Error(\"no such tx\");\n          }\n          if (typeof tx === \"string\") {\n            return await this.provider.getTransaction(tx);\n          } else {\n            return tx;\n          }\n        }\n        /**\n         *  If a **Block** was fetched with a request to include the transactions\n         *  this will allow synchronous access to those transactions.\n         *\n         *  If the transactions were not prefetched, this will throw.\n         */\n        getPrefetchedTransaction(indexOrHash) {\n          const txs = this.prefetchedTransactions;\n          if (typeof indexOrHash === \"number\") {\n            return txs[indexOrHash];\n          }\n          indexOrHash = indexOrHash.toLowerCase();\n          for (const tx of txs) {\n            if (tx.hash === indexOrHash) {\n              return tx;\n            }\n          }\n          assertArgument(false, \"no matching transaction\", \"indexOrHash\", indexOrHash);\n        }\n        /**\n         *  Returns true if this block been mined. This provides a type guard\n         *  for all properties on a [[MinedBlock]].\n         */\n        isMined() {\n          return !!this.hash;\n        }\n        /**\n         *  Returns true if this block is an [[link-eip-2930]] block.\n         */\n        isLondon() {\n          return !!this.baseFeePerGas;\n        }\n        /**\n         *  @_ignore:\n         */\n        orphanedEvent() {\n          if (!this.isMined()) {\n            throw new Error(\"\");\n          }\n          return createOrphanedBlockFilter(this);\n        }\n      };\n      Log = class {\n        /**\n         *  The provider connected to the log used to fetch additional details\n         *  if necessary.\n         */\n        provider;\n        /**\n         *  The transaction hash of the transaction this log occurred in. Use the\n         *  [[Log-getTransaction]] to get the [[TransactionResponse]].\n         */\n        transactionHash;\n        /**\n         *  The block hash of the block this log occurred in. Use the\n         *  [[Log-getBlock]] to get the [[Block]].\n         */\n        blockHash;\n        /**\n         *  The block number of the block this log occurred in. It is preferred\n         *  to use the [[Block-hash]] when fetching the related [[Block]],\n         *  since in the case of an orphaned block, the block at that height may\n         *  have changed.\n         */\n        blockNumber;\n        /**\n         *  If the **Log** represents a block that was removed due to an orphaned\n         *  block, this will be true.\n         *\n         *  This can only happen within an orphan event listener.\n         */\n        removed;\n        /**\n         *  The address of the contract that emitted this log.\n         */\n        address;\n        /**\n         *  The data included in this log when it was emitted.\n         */\n        data;\n        /**\n         *  The indexed topics included in this log when it was emitted.\n         *\n         *  All topics are included in the bloom filters, so they can be\n         *  efficiently filtered using the [[Provider-getLogs]] method.\n         */\n        topics;\n        /**\n         *  The index within the block this log occurred at. This is generally\n         *  not useful to developers, but can be used with the various roots\n         *  to proof inclusion within a block.\n         */\n        index;\n        /**\n         *  The index within the transaction of this log.\n         */\n        transactionIndex;\n        /**\n         *  @_ignore:\n         */\n        constructor(log, provider) {\n          this.provider = provider;\n          const topics = Object.freeze(log.topics.slice());\n          defineProperties(this, {\n            transactionHash: log.transactionHash,\n            blockHash: log.blockHash,\n            blockNumber: log.blockNumber,\n            removed: log.removed,\n            address: log.address,\n            data: log.data,\n            topics,\n            index: log.index,\n            transactionIndex: log.transactionIndex\n          });\n        }\n        /**\n         *  Returns a JSON-compatible object.\n         */\n        toJSON() {\n          const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;\n          return {\n            _type: \"log\",\n            address,\n            blockHash,\n            blockNumber,\n            data,\n            index,\n            removed,\n            topics,\n            transactionHash,\n            transactionIndex\n          };\n        }\n        /**\n         *  Returns the block that this log occurred in.\n         */\n        async getBlock() {\n          const block = await this.provider.getBlock(this.blockHash);\n          assert3(!!block, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n          return block;\n        }\n        /**\n         *  Returns the transaction that this log occurred in.\n         */\n        async getTransaction() {\n          const tx = await this.provider.getTransaction(this.transactionHash);\n          assert3(!!tx, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n          return tx;\n        }\n        /**\n         *  Returns the transaction receipt fot the transaction that this\n         *  log occurred in.\n         */\n        async getTransactionReceipt() {\n          const receipt = await this.provider.getTransactionReceipt(this.transactionHash);\n          assert3(!!receipt, \"failed to find transaction receipt\", \"UNKNOWN_ERROR\", {});\n          return receipt;\n        }\n        /**\n         *  @_ignore:\n         */\n        removedEvent() {\n          return createRemovedLogFilter(this);\n        }\n      };\n      TransactionReceipt = class {\n        /**\n         *  The provider connected to the log used to fetch additional details\n         *  if necessary.\n         */\n        provider;\n        /**\n         *  The address the transaction was sent to.\n         */\n        to;\n        /**\n         *  The sender of the transaction.\n         */\n        from;\n        /**\n         *  The address of the contract if the transaction was directly\n         *  responsible for deploying one.\n         *\n         *  This is non-null **only** if the ``to`` is empty and the ``data``\n         *  was successfully executed as initcode.\n         */\n        contractAddress;\n        /**\n         *  The transaction hash.\n         */\n        hash;\n        /**\n         *  The index of this transaction within the block transactions.\n         */\n        index;\n        /**\n         *  The block hash of the [[Block]] this transaction was included in.\n         */\n        blockHash;\n        /**\n         *  The block number of the [[Block]] this transaction was included in.\n         */\n        blockNumber;\n        /**\n         *  The bloom filter bytes that represent all logs that occurred within\n         *  this transaction. This is generally not useful for most developers,\n         *  but can be used to validate the included logs.\n         */\n        logsBloom;\n        /**\n         *  The actual amount of gas used by this transaction.\n         *\n         *  When creating a transaction, the amount of gas that will be used can\n         *  only be approximated, but the sender must pay the gas fee for the\n         *  entire gas limit. After the transaction, the difference is refunded.\n         */\n        gasUsed;\n        /**\n         *  The gas used for BLObs. See [[link-eip-4844]].\n         */\n        blobGasUsed;\n        /**\n         *  The amount of gas used by all transactions within the block for this\n         *  and all transactions with a lower ``index``.\n         *\n         *  This is generally not useful for developers but can be used to\n         *  validate certain aspects of execution.\n         */\n        cumulativeGasUsed;\n        /**\n         *  The actual gas price used during execution.\n         *\n         *  Due to the complexity of [[link-eip-1559]] this value can only\n         *  be caluclated after the transaction has been mined, snce the base\n         *  fee is protocol-enforced.\n         */\n        gasPrice;\n        /**\n         *  The price paid per BLOB in gas. See [[link-eip-4844]].\n         */\n        blobGasPrice;\n        /**\n         *  The [[link-eip-2718]] transaction type.\n         */\n        type;\n        //readonly byzantium!: boolean;\n        /**\n         *  The status of this transaction, indicating success (i.e. ``1``) or\n         *  a revert (i.e. ``0``).\n         *\n         *  This is available in post-byzantium blocks, but some backends may\n         *  backfill this value.\n         */\n        status;\n        /**\n         *  The root hash of this transaction.\n         *\n         *  This is no present and was only included in pre-byzantium blocks, but\n         *  could be used to validate certain parts of the receipt.\n         */\n        root;\n        #logs;\n        /**\n         *  @_ignore:\n         */\n        constructor(tx, provider) {\n          this.#logs = Object.freeze(tx.logs.map((log) => {\n            return new Log(log, provider);\n          }));\n          let gasPrice = BN_08;\n          if (tx.effectiveGasPrice != null) {\n            gasPrice = tx.effectiveGasPrice;\n          } else if (tx.gasPrice != null) {\n            gasPrice = tx.gasPrice;\n          }\n          defineProperties(this, {\n            provider,\n            to: tx.to,\n            from: tx.from,\n            contractAddress: tx.contractAddress,\n            hash: tx.hash,\n            index: tx.index,\n            blockHash: tx.blockHash,\n            blockNumber: tx.blockNumber,\n            logsBloom: tx.logsBloom,\n            gasUsed: tx.gasUsed,\n            cumulativeGasUsed: tx.cumulativeGasUsed,\n            blobGasUsed: tx.blobGasUsed,\n            gasPrice,\n            blobGasPrice: tx.blobGasPrice,\n            type: tx.type,\n            //byzantium: tx.byzantium,\n            status: tx.status,\n            root: tx.root\n          });\n        }\n        /**\n         *  The logs for this transaction.\n         */\n        get logs() {\n          return this.#logs;\n        }\n        /**\n         *  Returns a JSON-compatible representation.\n         */\n        toJSON() {\n          const {\n            to,\n            from,\n            contractAddress,\n            hash: hash4,\n            index,\n            blockHash,\n            blockNumber,\n            logsBloom,\n            logs,\n            //byzantium, \n            status,\n            root\n          } = this;\n          return {\n            _type: \"TransactionReceipt\",\n            blockHash,\n            blockNumber,\n            //byzantium, \n            contractAddress,\n            cumulativeGasUsed: toJson(this.cumulativeGasUsed),\n            from,\n            gasPrice: toJson(this.gasPrice),\n            blobGasUsed: toJson(this.blobGasUsed),\n            blobGasPrice: toJson(this.blobGasPrice),\n            gasUsed: toJson(this.gasUsed),\n            hash: hash4,\n            index,\n            logs,\n            logsBloom,\n            root,\n            status,\n            to\n          };\n        }\n        /**\n         *  @_ignore:\n         */\n        get length() {\n          return this.logs.length;\n        }\n        [Symbol.iterator]() {\n          let index = 0;\n          return {\n            next: () => {\n              if (index < this.length) {\n                return { value: this.logs[index++], done: false };\n              }\n              return { value: void 0, done: true };\n            }\n          };\n        }\n        /**\n         *  The total fee for this transaction, in wei.\n         */\n        get fee() {\n          return this.gasUsed * this.gasPrice;\n        }\n        /**\n         *  Resolves to the block this transaction occurred in.\n         */\n        async getBlock() {\n          const block = await this.provider.getBlock(this.blockHash);\n          if (block == null) {\n            throw new Error(\"TODO\");\n          }\n          return block;\n        }\n        /**\n         *  Resolves to the transaction this transaction occurred in.\n         */\n        async getTransaction() {\n          const tx = await this.provider.getTransaction(this.hash);\n          if (tx == null) {\n            throw new Error(\"TODO\");\n          }\n          return tx;\n        }\n        /**\n         *  Resolves to the return value of the execution of this transaction.\n         *\n         *  Support for this feature is limited, as it requires an archive node\n         *  with the ``debug_`` or ``trace_`` API enabled.\n         */\n        async getResult() {\n          return await this.provider.getTransactionResult(this.hash);\n        }\n        /**\n         *  Resolves to the number of confirmations this transaction has.\n         */\n        async confirmations() {\n          return await this.provider.getBlockNumber() - this.blockNumber + 1;\n        }\n        /**\n         *  @_ignore:\n         */\n        removedEvent() {\n          return createRemovedTransactionFilter(this);\n        }\n        /**\n         *  @_ignore:\n         */\n        reorderedEvent(other) {\n          assert3(!other || other.isMined(), \"unmined 'other' transction cannot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"reorderedEvent(other)\" });\n          return createReorderedTransactionFilter(this, other);\n        }\n      };\n      TransactionResponse = class _TransactionResponse {\n        /**\n         *  The provider this is connected to, which will influence how its\n         *  methods will resolve its async inspection methods.\n         */\n        provider;\n        /**\n         *  The block number of the block that this transaction was included in.\n         *\n         *  This is ``null`` for pending transactions.\n         */\n        blockNumber;\n        /**\n         *  The blockHash of the block that this transaction was included in.\n         *\n         *  This is ``null`` for pending transactions.\n         */\n        blockHash;\n        /**\n         *  The index within the block that this transaction resides at.\n         */\n        index;\n        /**\n         *  The transaction hash.\n         */\n        hash;\n        /**\n         *  The [[link-eip-2718]] transaction envelope type. This is\n         *  ``0`` for legacy transactions types.\n         */\n        type;\n        /**\n         *  The receiver of this transaction.\n         *\n         *  If ``null``, then the transaction is an initcode transaction.\n         *  This means the result of executing the [[data]] will be deployed\n         *  as a new contract on chain (assuming it does not revert) and the\n         *  address may be computed using [[getCreateAddress]].\n         */\n        to;\n        /**\n         *  The sender of this transaction. It is implicitly computed\n         *  from the transaction pre-image hash (as the digest) and the\n         *  [[signature]] using ecrecover.\n         */\n        from;\n        /**\n         *  The nonce, which is used to prevent replay attacks and offer\n         *  a method to ensure transactions from a given sender are explicitly\n         *  ordered.\n         *\n         *  When sending a transaction, this must be equal to the number of\n         *  transactions ever sent by [[from]].\n         */\n        nonce;\n        /**\n         *  The maximum units of gas this transaction can consume. If execution\n         *  exceeds this, the entries transaction is reverted and the sender\n         *  is charged for the full amount, despite not state changes being made.\n         */\n        gasLimit;\n        /**\n         *  The gas price can have various values, depending on the network.\n         *\n         *  In modern networks, for transactions that are included this is\n         *  the //effective gas price// (the fee per gas that was actually\n         *  charged), while for transactions that have not been included yet\n         *  is the [[maxFeePerGas]].\n         *\n         *  For legacy transactions, or transactions on legacy networks, this\n         *  is the fee that will be charged per unit of gas the transaction\n         *  consumes.\n         */\n        gasPrice;\n        /**\n         *  The maximum priority fee (per unit of gas) to allow a\n         *  validator to charge the sender. This is inclusive of the\n         *  [[maxFeeFeePerGas]].\n         */\n        maxPriorityFeePerGas;\n        /**\n         *  The maximum fee (per unit of gas) to allow this transaction\n         *  to charge the sender.\n         */\n        maxFeePerGas;\n        /**\n         *  The [[link-eip-4844]] max fee per BLOb gas.\n         */\n        maxFeePerBlobGas;\n        /**\n         *  The data.\n         */\n        data;\n        /**\n         *  The value, in wei. Use [[formatEther]] to format this value\n         *  as ether.\n         */\n        value;\n        /**\n         *  The chain ID.\n         */\n        chainId;\n        /**\n         *  The signature.\n         */\n        signature;\n        /**\n         *  The [[link-eip-2930]] access list for transaction types that\n         *  support it, otherwise ``null``.\n         */\n        accessList;\n        /**\n         *  The [[link-eip-4844]] BLOb versioned hashes.\n         */\n        blobVersionedHashes;\n        /**\n         *  The [[link-eip-7702]] authorizations (if any).\n         */\n        authorizationList;\n        #startBlock;\n        /**\n         *  @_ignore:\n         */\n        constructor(tx, provider) {\n          this.provider = provider;\n          this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;\n          this.blockHash = tx.blockHash != null ? tx.blockHash : null;\n          this.hash = tx.hash;\n          this.index = tx.index;\n          this.type = tx.type;\n          this.from = tx.from;\n          this.to = tx.to || null;\n          this.gasLimit = tx.gasLimit;\n          this.nonce = tx.nonce;\n          this.data = tx.data;\n          this.value = tx.value;\n          this.gasPrice = tx.gasPrice;\n          this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;\n          this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;\n          this.maxFeePerBlobGas = tx.maxFeePerBlobGas != null ? tx.maxFeePerBlobGas : null;\n          this.chainId = tx.chainId;\n          this.signature = tx.signature;\n          this.accessList = tx.accessList != null ? tx.accessList : null;\n          this.blobVersionedHashes = tx.blobVersionedHashes != null ? tx.blobVersionedHashes : null;\n          this.authorizationList = tx.authorizationList != null ? tx.authorizationList : null;\n          this.#startBlock = -1;\n        }\n        /**\n         *  Returns a JSON-compatible representation of this transaction.\n         */\n        toJSON() {\n          const { blockNumber, blockHash, index, hash: hash4, type, to, from, nonce, data, signature: signature2, accessList, blobVersionedHashes } = this;\n          return {\n            _type: \"TransactionResponse\",\n            accessList,\n            blockNumber,\n            blockHash,\n            blobVersionedHashes,\n            chainId: toJson(this.chainId),\n            data,\n            from,\n            gasLimit: toJson(this.gasLimit),\n            gasPrice: toJson(this.gasPrice),\n            hash: hash4,\n            maxFeePerGas: toJson(this.maxFeePerGas),\n            maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),\n            maxFeePerBlobGas: toJson(this.maxFeePerBlobGas),\n            nonce,\n            signature: signature2,\n            to,\n            index,\n            type,\n            value: toJson(this.value)\n          };\n        }\n        /**\n         *  Resolves to the Block that this transaction was included in.\n         *\n         *  This will return null if the transaction has not been included yet.\n         */\n        async getBlock() {\n          let blockNumber = this.blockNumber;\n          if (blockNumber == null) {\n            const tx = await this.getTransaction();\n            if (tx) {\n              blockNumber = tx.blockNumber;\n            }\n          }\n          if (blockNumber == null) {\n            return null;\n          }\n          const block = this.provider.getBlock(blockNumber);\n          if (block == null) {\n            throw new Error(\"TODO\");\n          }\n          return block;\n        }\n        /**\n         *  Resolves to this transaction being re-requested from the\n         *  provider. This can be used if you have an unmined transaction\n         *  and wish to get an up-to-date populated instance.\n         */\n        async getTransaction() {\n          return this.provider.getTransaction(this.hash);\n        }\n        /**\n         *  Resolve to the number of confirmations this transaction has.\n         */\n        async confirmations() {\n          if (this.blockNumber == null) {\n            const { tx, blockNumber: blockNumber2 } = await resolveProperties2({\n              tx: this.getTransaction(),\n              blockNumber: this.provider.getBlockNumber()\n            });\n            if (tx == null || tx.blockNumber == null) {\n              return 0;\n            }\n            return blockNumber2 - tx.blockNumber + 1;\n          }\n          const blockNumber = await this.provider.getBlockNumber();\n          return blockNumber - this.blockNumber + 1;\n        }\n        /**\n         *  Resolves once this transaction has been mined and has\n         *  %%confirms%% blocks including it (default: ``1``) with an\n         *  optional %%timeout%%.\n         *\n         *  This can resolve to ``null`` only if %%confirms%% is ``0``\n         *  and the transaction has not been mined, otherwise this will\n         *  wait until enough confirmations have completed.\n         */\n        async wait(_confirms, _timeout) {\n          const confirms = _confirms == null ? 1 : _confirms;\n          const timeout = _timeout == null ? 0 : _timeout;\n          let startBlock = this.#startBlock;\n          let nextScan = -1;\n          let stopScanning = startBlock === -1 ? true : false;\n          const checkReplacement = async () => {\n            if (stopScanning) {\n              return null;\n            }\n            const { blockNumber, nonce } = await resolveProperties2({\n              blockNumber: this.provider.getBlockNumber(),\n              nonce: this.provider.getTransactionCount(this.from)\n            });\n            if (nonce < this.nonce) {\n              startBlock = blockNumber;\n              return;\n            }\n            if (stopScanning) {\n              return null;\n            }\n            const mined = await this.getTransaction();\n            if (mined && mined.blockNumber != null) {\n              return;\n            }\n            if (nextScan === -1) {\n              nextScan = startBlock - 3;\n              if (nextScan < this.#startBlock) {\n                nextScan = this.#startBlock;\n              }\n            }\n            while (nextScan <= blockNumber) {\n              if (stopScanning) {\n                return null;\n              }\n              const block = await this.provider.getBlock(nextScan, true);\n              if (block == null) {\n                return;\n              }\n              for (const hash4 of block) {\n                if (hash4 === this.hash) {\n                  return;\n                }\n              }\n              for (let i = 0; i < block.length; i++) {\n                const tx = await block.getTransaction(i);\n                if (tx.from === this.from && tx.nonce === this.nonce) {\n                  if (stopScanning) {\n                    return null;\n                  }\n                  const receipt2 = await this.provider.getTransactionReceipt(tx.hash);\n                  if (receipt2 == null) {\n                    return;\n                  }\n                  if (blockNumber - receipt2.blockNumber + 1 < confirms) {\n                    return;\n                  }\n                  let reason = \"replaced\";\n                  if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {\n                    reason = \"repriced\";\n                  } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value === BN_08) {\n                    reason = \"cancelled\";\n                  }\n                  assert3(false, \"transaction was replaced\", \"TRANSACTION_REPLACED\", {\n                    cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                    reason,\n                    replacement: tx.replaceableTransaction(startBlock),\n                    hash: tx.hash,\n                    receipt: receipt2\n                  });\n                }\n              }\n              nextScan++;\n            }\n            return;\n          };\n          const checkReceipt = (receipt2) => {\n            if (receipt2 == null || receipt2.status !== 0) {\n              return receipt2;\n            }\n            assert3(false, \"transaction execution reverted\", \"CALL_EXCEPTION\", {\n              action: \"sendTransaction\",\n              data: null,\n              reason: null,\n              invocation: null,\n              revert: null,\n              transaction: {\n                to: receipt2.to,\n                from: receipt2.from,\n                data: \"\"\n                // @TODO: in v7, split out sendTransaction properties\n              },\n              receipt: receipt2\n            });\n          };\n          const receipt = await this.provider.getTransactionReceipt(this.hash);\n          if (confirms === 0) {\n            return checkReceipt(receipt);\n          }\n          if (receipt) {\n            if (confirms === 1 || await receipt.confirmations() >= confirms) {\n              return checkReceipt(receipt);\n            }\n          } else {\n            await checkReplacement();\n            if (confirms === 0) {\n              return null;\n            }\n          }\n          const waiter = new Promise((resolve, reject) => {\n            const cancellers = [];\n            const cancel = () => {\n              cancellers.forEach((c) => c());\n            };\n            cancellers.push(() => {\n              stopScanning = true;\n            });\n            if (timeout > 0) {\n              const timer2 = setTimeout(() => {\n                cancel();\n                reject(makeError(\"wait for transaction timeout\", \"TIMEOUT\"));\n              }, timeout);\n              cancellers.push(() => {\n                clearTimeout(timer2);\n              });\n            }\n            const txListener = async (receipt2) => {\n              if (await receipt2.confirmations() >= confirms) {\n                cancel();\n                try {\n                  resolve(checkReceipt(receipt2));\n                } catch (error) {\n                  reject(error);\n                }\n              }\n            };\n            cancellers.push(() => {\n              this.provider.off(this.hash, txListener);\n            });\n            this.provider.on(this.hash, txListener);\n            if (startBlock >= 0) {\n              const replaceListener = async () => {\n                try {\n                  await checkReplacement();\n                } catch (error) {\n                  if (isError(error, \"TRANSACTION_REPLACED\")) {\n                    cancel();\n                    reject(error);\n                    return;\n                  }\n                }\n                if (!stopScanning) {\n                  this.provider.once(\"block\", replaceListener);\n                }\n              };\n              cancellers.push(() => {\n                this.provider.off(\"block\", replaceListener);\n              });\n              this.provider.once(\"block\", replaceListener);\n            }\n          });\n          return await waiter;\n        }\n        /**\n         *  Returns ``true`` if this transaction has been included.\n         *\n         *  This is effective only as of the time the TransactionResponse\n         *  was instantiated. To get up-to-date information, use\n         *  [[getTransaction]].\n         *\n         *  This provides a Type Guard that this transaction will have\n         *  non-null property values for properties that are null for\n         *  unmined transactions.\n         */\n        isMined() {\n          return this.blockHash != null;\n        }\n        /**\n         *  Returns true if the transaction is a legacy (i.e. ``type == 0``)\n         *  transaction.\n         *\n         *  This provides a Type Guard that this transaction will have\n         *  the ``null``-ness for hardfork-specific properties set correctly.\n         */\n        isLegacy() {\n          return this.type === 0;\n        }\n        /**\n         *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)\n         *  transaction. See [[link-eip-2070]].\n         *\n         *  This provides a Type Guard that this transaction will have\n         *  the ``null``-ness for hardfork-specific properties set correctly.\n         */\n        isBerlin() {\n          return this.type === 1;\n        }\n        /**\n         *  Returns true if the transaction is a London (i.e. ``type == 2``)\n         *  transaction. See [[link-eip-1559]].\n         *\n         *  This provides a Type Guard that this transaction will have\n         *  the ``null``-ness for hardfork-specific properties set correctly.\n         */\n        isLondon() {\n          return this.type === 2;\n        }\n        /**\n         *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)\n         *  transaction. See [[link-eip-4844]].\n         */\n        isCancun() {\n          return this.type === 3;\n        }\n        /**\n         *  Returns a filter which can be used to listen for orphan events\n         *  that evict this transaction.\n         */\n        removedEvent() {\n          assert3(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n          return createRemovedTransactionFilter(this);\n        }\n        /**\n         *  Returns a filter which can be used to listen for orphan events\n         *  that re-order this event against %%other%%.\n         */\n        reorderedEvent(other) {\n          assert3(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n          assert3(!other || other.isMined(), \"unmined 'other' transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n          return createReorderedTransactionFilter(this, other);\n        }\n        /**\n         *  Returns a new TransactionResponse instance which has the ability to\n         *  detect (and throw an error) if the transaction is replaced, which\n         *  will begin scanning at %%startBlock%%.\n         *\n         *  This should generally not be used by developers and is intended\n         *  primarily for internal use. Setting an incorrect %%startBlock%% can\n         *  have devastating performance consequences if used incorrectly.\n         */\n        replaceableTransaction(startBlock) {\n          assertArgument(Number.isInteger(startBlock) && startBlock >= 0, \"invalid startBlock\", \"startBlock\", startBlock);\n          const tx = new _TransactionResponse(this, this.provider);\n          tx.#startBlock = startBlock;\n          return tx;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/contract/wrappers.js\n  var EventLog, UndecodedEventLog, ContractTransactionReceipt, ContractTransactionResponse, ContractUnknownEventPayload, ContractEventPayload;\n  var init_wrappers = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/contract/wrappers.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_provider();\n      init_utils3();\n      EventLog = class extends Log {\n        /**\n         *  The Contract Interface.\n         */\n        interface;\n        /**\n         *  The matching event.\n         */\n        fragment;\n        /**\n         *  The parsed arguments passed to the event by ``emit``.\n         */\n        args;\n        /**\n         * @_ignore:\n         */\n        constructor(log, iface, fragment) {\n          super(log, log.provider);\n          const args = iface.decodeEventLog(fragment, log.data, log.topics);\n          defineProperties(this, { args, fragment, interface: iface });\n        }\n        /**\n         *  The name of the event.\n         */\n        get eventName() {\n          return this.fragment.name;\n        }\n        /**\n         *  The signature of the event.\n         */\n        get eventSignature() {\n          return this.fragment.format();\n        }\n      };\n      UndecodedEventLog = class extends Log {\n        /**\n         *  The error encounted when trying to decode the log.\n         */\n        error;\n        /**\n         * @_ignore:\n         */\n        constructor(log, error) {\n          super(log, log.provider);\n          defineProperties(this, { error });\n        }\n      };\n      ContractTransactionReceipt = class extends TransactionReceipt {\n        #iface;\n        /**\n         *  @_ignore:\n         */\n        constructor(iface, provider, tx) {\n          super(tx, provider);\n          this.#iface = iface;\n        }\n        /**\n         *  The parsed logs for any [[Log]] which has a matching event in the\n         *  Contract ABI.\n         */\n        get logs() {\n          return super.logs.map((log) => {\n            const fragment = log.topics.length ? this.#iface.getEvent(log.topics[0]) : null;\n            if (fragment) {\n              try {\n                return new EventLog(log, this.#iface, fragment);\n              } catch (error) {\n                return new UndecodedEventLog(log, error);\n              }\n            }\n            return log;\n          });\n        }\n      };\n      ContractTransactionResponse = class extends TransactionResponse {\n        #iface;\n        /**\n         *  @_ignore:\n         */\n        constructor(iface, provider, tx) {\n          super(tx, provider);\n          this.#iface = iface;\n        }\n        /**\n         *  Resolves once this transaction has been mined and has\n         *  %%confirms%% blocks including it (default: ``1``) with an\n         *  optional %%timeout%%.\n         *\n         *  This can resolve to ``null`` only if %%confirms%% is ``0``\n         *  and the transaction has not been mined, otherwise this will\n         *  wait until enough confirmations have completed.\n         */\n        async wait(confirms, timeout) {\n          const receipt = await super.wait(confirms, timeout);\n          if (receipt == null) {\n            return null;\n          }\n          return new ContractTransactionReceipt(this.#iface, this.provider, receipt);\n        }\n      };\n      ContractUnknownEventPayload = class extends EventPayload {\n        /**\n         *  The log with no matching events.\n         */\n        log;\n        /**\n         *  @_event:\n         */\n        constructor(contract, listener, filter, log) {\n          super(contract, listener, filter);\n          defineProperties(this, { log });\n        }\n        /**\n         *  Resolves to the block the event occured in.\n         */\n        async getBlock() {\n          return await this.log.getBlock();\n        }\n        /**\n         *  Resolves to the transaction the event occured in.\n         */\n        async getTransaction() {\n          return await this.log.getTransaction();\n        }\n        /**\n         *  Resolves to the transaction receipt the event occured in.\n         */\n        async getTransactionReceipt() {\n          return await this.log.getTransactionReceipt();\n        }\n      };\n      ContractEventPayload = class extends ContractUnknownEventPayload {\n        /**\n         *  @_ignore:\n         */\n        constructor(contract, listener, filter, fragment, _log) {\n          super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));\n          const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);\n          defineProperties(this, { args, fragment });\n        }\n        /**\n         *  The event name.\n         */\n        get eventName() {\n          return this.fragment.name;\n        }\n        /**\n         *  The event signature.\n         */\n        get eventSignature() {\n          return this.fragment.format();\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/contract/contract.js\n  function canCall(value) {\n    return value && typeof value.call === \"function\";\n  }\n  function canEstimate(value) {\n    return value && typeof value.estimateGas === \"function\";\n  }\n  function canResolve(value) {\n    return value && typeof value.resolveName === \"function\";\n  }\n  function canSend(value) {\n    return value && typeof value.sendTransaction === \"function\";\n  }\n  function getResolver(value) {\n    if (value != null) {\n      if (canResolve(value)) {\n        return value;\n      }\n      if (value.provider) {\n        return value.provider;\n      }\n    }\n    return void 0;\n  }\n  function getRunner2(value, feature) {\n    if (value == null) {\n      return null;\n    }\n    if (typeof value[feature] === \"function\") {\n      return value;\n    }\n    if (value.provider && typeof value.provider[feature] === \"function\") {\n      return value.provider;\n    }\n    return null;\n  }\n  function getProvider(value) {\n    if (value == null) {\n      return null;\n    }\n    return value.provider || null;\n  }\n  async function copyOverrides(arg, allowed) {\n    const _overrides = Typed.dereference(arg, \"overrides\");\n    assertArgument(typeof _overrides === \"object\", \"invalid overrides parameter\", \"overrides\", arg);\n    const overrides = copyRequest(_overrides);\n    assertArgument(overrides.to == null || (allowed || []).indexOf(\"to\") >= 0, \"cannot override to\", \"overrides.to\", overrides.to);\n    assertArgument(overrides.data == null || (allowed || []).indexOf(\"data\") >= 0, \"cannot override data\", \"overrides.data\", overrides.data);\n    if (overrides.from) {\n      overrides.from = overrides.from;\n    }\n    return overrides;\n  }\n  async function resolveArgs(_runner, inputs, args) {\n    const runner = getRunner2(_runner, \"resolveName\");\n    const resolver = canResolve(runner) ? runner : null;\n    return await Promise.all(inputs.map((param, index) => {\n      return param.walkAsync(args[index], (type, value) => {\n        value = Typed.dereference(value, type);\n        if (type === \"address\") {\n          return resolveAddress(value, resolver);\n        }\n        return value;\n      });\n    }));\n  }\n  function buildWrappedFallback(contract) {\n    const populateTransaction2 = async function(overrides) {\n      const tx = await copyOverrides(overrides, [\"data\"]);\n      tx.to = await contract.getAddress();\n      if (tx.from) {\n        tx.from = await resolveAddress(tx.from, getResolver(contract.runner));\n      }\n      const iface = contract.interface;\n      const noValue = getBigInt(tx.value || BN_09, \"overrides.value\") === BN_09;\n      const noData = (tx.data || \"0x\") === \"0x\";\n      if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {\n        assertArgument(false, \"cannot send data to receive or send value to non-payable fallback\", \"overrides\", overrides);\n      }\n      assertArgument(iface.fallback || noData, \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n      const payable = iface.receive || iface.fallback && iface.fallback.payable;\n      assertArgument(payable || noValue, \"cannot send value to non-payable fallback\", \"overrides.value\", tx.value);\n      assertArgument(iface.fallback || noData, \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n      return tx;\n    };\n    const staticCall = async function(overrides) {\n      const runner = getRunner2(contract.runner, \"call\");\n      assert3(canCall(runner), \"contract runner does not support calling\", \"UNSUPPORTED_OPERATION\", { operation: \"call\" });\n      const tx = await populateTransaction2(overrides);\n      try {\n        return await runner.call(tx);\n      } catch (error) {\n        if (isCallException(error) && error.data) {\n          throw contract.interface.makeError(error.data, tx);\n        }\n        throw error;\n      }\n    };\n    const send = async function(overrides) {\n      const runner = contract.runner;\n      assert3(canSend(runner), \"contract runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", { operation: \"sendTransaction\" });\n      const tx = await runner.sendTransaction(await populateTransaction2(overrides));\n      const provider = getProvider(contract.runner);\n      return new ContractTransactionResponse(contract.interface, provider, tx);\n    };\n    const estimateGas = async function(overrides) {\n      const runner = getRunner2(contract.runner, \"estimateGas\");\n      assert3(canEstimate(runner), \"contract runner does not support gas estimation\", \"UNSUPPORTED_OPERATION\", { operation: \"estimateGas\" });\n      return await runner.estimateGas(await populateTransaction2(overrides));\n    };\n    const method = async (overrides) => {\n      return await send(overrides);\n    };\n    defineProperties(method, {\n      _contract: contract,\n      estimateGas,\n      populateTransaction: populateTransaction2,\n      send,\n      staticCall\n    });\n    return method;\n  }\n  function buildWrappedMethod(contract, key2) {\n    const getFragment = function(...args) {\n      const fragment = contract.interface.getFunction(key2, args);\n      assert3(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"fragment\",\n        info: { key: key2, args }\n      });\n      return fragment;\n    };\n    const populateTransaction2 = async function(...args) {\n      const fragment = getFragment(...args);\n      let overrides = {};\n      if (fragment.inputs.length + 1 === args.length) {\n        overrides = await copyOverrides(args.pop());\n        if (overrides.from) {\n          overrides.from = await resolveAddress(overrides.from, getResolver(contract.runner));\n        }\n      }\n      if (fragment.inputs.length !== args.length) {\n        throw new Error(\"internal error: fragment inputs doesn't match arguments; should not happen\");\n      }\n      const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);\n      return Object.assign({}, overrides, await resolveProperties2({\n        to: contract.getAddress(),\n        data: contract.interface.encodeFunctionData(fragment, resolvedArgs)\n      }));\n    };\n    const staticCall = async function(...args) {\n      const result = await staticCallResult(...args);\n      if (result.length === 1) {\n        return result[0];\n      }\n      return result;\n    };\n    const send = async function(...args) {\n      const runner = contract.runner;\n      assert3(canSend(runner), \"contract runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", { operation: \"sendTransaction\" });\n      const tx = await runner.sendTransaction(await populateTransaction2(...args));\n      const provider = getProvider(contract.runner);\n      return new ContractTransactionResponse(contract.interface, provider, tx);\n    };\n    const estimateGas = async function(...args) {\n      const runner = getRunner2(contract.runner, \"estimateGas\");\n      assert3(canEstimate(runner), \"contract runner does not support gas estimation\", \"UNSUPPORTED_OPERATION\", { operation: \"estimateGas\" });\n      return await runner.estimateGas(await populateTransaction2(...args));\n    };\n    const staticCallResult = async function(...args) {\n      const runner = getRunner2(contract.runner, \"call\");\n      assert3(canCall(runner), \"contract runner does not support calling\", \"UNSUPPORTED_OPERATION\", { operation: \"call\" });\n      const tx = await populateTransaction2(...args);\n      let result = \"0x\";\n      try {\n        result = await runner.call(tx);\n      } catch (error) {\n        if (isCallException(error) && error.data) {\n          throw contract.interface.makeError(error.data, tx);\n        }\n        throw error;\n      }\n      const fragment = getFragment(...args);\n      return contract.interface.decodeFunctionResult(fragment, result);\n    };\n    const method = async (...args) => {\n      const fragment = getFragment(...args);\n      if (fragment.constant) {\n        return await staticCall(...args);\n      }\n      return await send(...args);\n    };\n    defineProperties(method, {\n      name: contract.interface.getFunctionName(key2),\n      _contract: contract,\n      _key: key2,\n      getFragment,\n      estimateGas,\n      populateTransaction: populateTransaction2,\n      send,\n      staticCall,\n      staticCallResult\n    });\n    Object.defineProperty(method, \"fragment\", {\n      configurable: false,\n      enumerable: true,\n      get: () => {\n        const fragment = contract.interface.getFunction(key2);\n        assert3(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n          operation: \"fragment\",\n          info: { key: key2 }\n        });\n        return fragment;\n      }\n    });\n    return method;\n  }\n  function buildWrappedEvent(contract, key2) {\n    const getFragment = function(...args) {\n      const fragment = contract.interface.getEvent(key2, args);\n      assert3(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"fragment\",\n        info: { key: key2, args }\n      });\n      return fragment;\n    };\n    const method = function(...args) {\n      return new PreparedTopicFilter(contract, getFragment(...args), args);\n    };\n    defineProperties(method, {\n      name: contract.interface.getEventName(key2),\n      _contract: contract,\n      _key: key2,\n      getFragment\n    });\n    Object.defineProperty(method, \"fragment\", {\n      configurable: false,\n      enumerable: true,\n      get: () => {\n        const fragment = contract.interface.getEvent(key2);\n        assert3(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n          operation: \"fragment\",\n          info: { key: key2 }\n        });\n        return fragment;\n      }\n    });\n    return method;\n  }\n  function setInternal(contract, values) {\n    internalValues.set(contract[internal2], values);\n  }\n  function getInternal(contract) {\n    return internalValues.get(contract[internal2]);\n  }\n  function isDeferred(value) {\n    return value && typeof value === \"object\" && \"getTopicFilter\" in value && typeof value.getTopicFilter === \"function\" && value.fragment;\n  }\n  async function getSubInfo(contract, event) {\n    let topics;\n    let fragment = null;\n    if (Array.isArray(event)) {\n      const topicHashify = function(name) {\n        if (isHexString2(name, 32)) {\n          return name;\n        }\n        const fragment2 = contract.interface.getEvent(name);\n        assertArgument(fragment2, \"unknown fragment\", \"name\", name);\n        return fragment2.topicHash;\n      };\n      topics = event.map((e) => {\n        if (e == null) {\n          return null;\n        }\n        if (Array.isArray(e)) {\n          return e.map(topicHashify);\n        }\n        return topicHashify(e);\n      });\n    } else if (event === \"*\") {\n      topics = [null];\n    } else if (typeof event === \"string\") {\n      if (isHexString2(event, 32)) {\n        topics = [event];\n      } else {\n        fragment = contract.interface.getEvent(event);\n        assertArgument(fragment, \"unknown fragment\", \"event\", event);\n        topics = [fragment.topicHash];\n      }\n    } else if (isDeferred(event)) {\n      topics = await event.getTopicFilter();\n    } else if (\"fragment\" in event) {\n      fragment = event.fragment;\n      topics = [fragment.topicHash];\n    } else {\n      assertArgument(false, \"unknown event name\", \"event\", event);\n    }\n    topics = topics.map((t) => {\n      if (t == null) {\n        return null;\n      }\n      if (Array.isArray(t)) {\n        const items = Array.from(new Set(t.map((t2) => t2.toLowerCase())).values());\n        if (items.length === 1) {\n          return items[0];\n        }\n        items.sort();\n        return items;\n      }\n      return t.toLowerCase();\n    });\n    const tag = topics.map((t) => {\n      if (t == null) {\n        return \"null\";\n      }\n      if (Array.isArray(t)) {\n        return t.join(\"|\");\n      }\n      return t;\n    }).join(\"&\");\n    return { fragment, tag, topics };\n  }\n  async function hasSub(contract, event) {\n    const { subs } = getInternal(contract);\n    return subs.get((await getSubInfo(contract, event)).tag) || null;\n  }\n  async function getSub(contract, operation, event) {\n    const provider = getProvider(contract.runner);\n    assert3(provider, \"contract runner does not support subscribing\", \"UNSUPPORTED_OPERATION\", { operation });\n    const { fragment, tag, topics } = await getSubInfo(contract, event);\n    const { addr, subs } = getInternal(contract);\n    let sub = subs.get(tag);\n    if (!sub) {\n      const address = addr ? addr : contract;\n      const filter = { address, topics };\n      const listener = (log) => {\n        let foundFragment = fragment;\n        if (foundFragment == null) {\n          try {\n            foundFragment = contract.interface.getEvent(log.topics[0]);\n          } catch (error) {\n          }\n        }\n        if (foundFragment) {\n          const _foundFragment = foundFragment;\n          const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];\n          emit2(contract, event, args, (listener2) => {\n            return new ContractEventPayload(contract, listener2, event, _foundFragment, log);\n          });\n        } else {\n          emit2(contract, event, [], (listener2) => {\n            return new ContractUnknownEventPayload(contract, listener2, event, log);\n          });\n        }\n      };\n      let starting = [];\n      const start = () => {\n        if (starting.length) {\n          return;\n        }\n        starting.push(provider.on(filter, listener));\n      };\n      const stop = async () => {\n        if (starting.length == 0) {\n          return;\n        }\n        let started = starting;\n        starting = [];\n        await Promise.all(started);\n        provider.off(filter, listener);\n      };\n      sub = { tag, listeners: [], start, stop };\n      subs.set(tag, sub);\n    }\n    return sub;\n  }\n  async function _emit(contract, event, args, payloadFunc) {\n    await lastEmit;\n    const sub = await hasSub(contract, event);\n    if (!sub) {\n      return false;\n    }\n    const count = sub.listeners.length;\n    sub.listeners = sub.listeners.filter(({ listener, once: once2 }) => {\n      const passArgs = Array.from(args);\n      if (payloadFunc) {\n        passArgs.push(payloadFunc(once2 ? null : listener));\n      }\n      try {\n        listener.call(contract, ...passArgs);\n      } catch (error) {\n      }\n      return !once2;\n    });\n    if (sub.listeners.length === 0) {\n      sub.stop();\n      getInternal(contract).subs.delete(sub.tag);\n    }\n    return count > 0;\n  }\n  async function emit2(contract, event, args, payloadFunc) {\n    try {\n      await lastEmit;\n    } catch (error) {\n    }\n    const resultPromise = _emit(contract, event, args, payloadFunc);\n    lastEmit = resultPromise;\n    return await resultPromise;\n  }\n  function _ContractBase() {\n    return BaseContract2;\n  }\n  var BN_09, PreparedTopicFilter, internal2, internalValues, lastEmit, passProperties2, BaseContract2, Contract2;\n  var init_contract = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/contract/contract.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_abi();\n      init_address3();\n      init_provider();\n      init_utils3();\n      init_wrappers();\n      BN_09 = BigInt(0);\n      PreparedTopicFilter = class {\n        #filter;\n        fragment;\n        constructor(contract, fragment, args) {\n          defineProperties(this, { fragment });\n          if (fragment.inputs.length < args.length) {\n            throw new Error(\"too many arguments\");\n          }\n          const runner = getRunner2(contract.runner, \"resolveName\");\n          const resolver = canResolve(runner) ? runner : null;\n          this.#filter = async function() {\n            const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {\n              const arg = args[index];\n              if (arg == null) {\n                return null;\n              }\n              return param.walkAsync(args[index], (type, value) => {\n                if (type === \"address\") {\n                  if (Array.isArray(value)) {\n                    return Promise.all(value.map((v) => resolveAddress(v, resolver)));\n                  }\n                  return resolveAddress(value, resolver);\n                }\n                return value;\n              });\n            }));\n            return contract.interface.encodeFilterTopics(fragment, resolvedArgs);\n          }();\n        }\n        getTopicFilter() {\n          return this.#filter;\n        }\n      };\n      internal2 = Symbol.for(\"_ethersInternal_contract\");\n      internalValues = /* @__PURE__ */ new WeakMap();\n      lastEmit = Promise.resolve();\n      passProperties2 = [\"then\"];\n      BaseContract2 = class _BaseContract {\n        /**\n         *  The target to connect to.\n         *\n         *  This can be an address, ENS name or any [[Addressable]], such as\n         *  another contract. To get the resovled address, use the ``getAddress``\n         *  method.\n         */\n        target;\n        /**\n         *  The contract Interface.\n         */\n        interface;\n        /**\n         *  The connected runner. This is generally a [[Provider]] or a\n         *  [[Signer]], which dictates what operations are supported.\n         *\n         *  For example, a **Contract** connected to a [[Provider]] may\n         *  only execute read-only operations.\n         */\n        runner;\n        /**\n         *  All the Events available on this contract.\n         */\n        filters;\n        /**\n         *  @_ignore:\n         */\n        [internal2];\n        /**\n         *  The fallback or receive function if any.\n         */\n        fallback;\n        /**\n         *  Creates a new contract connected to %%target%% with the %%abi%% and\n         *  optionally connected to a %%runner%% to perform operations on behalf\n         *  of.\n         */\n        constructor(target, abi, runner, _deployTx) {\n          assertArgument(typeof target === \"string\" || isAddressable(target), \"invalid value for Contract target\", \"target\", target);\n          if (runner == null) {\n            runner = null;\n          }\n          const iface = Interface2.from(abi);\n          defineProperties(this, { target, runner, interface: iface });\n          Object.defineProperty(this, internal2, { value: {} });\n          let addrPromise;\n          let addr = null;\n          let deployTx = null;\n          if (_deployTx) {\n            const provider = getProvider(runner);\n            deployTx = new ContractTransactionResponse(this.interface, provider, _deployTx);\n          }\n          let subs = /* @__PURE__ */ new Map();\n          if (typeof target === \"string\") {\n            if (isHexString2(target)) {\n              addr = target;\n              addrPromise = Promise.resolve(target);\n            } else {\n              const resolver = getRunner2(runner, \"resolveName\");\n              if (!canResolve(resolver)) {\n                throw makeError(\"contract runner does not support name resolution\", \"UNSUPPORTED_OPERATION\", {\n                  operation: \"resolveName\"\n                });\n              }\n              addrPromise = resolver.resolveName(target).then((addr2) => {\n                if (addr2 == null) {\n                  throw makeError(\"an ENS name used for a contract target must be correctly configured\", \"UNCONFIGURED_NAME\", {\n                    value: target\n                  });\n                }\n                getInternal(this).addr = addr2;\n                return addr2;\n              });\n            }\n          } else {\n            addrPromise = target.getAddress().then((addr2) => {\n              if (addr2 == null) {\n                throw new Error(\"TODO\");\n              }\n              getInternal(this).addr = addr2;\n              return addr2;\n            });\n          }\n          setInternal(this, { addrPromise, addr, deployTx, subs });\n          const filters = new Proxy({}, {\n            get: (target2, prop, receiver) => {\n              if (typeof prop === \"symbol\" || passProperties2.indexOf(prop) >= 0) {\n                return Reflect.get(target2, prop, receiver);\n              }\n              try {\n                return this.getEvent(prop);\n              } catch (error) {\n                if (!isError(error, \"INVALID_ARGUMENT\") || error.argument !== \"key\") {\n                  throw error;\n                }\n              }\n              return void 0;\n            },\n            has: (target2, prop) => {\n              if (passProperties2.indexOf(prop) >= 0) {\n                return Reflect.has(target2, prop);\n              }\n              return Reflect.has(target2, prop) || this.interface.hasEvent(String(prop));\n            }\n          });\n          defineProperties(this, { filters });\n          defineProperties(this, {\n            fallback: iface.receive || iface.fallback ? buildWrappedFallback(this) : null\n          });\n          return new Proxy(this, {\n            get: (target2, prop, receiver) => {\n              if (typeof prop === \"symbol\" || prop in target2 || passProperties2.indexOf(prop) >= 0) {\n                return Reflect.get(target2, prop, receiver);\n              }\n              try {\n                return target2.getFunction(prop);\n              } catch (error) {\n                if (!isError(error, \"INVALID_ARGUMENT\") || error.argument !== \"key\") {\n                  throw error;\n                }\n              }\n              return void 0;\n            },\n            has: (target2, prop) => {\n              if (typeof prop === \"symbol\" || prop in target2 || passProperties2.indexOf(prop) >= 0) {\n                return Reflect.has(target2, prop);\n              }\n              return target2.interface.hasFunction(prop);\n            }\n          });\n        }\n        /**\n         *  Return a new Contract instance with the same target and ABI, but\n         *  a different %%runner%%.\n         */\n        connect(runner) {\n          return new _BaseContract(this.target, this.interface, runner);\n        }\n        /**\n         *  Return a new Contract instance with the same ABI and runner, but\n         *  a different %%target%%.\n         */\n        attach(target) {\n          return new _BaseContract(target, this.interface, this.runner);\n        }\n        /**\n         *  Return the resolved address of this Contract.\n         */\n        async getAddress() {\n          return await getInternal(this).addrPromise;\n        }\n        /**\n         *  Return the deployed bytecode or null if no bytecode is found.\n         */\n        async getDeployedCode() {\n          const provider = getProvider(this.runner);\n          assert3(provider, \"runner does not support .provider\", \"UNSUPPORTED_OPERATION\", { operation: \"getDeployedCode\" });\n          const code = await provider.getCode(await this.getAddress());\n          if (code === \"0x\") {\n            return null;\n          }\n          return code;\n        }\n        /**\n         *  Resolve to this Contract once the bytecode has been deployed, or\n         *  resolve immediately if already deployed.\n         */\n        async waitForDeployment() {\n          const deployTx = this.deploymentTransaction();\n          if (deployTx) {\n            await deployTx.wait();\n            return this;\n          }\n          const code = await this.getDeployedCode();\n          if (code != null) {\n            return this;\n          }\n          const provider = getProvider(this.runner);\n          assert3(provider != null, \"contract runner does not support .provider\", \"UNSUPPORTED_OPERATION\", { operation: \"waitForDeployment\" });\n          return new Promise((resolve, reject) => {\n            const checkCode = async () => {\n              try {\n                const code2 = await this.getDeployedCode();\n                if (code2 != null) {\n                  return resolve(this);\n                }\n                provider.once(\"block\", checkCode);\n              } catch (error) {\n                reject(error);\n              }\n            };\n            checkCode();\n          });\n        }\n        /**\n         *  Return the transaction used to deploy this contract.\n         *\n         *  This is only available if this instance was returned from a\n         *  [[ContractFactory]].\n         */\n        deploymentTransaction() {\n          return getInternal(this).deployTx;\n        }\n        /**\n         *  Return the function for a given name. This is useful when a contract\n         *  method name conflicts with a JavaScript name such as ``prototype`` or\n         *  when using a Contract programatically.\n         */\n        getFunction(key2) {\n          if (typeof key2 !== \"string\") {\n            key2 = key2.format();\n          }\n          const func = buildWrappedMethod(this, key2);\n          return func;\n        }\n        /**\n         *  Return the event for a given name. This is useful when a contract\n         *  event name conflicts with a JavaScript name such as ``prototype`` or\n         *  when using a Contract programatically.\n         */\n        getEvent(key2) {\n          if (typeof key2 !== \"string\") {\n            key2 = key2.format();\n          }\n          return buildWrappedEvent(this, key2);\n        }\n        /**\n         *  @_ignore:\n         */\n        async queryTransaction(hash4) {\n          throw new Error(\"@TODO\");\n        }\n        /*\n            // @TODO: this is a non-backwards compatible change, but will be added\n            //        in v7 and in a potential SmartContract class in an upcoming\n            //        v6 release\n            async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {\n                const provider = getProvider(this.runner);\n                assert(provider, \"contract runner does not have a provider\",\n                    \"UNSUPPORTED_OPERATION\", { operation: \"queryTransaction\" });\n        \n                const receipt = await provider.getTransactionReceipt(hash);\n                if (receipt == null) { return null; }\n        \n                return new ContractTransactionReceipt(this.interface, provider, receipt);\n            }\n            */\n        /**\n         *  Provide historic access to event data for %%event%% in the range\n         *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``\"latest\"``)\n         *  inclusive.\n         */\n        async queryFilter(event, fromBlock, toBlock) {\n          if (fromBlock == null) {\n            fromBlock = 0;\n          }\n          if (toBlock == null) {\n            toBlock = \"latest\";\n          }\n          const { addr, addrPromise } = getInternal(this);\n          const address = addr ? addr : await addrPromise;\n          const { fragment, topics } = await getSubInfo(this, event);\n          const filter = { address, topics, fromBlock, toBlock };\n          const provider = getProvider(this.runner);\n          assert3(provider, \"contract runner does not have a provider\", \"UNSUPPORTED_OPERATION\", { operation: \"queryFilter\" });\n          return (await provider.getLogs(filter)).map((log) => {\n            let foundFragment = fragment;\n            if (foundFragment == null) {\n              try {\n                foundFragment = this.interface.getEvent(log.topics[0]);\n              } catch (error) {\n              }\n            }\n            if (foundFragment) {\n              try {\n                return new EventLog(log, this.interface, foundFragment);\n              } catch (error) {\n                return new UndecodedEventLog(log, error);\n              }\n            }\n            return new Log(log, provider);\n          });\n        }\n        /**\n         *  Add an event %%listener%% for the %%event%%.\n         */\n        async on(event, listener) {\n          const sub = await getSub(this, \"on\", event);\n          sub.listeners.push({ listener, once: false });\n          sub.start();\n          return this;\n        }\n        /**\n         *  Add an event %%listener%% for the %%event%%, but remove the listener\n         *  after it is fired once.\n         */\n        async once(event, listener) {\n          const sub = await getSub(this, \"once\", event);\n          sub.listeners.push({ listener, once: true });\n          sub.start();\n          return this;\n        }\n        /**\n         *  Emit an %%event%% calling all listeners with %%args%%.\n         *\n         *  Resolves to ``true`` if any listeners were called.\n         */\n        async emit(event, ...args) {\n          return await emit2(this, event, args, null);\n        }\n        /**\n         *  Resolves to the number of listeners of %%event%% or the total number\n         *  of listeners if unspecified.\n         */\n        async listenerCount(event) {\n          if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) {\n              return 0;\n            }\n            return sub.listeners.length;\n          }\n          const { subs } = getInternal(this);\n          let total = 0;\n          for (const { listeners: listeners2 } of subs.values()) {\n            total += listeners2.length;\n          }\n          return total;\n        }\n        /**\n         *  Resolves to the listeners subscribed to %%event%% or all listeners\n         *  if unspecified.\n         */\n        async listeners(event) {\n          if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) {\n              return [];\n            }\n            return sub.listeners.map(({ listener }) => listener);\n          }\n          const { subs } = getInternal(this);\n          let result = [];\n          for (const { listeners: listeners2 } of subs.values()) {\n            result = result.concat(listeners2.map(({ listener }) => listener));\n          }\n          return result;\n        }\n        /**\n         *  Remove the %%listener%% from the listeners for %%event%% or remove\n         *  all listeners if unspecified.\n         */\n        async off(event, listener) {\n          const sub = await hasSub(this, event);\n          if (!sub) {\n            return this;\n          }\n          if (listener) {\n            const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);\n            if (index >= 0) {\n              sub.listeners.splice(index, 1);\n            }\n          }\n          if (listener == null || sub.listeners.length === 0) {\n            sub.stop();\n            getInternal(this).subs.delete(sub.tag);\n          }\n          return this;\n        }\n        /**\n         *  Remove all the listeners for %%event%% or remove all listeners if\n         *  unspecified.\n         */\n        async removeAllListeners(event) {\n          if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) {\n              return this;\n            }\n            sub.stop();\n            getInternal(this).subs.delete(sub.tag);\n          } else {\n            const { subs } = getInternal(this);\n            for (const { tag, stop } of subs.values()) {\n              stop();\n              subs.delete(tag);\n            }\n          }\n          return this;\n        }\n        /**\n         *  Alias for [on].\n         */\n        async addListener(event, listener) {\n          return await this.on(event, listener);\n        }\n        /**\n         *  Alias for [off].\n         */\n        async removeListener(event, listener) {\n          return await this.off(event, listener);\n        }\n        /**\n         *  Create a new Class for the %%abi%%.\n         */\n        static buildClass(abi) {\n          class CustomContract extends _BaseContract {\n            constructor(address, runner = null) {\n              super(address, abi, runner);\n            }\n          }\n          return CustomContract;\n        }\n        /**\n         *  Create a new BaseContract with a specified Interface.\n         */\n        static from(target, abi, runner) {\n          if (runner == null) {\n            runner = null;\n          }\n          const contract = new this(target, abi, runner);\n          return contract;\n        }\n      };\n      Contract2 = class extends _ContractBase() {\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/contract/index.js\n  var init_contract2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/contract/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_contract();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/ens-resolver.js\n  function getIpfsLink2(link) {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n      link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n      link = link.substring(7);\n    } else {\n      assertArgument(false, \"unsupported IPFS format\", \"link\", link);\n    }\n    return `https://gateway.ipfs.io/ipfs/${link}`;\n  }\n  var MulticoinProviderPlugin, matcherIpfs2, matchers2, EnsResolver;\n  var init_ens_resolver = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/ens-resolver.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_address3();\n      init_constants2();\n      init_contract2();\n      init_hash();\n      init_utils3();\n      MulticoinProviderPlugin = class {\n        /**\n         *  The name.\n         */\n        name;\n        /**\n         *  Creates a new **MulticoinProviderPluing** for %%name%%.\n         */\n        constructor(name) {\n          defineProperties(this, { name });\n        }\n        connect(proivder) {\n          return this;\n        }\n        /**\n         *  Returns ``true`` if %%coinType%% is supported by this plugin.\n         */\n        supportsCoinType(coinType) {\n          return false;\n        }\n        /**\n         *  Resolves to the encoded %%address%% for %%coinType%%.\n         */\n        async encodeAddress(coinType, address) {\n          throw new Error(\"unsupported coin\");\n        }\n        /**\n         *  Resolves to the decoded %%data%% for %%coinType%%.\n         */\n        async decodeAddress(coinType, data) {\n          throw new Error(\"unsupported coin\");\n        }\n      };\n      matcherIpfs2 = new RegExp(\"^(ipfs)://(.*)$\", \"i\");\n      matchers2 = [\n        new RegExp(\"^(https)://(.*)$\", \"i\"),\n        new RegExp(\"^(data):(.*)$\", \"i\"),\n        matcherIpfs2,\n        new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")\n      ];\n      EnsResolver = class _EnsResolver {\n        /**\n         *  The connected provider.\n         */\n        provider;\n        /**\n         *  The address of the resolver.\n         */\n        address;\n        /**\n         *  The name this resolver was resolved against.\n         */\n        name;\n        // For EIP-2544 names, the ancestor that provided the resolver\n        #supports2544;\n        #resolver;\n        constructor(provider, address, name) {\n          defineProperties(this, { provider, address, name });\n          this.#supports2544 = null;\n          this.#resolver = new Contract2(address, [\n            \"function supportsInterface(bytes4) view returns (bool)\",\n            \"function resolve(bytes, bytes) view returns (bytes)\",\n            \"function addr(bytes32) view returns (address)\",\n            \"function addr(bytes32, uint) view returns (bytes)\",\n            \"function text(bytes32, string) view returns (string)\",\n            \"function contenthash(bytes32) view returns (bytes)\"\n          ], provider);\n        }\n        /**\n         *  Resolves to true if the resolver supports wildcard resolution.\n         */\n        async supportsWildcard() {\n          if (this.#supports2544 == null) {\n            this.#supports2544 = (async () => {\n              try {\n                return await this.#resolver.supportsInterface(\"0x9061b923\");\n              } catch (error) {\n                if (isError(error, \"CALL_EXCEPTION\")) {\n                  return false;\n                }\n                this.#supports2544 = null;\n                throw error;\n              }\n            })();\n          }\n          return await this.#supports2544;\n        }\n        async #fetch(funcName, params) {\n          params = (params || []).slice();\n          const iface = this.#resolver.interface;\n          params.unshift(namehash2(this.name));\n          let fragment = null;\n          if (await this.supportsWildcard()) {\n            fragment = iface.getFunction(funcName);\n            assert3(fragment, \"missing fragment\", \"UNKNOWN_ERROR\", {\n              info: { funcName }\n            });\n            params = [\n              dnsEncode2(this.name, 255),\n              iface.encodeFunctionData(fragment, params)\n            ];\n            funcName = \"resolve(bytes,bytes)\";\n          }\n          params.push({\n            enableCcipRead: true\n          });\n          try {\n            const result = await this.#resolver[funcName](...params);\n            if (fragment) {\n              return iface.decodeFunctionResult(fragment, result)[0];\n            }\n            return result;\n          } catch (error) {\n            if (!isError(error, \"CALL_EXCEPTION\")) {\n              throw error;\n            }\n          }\n          return null;\n        }\n        /**\n         *  Resolves to the address for %%coinType%% or null if the\n         *  provided %%coinType%% has not been configured.\n         */\n        async getAddress(coinType) {\n          if (coinType == null) {\n            coinType = 60;\n          }\n          if (coinType === 60) {\n            try {\n              const result = await this.#fetch(\"addr(bytes32)\");\n              if (result == null || result === ZeroAddress) {\n                return null;\n              }\n              return result;\n            } catch (error) {\n              if (isError(error, \"CALL_EXCEPTION\")) {\n                return null;\n              }\n              throw error;\n            }\n          }\n          if (coinType >= 0 && coinType < 2147483648) {\n            let ethCoinType = coinType + 2147483648;\n            const data2 = await this.#fetch(\"addr(bytes32,uint)\", [ethCoinType]);\n            if (isHexString2(data2, 20)) {\n              return getAddress2(data2);\n            }\n          }\n          let coinPlugin = null;\n          for (const plugin of this.provider.plugins) {\n            if (!(plugin instanceof MulticoinProviderPlugin)) {\n              continue;\n            }\n            if (plugin.supportsCoinType(coinType)) {\n              coinPlugin = plugin;\n              break;\n            }\n          }\n          if (coinPlugin == null) {\n            return null;\n          }\n          const data = await this.#fetch(\"addr(bytes32,uint)\", [coinType]);\n          if (data == null || data === \"0x\") {\n            return null;\n          }\n          const address = await coinPlugin.decodeAddress(coinType, data);\n          if (address != null) {\n            return address;\n          }\n          assert3(false, `invalid coin data`, \"UNSUPPORTED_OPERATION\", {\n            operation: `getAddress(${coinType})`,\n            info: { coinType, data }\n          });\n        }\n        /**\n         *  Resolves to the EIP-634 text record for %%key%%, or ``null``\n         *  if unconfigured.\n         */\n        async getText(key2) {\n          const data = await this.#fetch(\"text(bytes32,string)\", [key2]);\n          if (data == null || data === \"0x\") {\n            return null;\n          }\n          return data;\n        }\n        /**\n         *  Rsolves to the content-hash or ``null`` if unconfigured.\n         */\n        async getContentHash() {\n          const data = await this.#fetch(\"contenthash(bytes32)\");\n          if (data == null || data === \"0x\") {\n            return null;\n          }\n          const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n          if (ipfs) {\n            const scheme = ipfs[1] === \"e3010170\" ? \"ipfs\" : \"ipns\";\n            const length = parseInt(ipfs[4], 16);\n            if (ipfs[5].length === length * 2) {\n              return `${scheme}://${encodeBase58(\"0x\" + ipfs[2])}`;\n            }\n          }\n          const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n          if (swarm && swarm[1].length === 64) {\n            return `bzz://${swarm[1]}`;\n          }\n          assert3(false, `invalid or unsupported content hash data`, \"UNSUPPORTED_OPERATION\", {\n            operation: \"getContentHash()\",\n            info: { data }\n          });\n        }\n        /**\n         *  Resolves to the avatar url or ``null`` if the avatar is either\n         *  unconfigured or incorrectly configured (e.g. references an NFT\n         *  not owned by the address).\n         *\n         *  If diagnosing issues with configurations, the [[_getAvatar]]\n         *  method may be useful.\n         */\n        async getAvatar() {\n          const avatar = await this._getAvatar();\n          return avatar.url;\n        }\n        /**\n         *  When resolving an avatar, there are many steps involved, such\n         *  fetching metadata and possibly validating ownership of an\n         *  NFT.\n         *\n         *  This method can be used to examine each step and the value it\n         *  was working from.\n         */\n        async _getAvatar() {\n          const linkage = [{ type: \"name\", value: this.name }];\n          try {\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) {\n              linkage.push({ type: \"!avatar\", value: \"\" });\n              return { url: null, linkage };\n            }\n            linkage.push({ type: \"avatar\", value: avatar });\n            for (let i = 0; i < matchers2.length; i++) {\n              const match = avatar.match(matchers2[i]);\n              if (match == null) {\n                continue;\n              }\n              const scheme = match[1].toLowerCase();\n              switch (scheme) {\n                case \"https\":\n                case \"data\":\n                  linkage.push({ type: \"url\", value: avatar });\n                  return { linkage, url: avatar };\n                case \"ipfs\": {\n                  const url = getIpfsLink2(avatar);\n                  linkage.push({ type: \"ipfs\", value: avatar });\n                  linkage.push({ type: \"url\", value: url });\n                  return { linkage, url };\n                }\n                case \"erc721\":\n                case \"erc1155\": {\n                  const selector = scheme === \"erc721\" ? \"tokenURI(uint256)\" : \"uri(uint256)\";\n                  linkage.push({ type: scheme, value: avatar });\n                  const owner = await this.getAddress();\n                  if (owner == null) {\n                    linkage.push({ type: \"!owner\", value: \"\" });\n                    return { url: null, linkage };\n                  }\n                  const comps = (match[2] || \"\").split(\"/\");\n                  if (comps.length !== 2) {\n                    linkage.push({ type: `!${scheme}caip`, value: match[2] || \"\" });\n                    return { url: null, linkage };\n                  }\n                  const tokenId = comps[1];\n                  const contract = new Contract2(comps[0], [\n                    // ERC-721\n                    \"function tokenURI(uint) view returns (string)\",\n                    \"function ownerOf(uint) view returns (address)\",\n                    // ERC-1155\n                    \"function uri(uint) view returns (string)\",\n                    \"function balanceOf(address, uint256) view returns (uint)\"\n                  ], this.provider);\n                  if (scheme === \"erc721\") {\n                    const tokenOwner = await contract.ownerOf(tokenId);\n                    if (owner !== tokenOwner) {\n                      linkage.push({ type: \"!owner\", value: tokenOwner });\n                      return { url: null, linkage };\n                    }\n                    linkage.push({ type: \"owner\", value: tokenOwner });\n                  } else if (scheme === \"erc1155\") {\n                    const balance = await contract.balanceOf(owner, tokenId);\n                    if (!balance) {\n                      linkage.push({ type: \"!balance\", value: \"0\" });\n                      return { url: null, linkage };\n                    }\n                    linkage.push({ type: \"balance\", value: balance.toString() });\n                  }\n                  let metadataUrl = await contract[selector](tokenId);\n                  if (metadataUrl == null || metadataUrl === \"0x\") {\n                    linkage.push({ type: \"!metadata-url\", value: \"\" });\n                    return { url: null, linkage };\n                  }\n                  linkage.push({ type: \"metadata-url-base\", value: metadataUrl });\n                  if (scheme === \"erc1155\") {\n                    metadataUrl = metadataUrl.replace(\"{id}\", toBeHex(tokenId, 32).substring(2));\n                    linkage.push({ type: \"metadata-url-expanded\", value: metadataUrl });\n                  }\n                  if (metadataUrl.match(/^ipfs:/i)) {\n                    metadataUrl = getIpfsLink2(metadataUrl);\n                  }\n                  linkage.push({ type: \"metadata-url\", value: metadataUrl });\n                  let metadata = {};\n                  const response = await new FetchRequest(metadataUrl).send();\n                  response.assertOk();\n                  try {\n                    metadata = response.bodyJson;\n                  } catch (error) {\n                    try {\n                      linkage.push({ type: \"!metadata\", value: response.bodyText });\n                    } catch (error2) {\n                      const bytes3 = response.body;\n                      if (bytes3) {\n                        linkage.push({ type: \"!metadata\", value: hexlify2(bytes3) });\n                      }\n                      return { url: null, linkage };\n                    }\n                    return { url: null, linkage };\n                  }\n                  if (!metadata) {\n                    linkage.push({ type: \"!metadata\", value: \"\" });\n                    return { url: null, linkage };\n                  }\n                  linkage.push({ type: \"metadata\", value: JSON.stringify(metadata) });\n                  let imageUrl = metadata.image;\n                  if (typeof imageUrl !== \"string\") {\n                    linkage.push({ type: \"!imageUrl\", value: \"\" });\n                    return { url: null, linkage };\n                  }\n                  if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                  } else {\n                    const ipfs = imageUrl.match(matcherIpfs2);\n                    if (ipfs == null) {\n                      linkage.push({ type: \"!imageUrl-ipfs\", value: imageUrl });\n                      return { url: null, linkage };\n                    }\n                    linkage.push({ type: \"imageUrl-ipfs\", value: imageUrl });\n                    imageUrl = getIpfsLink2(imageUrl);\n                  }\n                  linkage.push({ type: \"url\", value: imageUrl });\n                  return { linkage, url: imageUrl };\n                }\n              }\n            }\n          } catch (error) {\n          }\n          return { linkage, url: null };\n        }\n        static async getEnsAddress(provider) {\n          const network = await provider.getNetwork();\n          const ensPlugin = network.getPlugin(\"org.ethers.plugins.network.Ens\");\n          assert3(ensPlugin, \"network does not support ENS\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"getEnsAddress\",\n            info: { network }\n          });\n          return ensPlugin.address;\n        }\n        static async #getResolver(provider, name) {\n          const ensAddr = await _EnsResolver.getEnsAddress(provider);\n          try {\n            const contract = new Contract2(ensAddr, [\n              \"function resolver(bytes32) view returns (address)\"\n            ], provider);\n            const addr = await contract.resolver(namehash2(name), {\n              enableCcipRead: true\n            });\n            if (addr === ZeroAddress) {\n              return null;\n            }\n            return addr;\n          } catch (error) {\n            throw error;\n          }\n          return null;\n        }\n        /**\n         *  Resolve to the ENS resolver for %%name%% using %%provider%% or\n         *  ``null`` if unconfigured.\n         */\n        static async fromName(provider, name) {\n          let currentName = name;\n          while (true) {\n            if (currentName === \"\" || currentName === \".\") {\n              return null;\n            }\n            if (name !== \"eth\" && currentName === \"eth\") {\n              return null;\n            }\n            const addr = await _EnsResolver.#getResolver(provider, currentName);\n            if (addr != null) {\n              const resolver = new _EnsResolver(provider, addr, name);\n              if (currentName !== name && !await resolver.supportsWildcard()) {\n                return null;\n              }\n              return resolver;\n            }\n            currentName = currentName.split(\".\").slice(1).join(\".\");\n          }\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/format.js\n  function allowNull(format, nullValue) {\n    return function(value) {\n      if (value == null) {\n        return nullValue;\n      }\n      return format(value);\n    };\n  }\n  function arrayOf(format, allowNull2) {\n    return (array) => {\n      if (allowNull2 && array == null) {\n        return null;\n      }\n      if (!Array.isArray(array)) {\n        throw new Error(\"not an array\");\n      }\n      return array.map((i) => format(i));\n    };\n  }\n  function object(format, altNames) {\n    return (value) => {\n      const result = {};\n      for (const key2 in format) {\n        let srcKey = key2;\n        if (altNames && key2 in altNames && !(srcKey in value)) {\n          for (const altKey of altNames[key2]) {\n            if (altKey in value) {\n              srcKey = altKey;\n              break;\n            }\n          }\n        }\n        try {\n          const nv = format[key2](value[srcKey]);\n          if (nv !== void 0) {\n            result[key2] = nv;\n          }\n        } catch (error) {\n          const message = error instanceof Error ? error.message : \"not-an-error\";\n          assert3(false, `invalid value for value.${key2} (${message})`, \"BAD_DATA\", { value });\n        }\n      }\n      return result;\n    };\n  }\n  function formatBoolean(value) {\n    switch (value) {\n      case true:\n      case \"true\":\n        return true;\n      case false:\n      case \"false\":\n        return false;\n    }\n    assertArgument(false, `invalid boolean; ${JSON.stringify(value)}`, \"value\", value);\n  }\n  function formatData(value) {\n    assertArgument(isHexString2(value, true), \"invalid data\", \"value\", value);\n    return value;\n  }\n  function formatHash(value) {\n    assertArgument(isHexString2(value, 32), \"invalid hash\", \"value\", value);\n    return value;\n  }\n  function formatLog(value) {\n    return _formatLog(value);\n  }\n  function formatBlock(value) {\n    const result = _formatBlock(value);\n    result.transactions = value.transactions.map((tx) => {\n      if (typeof tx === \"string\") {\n        return tx;\n      }\n      return formatTransactionResponse(tx);\n    });\n    return result;\n  }\n  function formatReceiptLog(value) {\n    return _formatReceiptLog(value);\n  }\n  function formatTransactionReceipt(value) {\n    return _formatTransactionReceipt(value);\n  }\n  function formatTransactionResponse(value) {\n    if (value.to && getBigInt(value.to) === BN_010) {\n      value.to = \"0x0000000000000000000000000000000000000000\";\n    }\n    const result = object({\n      hash: formatHash,\n      // Some nodes do not return this, usually test nodes (like Ganache)\n      index: allowNull(getNumber, void 0),\n      type: (value2) => {\n        if (value2 === \"0x\" || value2 == null) {\n          return 0;\n        }\n        return getNumber(value2);\n      },\n      accessList: allowNull(accessListify2, null),\n      blobVersionedHashes: allowNull(arrayOf(formatHash, true), null),\n      authorizationList: allowNull(arrayOf((v) => {\n        let sig;\n        if (v.signature) {\n          sig = v.signature;\n        } else {\n          let yParity = v.yParity;\n          if (yParity === \"0x1b\") {\n            yParity = 0;\n          } else if (yParity === \"0x1c\") {\n            yParity = 1;\n          }\n          sig = Object.assign({}, v, { yParity });\n        }\n        return {\n          address: getAddress2(v.address),\n          chainId: getBigInt(v.chainId),\n          nonce: getBigInt(v.nonce),\n          signature: Signature2.from(sig)\n        };\n      }, false), null),\n      blockHash: allowNull(formatHash, null),\n      blockNumber: allowNull(getNumber, null),\n      transactionIndex: allowNull(getNumber, null),\n      from: getAddress2,\n      // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set\n      gasPrice: allowNull(getBigInt),\n      maxPriorityFeePerGas: allowNull(getBigInt),\n      maxFeePerGas: allowNull(getBigInt),\n      maxFeePerBlobGas: allowNull(getBigInt, null),\n      gasLimit: getBigInt,\n      to: allowNull(getAddress2, null),\n      value: getBigInt,\n      nonce: getNumber,\n      data: formatData,\n      creates: allowNull(getAddress2, null),\n      chainId: allowNull(getBigInt, null)\n    }, {\n      data: [\"input\"],\n      gasLimit: [\"gas\"],\n      index: [\"transactionIndex\"]\n    })(value);\n    if (result.to == null && result.creates == null) {\n      result.creates = getCreateAddress(result);\n    }\n    if ((value.type === 1 || value.type === 2) && value.accessList == null) {\n      result.accessList = [];\n    }\n    if (value.signature) {\n      result.signature = Signature2.from(value.signature);\n    } else {\n      result.signature = Signature2.from(value);\n    }\n    if (result.chainId == null) {\n      const chainId = result.signature.legacyChainId;\n      if (chainId != null) {\n        result.chainId = chainId;\n      }\n    }\n    if (result.blockHash && getBigInt(result.blockHash) === BN_010) {\n      result.blockHash = null;\n    }\n    return result;\n  }\n  var BN_010, _formatLog, _formatBlock, _formatReceiptLog, _formatTransactionReceipt;\n  var init_format = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/format.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_address3();\n      init_crypto2();\n      init_transaction2();\n      init_utils3();\n      BN_010 = BigInt(0);\n      _formatLog = object({\n        address: getAddress2,\n        blockHash: formatHash,\n        blockNumber: getNumber,\n        data: formatData,\n        index: getNumber,\n        removed: allowNull(formatBoolean, false),\n        topics: arrayOf(formatHash),\n        transactionHash: formatHash,\n        transactionIndex: getNumber\n      }, {\n        index: [\"logIndex\"]\n      });\n      _formatBlock = object({\n        hash: allowNull(formatHash),\n        parentHash: formatHash,\n        parentBeaconBlockRoot: allowNull(formatHash, null),\n        number: getNumber,\n        timestamp: getNumber,\n        nonce: allowNull(formatData),\n        difficulty: getBigInt,\n        gasLimit: getBigInt,\n        gasUsed: getBigInt,\n        stateRoot: allowNull(formatHash, null),\n        receiptsRoot: allowNull(formatHash, null),\n        blobGasUsed: allowNull(getBigInt, null),\n        excessBlobGas: allowNull(getBigInt, null),\n        miner: allowNull(getAddress2),\n        prevRandao: allowNull(formatHash, null),\n        extraData: formatData,\n        baseFeePerGas: allowNull(getBigInt)\n      }, {\n        prevRandao: [\"mixHash\"]\n      });\n      _formatReceiptLog = object({\n        transactionIndex: getNumber,\n        blockNumber: getNumber,\n        transactionHash: formatHash,\n        address: getAddress2,\n        topics: arrayOf(formatHash),\n        data: formatData,\n        index: getNumber,\n        blockHash: formatHash\n      }, {\n        index: [\"logIndex\"]\n      });\n      _formatTransactionReceipt = object({\n        to: allowNull(getAddress2, null),\n        from: allowNull(getAddress2, null),\n        contractAddress: allowNull(getAddress2, null),\n        // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n        index: getNumber,\n        root: allowNull(hexlify2),\n        gasUsed: getBigInt,\n        blobGasUsed: allowNull(getBigInt, null),\n        logsBloom: allowNull(formatData),\n        blockHash: formatHash,\n        hash: formatHash,\n        logs: arrayOf(formatReceiptLog),\n        blockNumber: getNumber,\n        //confirmations: allowNull(getNumber, null),\n        cumulativeGasUsed: getBigInt,\n        effectiveGasPrice: allowNull(getBigInt),\n        blobGasPrice: allowNull(getBigInt, null),\n        status: allowNull(getNumber),\n        type: allowNull(getNumber, 0)\n      }, {\n        effectiveGasPrice: [\"gasPrice\"],\n        hash: [\"transactionHash\"],\n        index: [\"transactionIndex\"]\n      });\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/plugins-network.js\n  var EnsAddress, NetworkPlugin, GasCostPlugin, EnsPlugin, FetchUrlFeeDataNetworkPlugin;\n  var init_plugins_network = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/plugins-network.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_properties();\n      init_utils3();\n      EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\n      NetworkPlugin = class _NetworkPlugin {\n        /**\n         *  The name of the plugin.\n         *\n         *  It is recommended to use reverse-domain-notation, which permits\n         *  unique names with a known authority as well as hierarchal entries.\n         */\n        name;\n        /**\n         *  Creates a new **NetworkPlugin**.\n         */\n        constructor(name) {\n          defineProperties(this, { name });\n        }\n        /**\n         *  Creates a copy of this plugin.\n         */\n        clone() {\n          return new _NetworkPlugin(this.name);\n        }\n      };\n      GasCostPlugin = class _GasCostPlugin extends NetworkPlugin {\n        /**\n         *  The block number to treat these values as valid from.\n         *\n         *  This allows a hardfork to have updated values included as well as\n         *  mulutiple hardforks to be supported.\n         */\n        effectiveBlock;\n        /**\n         *  The transactions base fee.\n         */\n        txBase;\n        /**\n         *  The fee for creating a new account.\n         */\n        txCreate;\n        /**\n         *  The fee per zero-byte in the data.\n         */\n        txDataZero;\n        /**\n         *  The fee per non-zero-byte in the data.\n         */\n        txDataNonzero;\n        /**\n         *  The fee per storage key in the [[link-eip-2930]] access list.\n         */\n        txAccessListStorageKey;\n        /**\n         *  The fee per address in the [[link-eip-2930]] access list.\n         */\n        txAccessListAddress;\n        /**\n         *  Creates a new GasCostPlugin from %%effectiveBlock%% until the\n         *  latest block or another GasCostPlugin supercedes that block number,\n         *  with the associated %%costs%%.\n         */\n        constructor(effectiveBlock, costs) {\n          if (effectiveBlock == null) {\n            effectiveBlock = 0;\n          }\n          super(`org.ethers.network.plugins.GasCost#${effectiveBlock || 0}`);\n          const props = { effectiveBlock };\n          function set(name, nullish) {\n            let value = (costs || {})[name];\n            if (value == null) {\n              value = nullish;\n            }\n            assertArgument(typeof value === \"number\", `invalud value for ${name}`, \"costs\", costs);\n            props[name] = value;\n          }\n          set(\"txBase\", 21e3);\n          set(\"txCreate\", 32e3);\n          set(\"txDataZero\", 4);\n          set(\"txDataNonzero\", 16);\n          set(\"txAccessListStorageKey\", 1900);\n          set(\"txAccessListAddress\", 2400);\n          defineProperties(this, props);\n        }\n        clone() {\n          return new _GasCostPlugin(this.effectiveBlock, this);\n        }\n      };\n      EnsPlugin = class _EnsPlugin extends NetworkPlugin {\n        /**\n         *  The ENS Registrty Contract address.\n         */\n        address;\n        /**\n         *  The chain ID that the ENS contract lives on.\n         */\n        targetNetwork;\n        /**\n         *  Creates a new **EnsPlugin** connected to %%address%% on the\n         *  %%targetNetwork%%. The default ENS address and mainnet is used\n         *  if unspecified.\n         */\n        constructor(address, targetNetwork) {\n          super(\"org.ethers.plugins.network.Ens\");\n          defineProperties(this, {\n            address: address || EnsAddress,\n            targetNetwork: targetNetwork == null ? 1 : targetNetwork\n          });\n        }\n        clone() {\n          return new _EnsPlugin(this.address, this.targetNetwork);\n        }\n      };\n      FetchUrlFeeDataNetworkPlugin = class extends NetworkPlugin {\n        #url;\n        #processFunc;\n        /**\n         *  The URL to initialize the FetchRequest with in %%processFunc%%.\n         */\n        get url() {\n          return this.#url;\n        }\n        /**\n         *  The callback to use when computing the FeeData.\n         */\n        get processFunc() {\n          return this.#processFunc;\n        }\n        /**\n         *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will\n         *  be used when computing the fee data for the network.\n         */\n        constructor(url, processFunc) {\n          super(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\n          this.#url = url;\n          this.#processFunc = processFunc;\n        }\n        // We are immutable, so we can serve as our own clone\n        clone() {\n          return this;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/network.js\n  function parseUnits2(_value, decimals) {\n    const value = String(_value);\n    if (!value.match(/^[0-9.]+$/)) {\n      throw new Error(`invalid gwei value: ${_value}`);\n    }\n    const comps = value.split(\".\");\n    if (comps.length === 1) {\n      comps.push(\"\");\n    }\n    if (comps.length !== 2) {\n      throw new Error(`invalid gwei value: ${_value}`);\n    }\n    while (comps[1].length < decimals) {\n      comps[1] += \"0\";\n    }\n    if (comps[1].length > 9) {\n      let frac = BigInt(comps[1].substring(0, 9));\n      if (!comps[1].substring(9).match(/^0+$/)) {\n        frac++;\n      }\n      comps[1] = frac.toString();\n    }\n    return BigInt(comps[0] + comps[1]);\n  }\n  function getGasStationPlugin(url) {\n    return new FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request) => {\n      request.setHeader(\"User-Agent\", \"ethers\");\n      let response;\n      try {\n        const [_response, _feeData] = await Promise.all([\n          request.send(),\n          fetchFeeData()\n        ]);\n        response = _response;\n        const payload = response.bodyJson.standard;\n        const feeData = {\n          gasPrice: _feeData.gasPrice,\n          maxFeePerGas: parseUnits2(payload.maxFee, 9),\n          maxPriorityFeePerGas: parseUnits2(payload.maxPriorityFee, 9)\n        };\n        return feeData;\n      } catch (error) {\n        assert3(false, `error encountered with polygon gas station (${JSON.stringify(request.url)})`, \"SERVER_ERROR\", { request, response, error });\n      }\n    });\n  }\n  function injectCommonNetworks() {\n    if (injected) {\n      return;\n    }\n    injected = true;\n    function registerEth(name, chainId, options) {\n      const func = function() {\n        const network = new Network(name, chainId);\n        if (options.ensNetwork != null) {\n          network.attachPlugin(new EnsPlugin(null, options.ensNetwork));\n        }\n        network.attachPlugin(new GasCostPlugin());\n        (options.plugins || []).forEach((plugin) => {\n          network.attachPlugin(plugin);\n        });\n        return network;\n      };\n      Network.register(name, func);\n      Network.register(chainId, func);\n      if (options.altNames) {\n        options.altNames.forEach((name2) => {\n          Network.register(name2, func);\n        });\n      }\n    }\n    registerEth(\"mainnet\", 1, { ensNetwork: 1, altNames: [\"homestead\"] });\n    registerEth(\"ropsten\", 3, { ensNetwork: 3 });\n    registerEth(\"rinkeby\", 4, { ensNetwork: 4 });\n    registerEth(\"goerli\", 5, { ensNetwork: 5 });\n    registerEth(\"kovan\", 42, { ensNetwork: 42 });\n    registerEth(\"sepolia\", 11155111, { ensNetwork: 11155111 });\n    registerEth(\"holesky\", 17e3, { ensNetwork: 17e3 });\n    registerEth(\"classic\", 61, {});\n    registerEth(\"classicKotti\", 6, {});\n    registerEth(\"arbitrum\", 42161, {\n      ensNetwork: 1\n    });\n    registerEth(\"arbitrum-goerli\", 421613, {});\n    registerEth(\"arbitrum-sepolia\", 421614, {});\n    registerEth(\"base\", 8453, { ensNetwork: 1 });\n    registerEth(\"base-goerli\", 84531, {});\n    registerEth(\"base-sepolia\", 84532, {});\n    registerEth(\"bnb\", 56, { ensNetwork: 1 });\n    registerEth(\"bnbt\", 97, {});\n    registerEth(\"linea\", 59144, { ensNetwork: 1 });\n    registerEth(\"linea-goerli\", 59140, {});\n    registerEth(\"linea-sepolia\", 59141, {});\n    registerEth(\"matic\", 137, {\n      ensNetwork: 1,\n      plugins: [\n        getGasStationPlugin(\"https://gasstation.polygon.technology/v2\")\n      ]\n    });\n    registerEth(\"matic-amoy\", 80002, {});\n    registerEth(\"matic-mumbai\", 80001, {\n      altNames: [\"maticMumbai\", \"maticmum\"],\n      plugins: [\n        getGasStationPlugin(\"https://gasstation-testnet.polygon.technology/v2\")\n      ]\n    });\n    registerEth(\"optimism\", 10, {\n      ensNetwork: 1,\n      plugins: []\n    });\n    registerEth(\"optimism-goerli\", 420, {});\n    registerEth(\"optimism-sepolia\", 11155420, {});\n    registerEth(\"xdai\", 100, { ensNetwork: 1 });\n  }\n  var Networks, Network, injected;\n  var init_network = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/network.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_transaction2();\n      init_utils3();\n      init_plugins_network();\n      Networks = /* @__PURE__ */ new Map();\n      Network = class _Network {\n        #name;\n        #chainId;\n        #plugins;\n        /**\n         *  Creates a new **Network** for %%name%% and %%chainId%%.\n         */\n        constructor(name, chainId) {\n          this.#name = name;\n          this.#chainId = getBigInt(chainId);\n          this.#plugins = /* @__PURE__ */ new Map();\n        }\n        /**\n         *  Returns a JSON-compatible representation of a Network.\n         */\n        toJSON() {\n          return { name: this.name, chainId: String(this.chainId) };\n        }\n        /**\n         *  The network common name.\n         *\n         *  This is the canonical name, as networks migh have multiple\n         *  names.\n         */\n        get name() {\n          return this.#name;\n        }\n        set name(value) {\n          this.#name = value;\n        }\n        /**\n         *  The network chain ID.\n         */\n        get chainId() {\n          return this.#chainId;\n        }\n        set chainId(value) {\n          this.#chainId = getBigInt(value, \"chainId\");\n        }\n        /**\n         *  Returns true if %%other%% matches this network. Any chain ID\n         *  must match, and if no chain ID is present, the name must match.\n         *\n         *  This method does not currently check for additional properties,\n         *  such as ENS address or plug-in compatibility.\n         */\n        matches(other) {\n          if (other == null) {\n            return false;\n          }\n          if (typeof other === \"string\") {\n            try {\n              return this.chainId === getBigInt(other);\n            } catch (error) {\n            }\n            return this.name === other;\n          }\n          if (typeof other === \"number\" || typeof other === \"bigint\") {\n            try {\n              return this.chainId === getBigInt(other);\n            } catch (error) {\n            }\n            return false;\n          }\n          if (typeof other === \"object\") {\n            if (other.chainId != null) {\n              try {\n                return this.chainId === getBigInt(other.chainId);\n              } catch (error) {\n              }\n              return false;\n            }\n            if (other.name != null) {\n              return this.name === other.name;\n            }\n            return false;\n          }\n          return false;\n        }\n        /**\n         *  Returns the list of plugins currently attached to this Network.\n         */\n        get plugins() {\n          return Array.from(this.#plugins.values());\n        }\n        /**\n         *  Attach a new %%plugin%% to this Network. The network name\n         *  must be unique, excluding any fragment.\n         */\n        attachPlugin(plugin) {\n          if (this.#plugins.get(plugin.name)) {\n            throw new Error(`cannot replace existing plugin: ${plugin.name} `);\n          }\n          this.#plugins.set(plugin.name, plugin.clone());\n          return this;\n        }\n        /**\n         *  Return the plugin, if any, matching %%name%% exactly. Plugins\n         *  with fragments will not be returned unless %%name%% includes\n         *  a fragment.\n         */\n        getPlugin(name) {\n          return this.#plugins.get(name) || null;\n        }\n        /**\n         *  Gets a list of all plugins that match %%name%%, with otr without\n         *  a fragment.\n         */\n        getPlugins(basename) {\n          return this.plugins.filter((p) => p.name.split(\"#\")[0] === basename);\n        }\n        /**\n         *  Create a copy of this Network.\n         */\n        clone() {\n          const clone = new _Network(this.name, this.chainId);\n          this.plugins.forEach((plugin) => {\n            clone.attachPlugin(plugin.clone());\n          });\n          return clone;\n        }\n        /**\n         *  Compute the intrinsic gas required for a transaction.\n         *\n         *  A GasCostPlugin can be attached to override the default\n         *  values.\n         */\n        computeIntrinsicGas(tx) {\n          const costs = this.getPlugin(\"org.ethers.plugins.network.GasCost\") || new GasCostPlugin();\n          let gas = costs.txBase;\n          if (tx.to == null) {\n            gas += costs.txCreate;\n          }\n          if (tx.data) {\n            for (let i = 2; i < tx.data.length; i += 2) {\n              if (tx.data.substring(i, i + 2) === \"00\") {\n                gas += costs.txDataZero;\n              } else {\n                gas += costs.txDataNonzero;\n              }\n            }\n          }\n          if (tx.accessList) {\n            const accessList = accessListify2(tx.accessList);\n            for (const addr in accessList) {\n              gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n            }\n          }\n          return gas;\n        }\n        /**\n         *  Returns a new Network for the %%network%% name or chainId.\n         */\n        static from(network) {\n          injectCommonNetworks();\n          if (network == null) {\n            return _Network.from(\"mainnet\");\n          }\n          if (typeof network === \"number\") {\n            network = BigInt(network);\n          }\n          if (typeof network === \"string\" || typeof network === \"bigint\") {\n            const networkFunc = Networks.get(network);\n            if (networkFunc) {\n              return networkFunc();\n            }\n            if (typeof network === \"bigint\") {\n              return new _Network(\"unknown\", network);\n            }\n            assertArgument(false, \"unknown network\", \"network\", network);\n          }\n          if (typeof network.clone === \"function\") {\n            const clone = network.clone();\n            return clone;\n          }\n          if (typeof network === \"object\") {\n            assertArgument(typeof network.name === \"string\" && typeof network.chainId === \"number\", \"invalid network object name or chainId\", \"network\", network);\n            const custom2 = new _Network(network.name, network.chainId);\n            if (network.ensAddress || network.ensNetwork != null) {\n              custom2.attachPlugin(new EnsPlugin(network.ensAddress, network.ensNetwork));\n            }\n            return custom2;\n          }\n          assertArgument(false, \"invalid network\", \"network\", network);\n        }\n        /**\n         *  Register %%nameOrChainId%% with a function which returns\n         *  an instance of a Network representing that chain.\n         */\n        static register(nameOrChainId, networkFunc) {\n          if (typeof nameOrChainId === \"number\") {\n            nameOrChainId = BigInt(nameOrChainId);\n          }\n          const existing = Networks.get(nameOrChainId);\n          if (existing) {\n            assertArgument(false, `conflicting network for ${JSON.stringify(existing.name)}`, \"nameOrChainId\", nameOrChainId);\n          }\n          Networks.set(nameOrChainId, networkFunc);\n        }\n      };\n      injected = false;\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/subscriber-polling.js\n  function copy(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n  var PollingBlockSubscriber, OnBlockSubscriber, PollingBlockTagSubscriber, PollingOrphanSubscriber, PollingTransactionSubscriber, PollingEventSubscriber;\n  var init_subscriber_polling = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/subscriber-polling.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      PollingBlockSubscriber = class {\n        #provider;\n        #poller;\n        #interval;\n        // The most recent block we have scanned for events. The value -2\n        // indicates we still need to fetch an initial block number\n        #blockNumber;\n        /**\n         *  Create a new **PollingBlockSubscriber** attached to %%provider%%.\n         */\n        constructor(provider) {\n          this.#provider = provider;\n          this.#poller = null;\n          this.#interval = 4e3;\n          this.#blockNumber = -2;\n        }\n        /**\n         *  The polling interval.\n         */\n        get pollingInterval() {\n          return this.#interval;\n        }\n        set pollingInterval(value) {\n          this.#interval = value;\n        }\n        async #poll() {\n          try {\n            const blockNumber = await this.#provider.getBlockNumber();\n            if (this.#blockNumber === -2) {\n              this.#blockNumber = blockNumber;\n              return;\n            }\n            if (blockNumber !== this.#blockNumber) {\n              for (let b2 = this.#blockNumber + 1; b2 <= blockNumber; b2++) {\n                if (this.#poller == null) {\n                  return;\n                }\n                await this.#provider.emit(\"block\", b2);\n              }\n              this.#blockNumber = blockNumber;\n            }\n          } catch (error) {\n          }\n          if (this.#poller == null) {\n            return;\n          }\n          this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);\n        }\n        start() {\n          if (this.#poller) {\n            return;\n          }\n          this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);\n          this.#poll();\n        }\n        stop() {\n          if (!this.#poller) {\n            return;\n          }\n          this.#provider._clearTimeout(this.#poller);\n          this.#poller = null;\n        }\n        pause(dropWhilePaused) {\n          this.stop();\n          if (dropWhilePaused) {\n            this.#blockNumber = -2;\n          }\n        }\n        resume() {\n          this.start();\n        }\n      };\n      OnBlockSubscriber = class {\n        #provider;\n        #poll;\n        #running;\n        /**\n         *  Create a new **OnBlockSubscriber** attached to %%provider%%.\n         */\n        constructor(provider) {\n          this.#provider = provider;\n          this.#running = false;\n          this.#poll = (blockNumber) => {\n            this._poll(blockNumber, this.#provider);\n          };\n        }\n        /**\n         *  Called on every new block.\n         */\n        async _poll(blockNumber, provider) {\n          throw new Error(\"sub-classes must override this\");\n        }\n        start() {\n          if (this.#running) {\n            return;\n          }\n          this.#running = true;\n          this.#poll(-2);\n          this.#provider.on(\"block\", this.#poll);\n        }\n        stop() {\n          if (!this.#running) {\n            return;\n          }\n          this.#running = false;\n          this.#provider.off(\"block\", this.#poll);\n        }\n        pause(dropWhilePaused) {\n          this.stop();\n        }\n        resume() {\n          this.start();\n        }\n      };\n      PollingBlockTagSubscriber = class extends OnBlockSubscriber {\n        #tag;\n        #lastBlock;\n        constructor(provider, tag) {\n          super(provider);\n          this.#tag = tag;\n          this.#lastBlock = -2;\n        }\n        pause(dropWhilePaused) {\n          if (dropWhilePaused) {\n            this.#lastBlock = -2;\n          }\n          super.pause(dropWhilePaused);\n        }\n        async _poll(blockNumber, provider) {\n          const block = await provider.getBlock(this.#tag);\n          if (block == null) {\n            return;\n          }\n          if (this.#lastBlock === -2) {\n            this.#lastBlock = block.number;\n          } else if (block.number > this.#lastBlock) {\n            provider.emit(this.#tag, block.number);\n            this.#lastBlock = block.number;\n          }\n        }\n      };\n      PollingOrphanSubscriber = class extends OnBlockSubscriber {\n        #filter;\n        constructor(provider, filter) {\n          super(provider);\n          this.#filter = copy(filter);\n        }\n        async _poll(blockNumber, provider) {\n          throw new Error(\"@TODO\");\n          console.log(this.#filter);\n        }\n      };\n      PollingTransactionSubscriber = class extends OnBlockSubscriber {\n        #hash;\n        /**\n         *  Create a new **PollingTransactionSubscriber** attached to\n         *  %%provider%%, listening for %%hash%%.\n         */\n        constructor(provider, hash4) {\n          super(provider);\n          this.#hash = hash4;\n        }\n        async _poll(blockNumber, provider) {\n          const tx = await provider.getTransactionReceipt(this.#hash);\n          if (tx) {\n            provider.emit(this.#hash, tx);\n          }\n        }\n      };\n      PollingEventSubscriber = class {\n        #provider;\n        #filter;\n        #poller;\n        #running;\n        // The most recent block we have scanned for events. The value -2\n        // indicates we still need to fetch an initial block number\n        #blockNumber;\n        /**\n         *  Create a new **PollingTransactionSubscriber** attached to\n         *  %%provider%%, listening for %%filter%%.\n         */\n        constructor(provider, filter) {\n          this.#provider = provider;\n          this.#filter = copy(filter);\n          this.#poller = this.#poll.bind(this);\n          this.#running = false;\n          this.#blockNumber = -2;\n        }\n        async #poll(blockNumber) {\n          if (this.#blockNumber === -2) {\n            return;\n          }\n          const filter = copy(this.#filter);\n          filter.fromBlock = this.#blockNumber + 1;\n          filter.toBlock = blockNumber;\n          const logs = await this.#provider.getLogs(filter);\n          if (logs.length === 0) {\n            if (this.#blockNumber < blockNumber - 60) {\n              this.#blockNumber = blockNumber - 60;\n            }\n            return;\n          }\n          for (const log of logs) {\n            this.#provider.emit(this.#filter, log);\n            this.#blockNumber = log.blockNumber;\n          }\n        }\n        start() {\n          if (this.#running) {\n            return;\n          }\n          this.#running = true;\n          if (this.#blockNumber === -2) {\n            this.#provider.getBlockNumber().then((blockNumber) => {\n              this.#blockNumber = blockNumber;\n            });\n          }\n          this.#provider.on(\"block\", this.#poller);\n        }\n        stop() {\n          if (!this.#running) {\n            return;\n          }\n          this.#running = false;\n          this.#provider.off(\"block\", this.#poller);\n        }\n        pause(dropWhilePaused) {\n          this.stop();\n          if (dropWhilePaused) {\n            this.#blockNumber = -2;\n          }\n        }\n        resume() {\n          this.start();\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/abstract-provider.js\n  function isPromise(value) {\n    return value && typeof value.then === \"function\";\n  }\n  function getTag(prefix, value) {\n    return prefix + \":\" + JSON.stringify(value, (k, v) => {\n      if (v == null) {\n        return \"null\";\n      }\n      if (typeof v === \"bigint\") {\n        return `bigint:${v.toString()}`;\n      }\n      if (typeof v === \"string\") {\n        return v.toLowerCase();\n      }\n      if (typeof v === \"object\" && !Array.isArray(v)) {\n        const keys = Object.keys(v);\n        keys.sort();\n        return keys.reduce((accum, key2) => {\n          accum[key2] = v[key2];\n          return accum;\n        }, {});\n      }\n      return v;\n    });\n  }\n  function copy2(value) {\n    return JSON.parse(JSON.stringify(value));\n  }\n  function concisify(items) {\n    items = Array.from(new Set(items).values());\n    items.sort();\n    return items;\n  }\n  async function getSubscription(_event, provider) {\n    if (_event == null) {\n      throw new Error(\"invalid event\");\n    }\n    if (Array.isArray(_event)) {\n      _event = { topics: _event };\n    }\n    if (typeof _event === \"string\") {\n      switch (_event) {\n        case \"block\":\n        case \"debug\":\n        case \"error\":\n        case \"finalized\":\n        case \"network\":\n        case \"pending\":\n        case \"safe\": {\n          return { type: _event, tag: _event };\n        }\n      }\n    }\n    if (isHexString2(_event, 32)) {\n      const hash4 = _event.toLowerCase();\n      return { type: \"transaction\", tag: getTag(\"tx\", { hash: hash4 }), hash: hash4 };\n    }\n    if (_event.orphan) {\n      const event = _event;\n      return { type: \"orphan\", tag: getTag(\"orphan\", event), filter: copy2(event) };\n    }\n    if (_event.address || _event.topics) {\n      const event = _event;\n      const filter = {\n        topics: (event.topics || []).map((t) => {\n          if (t == null) {\n            return null;\n          }\n          if (Array.isArray(t)) {\n            return concisify(t.map((t2) => t2.toLowerCase()));\n          }\n          return t.toLowerCase();\n        })\n      };\n      if (event.address) {\n        const addresses = [];\n        const promises = [];\n        const addAddress = (addr) => {\n          if (isHexString2(addr)) {\n            addresses.push(addr);\n          } else {\n            promises.push((async () => {\n              addresses.push(await resolveAddress(addr, provider));\n            })());\n          }\n        };\n        if (Array.isArray(event.address)) {\n          event.address.forEach(addAddress);\n        } else {\n          addAddress(event.address);\n        }\n        if (promises.length) {\n          await Promise.all(promises);\n        }\n        filter.address = concisify(addresses.map((a) => a.toLowerCase()));\n      }\n      return { filter, tag: getTag(\"event\", filter), type: \"event\" };\n    }\n    assertArgument(false, \"unknown ProviderEvent\", \"event\", _event);\n  }\n  function getTime3() {\n    return (/* @__PURE__ */ new Date()).getTime();\n  }\n  function _parseString2(result, start) {\n    try {\n      const bytes3 = _parseBytes2(result, start);\n      if (bytes3) {\n        return toUtf8String2(bytes3);\n      }\n    } catch (error) {\n    }\n    return null;\n  }\n  function _parseBytes2(result, start) {\n    if (result === \"0x\") {\n      return null;\n    }\n    try {\n      const offset = getNumber(dataSlice(result, start, start + 32));\n      const length = getNumber(dataSlice(result, offset, offset + 32));\n      return dataSlice(result, offset + 32, offset + 32 + length);\n    } catch (error) {\n    }\n    return null;\n  }\n  function numPad2(value) {\n    const result = toBeArray(value);\n    if (result.length > 32) {\n      throw new Error(\"internal; should not happen\");\n    }\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n  }\n  function bytesPad2(value) {\n    if (value.length % 32 === 0) {\n      return value;\n    }\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n  }\n  function encodeBytes2(datas) {\n    const result = [];\n    let byteCount = 0;\n    for (let i = 0; i < datas.length; i++) {\n      result.push(empty);\n      byteCount += 32;\n    }\n    for (let i = 0; i < datas.length; i++) {\n      const data = getBytes(datas[i]);\n      result[i] = numPad2(byteCount);\n      result.push(numPad2(data.length));\n      result.push(bytesPad2(data));\n      byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n    return concat2(result);\n  }\n  function parseOffchainLookup(data) {\n    const result = {\n      sender: \"\",\n      urls: [],\n      calldata: \"\",\n      selector: \"\",\n      extraData: \"\",\n      errorArgs: []\n    };\n    assert3(dataLength(data) >= 5 * 32, \"insufficient OffchainLookup data\", \"OFFCHAIN_FAULT\", {\n      reason: \"insufficient OffchainLookup data\"\n    });\n    const sender = dataSlice(data, 0, 32);\n    assert3(dataSlice(sender, 0, 12) === dataSlice(zeros2, 0, 12), \"corrupt OffchainLookup sender\", \"OFFCHAIN_FAULT\", {\n      reason: \"corrupt OffchainLookup sender\"\n    });\n    result.sender = dataSlice(sender, 12);\n    try {\n      const urls = [];\n      const urlsOffset = getNumber(dataSlice(data, 32, 64));\n      const urlsLength = getNumber(dataSlice(data, urlsOffset, urlsOffset + 32));\n      const urlsData = dataSlice(data, urlsOffset + 32);\n      for (let u = 0; u < urlsLength; u++) {\n        const url = _parseString2(urlsData, u * 32);\n        if (url == null) {\n          throw new Error(\"abort\");\n        }\n        urls.push(url);\n      }\n      result.urls = urls;\n    } catch (error) {\n      assert3(false, \"corrupt OffchainLookup urls\", \"OFFCHAIN_FAULT\", {\n        reason: \"corrupt OffchainLookup urls\"\n      });\n    }\n    try {\n      const calldata = _parseBytes2(data, 64);\n      if (calldata == null) {\n        throw new Error(\"abort\");\n      }\n      result.calldata = calldata;\n    } catch (error) {\n      assert3(false, \"corrupt OffchainLookup calldata\", \"OFFCHAIN_FAULT\", {\n        reason: \"corrupt OffchainLookup calldata\"\n      });\n    }\n    assert3(dataSlice(data, 100, 128) === dataSlice(zeros2, 0, 28), \"corrupt OffchainLookup callbaackSelector\", \"OFFCHAIN_FAULT\", {\n      reason: \"corrupt OffchainLookup callbaackSelector\"\n    });\n    result.selector = dataSlice(data, 96, 100);\n    try {\n      const extraData = _parseBytes2(data, 128);\n      if (extraData == null) {\n        throw new Error(\"abort\");\n      }\n      result.extraData = extraData;\n    } catch (error) {\n      assert3(false, \"corrupt OffchainLookup extraData\", \"OFFCHAIN_FAULT\", {\n        reason: \"corrupt OffchainLookup extraData\"\n      });\n    }\n    result.errorArgs = \"sender,urls,calldata,selector,extraData\".split(/,/).map((k) => result[k]);\n    return result;\n  }\n  var BN_23, MAX_CCIP_REDIRECTS2, UnmanagedSubscriber, defaultOptions, AbstractProvider, empty, zeros2;\n  var init_abstract_provider = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/abstract-provider.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_address3();\n      init_constants2();\n      init_contract2();\n      init_hash();\n      init_transaction2();\n      init_utils3();\n      init_ens_resolver();\n      init_format();\n      init_network();\n      init_provider();\n      init_subscriber_polling();\n      BN_23 = BigInt(2);\n      MAX_CCIP_REDIRECTS2 = 10;\n      UnmanagedSubscriber = class {\n        /**\n         *  The name fof the event.\n         */\n        name;\n        /**\n         *  Create a new UnmanagedSubscriber with %%name%%.\n         */\n        constructor(name) {\n          defineProperties(this, { name });\n        }\n        start() {\n        }\n        stop() {\n        }\n        pause(dropWhilePaused) {\n        }\n        resume() {\n        }\n      };\n      defaultOptions = {\n        cacheTimeout: 250,\n        pollingInterval: 4e3\n      };\n      AbstractProvider = class {\n        #subs;\n        #plugins;\n        // null=unpaused, true=paused+dropWhilePaused, false=paused\n        #pausedState;\n        #destroyed;\n        #networkPromise;\n        #anyNetwork;\n        #performCache;\n        // The most recent block number if running an event or -1 if no \"block\" event\n        #lastBlockNumber;\n        #nextTimer;\n        #timers;\n        #disableCcipRead;\n        #options;\n        /**\n         *  Create a new **AbstractProvider** connected to %%network%%, or\n         *  use the various network detection capabilities to discover the\n         *  [[Network]] if necessary.\n         */\n        constructor(_network, options) {\n          this.#options = Object.assign({}, defaultOptions, options || {});\n          if (_network === \"any\") {\n            this.#anyNetwork = true;\n            this.#networkPromise = null;\n          } else if (_network) {\n            const network = Network.from(_network);\n            this.#anyNetwork = false;\n            this.#networkPromise = Promise.resolve(network);\n            setTimeout(() => {\n              this.emit(\"network\", network, null);\n            }, 0);\n          } else {\n            this.#anyNetwork = false;\n            this.#networkPromise = null;\n          }\n          this.#lastBlockNumber = -1;\n          this.#performCache = /* @__PURE__ */ new Map();\n          this.#subs = /* @__PURE__ */ new Map();\n          this.#plugins = /* @__PURE__ */ new Map();\n          this.#pausedState = null;\n          this.#destroyed = false;\n          this.#nextTimer = 1;\n          this.#timers = /* @__PURE__ */ new Map();\n          this.#disableCcipRead = false;\n        }\n        get pollingInterval() {\n          return this.#options.pollingInterval;\n        }\n        /**\n         *  Returns ``this``, to allow an **AbstractProvider** to implement\n         *  the [[ContractRunner]] interface.\n         */\n        get provider() {\n          return this;\n        }\n        /**\n         *  Returns all the registered plug-ins.\n         */\n        get plugins() {\n          return Array.from(this.#plugins.values());\n        }\n        /**\n         *  Attach a new plug-in.\n         */\n        attachPlugin(plugin) {\n          if (this.#plugins.get(plugin.name)) {\n            throw new Error(`cannot replace existing plugin: ${plugin.name} `);\n          }\n          this.#plugins.set(plugin.name, plugin.connect(this));\n          return this;\n        }\n        /**\n         *  Get a plugin by name.\n         */\n        getPlugin(name) {\n          return this.#plugins.get(name) || null;\n        }\n        /**\n         *  Prevent any CCIP-read operation, regardless of whether requested\n         *  in a [[call]] using ``enableCcipRead``.\n         */\n        get disableCcipRead() {\n          return this.#disableCcipRead;\n        }\n        set disableCcipRead(value) {\n          this.#disableCcipRead = !!value;\n        }\n        // Shares multiple identical requests made during the same 250ms\n        async #perform(req) {\n          const timeout = this.#options.cacheTimeout;\n          if (timeout < 0) {\n            return await this._perform(req);\n          }\n          const tag = getTag(req.method, req);\n          let perform = this.#performCache.get(tag);\n          if (!perform) {\n            perform = this._perform(req);\n            this.#performCache.set(tag, perform);\n            setTimeout(() => {\n              if (this.#performCache.get(tag) === perform) {\n                this.#performCache.delete(tag);\n              }\n            }, timeout);\n          }\n          return await perform;\n        }\n        /**\n         *  Resolves to the data for executing the CCIP-read operations.\n         */\n        async ccipReadFetch(tx, calldata, urls) {\n          if (this.disableCcipRead || urls.length === 0 || tx.to == null) {\n            return null;\n          }\n          const sender = tx.to.toLowerCase();\n          const data = calldata.toLowerCase();\n          const errorMessages = [];\n          for (let i = 0; i < urls.length; i++) {\n            const url = urls[i];\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n            const request = new FetchRequest(href);\n            if (url.indexOf(\"{data}\") === -1) {\n              request.body = { data, sender };\n            }\n            this.emit(\"debug\", { action: \"sendCcipReadFetchRequest\", request, index: i, urls });\n            let errorMessage = \"unknown error\";\n            let resp;\n            try {\n              resp = await request.send();\n            } catch (error) {\n              errorMessages.push(error.message);\n              this.emit(\"debug\", { action: \"receiveCcipReadFetchError\", request, result: { error } });\n              continue;\n            }\n            try {\n              const result = resp.bodyJson;\n              if (result.data) {\n                this.emit(\"debug\", { action: \"receiveCcipReadFetchResult\", request, result });\n                return result.data;\n              }\n              if (result.message) {\n                errorMessage = result.message;\n              }\n              this.emit(\"debug\", { action: \"receiveCcipReadFetchError\", request, result });\n            } catch (error) {\n            }\n            assert3(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, \"OFFCHAIN_FAULT\", { reason: \"404_MISSING_RESOURCE\", transaction: tx, info: { url, errorMessage } });\n            errorMessages.push(errorMessage);\n          }\n          assert3(false, `error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(\", \")}`, \"OFFCHAIN_FAULT\", {\n            reason: \"500_SERVER_ERROR\",\n            transaction: tx,\n            info: { urls, errorMessages }\n          });\n        }\n        /**\n         *  Provides the opportunity for a sub-class to wrap a block before\n         *  returning it, to add additional properties or an alternate\n         *  sub-class of [[Block]].\n         */\n        _wrapBlock(value, network) {\n          return new Block(formatBlock(value), this);\n        }\n        /**\n         *  Provides the opportunity for a sub-class to wrap a log before\n         *  returning it, to add additional properties or an alternate\n         *  sub-class of [[Log]].\n         */\n        _wrapLog(value, network) {\n          return new Log(formatLog(value), this);\n        }\n        /**\n         *  Provides the opportunity for a sub-class to wrap a transaction\n         *  receipt before returning it, to add additional properties or an\n         *  alternate sub-class of [[TransactionReceipt]].\n         */\n        _wrapTransactionReceipt(value, network) {\n          return new TransactionReceipt(formatTransactionReceipt(value), this);\n        }\n        /**\n         *  Provides the opportunity for a sub-class to wrap a transaction\n         *  response before returning it, to add additional properties or an\n         *  alternate sub-class of [[TransactionResponse]].\n         */\n        _wrapTransactionResponse(tx, network) {\n          return new TransactionResponse(formatTransactionResponse(tx), this);\n        }\n        /**\n         *  Resolves to the Network, forcing a network detection using whatever\n         *  technique the sub-class requires.\n         *\n         *  Sub-classes **must** override this.\n         */\n        _detectNetwork() {\n          assert3(false, \"sub-classes must implement this\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"_detectNetwork\"\n          });\n        }\n        /**\n         *  Sub-classes should use this to perform all built-in operations. All\n         *  methods sanitizes and normalizes the values passed into this.\n         *\n         *  Sub-classes **must** override this.\n         */\n        async _perform(req) {\n          assert3(false, `unsupported method: ${req.method}`, \"UNSUPPORTED_OPERATION\", {\n            operation: req.method,\n            info: req\n          });\n        }\n        // State\n        async getBlockNumber() {\n          const blockNumber = getNumber(await this.#perform({ method: \"getBlockNumber\" }), \"%response\");\n          if (this.#lastBlockNumber >= 0) {\n            this.#lastBlockNumber = blockNumber;\n          }\n          return blockNumber;\n        }\n        /**\n         *  Returns or resolves to the address for %%address%%, resolving ENS\n         *  names and [[Addressable]] objects and returning if already an\n         *  address.\n         */\n        _getAddress(address) {\n          return resolveAddress(address, this);\n        }\n        /**\n         *  Returns or resolves to a valid block tag for %%blockTag%%, resolving\n         *  negative values and returning if already a valid block tag.\n         */\n        _getBlockTag(blockTag) {\n          if (blockTag == null) {\n            return \"latest\";\n          }\n          switch (blockTag) {\n            case \"earliest\":\n              return \"0x0\";\n            case \"finalized\":\n            case \"latest\":\n            case \"pending\":\n            case \"safe\":\n              return blockTag;\n          }\n          if (isHexString2(blockTag)) {\n            if (isHexString2(blockTag, 32)) {\n              return blockTag;\n            }\n            return toQuantity(blockTag);\n          }\n          if (typeof blockTag === \"bigint\") {\n            blockTag = getNumber(blockTag, \"blockTag\");\n          }\n          if (typeof blockTag === \"number\") {\n            if (blockTag >= 0) {\n              return toQuantity(blockTag);\n            }\n            if (this.#lastBlockNumber >= 0) {\n              return toQuantity(this.#lastBlockNumber + blockTag);\n            }\n            return this.getBlockNumber().then((b2) => toQuantity(b2 + blockTag));\n          }\n          assertArgument(false, \"invalid blockTag\", \"blockTag\", blockTag);\n        }\n        /**\n         *  Returns or resolves to a filter for %%filter%%, resolving any ENS\n         *  names or [[Addressable]] object and returning if already a valid\n         *  filter.\n         */\n        _getFilter(filter) {\n          const topics = (filter.topics || []).map((t) => {\n            if (t == null) {\n              return null;\n            }\n            if (Array.isArray(t)) {\n              return concisify(t.map((t2) => t2.toLowerCase()));\n            }\n            return t.toLowerCase();\n          });\n          const blockHash = \"blockHash\" in filter ? filter.blockHash : void 0;\n          const resolve = (_address, fromBlock2, toBlock2) => {\n            let address2 = void 0;\n            switch (_address.length) {\n              case 0:\n                break;\n              case 1:\n                address2 = _address[0];\n                break;\n              default:\n                _address.sort();\n                address2 = _address;\n            }\n            if (blockHash) {\n              if (fromBlock2 != null || toBlock2 != null) {\n                throw new Error(\"invalid filter\");\n              }\n            }\n            const filter2 = {};\n            if (address2) {\n              filter2.address = address2;\n            }\n            if (topics.length) {\n              filter2.topics = topics;\n            }\n            if (fromBlock2) {\n              filter2.fromBlock = fromBlock2;\n            }\n            if (toBlock2) {\n              filter2.toBlock = toBlock2;\n            }\n            if (blockHash) {\n              filter2.blockHash = blockHash;\n            }\n            return filter2;\n          };\n          let address = [];\n          if (filter.address) {\n            if (Array.isArray(filter.address)) {\n              for (const addr of filter.address) {\n                address.push(this._getAddress(addr));\n              }\n            } else {\n              address.push(this._getAddress(filter.address));\n            }\n          }\n          let fromBlock = void 0;\n          if (\"fromBlock\" in filter) {\n            fromBlock = this._getBlockTag(filter.fromBlock);\n          }\n          let toBlock = void 0;\n          if (\"toBlock\" in filter) {\n            toBlock = this._getBlockTag(filter.toBlock);\n          }\n          if (address.filter((a) => typeof a !== \"string\").length || fromBlock != null && typeof fromBlock !== \"string\" || toBlock != null && typeof toBlock !== \"string\") {\n            return Promise.all([Promise.all(address), fromBlock, toBlock]).then((result) => {\n              return resolve(result[0], result[1], result[2]);\n            });\n          }\n          return resolve(address, fromBlock, toBlock);\n        }\n        /**\n         *  Returns or resolves to a transaction for %%request%%, resolving\n         *  any ENS names or [[Addressable]] and returning if already a valid\n         *  transaction.\n         */\n        _getTransactionRequest(_request) {\n          const request = copyRequest(_request);\n          const promises = [];\n          [\"to\", \"from\"].forEach((key2) => {\n            if (request[key2] == null) {\n              return;\n            }\n            const addr = resolveAddress(request[key2], this);\n            if (isPromise(addr)) {\n              promises.push(async function() {\n                request[key2] = await addr;\n              }());\n            } else {\n              request[key2] = addr;\n            }\n          });\n          if (request.blockTag != null) {\n            const blockTag = this._getBlockTag(request.blockTag);\n            if (isPromise(blockTag)) {\n              promises.push(async function() {\n                request.blockTag = await blockTag;\n              }());\n            } else {\n              request.blockTag = blockTag;\n            }\n          }\n          if (promises.length) {\n            return async function() {\n              await Promise.all(promises);\n              return request;\n            }();\n          }\n          return request;\n        }\n        async getNetwork() {\n          if (this.#networkPromise == null) {\n            const detectNetwork = (async () => {\n              try {\n                const network = await this._detectNetwork();\n                this.emit(\"network\", network, null);\n                return network;\n              } catch (error) {\n                if (this.#networkPromise === detectNetwork) {\n                  this.#networkPromise = null;\n                }\n                throw error;\n              }\n            })();\n            this.#networkPromise = detectNetwork;\n            return (await detectNetwork).clone();\n          }\n          const networkPromise = this.#networkPromise;\n          const [expected, actual] = await Promise.all([\n            networkPromise,\n            this._detectNetwork()\n            // The actual connected network\n          ]);\n          if (expected.chainId !== actual.chainId) {\n            if (this.#anyNetwork) {\n              this.emit(\"network\", actual, expected);\n              if (this.#networkPromise === networkPromise) {\n                this.#networkPromise = Promise.resolve(actual);\n              }\n            } else {\n              assert3(false, `network changed: ${expected.chainId} => ${actual.chainId} `, \"NETWORK_ERROR\", {\n                event: \"changed\"\n              });\n            }\n          }\n          return expected.clone();\n        }\n        async getFeeData() {\n          const network = await this.getNetwork();\n          const getFeeDataFunc = async () => {\n            const { _block, gasPrice, priorityFee } = await resolveProperties2({\n              _block: this.#getBlock(\"latest\", false),\n              gasPrice: (async () => {\n                try {\n                  const value = await this.#perform({ method: \"getGasPrice\" });\n                  return getBigInt(value, \"%response\");\n                } catch (error) {\n                }\n                return null;\n              })(),\n              priorityFee: (async () => {\n                try {\n                  const value = await this.#perform({ method: \"getPriorityFee\" });\n                  return getBigInt(value, \"%response\");\n                } catch (error) {\n                }\n                return null;\n              })()\n            });\n            let maxFeePerGas = null;\n            let maxPriorityFeePerGas = null;\n            const block = this._wrapBlock(_block, network);\n            if (block && block.baseFeePerGas) {\n              maxPriorityFeePerGas = priorityFee != null ? priorityFee : BigInt(\"1000000000\");\n              maxFeePerGas = block.baseFeePerGas * BN_23 + maxPriorityFeePerGas;\n            }\n            return new FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);\n          };\n          const plugin = network.getPlugin(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\n          if (plugin) {\n            const req = new FetchRequest(plugin.url);\n            const feeData = await plugin.processFunc(getFeeDataFunc, this, req);\n            return new FeeData(feeData.gasPrice, feeData.maxFeePerGas, feeData.maxPriorityFeePerGas);\n          }\n          return await getFeeDataFunc();\n        }\n        async estimateGas(_tx) {\n          let tx = this._getTransactionRequest(_tx);\n          if (isPromise(tx)) {\n            tx = await tx;\n          }\n          return getBigInt(await this.#perform({\n            method: \"estimateGas\",\n            transaction: tx\n          }), \"%response\");\n        }\n        async #call(tx, blockTag, attempt) {\n          assert3(attempt < MAX_CCIP_REDIRECTS2, \"CCIP read exceeded maximum redirections\", \"OFFCHAIN_FAULT\", {\n            reason: \"TOO_MANY_REDIRECTS\",\n            transaction: Object.assign({}, tx, { blockTag, enableCcipRead: true })\n          });\n          const transaction = copyRequest(tx);\n          try {\n            return hexlify2(await this._perform({ method: \"call\", transaction, blockTag }));\n          } catch (error) {\n            if (!this.disableCcipRead && isCallException(error) && error.data && attempt >= 0 && blockTag === \"latest\" && transaction.to != null && dataSlice(error.data, 0, 4) === \"0x556f1830\") {\n              const data = error.data;\n              const txSender = await resolveAddress(transaction.to, this);\n              let ccipArgs;\n              try {\n                ccipArgs = parseOffchainLookup(dataSlice(error.data, 4));\n              } catch (error2) {\n                assert3(false, error2.message, \"OFFCHAIN_FAULT\", {\n                  reason: \"BAD_DATA\",\n                  transaction,\n                  info: { data }\n                });\n              }\n              assert3(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), \"CCIP Read sender mismatch\", \"CALL_EXCEPTION\", {\n                action: \"call\",\n                data,\n                reason: \"OffchainLookup\",\n                transaction,\n                invocation: null,\n                revert: {\n                  signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                  name: \"OffchainLookup\",\n                  args: ccipArgs.errorArgs\n                }\n              });\n              const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);\n              assert3(ccipResult != null, \"CCIP Read failed to fetch data\", \"OFFCHAIN_FAULT\", {\n                reason: \"FETCH_FAILED\",\n                transaction,\n                info: { data: error.data, errorArgs: ccipArgs.errorArgs }\n              });\n              const tx2 = {\n                to: txSender,\n                data: concat2([ccipArgs.selector, encodeBytes2([ccipResult, ccipArgs.extraData])])\n              };\n              this.emit(\"debug\", { action: \"sendCcipReadCall\", transaction: tx2 });\n              try {\n                const result = await this.#call(tx2, blockTag, attempt + 1);\n                this.emit(\"debug\", { action: \"receiveCcipReadCallResult\", transaction: Object.assign({}, tx2), result });\n                return result;\n              } catch (error2) {\n                this.emit(\"debug\", { action: \"receiveCcipReadCallError\", transaction: Object.assign({}, tx2), error: error2 });\n                throw error2;\n              }\n            }\n            throw error;\n          }\n        }\n        async #checkNetwork(promise) {\n          const { value } = await resolveProperties2({\n            network: this.getNetwork(),\n            value: promise\n          });\n          return value;\n        }\n        async call(_tx) {\n          const { tx, blockTag } = await resolveProperties2({\n            tx: this._getTransactionRequest(_tx),\n            blockTag: this._getBlockTag(_tx.blockTag)\n          });\n          return await this.#checkNetwork(this.#call(tx, blockTag, _tx.enableCcipRead ? 0 : -1));\n        }\n        // Account\n        async #getAccountValue(request, _address, _blockTag) {\n          let address = this._getAddress(_address);\n          let blockTag = this._getBlockTag(_blockTag);\n          if (typeof address !== \"string\" || typeof blockTag !== \"string\") {\n            [address, blockTag] = await Promise.all([address, blockTag]);\n          }\n          return await this.#checkNetwork(this.#perform(Object.assign(request, { address, blockTag })));\n        }\n        async getBalance(address, blockTag) {\n          return getBigInt(await this.#getAccountValue({ method: \"getBalance\" }, address, blockTag), \"%response\");\n        }\n        async getTransactionCount(address, blockTag) {\n          return getNumber(await this.#getAccountValue({ method: \"getTransactionCount\" }, address, blockTag), \"%response\");\n        }\n        async getCode(address, blockTag) {\n          return hexlify2(await this.#getAccountValue({ method: \"getCode\" }, address, blockTag));\n        }\n        async getStorage(address, _position, blockTag) {\n          const position = getBigInt(_position, \"position\");\n          return hexlify2(await this.#getAccountValue({ method: \"getStorage\", position }, address, blockTag));\n        }\n        // Write\n        async broadcastTransaction(signedTx) {\n          const { blockNumber, hash: hash4, network } = await resolveProperties2({\n            blockNumber: this.getBlockNumber(),\n            hash: this._perform({\n              method: \"broadcastTransaction\",\n              signedTransaction: signedTx\n            }),\n            network: this.getNetwork()\n          });\n          const tx = Transaction.from(signedTx);\n          if (tx.hash !== hash4) {\n            throw new Error(\"@TODO: the returned hash did not match\");\n          }\n          return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);\n        }\n        async #getBlock(block, includeTransactions) {\n          if (isHexString2(block, 32)) {\n            return await this.#perform({\n              method: \"getBlock\",\n              blockHash: block,\n              includeTransactions\n            });\n          }\n          let blockTag = this._getBlockTag(block);\n          if (typeof blockTag !== \"string\") {\n            blockTag = await blockTag;\n          }\n          return await this.#perform({\n            method: \"getBlock\",\n            blockTag,\n            includeTransactions\n          });\n        }\n        // Queries\n        async getBlock(block, prefetchTxs) {\n          const { network, params } = await resolveProperties2({\n            network: this.getNetwork(),\n            params: this.#getBlock(block, !!prefetchTxs)\n          });\n          if (params == null) {\n            return null;\n          }\n          return this._wrapBlock(params, network);\n        }\n        async getTransaction(hash4) {\n          const { network, params } = await resolveProperties2({\n            network: this.getNetwork(),\n            params: this.#perform({ method: \"getTransaction\", hash: hash4 })\n          });\n          if (params == null) {\n            return null;\n          }\n          return this._wrapTransactionResponse(params, network);\n        }\n        async getTransactionReceipt(hash4) {\n          const { network, params } = await resolveProperties2({\n            network: this.getNetwork(),\n            params: this.#perform({ method: \"getTransactionReceipt\", hash: hash4 })\n          });\n          if (params == null) {\n            return null;\n          }\n          if (params.gasPrice == null && params.effectiveGasPrice == null) {\n            const tx = await this.#perform({ method: \"getTransaction\", hash: hash4 });\n            if (tx == null) {\n              throw new Error(\"report this; could not find tx or effectiveGasPrice\");\n            }\n            params.effectiveGasPrice = tx.gasPrice;\n          }\n          return this._wrapTransactionReceipt(params, network);\n        }\n        async getTransactionResult(hash4) {\n          const { result } = await resolveProperties2({\n            network: this.getNetwork(),\n            result: this.#perform({ method: \"getTransactionResult\", hash: hash4 })\n          });\n          if (result == null) {\n            return null;\n          }\n          return hexlify2(result);\n        }\n        // Bloom-filter Queries\n        async getLogs(_filter) {\n          let filter = this._getFilter(_filter);\n          if (isPromise(filter)) {\n            filter = await filter;\n          }\n          const { network, params } = await resolveProperties2({\n            network: this.getNetwork(),\n            params: this.#perform({ method: \"getLogs\", filter })\n          });\n          return params.map((p) => this._wrapLog(p, network));\n        }\n        // ENS\n        _getProvider(chainId) {\n          assert3(false, \"provider cannot connect to target network\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"_getProvider()\"\n          });\n        }\n        async getResolver(name) {\n          return await EnsResolver.fromName(this, name);\n        }\n        async getAvatar(name) {\n          const resolver = await this.getResolver(name);\n          if (resolver) {\n            return await resolver.getAvatar();\n          }\n          return null;\n        }\n        async resolveName(name) {\n          const resolver = await this.getResolver(name);\n          if (resolver) {\n            return await resolver.getAddress();\n          }\n          return null;\n        }\n        async lookupAddress(address) {\n          address = getAddress2(address);\n          const node = namehash2(address.substring(2).toLowerCase() + \".addr.reverse\");\n          try {\n            const ensAddr = await EnsResolver.getEnsAddress(this);\n            const ensContract = new Contract2(ensAddr, [\n              \"function resolver(bytes32) view returns (address)\"\n            ], this);\n            const resolver = await ensContract.resolver(node);\n            if (resolver == null || resolver === ZeroAddress) {\n              return null;\n            }\n            const resolverContract = new Contract2(resolver, [\n              \"function name(bytes32) view returns (string)\"\n            ], this);\n            const name = await resolverContract.name(node);\n            const check = await this.resolveName(name);\n            if (check !== address) {\n              return null;\n            }\n            return name;\n          } catch (error) {\n            if (isError(error, \"BAD_DATA\") && error.value === \"0x\") {\n              return null;\n            }\n            if (isError(error, \"CALL_EXCEPTION\")) {\n              return null;\n            }\n            throw error;\n          }\n          return null;\n        }\n        async waitForTransaction(hash4, _confirms, timeout) {\n          const confirms = _confirms != null ? _confirms : 1;\n          if (confirms === 0) {\n            return this.getTransactionReceipt(hash4);\n          }\n          return new Promise(async (resolve, reject) => {\n            let timer2 = null;\n            const listener = async (blockNumber) => {\n              try {\n                const receipt = await this.getTransactionReceipt(hash4);\n                if (receipt != null) {\n                  if (blockNumber - receipt.blockNumber + 1 >= confirms) {\n                    resolve(receipt);\n                    if (timer2) {\n                      clearTimeout(timer2);\n                      timer2 = null;\n                    }\n                    return;\n                  }\n                }\n              } catch (error) {\n                console.log(\"EEE\", error);\n              }\n              this.once(\"block\", listener);\n            };\n            if (timeout != null) {\n              timer2 = setTimeout(() => {\n                if (timer2 == null) {\n                  return;\n                }\n                timer2 = null;\n                this.off(\"block\", listener);\n                reject(makeError(\"timeout\", \"TIMEOUT\", { reason: \"timeout\" }));\n              }, timeout);\n            }\n            listener(await this.getBlockNumber());\n          });\n        }\n        async waitForBlock(blockTag) {\n          assert3(false, \"not implemented yet\", \"NOT_IMPLEMENTED\", {\n            operation: \"waitForBlock\"\n          });\n        }\n        /**\n         *  Clear a timer created using the [[_setTimeout]] method.\n         */\n        _clearTimeout(timerId) {\n          const timer2 = this.#timers.get(timerId);\n          if (!timer2) {\n            return;\n          }\n          if (timer2.timer) {\n            clearTimeout(timer2.timer);\n          }\n          this.#timers.delete(timerId);\n        }\n        /**\n         *  Create a timer that will execute %%func%% after at least %%timeout%%\n         *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute\n         *  in the next event loop.\n         *\n         *  [Pausing](AbstractProvider-paused) the provider will pause any\n         *  associated timers.\n         */\n        _setTimeout(_func, timeout) {\n          if (timeout == null) {\n            timeout = 0;\n          }\n          const timerId = this.#nextTimer++;\n          const func = () => {\n            this.#timers.delete(timerId);\n            _func();\n          };\n          if (this.paused) {\n            this.#timers.set(timerId, { timer: null, func, time: timeout });\n          } else {\n            const timer2 = setTimeout(func, timeout);\n            this.#timers.set(timerId, { timer: timer2, func, time: getTime3() });\n          }\n          return timerId;\n        }\n        /**\n         *  Perform %%func%% on each subscriber.\n         */\n        _forEachSubscriber(func) {\n          for (const sub of this.#subs.values()) {\n            func(sub.subscriber);\n          }\n        }\n        /**\n         *  Sub-classes may override this to customize subscription\n         *  implementations.\n         */\n        _getSubscriber(sub) {\n          switch (sub.type) {\n            case \"debug\":\n            case \"error\":\n            case \"network\":\n              return new UnmanagedSubscriber(sub.type);\n            case \"block\": {\n              const subscriber = new PollingBlockSubscriber(this);\n              subscriber.pollingInterval = this.pollingInterval;\n              return subscriber;\n            }\n            case \"safe\":\n            case \"finalized\":\n              return new PollingBlockTagSubscriber(this, sub.type);\n            case \"event\":\n              return new PollingEventSubscriber(this, sub.filter);\n            case \"transaction\":\n              return new PollingTransactionSubscriber(this, sub.hash);\n            case \"orphan\":\n              return new PollingOrphanSubscriber(this, sub.filter);\n          }\n          throw new Error(`unsupported event: ${sub.type}`);\n        }\n        /**\n         *  If a [[Subscriber]] fails and needs to replace itself, this\n         *  method may be used.\n         *\n         *  For example, this is used for providers when using the\n         *  ``eth_getFilterChanges`` method, which can return null if state\n         *  filters are not supported by the backend, allowing the Subscriber\n         *  to swap in a [[PollingEventSubscriber]].\n         */\n        _recoverSubscriber(oldSub, newSub) {\n          for (const sub of this.#subs.values()) {\n            if (sub.subscriber === oldSub) {\n              if (sub.started) {\n                sub.subscriber.stop();\n              }\n              sub.subscriber = newSub;\n              if (sub.started) {\n                newSub.start();\n              }\n              if (this.#pausedState != null) {\n                newSub.pause(this.#pausedState);\n              }\n              break;\n            }\n          }\n        }\n        async #hasSub(event, emitArgs) {\n          let sub = await getSubscription(event, this);\n          if (sub.type === \"event\" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {\n            sub = await getSubscription({ orphan: \"drop-log\", log: emitArgs[0] }, this);\n          }\n          return this.#subs.get(sub.tag) || null;\n        }\n        async #getSub(event) {\n          const subscription = await getSubscription(event, this);\n          const tag = subscription.tag;\n          let sub = this.#subs.get(tag);\n          if (!sub) {\n            const subscriber = this._getSubscriber(subscription);\n            const addressableMap = /* @__PURE__ */ new WeakMap();\n            const nameMap = /* @__PURE__ */ new Map();\n            sub = { subscriber, tag, addressableMap, nameMap, started: false, listeners: [] };\n            this.#subs.set(tag, sub);\n          }\n          return sub;\n        }\n        async on(event, listener) {\n          const sub = await this.#getSub(event);\n          sub.listeners.push({ listener, once: false });\n          if (!sub.started) {\n            sub.subscriber.start();\n            sub.started = true;\n            if (this.#pausedState != null) {\n              sub.subscriber.pause(this.#pausedState);\n            }\n          }\n          return this;\n        }\n        async once(event, listener) {\n          const sub = await this.#getSub(event);\n          sub.listeners.push({ listener, once: true });\n          if (!sub.started) {\n            sub.subscriber.start();\n            sub.started = true;\n            if (this.#pausedState != null) {\n              sub.subscriber.pause(this.#pausedState);\n            }\n          }\n          return this;\n        }\n        async emit(event, ...args) {\n          const sub = await this.#hasSub(event, args);\n          if (!sub || sub.listeners.length === 0) {\n            return false;\n          }\n          ;\n          const count = sub.listeners.length;\n          sub.listeners = sub.listeners.filter(({ listener, once: once2 }) => {\n            const payload = new EventPayload(this, once2 ? null : listener, event);\n            try {\n              listener.call(this, ...args, payload);\n            } catch (error) {\n            }\n            return !once2;\n          });\n          if (sub.listeners.length === 0) {\n            if (sub.started) {\n              sub.subscriber.stop();\n            }\n            this.#subs.delete(sub.tag);\n          }\n          return count > 0;\n        }\n        async listenerCount(event) {\n          if (event) {\n            const sub = await this.#hasSub(event);\n            if (!sub) {\n              return 0;\n            }\n            return sub.listeners.length;\n          }\n          let total = 0;\n          for (const { listeners: listeners2 } of this.#subs.values()) {\n            total += listeners2.length;\n          }\n          return total;\n        }\n        async listeners(event) {\n          if (event) {\n            const sub = await this.#hasSub(event);\n            if (!sub) {\n              return [];\n            }\n            return sub.listeners.map(({ listener }) => listener);\n          }\n          let result = [];\n          for (const { listeners: listeners2 } of this.#subs.values()) {\n            result = result.concat(listeners2.map(({ listener }) => listener));\n          }\n          return result;\n        }\n        async off(event, listener) {\n          const sub = await this.#hasSub(event);\n          if (!sub) {\n            return this;\n          }\n          if (listener) {\n            const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);\n            if (index >= 0) {\n              sub.listeners.splice(index, 1);\n            }\n          }\n          if (!listener || sub.listeners.length === 0) {\n            if (sub.started) {\n              sub.subscriber.stop();\n            }\n            this.#subs.delete(sub.tag);\n          }\n          return this;\n        }\n        async removeAllListeners(event) {\n          if (event) {\n            const { tag, started, subscriber } = await this.#getSub(event);\n            if (started) {\n              subscriber.stop();\n            }\n            this.#subs.delete(tag);\n          } else {\n            for (const [tag, { started, subscriber }] of this.#subs) {\n              if (started) {\n                subscriber.stop();\n              }\n              this.#subs.delete(tag);\n            }\n          }\n          return this;\n        }\n        // Alias for \"on\"\n        async addListener(event, listener) {\n          return await this.on(event, listener);\n        }\n        // Alias for \"off\"\n        async removeListener(event, listener) {\n          return this.off(event, listener);\n        }\n        /**\n         *  If this provider has been destroyed using the [[destroy]] method.\n         *\n         *  Once destroyed, all resources are reclaimed, internal event loops\n         *  and timers are cleaned up and no further requests may be sent to\n         *  the provider.\n         */\n        get destroyed() {\n          return this.#destroyed;\n        }\n        /**\n         *  Sub-classes may use this to shutdown any sockets or release their\n         *  resources and reject any pending requests.\n         *\n         *  Sub-classes **must** call ``super.destroy()``.\n         */\n        destroy() {\n          this.removeAllListeners();\n          for (const timerId of this.#timers.keys()) {\n            this._clearTimeout(timerId);\n          }\n          this.#destroyed = true;\n        }\n        /**\n         *  Whether the provider is currently paused.\n         *\n         *  A paused provider will not emit any events, and generally should\n         *  not make any requests to the network, but that is up to sub-classes\n         *  to manage.\n         *\n         *  Setting ``paused = true`` is identical to calling ``.pause(false)``,\n         *  which will buffer any events that occur while paused until the\n         *  provider is unpaused.\n         */\n        get paused() {\n          return this.#pausedState != null;\n        }\n        set paused(pause) {\n          if (!!pause === this.paused) {\n            return;\n          }\n          if (this.paused) {\n            this.resume();\n          } else {\n            this.pause(false);\n          }\n        }\n        /**\n         *  Pause the provider. If %%dropWhilePaused%%, any events that occur\n         *  while paused are dropped, otherwise all events will be emitted once\n         *  the provider is unpaused.\n         */\n        pause(dropWhilePaused) {\n          this.#lastBlockNumber = -1;\n          if (this.#pausedState != null) {\n            if (this.#pausedState == !!dropWhilePaused) {\n              return;\n            }\n            assert3(false, \"cannot change pause type; resume first\", \"UNSUPPORTED_OPERATION\", {\n              operation: \"pause\"\n            });\n          }\n          this._forEachSubscriber((s) => s.pause(dropWhilePaused));\n          this.#pausedState = !!dropWhilePaused;\n          for (const timer2 of this.#timers.values()) {\n            if (timer2.timer) {\n              clearTimeout(timer2.timer);\n            }\n            timer2.time = getTime3() - timer2.time;\n          }\n        }\n        /**\n         *  Resume the provider.\n         */\n        resume() {\n          if (this.#pausedState == null) {\n            return;\n          }\n          this._forEachSubscriber((s) => s.resume());\n          this.#pausedState = null;\n          for (const timer2 of this.#timers.values()) {\n            let timeout = timer2.time;\n            if (timeout < 0) {\n              timeout = 0;\n            }\n            timer2.time = getTime3();\n            setTimeout(timer2.func, timeout);\n          }\n        }\n      };\n      empty = new Uint8Array([]);\n      zeros2 = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/abstract-signer.js\n  function checkProvider(signer, operation) {\n    if (signer.provider) {\n      return signer.provider;\n    }\n    assert3(false, \"missing provider\", \"UNSUPPORTED_OPERATION\", { operation });\n  }\n  async function populate2(signer, tx) {\n    let pop = copyRequest(tx);\n    if (pop.to != null) {\n      pop.to = resolveAddress(pop.to, signer);\n    }\n    if (pop.from != null) {\n      const from = pop.from;\n      pop.from = Promise.all([\n        signer.getAddress(),\n        resolveAddress(from, signer)\n      ]).then(([address, from2]) => {\n        assertArgument(address.toLowerCase() === from2.toLowerCase(), \"transaction from mismatch\", \"tx.from\", from2);\n        return address;\n      });\n    } else {\n      pop.from = signer.getAddress();\n    }\n    return await resolveProperties2(pop);\n  }\n  var AbstractSigner;\n  var init_abstract_signer = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/abstract-signer.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_address3();\n      init_transaction2();\n      init_utils3();\n      init_provider();\n      AbstractSigner = class {\n        /**\n         *  The provider this signer is connected to.\n         */\n        provider;\n        /**\n         *  Creates a new Signer connected to %%provider%%.\n         */\n        constructor(provider) {\n          defineProperties(this, { provider: provider || null });\n        }\n        async getNonce(blockTag) {\n          return checkProvider(this, \"getTransactionCount\").getTransactionCount(await this.getAddress(), blockTag);\n        }\n        async populateCall(tx) {\n          const pop = await populate2(this, tx);\n          return pop;\n        }\n        async populateTransaction(tx) {\n          const provider = checkProvider(this, \"populateTransaction\");\n          const pop = await populate2(this, tx);\n          if (pop.nonce == null) {\n            pop.nonce = await this.getNonce(\"pending\");\n          }\n          if (pop.gasLimit == null) {\n            pop.gasLimit = await this.estimateGas(pop);\n          }\n          const network = await this.provider.getNetwork();\n          if (pop.chainId != null) {\n            const chainId = getBigInt(pop.chainId);\n            assertArgument(chainId === network.chainId, \"transaction chainId mismatch\", \"tx.chainId\", tx.chainId);\n          } else {\n            pop.chainId = network.chainId;\n          }\n          const hasEip1559 = pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null;\n          if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {\n            assertArgument(false, \"eip-1559 transaction do not support gasPrice\", \"tx\", tx);\n          } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {\n            assertArgument(false, \"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"tx\", tx);\n          }\n          if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {\n            pop.type = 2;\n          } else if (pop.type === 0 || pop.type === 1) {\n            const feeData = await provider.getFeeData();\n            assert3(feeData.gasPrice != null, \"network does not support gasPrice\", \"UNSUPPORTED_OPERATION\", {\n              operation: \"getGasPrice\"\n            });\n            if (pop.gasPrice == null) {\n              pop.gasPrice = feeData.gasPrice;\n            }\n          } else {\n            const feeData = await provider.getFeeData();\n            if (pop.type == null) {\n              if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                if (pop.authorizationList && pop.authorizationList.length) {\n                  pop.type = 4;\n                } else {\n                  pop.type = 2;\n                }\n                if (pop.gasPrice != null) {\n                  const gasPrice = pop.gasPrice;\n                  delete pop.gasPrice;\n                  pop.maxFeePerGas = gasPrice;\n                  pop.maxPriorityFeePerGas = gasPrice;\n                } else {\n                  if (pop.maxFeePerGas == null) {\n                    pop.maxFeePerGas = feeData.maxFeePerGas;\n                  }\n                  if (pop.maxPriorityFeePerGas == null) {\n                    pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                  }\n                }\n              } else if (feeData.gasPrice != null) {\n                assert3(!hasEip1559, \"network does not support EIP-1559\", \"UNSUPPORTED_OPERATION\", {\n                  operation: \"populateTransaction\"\n                });\n                if (pop.gasPrice == null) {\n                  pop.gasPrice = feeData.gasPrice;\n                }\n                pop.type = 0;\n              } else {\n                assert3(false, \"failed to get consistent fee data\", \"UNSUPPORTED_OPERATION\", {\n                  operation: \"signer.getFeeData\"\n                });\n              }\n            } else if (pop.type === 2 || pop.type === 3 || pop.type === 4) {\n              if (pop.maxFeePerGas == null) {\n                pop.maxFeePerGas = feeData.maxFeePerGas;\n              }\n              if (pop.maxPriorityFeePerGas == null) {\n                pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n              }\n            }\n          }\n          return await resolveProperties2(pop);\n        }\n        async populateAuthorization(_auth) {\n          const auth = Object.assign({}, _auth);\n          if (auth.chainId == null) {\n            auth.chainId = (await checkProvider(this, \"getNetwork\").getNetwork()).chainId;\n          }\n          if (auth.nonce == null) {\n            auth.nonce = await this.getNonce();\n          }\n          return auth;\n        }\n        async estimateGas(tx) {\n          return checkProvider(this, \"estimateGas\").estimateGas(await this.populateCall(tx));\n        }\n        async call(tx) {\n          return checkProvider(this, \"call\").call(await this.populateCall(tx));\n        }\n        async resolveName(name) {\n          const provider = checkProvider(this, \"resolveName\");\n          return await provider.resolveName(name);\n        }\n        async sendTransaction(tx) {\n          const provider = checkProvider(this, \"sendTransaction\");\n          const pop = await this.populateTransaction(tx);\n          delete pop.from;\n          const txObj = Transaction.from(pop);\n          return await provider.broadcastTransaction(await this.signTransaction(txObj));\n        }\n        // @TODO: in v7 move this to be abstract\n        authorize(authorization) {\n          assert3(false, \"authorization not implemented for this signer\", \"UNSUPPORTED_OPERATION\", { operation: \"authorize\" });\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/subscriber-filterid.js\n  function copy3(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n  var FilterIdSubscriber, FilterIdEventSubscriber, FilterIdPendingSubscriber;\n  var init_subscriber_filterid = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/subscriber-filterid.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_utils3();\n      init_subscriber_polling();\n      FilterIdSubscriber = class {\n        #provider;\n        #filterIdPromise;\n        #poller;\n        #running;\n        #network;\n        #hault;\n        /**\n         *  Creates a new **FilterIdSubscriber** which will used [[_subscribe]]\n         *  and [[_emitResults]] to setup the subscription and provide the event\n         *  to the %%provider%%.\n         */\n        constructor(provider) {\n          this.#provider = provider;\n          this.#filterIdPromise = null;\n          this.#poller = this.#poll.bind(this);\n          this.#running = false;\n          this.#network = null;\n          this.#hault = false;\n        }\n        /**\n         *  Sub-classes **must** override this to begin the subscription.\n         */\n        _subscribe(provider) {\n          throw new Error(\"subclasses must override this\");\n        }\n        /**\n         *  Sub-classes **must** override this handle the events.\n         */\n        _emitResults(provider, result) {\n          throw new Error(\"subclasses must override this\");\n        }\n        /**\n         *  Sub-classes **must** override this handle recovery on errors.\n         */\n        _recover(provider) {\n          throw new Error(\"subclasses must override this\");\n        }\n        async #poll(blockNumber) {\n          try {\n            if (this.#filterIdPromise == null) {\n              this.#filterIdPromise = this._subscribe(this.#provider);\n            }\n            let filterId = null;\n            try {\n              filterId = await this.#filterIdPromise;\n            } catch (error) {\n              if (!isError(error, \"UNSUPPORTED_OPERATION\") || error.operation !== \"eth_newFilter\") {\n                throw error;\n              }\n            }\n            if (filterId == null) {\n              this.#filterIdPromise = null;\n              this.#provider._recoverSubscriber(this, this._recover(this.#provider));\n              return;\n            }\n            const network = await this.#provider.getNetwork();\n            if (!this.#network) {\n              this.#network = network;\n            }\n            if (this.#network.chainId !== network.chainId) {\n              throw new Error(\"chaid changed\");\n            }\n            if (this.#hault) {\n              return;\n            }\n            const result = await this.#provider.send(\"eth_getFilterChanges\", [filterId]);\n            await this._emitResults(this.#provider, result);\n          } catch (error) {\n            console.log(\"@TODO\", error);\n          }\n          this.#provider.once(\"block\", this.#poller);\n        }\n        #teardown() {\n          const filterIdPromise = this.#filterIdPromise;\n          if (filterIdPromise) {\n            this.#filterIdPromise = null;\n            filterIdPromise.then((filterId) => {\n              if (this.#provider.destroyed) {\n                return;\n              }\n              this.#provider.send(\"eth_uninstallFilter\", [filterId]);\n            });\n          }\n        }\n        start() {\n          if (this.#running) {\n            return;\n          }\n          this.#running = true;\n          this.#poll(-2);\n        }\n        stop() {\n          if (!this.#running) {\n            return;\n          }\n          this.#running = false;\n          this.#hault = true;\n          this.#teardown();\n          this.#provider.off(\"block\", this.#poller);\n        }\n        pause(dropWhilePaused) {\n          if (dropWhilePaused) {\n            this.#teardown();\n          }\n          this.#provider.off(\"block\", this.#poller);\n        }\n        resume() {\n          this.start();\n        }\n      };\n      FilterIdEventSubscriber = class extends FilterIdSubscriber {\n        #event;\n        /**\n         *  Creates a new **FilterIdEventSubscriber** attached to %%provider%%\n         *  listening for %%filter%%.\n         */\n        constructor(provider, filter) {\n          super(provider);\n          this.#event = copy3(filter);\n        }\n        _recover(provider) {\n          return new PollingEventSubscriber(provider, this.#event);\n        }\n        async _subscribe(provider) {\n          const filterId = await provider.send(\"eth_newFilter\", [this.#event]);\n          return filterId;\n        }\n        async _emitResults(provider, results) {\n          for (const result of results) {\n            provider.emit(this.#event, provider._wrapLog(result, provider._network));\n          }\n        }\n      };\n      FilterIdPendingSubscriber = class extends FilterIdSubscriber {\n        async _subscribe(provider) {\n          return await provider.send(\"eth_newPendingTransactionFilter\", []);\n        }\n        async _emitResults(provider, results) {\n          for (const result of results) {\n            provider.emit(\"pending\", result);\n          }\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\n  function deepCopy2(value) {\n    if (value == null || Primitive.indexOf(typeof value) >= 0) {\n      return value;\n    }\n    if (typeof value.getAddress === \"function\") {\n      return value;\n    }\n    if (Array.isArray(value)) {\n      return value.map(deepCopy2);\n    }\n    if (typeof value === \"object\") {\n      return Object.keys(value).reduce((accum, key2) => {\n        accum[key2] = value[key2];\n        return accum;\n      }, {});\n    }\n    throw new Error(`should not happen: ${value} (${typeof value})`);\n  }\n  function stall3(duration) {\n    return new Promise((resolve) => {\n      setTimeout(resolve, duration);\n    });\n  }\n  function getLowerCase2(value) {\n    if (value) {\n      return value.toLowerCase();\n    }\n    return value;\n  }\n  function isPollable(value) {\n    return value && typeof value.pollingInterval === \"number\";\n  }\n  function spelunkData(value) {\n    if (value == null) {\n      return null;\n    }\n    if (typeof value.message === \"string\" && value.message.match(/revert/i) && isHexString2(value.data)) {\n      return { message: value.message, data: value.data };\n    }\n    if (typeof value === \"object\") {\n      for (const key2 in value) {\n        const result = spelunkData(value[key2]);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    }\n    if (typeof value === \"string\") {\n      try {\n        return spelunkData(JSON.parse(value));\n      } catch (error) {\n      }\n    }\n    return null;\n  }\n  function _spelunkMessage(value, result) {\n    if (value == null) {\n      return;\n    }\n    if (typeof value.message === \"string\") {\n      result.push(value.message);\n    }\n    if (typeof value === \"object\") {\n      for (const key2 in value) {\n        _spelunkMessage(value[key2], result);\n      }\n    }\n    if (typeof value === \"string\") {\n      try {\n        return _spelunkMessage(JSON.parse(value), result);\n      } catch (error) {\n      }\n    }\n  }\n  function spelunkMessage(value) {\n    const result = [];\n    _spelunkMessage(value, result);\n    return result;\n  }\n  var Primitive, defaultOptions2, JsonRpcSigner2, JsonRpcApiProvider, JsonRpcApiPollingProvider, JsonRpcProvider2;\n  var init_provider_jsonrpc = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_abi();\n      init_address3();\n      init_hash();\n      init_transaction2();\n      init_utils3();\n      init_abstract_provider();\n      init_abstract_signer();\n      init_network();\n      init_subscriber_filterid();\n      init_subscriber_polling();\n      Primitive = \"bigint,boolean,function,number,string,symbol\".split(/,/g);\n      defaultOptions2 = {\n        polling: false,\n        staticNetwork: null,\n        batchStallTime: 10,\n        batchMaxSize: 1 << 20,\n        batchMaxCount: 100,\n        cacheTimeout: 250,\n        pollingInterval: 4e3\n      };\n      JsonRpcSigner2 = class extends AbstractSigner {\n        address;\n        constructor(provider, address) {\n          super(provider);\n          address = getAddress2(address);\n          defineProperties(this, { address });\n        }\n        connect(provider) {\n          assert3(false, \"cannot reconnect JsonRpcSigner\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"signer.connect\"\n          });\n        }\n        async getAddress() {\n          return this.address;\n        }\n        // JSON-RPC will automatially fill in nonce, etc. so we just check from\n        async populateTransaction(tx) {\n          return await this.populateCall(tx);\n        }\n        // Returns just the hash of the transaction after sent, which is what\n        // the bare JSON-RPC API does;\n        async sendUncheckedTransaction(_tx) {\n          const tx = deepCopy2(_tx);\n          const promises = [];\n          if (tx.from) {\n            const _from = tx.from;\n            promises.push((async () => {\n              const from = await resolveAddress(_from, this.provider);\n              assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\n              tx.from = from;\n            })());\n          } else {\n            tx.from = this.address;\n          }\n          if (tx.gasLimit == null) {\n            promises.push((async () => {\n              tx.gasLimit = await this.provider.estimateGas({ ...tx, from: this.address });\n            })());\n          }\n          if (tx.to != null) {\n            const _to = tx.to;\n            promises.push((async () => {\n              tx.to = await resolveAddress(_to, this.provider);\n            })());\n          }\n          if (promises.length) {\n            await Promise.all(promises);\n          }\n          const hexTx = this.provider.getRpcTransaction(tx);\n          return this.provider.send(\"eth_sendTransaction\", [hexTx]);\n        }\n        async sendTransaction(tx) {\n          const blockNumber = await this.provider.getBlockNumber();\n          const hash4 = await this.sendUncheckedTransaction(tx);\n          return await new Promise((resolve, reject) => {\n            const timeouts = [1e3, 100];\n            let invalids = 0;\n            const checkTx = async () => {\n              try {\n                const tx2 = await this.provider.getTransaction(hash4);\n                if (tx2 != null) {\n                  resolve(tx2.replaceableTransaction(blockNumber));\n                  return;\n                }\n              } catch (error) {\n                if (isError(error, \"CANCELLED\") || isError(error, \"BAD_DATA\") || isError(error, \"NETWORK_ERROR\") || isError(error, \"UNSUPPORTED_OPERATION\")) {\n                  if (error.info == null) {\n                    error.info = {};\n                  }\n                  error.info.sendTransactionHash = hash4;\n                  reject(error);\n                  return;\n                }\n                if (isError(error, \"INVALID_ARGUMENT\")) {\n                  invalids++;\n                  if (error.info == null) {\n                    error.info = {};\n                  }\n                  error.info.sendTransactionHash = hash4;\n                  if (invalids > 10) {\n                    reject(error);\n                    return;\n                  }\n                }\n                this.provider.emit(\"error\", makeError(\"failed to fetch transation after sending (will try again)\", \"UNKNOWN_ERROR\", { error }));\n              }\n              this.provider._setTimeout(() => {\n                checkTx();\n              }, timeouts.pop() || 4e3);\n            };\n            checkTx();\n          });\n        }\n        async signTransaction(_tx) {\n          const tx = deepCopy2(_tx);\n          if (tx.from) {\n            const from = await resolveAddress(tx.from, this.provider);\n            assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\n            tx.from = from;\n          } else {\n            tx.from = this.address;\n          }\n          const hexTx = this.provider.getRpcTransaction(tx);\n          return await this.provider.send(\"eth_signTransaction\", [hexTx]);\n        }\n        async signMessage(_message) {\n          const message = typeof _message === \"string\" ? toUtf8Bytes2(_message) : _message;\n          return await this.provider.send(\"personal_sign\", [\n            hexlify2(message),\n            this.address.toLowerCase()\n          ]);\n        }\n        async signTypedData(domain2, types, _value) {\n          const value = deepCopy2(_value);\n          const populated = await TypedDataEncoder2.resolveNames(domain2, types, value, async (value2) => {\n            const address = await resolveAddress(value2);\n            assertArgument(address != null, \"TypedData does not support null address\", \"value\", value2);\n            return address;\n          });\n          return await this.provider.send(\"eth_signTypedData_v4\", [\n            this.address.toLowerCase(),\n            JSON.stringify(TypedDataEncoder2.getPayload(populated.domain, types, populated.value))\n          ]);\n        }\n        async unlock(password) {\n          return this.provider.send(\"personal_unlockAccount\", [\n            this.address.toLowerCase(),\n            password,\n            null\n          ]);\n        }\n        // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n        async _legacySignMessage(_message) {\n          const message = typeof _message === \"string\" ? toUtf8Bytes2(_message) : _message;\n          return await this.provider.send(\"eth_sign\", [\n            this.address.toLowerCase(),\n            hexlify2(message)\n          ]);\n        }\n      };\n      JsonRpcApiProvider = class extends AbstractProvider {\n        #options;\n        // The next ID to use for the JSON-RPC ID field\n        #nextId;\n        // Payloads are queued and triggered in batches using the drainTimer\n        #payloads;\n        #drainTimer;\n        #notReady;\n        #network;\n        #pendingDetectNetwork;\n        #scheduleDrain() {\n          if (this.#drainTimer) {\n            return;\n          }\n          const stallTime = this._getOption(\"batchMaxCount\") === 1 ? 0 : this._getOption(\"batchStallTime\");\n          this.#drainTimer = setTimeout(() => {\n            this.#drainTimer = null;\n            const payloads = this.#payloads;\n            this.#payloads = [];\n            while (payloads.length) {\n              const batch = [payloads.shift()];\n              while (payloads.length) {\n                if (batch.length === this.#options.batchMaxCount) {\n                  break;\n                }\n                batch.push(payloads.shift());\n                const bytes3 = JSON.stringify(batch.map((p) => p.payload));\n                if (bytes3.length > this.#options.batchMaxSize) {\n                  payloads.unshift(batch.pop());\n                  break;\n                }\n              }\n              (async () => {\n                const payload = batch.length === 1 ? batch[0].payload : batch.map((p) => p.payload);\n                this.emit(\"debug\", { action: \"sendRpcPayload\", payload });\n                try {\n                  const result = await this._send(payload);\n                  this.emit(\"debug\", { action: \"receiveRpcResult\", result });\n                  for (const { resolve, reject, payload: payload2 } of batch) {\n                    if (this.destroyed) {\n                      reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: payload2.method }));\n                      continue;\n                    }\n                    const resp = result.filter((r2) => r2.id === payload2.id)[0];\n                    if (resp == null) {\n                      const error = makeError(\"missing response for request\", \"BAD_DATA\", {\n                        value: result,\n                        info: { payload: payload2 }\n                      });\n                      this.emit(\"error\", error);\n                      reject(error);\n                      continue;\n                    }\n                    if (\"error\" in resp) {\n                      reject(this.getRpcError(payload2, resp));\n                      continue;\n                    }\n                    resolve(resp.result);\n                  }\n                } catch (error) {\n                  this.emit(\"debug\", { action: \"receiveRpcError\", error });\n                  for (const { reject } of batch) {\n                    reject(error);\n                  }\n                }\n              })();\n            }\n          }, stallTime);\n        }\n        constructor(network, options) {\n          super(network, options);\n          this.#nextId = 1;\n          this.#options = Object.assign({}, defaultOptions2, options || {});\n          this.#payloads = [];\n          this.#drainTimer = null;\n          this.#network = null;\n          this.#pendingDetectNetwork = null;\n          {\n            let resolve = null;\n            const promise = new Promise((_resolve) => {\n              resolve = _resolve;\n            });\n            this.#notReady = { promise, resolve };\n          }\n          const staticNetwork = this._getOption(\"staticNetwork\");\n          if (typeof staticNetwork === \"boolean\") {\n            assertArgument(!staticNetwork || network !== \"any\", \"staticNetwork cannot be used on special network 'any'\", \"options\", options);\n            if (staticNetwork && network != null) {\n              this.#network = Network.from(network);\n            }\n          } else if (staticNetwork) {\n            assertArgument(network == null || staticNetwork.matches(network), \"staticNetwork MUST match network object\", \"options\", options);\n            this.#network = staticNetwork;\n          }\n        }\n        /**\n         *  Returns the value associated with the option %%key%%.\n         *\n         *  Sub-classes can use this to inquire about configuration options.\n         */\n        _getOption(key2) {\n          return this.#options[key2];\n        }\n        /**\n         *  Gets the [[Network]] this provider has committed to. On each call, the network\n         *  is detected, and if it has changed, the call will reject.\n         */\n        get _network() {\n          assert3(this.#network, \"network is not available yet\", \"NETWORK_ERROR\");\n          return this.#network;\n        }\n        /**\n         *  Resolves to the non-normalized value by performing %%req%%.\n         *\n         *  Sub-classes may override this to modify behavior of actions,\n         *  and should generally call ``super._perform`` as a fallback.\n         */\n        async _perform(req) {\n          if (req.method === \"call\" || req.method === \"estimateGas\") {\n            let tx = req.transaction;\n            if (tx && tx.type != null && getBigInt(tx.type)) {\n              if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                const feeData = await this.getFeeData();\n                if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                  req = Object.assign({}, req, {\n                    transaction: Object.assign({}, tx, { type: void 0 })\n                  });\n                }\n              }\n            }\n          }\n          const request = this.getRpcRequest(req);\n          if (request != null) {\n            return await this.send(request.method, request.args);\n          }\n          return super._perform(req);\n        }\n        /**\n         *  Sub-classes may override this; it detects the *actual* network that\n         *  we are **currently** connected to.\n         *\n         *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the\n         *  _send primitive must be used instead.\n         */\n        async _detectNetwork() {\n          const network = this._getOption(\"staticNetwork\");\n          if (network) {\n            if (network === true) {\n              if (this.#network) {\n                return this.#network;\n              }\n            } else {\n              return network;\n            }\n          }\n          if (this.#pendingDetectNetwork) {\n            return await this.#pendingDetectNetwork;\n          }\n          if (this.ready) {\n            this.#pendingDetectNetwork = (async () => {\n              try {\n                const result = Network.from(getBigInt(await this.send(\"eth_chainId\", [])));\n                this.#pendingDetectNetwork = null;\n                return result;\n              } catch (error) {\n                this.#pendingDetectNetwork = null;\n                throw error;\n              }\n            })();\n            return await this.#pendingDetectNetwork;\n          }\n          this.#pendingDetectNetwork = (async () => {\n            const payload = {\n              id: this.#nextId++,\n              method: \"eth_chainId\",\n              params: [],\n              jsonrpc: \"2.0\"\n            };\n            this.emit(\"debug\", { action: \"sendRpcPayload\", payload });\n            let result;\n            try {\n              result = (await this._send(payload))[0];\n              this.#pendingDetectNetwork = null;\n            } catch (error) {\n              this.#pendingDetectNetwork = null;\n              this.emit(\"debug\", { action: \"receiveRpcError\", error });\n              throw error;\n            }\n            this.emit(\"debug\", { action: \"receiveRpcResult\", result });\n            if (\"result\" in result) {\n              return Network.from(getBigInt(result.result));\n            }\n            throw this.getRpcError(payload, result);\n          })();\n          return await this.#pendingDetectNetwork;\n        }\n        /**\n         *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls\n         *  will be passed to [[_send]] from [[send]]. If it is overridden, then\n         *  ``super._start()`` **MUST** be called.\n         *\n         *  Calling it multiple times is safe and has no effect.\n         */\n        _start() {\n          if (this.#notReady == null || this.#notReady.resolve == null) {\n            return;\n          }\n          this.#notReady.resolve();\n          this.#notReady = null;\n          (async () => {\n            while (this.#network == null && !this.destroyed) {\n              try {\n                this.#network = await this._detectNetwork();\n              } catch (error) {\n                if (this.destroyed) {\n                  break;\n                }\n                console.log(\"JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)\");\n                this.emit(\"error\", makeError(\"failed to bootstrap network detection\", \"NETWORK_ERROR\", { event: \"initial-network-discovery\", info: { error } }));\n                await stall3(1e3);\n              }\n            }\n            this.#scheduleDrain();\n          })();\n        }\n        /**\n         *  Resolves once the [[_start]] has been called. This can be used in\n         *  sub-classes to defer sending data until the connection has been\n         *  established.\n         */\n        async _waitUntilReady() {\n          if (this.#notReady == null) {\n            return;\n          }\n          return await this.#notReady.promise;\n        }\n        /**\n         *  Return a Subscriber that will manage the %%sub%%.\n         *\n         *  Sub-classes may override this to modify the behavior of\n         *  subscription management.\n         */\n        _getSubscriber(sub) {\n          if (sub.type === \"pending\") {\n            return new FilterIdPendingSubscriber(this);\n          }\n          if (sub.type === \"event\") {\n            if (this._getOption(\"polling\")) {\n              return new PollingEventSubscriber(this, sub.filter);\n            }\n            return new FilterIdEventSubscriber(this, sub.filter);\n          }\n          if (sub.type === \"orphan\" && sub.filter.orphan === \"drop-log\") {\n            return new UnmanagedSubscriber(\"orphan\");\n          }\n          return super._getSubscriber(sub);\n        }\n        /**\n         *  Returns true only if the [[_start]] has been called.\n         */\n        get ready() {\n          return this.#notReady == null;\n        }\n        /**\n         *  Returns %%tx%% as a normalized JSON-RPC transaction request,\n         *  which has all values hexlified and any numeric values converted\n         *  to Quantity values.\n         */\n        getRpcTransaction(tx) {\n          const result = {};\n          [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach((key2) => {\n            if (tx[key2] == null) {\n              return;\n            }\n            let dstKey = key2;\n            if (key2 === \"gasLimit\") {\n              dstKey = \"gas\";\n            }\n            result[dstKey] = toQuantity(getBigInt(tx[key2], `tx.${key2}`));\n          });\n          [\"from\", \"to\", \"data\"].forEach((key2) => {\n            if (tx[key2] == null) {\n              return;\n            }\n            result[key2] = hexlify2(tx[key2]);\n          });\n          if (tx.accessList) {\n            result[\"accessList\"] = accessListify2(tx.accessList);\n          }\n          if (tx.blobVersionedHashes) {\n            result[\"blobVersionedHashes\"] = tx.blobVersionedHashes.map((h) => h.toLowerCase());\n          }\n          if (tx.authorizationList) {\n            result[\"authorizationList\"] = tx.authorizationList.map((_a) => {\n              const a = authorizationify(_a);\n              return {\n                address: a.address,\n                nonce: toQuantity(a.nonce),\n                chainId: toQuantity(a.chainId),\n                yParity: toQuantity(a.signature.yParity),\n                r: toQuantity(a.signature.r),\n                s: toQuantity(a.signature.s)\n              };\n            });\n          }\n          return result;\n        }\n        /**\n         *  Returns the request method and arguments required to perform\n         *  %%req%%.\n         */\n        getRpcRequest(req) {\n          switch (req.method) {\n            case \"chainId\":\n              return { method: \"eth_chainId\", args: [] };\n            case \"getBlockNumber\":\n              return { method: \"eth_blockNumber\", args: [] };\n            case \"getGasPrice\":\n              return { method: \"eth_gasPrice\", args: [] };\n            case \"getPriorityFee\":\n              return { method: \"eth_maxPriorityFeePerGas\", args: [] };\n            case \"getBalance\":\n              return {\n                method: \"eth_getBalance\",\n                args: [getLowerCase2(req.address), req.blockTag]\n              };\n            case \"getTransactionCount\":\n              return {\n                method: \"eth_getTransactionCount\",\n                args: [getLowerCase2(req.address), req.blockTag]\n              };\n            case \"getCode\":\n              return {\n                method: \"eth_getCode\",\n                args: [getLowerCase2(req.address), req.blockTag]\n              };\n            case \"getStorage\":\n              return {\n                method: \"eth_getStorageAt\",\n                args: [\n                  getLowerCase2(req.address),\n                  \"0x\" + req.position.toString(16),\n                  req.blockTag\n                ]\n              };\n            case \"broadcastTransaction\":\n              return {\n                method: \"eth_sendRawTransaction\",\n                args: [req.signedTransaction]\n              };\n            case \"getBlock\":\n              if (\"blockTag\" in req) {\n                return {\n                  method: \"eth_getBlockByNumber\",\n                  args: [req.blockTag, !!req.includeTransactions]\n                };\n              } else if (\"blockHash\" in req) {\n                return {\n                  method: \"eth_getBlockByHash\",\n                  args: [req.blockHash, !!req.includeTransactions]\n                };\n              }\n              break;\n            case \"getTransaction\":\n              return {\n                method: \"eth_getTransactionByHash\",\n                args: [req.hash]\n              };\n            case \"getTransactionReceipt\":\n              return {\n                method: \"eth_getTransactionReceipt\",\n                args: [req.hash]\n              };\n            case \"call\":\n              return {\n                method: \"eth_call\",\n                args: [this.getRpcTransaction(req.transaction), req.blockTag]\n              };\n            case \"estimateGas\": {\n              return {\n                method: \"eth_estimateGas\",\n                args: [this.getRpcTransaction(req.transaction)]\n              };\n            }\n            case \"getLogs\":\n              if (req.filter && req.filter.address != null) {\n                if (Array.isArray(req.filter.address)) {\n                  req.filter.address = req.filter.address.map(getLowerCase2);\n                } else {\n                  req.filter.address = getLowerCase2(req.filter.address);\n                }\n              }\n              return { method: \"eth_getLogs\", args: [req.filter] };\n          }\n          return null;\n        }\n        /**\n         *  Returns an ethers-style Error for the given JSON-RPC error\n         *  %%payload%%, coalescing the various strings and error shapes\n         *  that different nodes return, coercing them into a machine-readable\n         *  standardized error.\n         */\n        getRpcError(payload, _error) {\n          const { method } = payload;\n          const { error } = _error;\n          if (method === \"eth_estimateGas\" && error.message) {\n            const msg = error.message;\n            if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {\n              return makeError(\"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n                transaction: payload.params[0],\n                info: { payload, error }\n              });\n            } else if (msg.match(/nonce/i) && msg.match(/too low/i)) {\n              return makeError(\"nonce has already been used\", \"NONCE_EXPIRED\", {\n                transaction: payload.params[0],\n                info: { payload, error }\n              });\n            }\n          }\n          if (method === \"eth_call\" || method === \"eth_estimateGas\") {\n            const result = spelunkData(error);\n            const e = AbiCoder2.getBuiltinCallException(method === \"eth_call\" ? \"call\" : \"estimateGas\", payload.params[0], result ? result.data : null);\n            e.info = { error, payload };\n            return e;\n          }\n          const message = JSON.stringify(spelunkMessage(error));\n          if (typeof error.message === \"string\" && error.message.match(/user denied|ethers-user-denied/i)) {\n            const actionMap = {\n              eth_sign: \"signMessage\",\n              personal_sign: \"signMessage\",\n              eth_signTypedData_v4: \"signTypedData\",\n              eth_signTransaction: \"signTransaction\",\n              eth_sendTransaction: \"sendTransaction\",\n              eth_requestAccounts: \"requestAccess\",\n              wallet_requestAccounts: \"requestAccess\"\n            };\n            return makeError(`user rejected action`, \"ACTION_REJECTED\", {\n              action: actionMap[method] || \"unknown\",\n              reason: \"rejected\",\n              info: { payload, error }\n            });\n          }\n          if (method === \"eth_sendRawTransaction\" || method === \"eth_sendTransaction\") {\n            const transaction = payload.params[0];\n            if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n              return makeError(\"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n                transaction,\n                info: { error }\n              });\n            }\n            if (message.match(/nonce/i) && message.match(/too low/i)) {\n              return makeError(\"nonce has already been used\", \"NONCE_EXPIRED\", { transaction, info: { error } });\n            }\n            if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {\n              return makeError(\"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", { transaction, info: { error } });\n            }\n            if (message.match(/only replay-protected/i)) {\n              return makeError(\"legacy pre-eip-155 transactions not supported\", \"UNSUPPORTED_OPERATION\", {\n                operation: method,\n                info: { transaction, info: { error } }\n              });\n            }\n          }\n          let unsupported = !!message.match(/the method .* does not exist/i);\n          if (!unsupported) {\n            if (error && error.details && error.details.startsWith(\"Unauthorized method:\")) {\n              unsupported = true;\n            }\n          }\n          if (unsupported) {\n            return makeError(\"unsupported operation\", \"UNSUPPORTED_OPERATION\", {\n              operation: payload.method,\n              info: { error, payload }\n            });\n          }\n          return makeError(\"could not coalesce error\", \"UNKNOWN_ERROR\", { error, payload });\n        }\n        /**\n         *  Requests the %%method%% with %%params%% via the JSON-RPC protocol\n         *  over the underlying channel. This can be used to call methods\n         *  on the backend that do not have a high-level API within the Provider\n         *  API.\n         *\n         *  This method queues requests according to the batch constraints\n         *  in the options, assigns the request a unique ID.\n         *\n         *  **Do NOT override** this method in sub-classes; instead\n         *  override [[_send]] or force the options values in the\n         *  call to the constructor to modify this method's behavior.\n         */\n        send(method, params) {\n          if (this.destroyed) {\n            return Promise.reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: method }));\n          }\n          const id3 = this.#nextId++;\n          const promise = new Promise((resolve, reject) => {\n            this.#payloads.push({\n              resolve,\n              reject,\n              payload: { method, params, id: id3, jsonrpc: \"2.0\" }\n            });\n          });\n          this.#scheduleDrain();\n          return promise;\n        }\n        /**\n         *  Resolves to the [[Signer]] account for  %%address%% managed by\n         *  the client.\n         *\n         *  If the %%address%% is a number, it is used as an index in the\n         *  the accounts from [[listAccounts]].\n         *\n         *  This can only be used on clients which manage accounts (such as\n         *  Geth with imported account or MetaMask).\n         *\n         *  Throws if the account doesn't exist.\n         */\n        async getSigner(address) {\n          if (address == null) {\n            address = 0;\n          }\n          const accountsPromise = this.send(\"eth_accounts\", []);\n          if (typeof address === \"number\") {\n            const accounts2 = await accountsPromise;\n            if (address >= accounts2.length) {\n              throw new Error(\"no such account\");\n            }\n            return new JsonRpcSigner2(this, accounts2[address]);\n          }\n          const { accounts } = await resolveProperties2({\n            network: this.getNetwork(),\n            accounts: accountsPromise\n          });\n          address = getAddress2(address);\n          for (const account of accounts) {\n            if (getAddress2(account) === address) {\n              return new JsonRpcSigner2(this, address);\n            }\n          }\n          throw new Error(\"invalid account\");\n        }\n        async listAccounts() {\n          const accounts = await this.send(\"eth_accounts\", []);\n          return accounts.map((a) => new JsonRpcSigner2(this, a));\n        }\n        destroy() {\n          if (this.#drainTimer) {\n            clearTimeout(this.#drainTimer);\n            this.#drainTimer = null;\n          }\n          for (const { payload, reject } of this.#payloads) {\n            reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: payload.method }));\n          }\n          this.#payloads = [];\n          super.destroy();\n        }\n      };\n      JsonRpcApiPollingProvider = class extends JsonRpcApiProvider {\n        #pollingInterval;\n        constructor(network, options) {\n          super(network, options);\n          let pollingInterval = this._getOption(\"pollingInterval\");\n          if (pollingInterval == null) {\n            pollingInterval = defaultOptions2.pollingInterval;\n          }\n          this.#pollingInterval = pollingInterval;\n        }\n        _getSubscriber(sub) {\n          const subscriber = super._getSubscriber(sub);\n          if (isPollable(subscriber)) {\n            subscriber.pollingInterval = this.#pollingInterval;\n          }\n          return subscriber;\n        }\n        /**\n         *  The polling interval (default: 4000 ms)\n         */\n        get pollingInterval() {\n          return this.#pollingInterval;\n        }\n        set pollingInterval(value) {\n          if (!Number.isInteger(value) || value < 0) {\n            throw new Error(\"invalid interval\");\n          }\n          this.#pollingInterval = value;\n          this._forEachSubscriber((sub) => {\n            if (isPollable(sub)) {\n              sub.pollingInterval = this.#pollingInterval;\n            }\n          });\n        }\n      };\n      JsonRpcProvider2 = class extends JsonRpcApiPollingProvider {\n        #connect;\n        constructor(url, network, options) {\n          if (url == null) {\n            url = \"http://localhost:8545\";\n          }\n          super(network, options);\n          if (typeof url === \"string\") {\n            this.#connect = new FetchRequest(url);\n          } else {\n            this.#connect = url.clone();\n          }\n        }\n        _getConnection() {\n          return this.#connect.clone();\n        }\n        async send(method, params) {\n          await this._start();\n          return await super.send(method, params);\n        }\n        async _send(payload) {\n          const request = this._getConnection();\n          request.body = JSON.stringify(payload);\n          request.setHeader(\"content-type\", \"application/json\");\n          const response = await request.send();\n          response.assertOk();\n          let resp = response.bodyJson;\n          if (!Array.isArray(resp)) {\n            resp = [resp];\n          }\n          return resp;\n        }\n      };\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/index.js\n  var init_providers = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_provider_jsonrpc();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/ethers.js\n  var init_ethers2 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/ethers.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_providers();\n    }\n  });\n\n  // ../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/index.js\n  var init_lib33 = __esm({\n    \"../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/index.js\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_ethers2();\n    }\n  });\n\n  // src/lib/tool-helpers/get-gas-params.ts\n  var getGasParams;\n  var init_get_gas_params = __esm({\n    \"src/lib/tool-helpers/get-gas-params.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib32();\n      init_lib33();\n      getGasParams = async (provider, estimatedGas) => {\n        const rpcUrl = provider.connection?.url;\n        if (!rpcUrl) {\n          throw new Error(\"Could not extract RPC URL from provider for v6 operations\");\n        }\n        const v6Provider = new JsonRpcProvider2(rpcUrl);\n        const v6FeeData = await v6Provider.getFeeData();\n        let maxFeePerGas;\n        let maxPriorityFeePerGas;\n        if (!v6FeeData || !v6FeeData.maxFeePerGas || !v6FeeData.maxPriorityFeePerGas) {\n          maxPriorityFeePerGas = ethers_exports.utils.parseUnits(\"1.5\", \"gwei\");\n          let baseFeePerGas;\n          const latestBlock = await provider.getBlock(\"latest\");\n          if (latestBlock && latestBlock.baseFeePerGas) {\n            baseFeePerGas = latestBlock.baseFeePerGas;\n          } else {\n            baseFeePerGas = ethers_exports.utils.parseUnits(\"1\", \"gwei\");\n          }\n          maxFeePerGas = baseFeePerGas.mul(2).add(maxPriorityFeePerGas);\n        } else {\n          maxFeePerGas = ethers_exports.BigNumber.from(v6FeeData.maxFeePerGas.toString());\n          maxPriorityFeePerGas = ethers_exports.BigNumber.from(v6FeeData.maxPriorityFeePerGas.toString());\n        }\n        const estimatedGasWithBuffer = estimatedGas.mul(120).div(100);\n        return {\n          estimatedGas: estimatedGasWithBuffer,\n          maxFeePerGas,\n          maxPriorityFeePerGas\n        };\n      };\n    }\n  });\n\n  // src/lib/tool-helpers/send-erc20-approval-tx.ts\n  var sendErc20ApprovalTx;\n  var init_send_erc20_approval_tx = __esm({\n    \"src/lib/tool-helpers/send-erc20-approval-tx.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_lib32();\n      init_getErc20Contract();\n      init_sign_tx();\n      init_get_gas_params();\n      sendErc20ApprovalTx = async ({\n        rpcUrl,\n        chainId,\n        pkpEthAddress,\n        pkpPublicKey,\n        spenderAddress,\n        tokenAmount,\n        tokenAddress\n      }) => {\n        console.log(\"sendErc20ApprovalTx\", {\n          rpcUrl,\n          chainId,\n          pkpEthAddress,\n          pkpPublicKey,\n          spenderAddress,\n          tokenAmount: tokenAmount.toString(),\n          tokenAddress\n        });\n        const provider = new ethers_exports.providers.JsonRpcProvider(rpcUrl);\n        const contract = getErc20Contract(tokenAddress, provider);\n        const tokenAmountBN = ethers_exports.BigNumber.from(tokenAmount.toString());\n        const approveTxData = contract.interface.encodeFunctionData(\"approve\", [\n          spenderAddress,\n          tokenAmountBN\n        ]);\n        const txMetadataResponse = await Lit.Actions.runOnce(\n          { waitForResponse: true, name: \"estimateGas\" },\n          async () => {\n            try {\n              const gasLimit = await provider.estimateGas({\n                from: pkpEthAddress,\n                to: tokenAddress,\n                data: approveTxData\n              });\n              const gasParams = await getGasParams(provider, gasLimit);\n              const nonce2 = await provider.getTransactionCount(pkpEthAddress);\n              return JSON.stringify({\n                status: \"success\",\n                maxFeePerGas: gasParams.maxFeePerGas.toString(),\n                maxPriorityFeePerGas: gasParams.maxPriorityFeePerGas.toString(),\n                gas: gasParams.estimatedGas.toString(),\n                // Already includes 20% buffer\n                nonce: nonce2\n              });\n            } catch (error) {\n              return JSON.stringify({\n                status: \"error\",\n                error: error instanceof Error ? error.message : String(error)\n              });\n            }\n          }\n        );\n        const parsedTxMetadataResponse = JSON.parse(txMetadataResponse);\n        if (parsedTxMetadataResponse.status === \"error\") {\n          throw new Error(`Error estimating gas: ${parsedTxMetadataResponse.error}`);\n        }\n        console.log(\n          \"parsedTxMetadataResponse (sendErc20ApprovalTx)\",\n          JSON.stringify(parsedTxMetadataResponse)\n        );\n        const { maxFeePerGas, maxPriorityFeePerGas, gas, nonce } = parsedTxMetadataResponse;\n        const unsignedApproveTx = {\n          to: tokenAddress,\n          data: approveTxData,\n          value: ethers_exports.BigNumber.from(0),\n          gasLimit: ethers_exports.BigNumber.from(gas),\n          maxFeePerGas: ethers_exports.BigNumber.from(maxFeePerGas),\n          maxPriorityFeePerGas: ethers_exports.BigNumber.from(maxPriorityFeePerGas),\n          nonce,\n          chainId,\n          type: 2\n          // EIP-1559 transaction type\n        };\n        const signedApproveTx = await signTx(pkpPublicKey, unsignedApproveTx, \"approveErc20Sig\");\n        console.log(\"signedApproveTx (sendErc20ApprovalTx)\", signedApproveTx);\n        const erc20ApproveTxResponse = await Lit.Actions.runOnce(\n          { waitForResponse: true, name: \"spendTxSender\" },\n          async () => {\n            try {\n              const txResponse = await provider.sendTransaction(signedApproveTx);\n              return JSON.stringify({\n                status: \"success\",\n                txHash: txResponse.hash\n              });\n            } catch (error) {\n              return JSON.stringify({\n                status: \"error\",\n                error: error instanceof Error ? error.message : String(error)\n              });\n            }\n          }\n        );\n        console.log(\"erc20ApproveTxResponse (sendErc20ApprovalTx)\", erc20ApproveTxResponse);\n        const parsedErc20ApproveTxResponse = JSON.parse(erc20ApproveTxResponse);\n        if (parsedErc20ApproveTxResponse.status === \"error\") {\n          throw new Error(`Error sending approval transaction: ${parsedErc20ApproveTxResponse.error}`);\n        }\n        return parsedErc20ApproveTxResponse.txHash;\n      };\n    }\n  });\n\n  // src/lib/tool-helpers/index.ts\n  var init_tool_helpers = __esm({\n    \"src/lib/tool-helpers/index.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_get_current_allowance();\n      init_send_erc20_approval_tx();\n    }\n  });\n\n  // src/lib/tool-checks/check-native-token-balance.ts\n  var checkNativeTokenBalance;\n  var init_check_native_token_balance = __esm({\n    \"src/lib/tool-checks/check-native-token-balance.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      checkNativeTokenBalance = async ({\n        provider,\n        pkpEthAddress\n      }) => {\n        const ethBalance = await provider.getBalance(pkpEthAddress);\n        return ethBalance.gt(0n);\n      };\n    }\n  });\n\n  // src/lib/tool-checks/index.ts\n  var init_tool_checks = __esm({\n    \"src/lib/tool-checks/index.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_check_native_token_balance();\n    }\n  });\n\n  // src/lib/schemas.ts\n  var toolParamsSchema, precheckSuccessSchema, precheckFailSchema, executeSuccessSchema, executeFailSchema;\n  var init_schemas = __esm({\n    \"src/lib/schemas.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_esm();\n      toolParamsSchema = external_exports.object({\n        rpcUrl: external_exports.string(),\n        chainId: external_exports.number(),\n        spenderAddress: external_exports.string(),\n        tokenAddress: external_exports.string(),\n        tokenDecimals: external_exports.number(),\n        tokenAmount: external_exports.number().gte(0, \"tokenAmount cannot be a negative number\")\n      });\n      precheckSuccessSchema = external_exports.object({\n        alreadyApproved: external_exports.boolean(),\n        currentAllowance: external_exports.string()\n      });\n      precheckFailSchema = external_exports.object({\n        noNativeTokenBalance: external_exports.boolean()\n      });\n      executeSuccessSchema = external_exports.object({\n        // Transaction hash if a new approval was created, undefined if existing approval was used\n        approvalTxHash: external_exports.string().optional(),\n        // The approved amount that is now active (either from existing or new approval)\n        approvedAmount: external_exports.string(),\n        // The token address that was approved\n        tokenAddress: external_exports.string(),\n        // The token decimals that was approved\n        tokenDecimals: external_exports.number(),\n        // The spender address that was approved\n        spenderAddress: external_exports.string()\n      });\n      executeFailSchema = external_exports.object({\n        error: external_exports.string()\n      });\n    }\n  });\n\n  // src/lib/vincent-tool.ts\n  var vincentTool;\n  var init_vincent_tool = __esm({\n    \"src/lib/vincent-tool.ts\"() {\n      \"use strict\";\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_src();\n      init_helpers2();\n      init_lib32();\n      init_tool_helpers();\n      init_tool_checks();\n      init_schemas();\n      vincentTool = createVincentTool({\n        // packageName: '@lit-protocol/vincent-tool-erc20-approval' as const,\n        toolParamsSchema,\n        supportedPolicies: supportedPoliciesForTool([]),\n        precheckSuccessSchema,\n        precheckFailSchema,\n        executeSuccessSchema,\n        executeFailSchema,\n        precheck: async ({ toolParams: toolParams2 }, { succeed, fail, delegation: { delegatorPkpInfo } }) => {\n          const { ethAddress } = delegatorPkpInfo;\n          const { rpcUrl, spenderAddress, tokenAddress, tokenDecimals, tokenAmount } = toolParams2;\n          const provider = new ethers_exports.providers.JsonRpcProvider(rpcUrl);\n          const hasNativeTokenBalance = await checkNativeTokenBalance({\n            provider,\n            pkpEthAddress: ethAddress\n          });\n          if (!hasNativeTokenBalance) {\n            return fail({ noNativeTokenBalance: true });\n          }\n          const currentAllowance = await getCurrentAllowance({\n            provider,\n            tokenAddress,\n            owner: ethAddress,\n            spender: spenderAddress\n          });\n          const requiredAmount = ethers_exports.utils.parseUnits(tokenAmount.toString(), tokenDecimals);\n          return succeed({\n            alreadyApproved: currentAllowance == requiredAmount.toBigInt(),\n            currentAllowance: currentAllowance.toString()\n          });\n        },\n        execute: async ({ toolParams: toolParams2 }, { succeed, delegation: { delegatorPkpInfo } }) => {\n          console.log(\"Executing ERC20 Approval Tool\");\n          const { ethAddress, publicKey } = delegatorPkpInfo;\n          const { rpcUrl, chainId, spenderAddress, tokenAddress, tokenDecimals, tokenAmount } = toolParams2;\n          const provider = new ethers_exports.providers.JsonRpcProvider(rpcUrl);\n          await checkNativeTokenBalance({\n            provider,\n            pkpEthAddress: ethAddress\n          });\n          const currentAllowance = await getCurrentAllowance({\n            provider,\n            tokenAddress,\n            owner: ethAddress,\n            spender: spenderAddress\n          });\n          const requiredAmount = ethers_exports.utils.parseUnits(tokenAmount.toString(), tokenDecimals).toBigInt();\n          console.log(\n            `currentAllowance: ${currentAllowance} >= requiredAmount: ${requiredAmount} (execute)`\n          );\n          if (currentAllowance === requiredAmount) {\n            console.log(\"Tool execution successful\", {\n              approvedAmount: currentAllowance.toString(),\n              spenderAddress,\n              tokenAddress,\n              tokenDecimals: parseInt(tokenDecimals.toString())\n            });\n            return succeed({\n              approvedAmount: currentAllowance.toString(),\n              tokenAddress,\n              tokenDecimals: parseInt(tokenDecimals.toString()),\n              spenderAddress\n            });\n          }\n          const approvalTxHash = await sendErc20ApprovalTx({\n            rpcUrl,\n            chainId,\n            pkpEthAddress: ethAddress,\n            pkpPublicKey: publicKey,\n            spenderAddress,\n            tokenAmount: requiredAmount,\n            tokenAddress\n          });\n          console.log(\"Tool execution successful\", {\n            approvalTxHash,\n            approvedAmount: requiredAmount.toString(),\n            spenderAddress,\n            tokenAddress,\n            tokenDecimals: parseInt(tokenDecimals.toString())\n          });\n          return succeed({\n            approvalTxHash,\n            approvedAmount: requiredAmount.toString(),\n            tokenAddress,\n            tokenDecimals: parseInt(tokenDecimals.toString()),\n            spenderAddress\n          });\n        }\n      });\n    }\n  });\n\n  // src/lib/lit-action.ts\n  var require_lit_action = __commonJS({\n    \"src/lib/lit-action.ts\"() {\n      init_dirname();\n      init_buffer2();\n      init_process2();\n      init_src();\n      init_vincent_tool();\n      (async () => {\n        const func = vincentToolHandler({\n          vincentTool,\n          context: {\n            delegatorPkpEthAddress: context.delegatorPkpEthAddress\n          },\n          toolParams\n        });\n        await func();\n      })();\n    }\n  });\n  require_lit_action();\n})();\n/*! Bundled license information:\n\n@jspm/core/nodelibs/browser/chunk-DtuTasat.js:\n  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n\njs-sha3/src/sha3.js:\n  (**\n   * [js-sha3]{@link https://github.com/emn178/js-sha3}\n   *\n   * @version 0.8.0\n   * @author Chen, Yi-Cyuan [emn178@gmail.com]\n   * @copyright Chen, Yi-Cyuan 2015-2018\n   * @license MIT\n   *)\n\n@noble/hashes/esm/utils.js:\n  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)\n\n@noble/curves/esm/abstract/utils.js:\n  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)\n\n@noble/curves/esm/abstract/modular.js:\n  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)\n\n@noble/curves/esm/abstract/curve.js:\n  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)\n\n@noble/curves/esm/abstract/weierstrass.js:\n  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)\n\n@noble/curves/esm/_shortw_utils.js:\n  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)\n\n@noble/curves/esm/secp256k1.js:\n  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)\n*/\n";
module.exports = {
  code,
};
