// src/bundler/templateHandlerPolicy

import path from 'path';

export function getPolicyHandlerTemplate({
  outputDir,
  sourcePolicyFilePath,
  sourceSchemasFilePath,
}: {
  outputDir: string;
  sourcePolicyFilePath: string;
  sourceSchemasFilePath: string;
}): () => string {
  const policyAbs = path.resolve(sourcePolicyFilePath);
  const schemasAbs = path.resolve(sourceSchemasFilePath);
  const outputAbsDir = path.resolve(outputDir);

  const relPolicy = path.relative(outputAbsDir, policyAbs);
  const relSchemas = path.relative(outputAbsDir, schemasAbs);

  const importPolicy = (relPolicy.startsWith('.') ? relPolicy : `./${relPolicy}`).replace(
    '.ts',
    '',
  );
  const importSchemas = (relSchemas.startsWith('.') ? relSchemas : `./${relSchemas}`).replace(
    '.ts',
    '',
  );

  console.log('Template paths:', {
    outputDir,
    sourcePolicyFilePath,
    sourceSchemasFilePath,
    importPolicy,
    importSchemas,
    relPolicy,
    relSchemas,
  });

  return () =>
    `/**
 * DO NOT EDIT THIS FILE. IT IS GENERATED ON BUILD.
 */
import { vincentPolicyHandler } from '@lit-protocol/vincent-tool-sdk';

import { vincentPolicy } from '${importPolicy}';
import { toolParamsSchema } from '${importSchemas}';

declare const context: {
  toolIpfsCid: string;
  delegatorPkpEthAddress: string;
};

declare const toolParams: typeof toolParamsSchema;
export const __lit_action_entry__ = true;

(async () => {
  await vincentPolicyHandler({
    vincentPolicy: vincentPolicy,
    context,
    toolParams,
  });
})();`;
}
