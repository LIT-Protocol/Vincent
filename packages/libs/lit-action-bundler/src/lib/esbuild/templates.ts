export function getLitActionBundledCodeModuleContent({
  ipfsCid,
  content,
}: {
  ipfsCid: string;
  content: string;
}) {
  return `/**
* DO NOT EDIT THIS FILE. IT IS GENERATED ON BUILD.
* @type {string}
*/
const code = ${JSON.stringify(content)};
module.exports = {
  "code": code,
  "ipfsCid": "${ipfsCid}",
};
`;
}

export function getMetadataJsonFileContent({ ipfsCid }: { ipfsCid: string }) {
  return `{
  "ipfsCid": "${ipfsCid}"
}
`;
}

export function getLitActionWrapperFileContest() {
  return `
// @ts-nocheck
import { vincentToolHandler } from '@lit-protocol/vincent-tool-sdk';
import { z } from 'zod';

import { vincentTool } from './vincent-tool';
import { toolParams as toolParamsSchema } from '../../../../schemas';

declare const toolParams: z.infer<typeof toolParamsSchema>;
declare const context: {
  delegatorPkpEthAddress: string;
};

(async () => {
  const func = vincentToolHandler({
    vincentTool: vincentTool,
    context: {
      delegatorPkpEthAddress: context.delegatorPkpEthAddress,
    },
    toolParams,
  });
  await func();
})();
`;
}
