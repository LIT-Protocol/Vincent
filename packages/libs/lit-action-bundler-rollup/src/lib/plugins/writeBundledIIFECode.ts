// src/lib/plugins/wrapIIFEPlugin.ts

import type { Plugin } from 'rollup';

import fs from 'fs';
// @ts-expect-error No types for this pkg
import ipfsOnlyHash from 'ipfs-only-hash';
import path from 'path';

import type { LitBundleContext } from './createLitBundleContext';

import { ensureDir } from '../utils';
import { getCompiledHandlerCode } from './utils';

export function writeBundledIIFECode(outputDir: string, ctx: LitBundleContext): Plugin {
  return {
    buildStart() {
      console.log('writeBundledIIFECode BUILDSTART...', ctx);
    },
    async generateBundle(_, bundle) {
      Object.entries(bundle).forEach(([name, chunk]) => {
        if (chunk.type === 'chunk') {
          console.log('Emitted chunk:', name, {
            facade: chunk.facadeModuleId,
            fileName: chunk.fileName,
            isEntry: chunk.isEntry,
          });
        }
      });
      // const handlerChunks = Object.values(bundle).filter(
      //   (chunk): chunk is OutputChunk =>
      //     chunk.type === 'chunk' &&
      //     chunk.isEntry &&
      //     chunk.fileName.includes('vincent-policy-handler'),
      // );
      //
      // console.log(handlerChunks);
      // const handlerChunk = Object.values(bundle).find(
      //   (chunk): chunk is OutputChunk =>
      //     chunk.type === 'chunk' &&
      //     chunk.isEntry &&
      //     chunk.fileName.includes('vincent-policy-handler'),
      // );
      //
      // if (!handlerChunk) {
      //   this.error('Could not find the bundled vincent-policy-handler output');
      // }
      //
      // // const code = handlerChunk.code;

      console.log('Writing bundled IIFE code...', bundle);
      const { chunk } = getCompiledHandlerCode({ bundle, ctx, pluginContext: this });
      const ipfsCid = await ipfsOnlyHash.of(chunk.code);
      const wrapped = `/**
 * DO NOT EDIT THIS FILE. IT IS GENERATED ON BUILD.
 * @type {string}
 */
const code = ${JSON.stringify(chunk.code)};
module.exports = {
  code: code,
  ipfsCid: "${ipfsCid}"
};`;

      const outPath = path.join(outputDir, 'vincent-policy-handler.bundled.js');
      ensureDir(outPath);
      fs.writeFileSync(outPath, wrapped);
    },
    name: 'wrap-iife-in-string',
  };
}
