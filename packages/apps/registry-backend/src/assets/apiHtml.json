{"html":"<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <script type=\"module\" src=\"https://unpkg.com/rapidoc/dist/rapidoc-min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/ethers@5.8.0/dist/ethers.umd.js\">\n    </script>\n    <style>\n      .metamask-button {\n        background-color: #f6851b;\n        color: white;\n        border: none;\n        padding: 8px 16px;\n        border-radius: 4px;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        font-weight: bold;\n      }\n      .metamask-button img {\n        margin-right: 8px;\n        height: 20px;\n      }\n      .metamask-container {\n        padding: 16px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        margin-bottom: 16px;\n      }\n      .metamask-status {\n        margin-top: 8px;\n        font-size: 14px;\n      }\n      .connected {\n        color: green;\n      }\n      .error {\n        color: red;\n      }\n    </style>\n  </head>\n\n  <body>\n    <rapi-doc \n      spec-url=\"/openApiJson\" \n      theme=\"light\"\n      render-style=\"read\"\n      show-header=\"false\"\n      allow-authentication=\"true\"\n      allow-server-selection=\"true\"\n    >\n      <div slot=\"auth\" class=\"metamask-container\">\n        <h3>SIWE Authentication with Metamask</h3>\n        <div>\n          <button id=\"connectMetamask\" class=\"metamask-button\">\n            <img src=\"https://images.ctfassets.net/clixtyxoaeas/4rnpEzy1ATWRKVBOLxZ1Fm/a74dc1eed36d23d7ea6030383a4d5163/MetaMask-icon-fox.svg\" alt=\"Metamask logo\" />\n            Connect with Metamask\n          </button>\n          <div id=\"metamaskStatus\" class=\"metamask-status\"></div>\n        </div>\n        <div id=\"authDetails\" style=\"margin-top: 16px; display: none;\">\n          <p>Connected Address: <span id=\"connectedAddress\"></span></p>\n          <div style=\"margin-bottom: 16px;\">\n            <label for=\"domainInput\" style=\"display: block; margin-bottom: 8px; font-weight: bold;\">Domain:</label>\n            <input \n              id=\"domainInput\" \n              type=\"text\" \n              placeholder=\"Enter domain (e.g., app.example.com)\" \n              style=\"width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;\"\n            >\n            <small style=\"display: block; margin-top: 4px; color: #666;\">Domain used in the SIWE message. Defaults to current host if empty.</small>\n          </div>\n          <button id=\"generateSiwe\" class=\"metamask-button\" style=\"background-color: #0366d6;\">\n            Generate SIWE Authentication\n          </button>\n          <div id=\"siweStatus\" class=\"metamask-status\"></div>\n        </div>\n      </div>\n\n      <script>\n        // Implementation of SIWE functionality\n        // Generate a secure random nonce\n        function generateNonce() {\n          const array = new Uint8Array(16);\n          window.crypto.getRandomValues(array);\n          return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n        }\n\n        // Simple SiweMessage class implementation\n        class SiweMessage {\n          constructor(params) {\n            this.domain = params.domain;\n            this.address = params.address;\n            this.statement = params.statement;\n            this.uri = params.uri;\n            this.version = params.version;\n            this.chainId = params.chainId;\n            this.nonce = params.nonce;\n            this.issuedAt = params.issuedAt;\n            this.expirationTime = params.expirationTime;\n            this.notBefore = params.notBefore;\n            this.requestId = params.requestId;\n            this.resources = params.resources;\n          }\n\n          prepareMessage() {\n            const header = `${this.domain} wants you to sign in with your Ethereum account:`;\n            const uriField = `URI: ${this.uri}`;\n            // Format the address using ethers.utils.getAddress to ensure proper checksum format (EIP-55)\n            const formattedAddress = window.ethers.utils.getAddress(this.address);\n            let prefix = [header, formattedAddress].join('\\n');\n            const versionField = `Version: ${this.version}`;\n            const chainField = `Chain ID: ${this.chainId || '1'}`;\n            const nonceField = `Nonce: ${this.nonce}`;\n\n            const suffixArray = [uriField, versionField, chainField, nonceField];\n\n            if (this.issuedAt) {\n              suffixArray.push(`Issued At: ${this.issuedAt}`);\n            }\n\n            if (this.expirationTime) {\n              suffixArray.push(`Expiration Time: ${this.expirationTime}`);\n            }\n\n            if (this.notBefore) {\n              suffixArray.push(`Not Before: ${this.notBefore}`);\n            }\n\n            if (this.requestId) {\n              suffixArray.push(`Request ID: ${this.requestId}`);\n            }\n\n            if (this.resources) {\n              suffixArray.push(\n                [`Resources:`, ...this.resources.map(x => `- ${x}`)].join('\\n')\n              );\n            }\n\n            const suffix = suffixArray.join('\\n');\n            prefix = [prefix, this.statement].join('\\n\\n');\n            if (this.statement !== undefined) {\n              prefix += '\\n';\n            }\n            return [prefix, suffix].join('\\n');\n          }\n        }\n\n        document.addEventListener('DOMContentLoaded', function() {\n          const connectBtn = document.getElementById('connectMetamask');\n          const statusEl = document.getElementById('metamaskStatus');\n          const authDetailsEl = document.getElementById('authDetails');\n          const addressEl = document.getElementById('connectedAddress');\n          const generateSiweBtn = document.getElementById('generateSiwe');\n          const siweStatusEl = document.getElementById('siweStatus');\n          const domainInput = document.getElementById('domainInput');\n          const rapidoc = document.querySelector('rapi-doc');\n\n          let currentAccount = null;\n\n          // Function to update domain input from server URL\n          function updateDomainFromServer(serverUrl) {\n            try {\n              domainInput.value = serverUrl;\n            } catch (error) {\n              console.error('Error parsing server URL:', error);\n            }\n          }\n\n          // Initialize domain input with current server URL\n          if (rapidoc.serverUrl) {\n            updateDomainFromServer(rapidoc.serverUrl);\n          }\n\n          // Listen for server selection changes\n          rapidoc.addEventListener('api-server-change', function(e) {\n            console.log('EVENT api-server-change', e);\n            if (e.detail && e.detail.selectedServer && e.detail.selectedServer.url) {\n              updateDomainFromServer(e.detail.selectedServer.url);\n            }\n          });\n\n          // Check if Metamask is installed\n          if (typeof window.ethereum === 'undefined') {\n            statusEl.textContent = 'Metamask not detected. Please install Metamask extension.';\n            statusEl.classList.add('error');\n            connectBtn.disabled = true;\n            return;\n          }\n\n          // Connect to Metamask\n          connectBtn.addEventListener('click', async function() {\n            try {\n              statusEl.textContent = 'Connecting to Metamask...';\n\n              // Request account access\n              const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n              currentAccount = accounts[0];\n\n              // Update UI\n              statusEl.textContent = 'Connected to Metamask';\n              statusEl.classList.add('connected');\n              addressEl.textContent = currentAccount;\n\n              // Only set domain input if it's empty\n              if (!domainInput.value) {\n                domainInput.value = window.location.host;\n              }\n\n              // Show auth details\n              authDetailsEl.style.display = 'block';\n\n              // Listen for account changes\n              window.ethereum.on('accountsChanged', function (accounts) {\n                if (accounts.length === 0) {\n                  // User disconnected\n                  currentAccount = null;\n                  statusEl.textContent = 'Disconnected from Metamask';\n                  statusEl.classList.remove('connected');\n                  authDetailsEl.style.display = 'none';\n                } else {\n                  // Account changed\n                  currentAccount = accounts[0];\n                  addressEl.textContent = currentAccount;\n                  statusEl.textContent = 'Connected to Metamask';\n                  statusEl.classList.add('connected');\n                }\n              });\n\n            } catch (error) {\n              console.error(error);\n              statusEl.textContent = 'Error connecting to Metamask: ' + error.message;\n              statusEl.classList.add('error');\n            }\n          });\n\n          // Generate SIWE message and signature\n          generateSiweBtn.addEventListener('click', async function() {\n            if (!currentAccount) {\n              siweStatusEl.textContent = 'Please connect to Metamask first';\n              siweStatusEl.classList.add('error');\n              return;\n            }\n\n            try {\n              siweStatusEl.textContent = 'Generating SIWE message...';\n\n              // Create a SIWE message using the SiweMessage class\n              // Get domain from input field or use current host as fallback\n              const domainInput = document.getElementById('domainInput');\n              const domain = new URL(domainInput.value.trim()).hostname || window.location.host;\n              const statement = 'Sign in with Ethereum to authenticate with Vincent Registry API';\n\n              // Generate a secure nonce\n              const nonce = generateNonce();\n\n              // Create a SiweMessage object\n              const siweMessage = new SiweMessage({\n                domain,\n                address: currentAccount,\n                statement,\n                uri: domainInput.value.trim() || window.location.host,\n                version: '1',\n                chainId: 1,\n                nonce,\n                issuedAt: new Date().toISOString()\n              });\n\n              console.log({\n                domain,\n                address: currentAccount,\n                statement,\n                uri: domainInput.value.trim() || window.location.host,\n                version: '1',\n                chainId: 1,\n                nonce,\n                issuedAt: new Date().toISOString()\n              });\n\n              // Prepare the message for signing\n              const message = siweMessage.prepareMessage();\n\n              // Request signature from user\n              siweStatusEl.textContent = 'Please sign the message in Metamask...';\n              const signature = await window.ethereum.request({\n                method: 'personal_sign',\n                params: [message, currentAccount]\n              });\n\n              // Format the Authorization header value - Base64 encode the payload\n              const payload = JSON.stringify({message, signature});\n              const base64Payload = btoa(payload);\n              const authHeader = `SIWE ${base64Payload}`;\n\n              // Set the API key in RapiDoc\n              const rapidoc = document.querySelector('rapi-doc');\n              rapidoc.setApiKey('siweAuth', authHeader);\n\n              siweStatusEl.textContent = 'SIWE authentication generated and applied!';\n              siweStatusEl.classList.add('connected');\n\n            } catch (error) {\n              console.error(error);\n              siweStatusEl.textContent = 'Error generating SIWE: ' + error.message;\n              siweStatusEl.classList.add('error');\n            }\n          });\n        });\n      </script>\n    </rapi-doc>\n  </body>\n</html>\n"}
